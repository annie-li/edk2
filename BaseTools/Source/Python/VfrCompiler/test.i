#line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\Advanced.vfr"
#line 1 "c:\\data\\alderlake\\Build\\AlderLakeBoardPkg\\DEBUG_VS2019\\X64\\AlderLakePlatSamplePkg\\Setup\\Setup\\DEBUG\\SetupStrDefs.h"

















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































extern unsigned char SetupStrings[];





























































































































































#line 9937 "c:\\data\\alderlake\\Build\\AlderLakeBoardPkg\\DEBUG_VS2019\\X64\\AlderLakePlatSamplePkg\\Setup\\Setup\\DEBUG\\SetupStrDefs.h"

#line 9939 "c:\\data\\alderlake\\Build\\AlderLakeBoardPkg\\DEBUG_VS2019\\X64\\AlderLakePlatSamplePkg\\Setup\\Setup\\DEBUG\\SetupStrDefs.h"
#line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\Advanced.vfr"



































#line 37 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\Advanced.vfr"





#line 43 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\Advanced.vfr"
  
  
#line 46 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\Advanced.vfr"


#line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SetupPrivate.h"



















































































































#line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SetupStrTokens.h"












































#line 46 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SetupStrTokens.h"
#line 117 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SetupPrivate.h"
#line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Include\\Setup.h"




































#line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Include\\SetupConfiguration.h"

















































































































#line 115 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Include\\SetupConfiguration.h"
#line 38 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Include\\Setup.h"
#line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Include\\SetupVariable.h"




































#line 1 "c:\\data\\alderlake\\Intel\\ClientOneSiliconPkg\\Fru\\AdlPch\\Include\\PchLimits.h"

























































#line 59 "c:\\data\\alderlake\\Intel\\ClientOneSiliconPkg\\Fru\\AdlPch\\Include\\PchLimits.h"








#line 68 "c:\\data\\alderlake\\Intel\\ClientOneSiliconPkg\\Fru\\AdlPch\\Include\\PchLimits.h"



































#line 104 "c:\\data\\alderlake\\Intel\\ClientOneSiliconPkg\\Fru\\AdlPch\\Include\\PchLimits.h"


































#line 139 "c:\\data\\alderlake\\Intel\\ClientOneSiliconPkg\\Fru\\AdlPch\\Include\\PchLimits.h"
#line 38 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Include\\SetupVariable.h"
#line 1 "c:\\data\\alderlake\\Intel\\ClientOneSiliconPkg\\IpBlock\\CpuPcieRp\\Include\\CpuPcieInfo.h"
























































































































































#line 154 "c:\\data\\alderlake\\Intel\\ClientOneSiliconPkg\\IpBlock\\CpuPcieRp\\Include\\CpuPcieInfo.h"
#line 39 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Include\\SetupVariable.h"
#line 1 "c:\\data\\alderlake\\Intel\\ClientOneSiliconPkg\\Fru\\AdlCpu\\Include\\TcssInfo.h"









































#line 43 "c:\\data\\alderlake\\Intel\\ClientOneSiliconPkg\\Fru\\AdlCpu\\Include\\TcssInfo.h"
#line 40 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Include\\SetupVariable.h"
#line 1 "c:\\data\\alderlake\\Intel\\ClientOneSiliconPkg\\Cpu\\Include\\CpuLimits.h"





















































#line 55 "c:\\data\\alderlake\\Intel\\ClientOneSiliconPkg\\Cpu\\Include\\CpuLimits.h"
#line 41 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Include\\SetupVariable.h"




#line 46 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Include\\SetupVariable.h"


#line 49 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Include\\SetupVariable.h"








































































































#line 154 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Include\\SetupVariable.h"





#line 160 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Include\\SetupVariable.h"



#line 164 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Include\\SetupVariable.h"


#line 167 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Include\\SetupVariable.h"


#line 170 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Include\\SetupVariable.h"


#line 173 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Include\\SetupVariable.h"


#line 176 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Include\\SetupVariable.h"


#line 179 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Include\\SetupVariable.h"


#line 182 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Include\\SetupVariable.h"


#line 185 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Include\\SetupVariable.h"


#line 188 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Include\\SetupVariable.h"


#line 191 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Include\\SetupVariable.h"


#line 194 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Include\\SetupVariable.h"


#line 197 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Include\\SetupVariable.h"


#line 200 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Include\\SetupVariable.h"


#line 203 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Include\\SetupVariable.h"


#line 206 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Include\\SetupVariable.h"


#line 209 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Include\\SetupVariable.h"


#line 212 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Include\\SetupVariable.h"


#line 215 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Include\\SetupVariable.h"


#line 218 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Include\\SetupVariable.h"


#line 221 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Include\\SetupVariable.h"


#line 224 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Include\\SetupVariable.h"


#line 227 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Include\\SetupVariable.h"


#line 230 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Include\\SetupVariable.h"


#line 233 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Include\\SetupVariable.h"


#line 236 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Include\\SetupVariable.h"


#line 239 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Include\\SetupVariable.h"


#line 242 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Include\\SetupVariable.h"


#line 245 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Include\\SetupVariable.h"


#line 248 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Include\\SetupVariable.h"


#line 251 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Include\\SetupVariable.h"


#line 254 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Include\\SetupVariable.h"


#line 257 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Include\\SetupVariable.h"
#pragma pack(1)












































































typedef struct {
  UINT8   Revision;
  UINT8   FastBoot;
  UINT8   FastBootWdt;
  UINT8   SkipHIIUpdate;
  UINT8   ConInBehavior;
  UINT8   DisplayBootMode;
  UINT8   Numlock;
  UINT8   InteractiveText;
  UINT8   LazyConIn;
  UINT8   VirtualKeyboard;
  UINT8   FirmwareConfiguration;



  
  UINT8   XmlCliReserved[6];




  UINT8   LoadValidationFv;
  UINT8   PlatformDriverSupport;
  UINT8   MerlinXDisableHpetInterrupts;
  UINT32  CliObjBufferSize;
#line 360 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Include\\SetupVariable.h"
  UINT8   OpRomPost; 
  
  UINT8   PciLatency; 
  UINT8   AcpiAuto;
  UINT8   AcpiSleepState;
  UINT8   AcpiHibernate;
  UINT8   AcpiTableRevision;
  UINT8   PciExpNative;
  UINT8   NativeAspmEnable;
  UINT8   PtidSupport;
  
  UINT8   AcpiDebug;
  UINT32  AcpiDebugAddress;
  UINT8   PciDelayOptimizationEcr;
  
  UINT8   WakeOnRTCS5;
  UINT8   PeciAccessMethod;
  UINT8   LowPowerS0Idle;
  UINT8   PepCpu;
  UINT8   PepGfx;
  UINT8   PepSataContraints;
  UINT8   PepUart;
  UINT8   PepI2c0;
  UINT8   PepI2c1;
  UINT8   PepI2c2;
  UINT8   PepI2c3;
  UINT8   PepI2c4;
  UINT8   PepI2c5;
  UINT8   PepSpi;
  UINT8   PepXhci;
  UINT8   PepAudio;
  UINT8   PepIpu;
  UINT8   PepGna;
  UINT8   PepCsme;
  UINT8   PepGbe;
  UINT8   PepThc0;
  UINT8   PepThc1;
  UINT8   PepTcss;
  UINT8   CSNotifyEC;
  UINT8   CSDebugLightEC;
  UINT8   EcLowPowerMode;
  UINT8   EcPeciModeUnsupport;
  UINT8   EcPeciMode;
  UINT8   EcDebugLed;
  UINT8   ECBaseCsPwrPolicy;
  UINT8   SensorStandby;
  UINT8   PL1LimitCS;
  UINT16  PL1LimitCSValue;
  UINT8   TenSecondPowerButtonSupport;
  UINT8   TenSecondPowerButtonEnable;
  UINT8   LpitResidencyCounter;
  UINT8   PseudoG3State;
  
  UINT8   LoadSSDTFromFile;
  
  
  
  UINT16  OperatingSystem;
  UINT16  OemBadgingBrand;
  UINT8   BootFirstToShell;

  UINT8   SensorHubType;
  UINT8   DebugUsbUartSupport;
  UINT8   DebugUsbUart;
  UINT8   EfiNetworkSupport;
  UINT8   Reserved; 
  UINT8   UsbSensorHub;

  UINT8   HddAcousticPowerManagement;
  UINT8   HddAcousticMode;

  
  
  
  UINT8   IsRecoveryJumper;

  
  
  
  UINT8   MipiCam_ControlLogic0;             
  UINT8   MipiCam_ControlLogic1;             
  UINT8   MipiCam_ControlLogic2;             
  UINT8   MipiCam_ControlLogic3;             
  UINT8   MipiCam_ControlLogic4;             
  UINT8   MipiCam_ControlLogic5;             

  UINT8   MipiCam_Link0;                     
  UINT8   MipiCam_Link1;                     
  UINT8   MipiCam_Link2;                     
  UINT8   MipiCam_Link3;                     
  UINT8   MipiCam_Link4;                     
  UINT8   MipiCam_Link5;                     

  UINT8   MipiCam4Enable;                    
  UINT8   MipiCam5Enable;                    

  UINT8   MipiCam_LanesClkDiv;               

  UINT8   MipiCam_ControlLogic0_Type;
  UINT8   MipiCam_ControlLogic0_CrdVersion;
  UINT32  MipiCam_ControlLogic0_InputClock;
  UINT8   MipiCam_ControlLogic0_PchClockSource;
  UINT8   MipiCam_ControlLogic0_GpioPinsEnabled;
  UINT8   MipiCam_ControlLogic0_I2cChannel;
  UINT16  MipiCam_ControlLogic0_I2cAddress;
  UINT8   MipiCam_ControlLogic0_Pld;
  UINT8   MipiCam_ControlLogic0_Wled1FlashMaxCurrent;
  UINT8   MipiCam_ControlLogic0_Wled1TorchMaxCurrent;
  UINT8   MipiCam_ControlLogic0_Wled2FlashMaxCurrent;
  UINT8   MipiCam_ControlLogic0_Wled2TorchMaxCurrent;
  UINT8   MipiCam_ControlLogic0_SubPlatformId;
  UINT8   MipiCam_ControlLogic0_Wled1Type;
  UINT8   MipiCam_ControlLogic0_Wled2Type;
  UINT8   MipiCam_ControlLogic0_GpioGroupPadNumber[6];
  UINT8   MipiCam_ControlLogic0_GpioGroupNumber[6];
  UINT8   MipiCam_ControlLogic0_GpioFunction[6];
  UINT8   MipiCam_ControlLogic0_GpioActiveValue[6];
  UINT8   MipiCam_ControlLogic0_GpioInitialValue[6];

  UINT8   MipiCam_ControlLogic1_Type;
  UINT8   MipiCam_ControlLogic1_CrdVersion;
  UINT32  MipiCam_ControlLogic1_InputClock;
  UINT8   MipiCam_ControlLogic1_PchClockSource;
  UINT8   MipiCam_ControlLogic1_GpioPinsEnabled;
  UINT8   MipiCam_ControlLogic1_I2cChannel;
  UINT16  MipiCam_ControlLogic1_I2cAddress;
  UINT8   MipiCam_ControlLogic1_Pld;
  UINT8   MipiCam_ControlLogic1_Wled1FlashMaxCurrent;
  UINT8   MipiCam_ControlLogic1_Wled1TorchMaxCurrent;
  UINT8   MipiCam_ControlLogic1_Wled2FlashMaxCurrent;
  UINT8   MipiCam_ControlLogic1_Wled2TorchMaxCurrent;
  UINT8   MipiCam_ControlLogic1_SubPlatformId;
  UINT8   MipiCam_ControlLogic1_Wled1Type;
  UINT8   MipiCam_ControlLogic1_Wled2Type;
  UINT8   MipiCam_ControlLogic1_GpioGroupPadNumber[6];
  UINT8   MipiCam_ControlLogic1_GpioGroupNumber[6];
  UINT8   MipiCam_ControlLogic1_GpioFunction[6];
  UINT8   MipiCam_ControlLogic1_GpioActiveValue[6];
  UINT8   MipiCam_ControlLogic1_GpioInitialValue[6];

  UINT8   MipiCam_ControlLogic2_Type;
  UINT8   MipiCam_ControlLogic2_CrdVersion;
  UINT32  MipiCam_ControlLogic2_InputClock;
  UINT8   MipiCam_ControlLogic2_PchClockSource;
  UINT8   MipiCam_ControlLogic2_GpioPinsEnabled;
  UINT8   MipiCam_ControlLogic2_I2cChannel;
  UINT16  MipiCam_ControlLogic2_I2cAddress;
  UINT8   MipiCam_ControlLogic2_Pld;
  UINT8   MipiCam_ControlLogic2_Wled1FlashMaxCurrent;
  UINT8   MipiCam_ControlLogic2_Wled1TorchMaxCurrent;
  UINT8   MipiCam_ControlLogic2_Wled2FlashMaxCurrent;
  UINT8   MipiCam_ControlLogic2_Wled2TorchMaxCurrent;
  UINT8   MipiCam_ControlLogic2_SubPlatformId;
  UINT8   MipiCam_ControlLogic2_Wled1Type;
  UINT8   MipiCam_ControlLogic2_Wled2Type;
  UINT8   MipiCam_ControlLogic2_GpioGroupPadNumber[6];
  UINT8   MipiCam_ControlLogic2_GpioGroupNumber[6];
  UINT8   MipiCam_ControlLogic2_GpioFunction[6];
  UINT8   MipiCam_ControlLogic2_GpioActiveValue[6];
  UINT8   MipiCam_ControlLogic2_GpioInitialValue[6];

  UINT8   MipiCam_ControlLogic3_Type;
  UINT8   MipiCam_ControlLogic3_CrdVersion;
  UINT32  MipiCam_ControlLogic3_InputClock;
  UINT8   MipiCam_ControlLogic3_PchClockSource;
  UINT8   MipiCam_ControlLogic3_GpioPinsEnabled;
  UINT8   MipiCam_ControlLogic3_I2cChannel;
  UINT16  MipiCam_ControlLogic3_I2cAddress;
  UINT8   MipiCam_ControlLogic3_Pld;
  UINT8   MipiCam_ControlLogic3_Wled1FlashMaxCurrent;
  UINT8   MipiCam_ControlLogic3_Wled1TorchMaxCurrent;
  UINT8   MipiCam_ControlLogic3_Wled2FlashMaxCurrent;
  UINT8   MipiCam_ControlLogic3_Wled2TorchMaxCurrent;
  UINT8   MipiCam_ControlLogic3_SubPlatformId;
  UINT8   MipiCam_ControlLogic3_Wled1Type;
  UINT8   MipiCam_ControlLogic3_Wled2Type;
  UINT8   MipiCam_ControlLogic3_GpioGroupPadNumber[6];
  UINT8   MipiCam_ControlLogic3_GpioGroupNumber[6];
  UINT8   MipiCam_ControlLogic3_GpioFunction[6];
  UINT8   MipiCam_ControlLogic3_GpioActiveValue[6];
  UINT8   MipiCam_ControlLogic3_GpioInitialValue[6];

  UINT8   MipiCam_ControlLogic4_Type;
  UINT8   MipiCam_ControlLogic4_CrdVersion;
  UINT32  MipiCam_ControlLogic4_InputClock;
  UINT8   MipiCam_ControlLogic4_PchClockSource;
  UINT8   MipiCam_ControlLogic4_GpioPinsEnabled;
  UINT8   MipiCam_ControlLogic4_I2cChannel;
  UINT16  MipiCam_ControlLogic4_I2cAddress;
  UINT8   MipiCam_ControlLogic4_Pld;
  UINT8   MipiCam_ControlLogic4_Wled1FlashMaxCurrent;
  UINT8   MipiCam_ControlLogic4_Wled1TorchMaxCurrent;
  UINT8   MipiCam_ControlLogic4_Wled2FlashMaxCurrent;
  UINT8   MipiCam_ControlLogic4_Wled2TorchMaxCurrent;
  UINT8   MipiCam_ControlLogic4_SubPlatformId;
  UINT8   MipiCam_ControlLogic4_Wled1Type;
  UINT8   MipiCam_ControlLogic4_Wled2Type;
  UINT8   MipiCam_ControlLogic4_GpioGroupPadNumber[6];
  UINT8   MipiCam_ControlLogic4_GpioGroupNumber[6];
  UINT8   MipiCam_ControlLogic4_GpioFunction[6];
  UINT8   MipiCam_ControlLogic4_GpioActiveValue[6];
  UINT8   MipiCam_ControlLogic4_GpioInitialValue[6];

  UINT8   MipiCam_ControlLogic5_Type;
  UINT8   MipiCam_ControlLogic5_CrdVersion;
  UINT32  MipiCam_ControlLogic5_InputClock;
  UINT8   MipiCam_ControlLogic5_PchClockSource;
  UINT8   MipiCam_ControlLogic5_GpioPinsEnabled;
  UINT8   MipiCam_ControlLogic5_I2cChannel;
  UINT16  MipiCam_ControlLogic5_I2cAddress;
  UINT8   MipiCam_ControlLogic5_Pld;
  UINT8   MipiCam_ControlLogic5_Wled1FlashMaxCurrent;
  UINT8   MipiCam_ControlLogic5_Wled1TorchMaxCurrent;
  UINT8   MipiCam_ControlLogic5_Wled2FlashMaxCurrent;
  UINT8   MipiCam_ControlLogic5_Wled2TorchMaxCurrent;
  UINT8   MipiCam_ControlLogic5_SubPlatformId;
  UINT8   MipiCam_ControlLogic5_Wled1Type;
  UINT8   MipiCam_ControlLogic5_Wled2Type;
  UINT8   MipiCam_ControlLogic5_GpioGroupPadNumber[6];
  UINT8   MipiCam_ControlLogic5_GpioGroupNumber[6];
  UINT8   MipiCam_ControlLogic5_GpioFunction[6];
  UINT8   MipiCam_ControlLogic5_GpioActiveValue[6];
  UINT8   MipiCam_ControlLogic5_GpioInitialValue[6];

  UINT8   MipiCam_Link0_SensorModel;         
  UINT16  MipiCam_Link0_UserHid[20];
  UINT8   MipiCam_Link0_CameraPhysicalLocation;
  UINT16  MipiCam_Link0_ModuleName[16];
  UINT8   MipiCam_Link0_I2cDevicesEnabled;   
  UINT8   MipiCam_Link0_I2cChannel;
  UINT16  MipiCam_Link0_I2cAddress[12];
  UINT8   MipiCam_Link0_I2cDeviceType[12];
  UINT8   MipiCam_Link0_DriverData_Version;
  UINT8   MipiCam_Link0_DriverData_CrdVersion;
  UINT8   MipiCam_Link0_DriverData_LinkUsed;
  UINT8   MipiCam_Link0_DriverData_LaneUsed;
  UINT8   MipiCam_Link0_DriverData_CsiSpeed;
  UINT8   MipiCam_Link0_DriverData_EepromType;
  UINT8   MipiCam_Link0_DriverData_VcmType;
  UINT8   MipiCam_Link0_DriverData_CustomData[4];
  UINT32  MipiCam_Link0_DriverData_Mclk;
  UINT8   MipiCam_Link0_DriverData_ControlLogic;
  UINT8   MipiCam_Link0_DriverData_FlashSupport;
  UINT8   MipiCam_Link0_DriverData_PrivacyLed;
  UINT8   MipiCam_Link0_DriverData_Degree;
  UINT8   MipiCam_Link0_DriverData_PmicPosition;
  UINT8   MipiCam_Link0_DriverData_VoltageRail;
  UINT8   MipiCam_Link0_DriverData_PprValue;         
  UINT8   MipiCam_Link0_DriverData_PprUnit;         
  UINT8   MipiCam_Link0_FlashDriverSelection;

  UINT8   MipiCam_Link1_SensorModel;         
  UINT16  MipiCam_Link1_UserHid[20];
  UINT8   MipiCam_Link1_CameraPhysicalLocation;
  UINT16  MipiCam_Link1_ModuleName[16];
  UINT8   MipiCam_Link1_I2cDevicesEnabled;   
  UINT8   MipiCam_Link1_I2cChannel;
  UINT16  MipiCam_Link1_I2cAddress[12];
  UINT8   MipiCam_Link1_I2cDeviceType[12];
  UINT8   MipiCam_Link1_DriverData_Version;
  UINT8   MipiCam_Link1_DriverData_LinkUsed;
  UINT8   MipiCam_Link1_DriverData_CrdVersion;
  UINT8   MipiCam_Link1_DriverData_LaneUsed;
  UINT8   MipiCam_Link1_DriverData_CsiSpeed;
  UINT8   MipiCam_Link1_DriverData_EepromType;
  UINT8   MipiCam_Link1_DriverData_VcmType;
  UINT8   MipiCam_Link1_DriverData_CustomData[4];
  UINT32  MipiCam_Link1_DriverData_Mclk;
  UINT8   MipiCam_Link1_DriverData_ControlLogic;
  UINT8   MipiCam_Link1_DriverData_FlashSupport;
  UINT8   MipiCam_Link1_DriverData_PrivacyLed;
  UINT8   MipiCam_Link1_DriverData_Degree;
  UINT8   MipiCam_Link1_DriverData_PmicPosition;
  UINT8   MipiCam_Link1_DriverData_VoltageRail;
  UINT8   MipiCam_Link1_DriverData_PprValue;         
  UINT8   MipiCam_Link1_DriverData_PprUnit;         
  UINT8   MipiCam_Link1_FlashDriverSelection;

  UINT8   MipiCam_Link2_SensorModel;         
  UINT16  MipiCam_Link2_UserHid[20];
  UINT8   MipiCam_Link2_CameraPhysicalLocation;
  UINT16  MipiCam_Link2_ModuleName[16];
  UINT8   MipiCam_Link2_I2cDevicesEnabled;   
  UINT8   MipiCam_Link2_I2cChannel;
  UINT16  MipiCam_Link2_I2cAddress[12];
  UINT8   MipiCam_Link2_I2cDeviceType[12];
  UINT8   MipiCam_Link2_DriverData_Version;
  UINT8   MipiCam_Link2_DriverData_CrdVersion;
  UINT8   MipiCam_Link2_DriverData_LinkUsed;
  UINT8   MipiCam_Link2_DriverData_LaneUsed;
  UINT8   MipiCam_Link2_DriverData_CsiSpeed;
  UINT8   MipiCam_Link2_DriverData_EepromType;
  UINT8   MipiCam_Link2_DriverData_VcmType;
  UINT8   MipiCam_Link2_DriverData_CustomData[4];
  UINT32  MipiCam_Link2_DriverData_Mclk;
  UINT8   MipiCam_Link2_DriverData_ControlLogic;
  UINT8   MipiCam_Link2_DriverData_FlashSupport;
  UINT8   MipiCam_Link2_DriverData_PrivacyLed;
  UINT8   MipiCam_Link2_DriverData_Degree;
  UINT8   MipiCam_Link2_DriverData_PmicPosition;
  UINT8   MipiCam_Link2_DriverData_VoltageRail;
  UINT8   MipiCam_Link2_DriverData_PprValue;         
  UINT8   MipiCam_Link2_DriverData_PprUnit;         
  UINT8   MipiCam_Link2_FlashDriverSelection;

  UINT8   MipiCam_Link3_SensorModel;         
  UINT16  MipiCam_Link3_UserHid[20];
  UINT8   MipiCam_Link3_CameraPhysicalLocation;
  UINT16  MipiCam_Link3_ModuleName[16];
  UINT8   MipiCam_Link3_I2cDevicesEnabled;   
  UINT8   MipiCam_Link3_I2cChannel;
  UINT16  MipiCam_Link3_I2cAddress[12];
  UINT8   MipiCam_Link3_I2cDeviceType[12];
  UINT8   MipiCam_Link3_DriverData_Version;
  UINT8   MipiCam_Link3_DriverData_CrdVersion;
  UINT8   MipiCam_Link3_DriverData_LinkUsed;
  UINT8   MipiCam_Link3_DriverData_LaneUsed;
  UINT8   MipiCam_Link3_DriverData_CsiSpeed;
  UINT8   MipiCam_Link3_DriverData_EepromType;
  UINT8   MipiCam_Link3_DriverData_VcmType;
  UINT8   MipiCam_Link3_DriverData_CustomData[4];
  UINT32  MipiCam_Link3_DriverData_Mclk;
  UINT8   MipiCam_Link3_DriverData_ControlLogic;
  UINT8   MipiCam_Link3_DriverData_FlashSupport;
  UINT8   MipiCam_Link3_DriverData_PrivacyLed;
  UINT8   MipiCam_Link3_DriverData_Degree;
  UINT8   MipiCam_Link3_DriverData_PmicPosition;
  UINT8   MipiCam_Link3_DriverData_VoltageRail;
  UINT8   MipiCam_Link3_DriverData_PprValue;         
  UINT8   MipiCam_Link3_DriverData_PprUnit;         
  UINT8   MipiCam_Link3_FlashDriverSelection;

  UINT8   MipiCam_Link4_SensorModel;         
  UINT16  MipiCam_Link4_UserHid[20];
  UINT8   MipiCam_Link4_CameraPhysicalLocation;
  UINT16  MipiCam_Link4_ModuleName[16];
  UINT8   MipiCam_Link4_I2cDevicesEnabled;   
  UINT8   MipiCam_Link4_I2cChannel;
  UINT16  MipiCam_Link4_I2cAddress[12];
  UINT8   MipiCam_Link4_I2cDeviceType[12];
  UINT8   MipiCam_Link4_DriverData_Version;
  UINT8   MipiCam_Link4_DriverData_CrdVersion;
  UINT8   MipiCam_Link4_DriverData_LinkUsed;
  UINT8   MipiCam_Link4_DriverData_LaneUsed;
  UINT8   MipiCam_Link4_DriverData_CsiSpeed;
  UINT8   MipiCam_Link4_DriverData_EepromType;
  UINT8   MipiCam_Link4_DriverData_VcmType;
  UINT8   MipiCam_Link4_DriverData_CustomData[4];
  UINT32  MipiCam_Link4_DriverData_Mclk;
  UINT8   MipiCam_Link4_DriverData_ControlLogic;
  UINT8   MipiCam_Link4_DriverData_FlashSupport;
  UINT8   MipiCam_Link4_DriverData_PrivacyLed;
  UINT8   MipiCam_Link4_DriverData_Degree;
  UINT8   MipiCam_Link4_DriverData_PmicPosition;
  UINT8   MipiCam_Link4_DriverData_VoltageRail;
  UINT8   MipiCam_Link4_DriverData_PprValue;         
  UINT8   MipiCam_Link4_DriverData_PprUnit;         
  UINT8   MipiCam_Link4_FlashDriverSelection;

  UINT8   MipiCam_Link5_SensorModel;         
  UINT16  MipiCam_Link5_UserHid[20];
  UINT8   MipiCam_Link5_CameraPhysicalLocation;
  UINT16  MipiCam_Link5_ModuleName[16];
  UINT8   MipiCam_Link5_I2cDevicesEnabled;   
  UINT8   MipiCam_Link5_I2cChannel;
  UINT16  MipiCam_Link5_I2cAddress[12];
  UINT8   MipiCam_Link5_I2cDeviceType[12];
  UINT8   MipiCam_Link5_DriverData_Version;
  UINT8   MipiCam_Link5_DriverData_CrdVersion;
  UINT8   MipiCam_Link5_DriverData_LinkUsed;
  UINT8   MipiCam_Link5_DriverData_LaneUsed;
  UINT8   MipiCam_Link5_DriverData_CsiSpeed;
  UINT8   MipiCam_Link5_DriverData_EepromType;
  UINT8   MipiCam_Link5_DriverData_VcmType;
  UINT8   MipiCam_Link5_DriverData_CustomData[4];
  UINT32  MipiCam_Link5_DriverData_Mclk;
  UINT8   MipiCam_Link5_DriverData_ControlLogic;
  UINT8   MipiCam_Link5_DriverData_FlashSupport;
  UINT8   MipiCam_Link5_DriverData_PrivacyLed;
  UINT8   MipiCam_Link5_DriverData_Degree;
  UINT8   MipiCam_Link5_DriverData_PmicPosition;
  UINT8   MipiCam_Link5_DriverData_VoltageRail;
  UINT8   MipiCam_Link5_DriverData_PprValue;         
  UINT8   MipiCam_Link5_DriverData_PprUnit;         
  UINT8   MipiCam_Link5_FlashDriverSelection;

  UINT8   MipiCam_Flash0_Model;                                                    
  UINT16  MipiCam_Flash0_ModuleName[16];
  UINT8   MipiCam_Flash0_I2cChannel;
  UINT16  MipiCam_Flash0_I2cAddress;
  UINT8   MipiCam_Flash0_GpioGroupPadNumber;
  UINT16  MipiCam_Flash0_GpioGroupNumber;
  UINT8   MipiCam_Flash0_GpioActiveValue;
  UINT8   MipiCam_Flash0_GpioInitialValue;
  UINT8   MipiCam_Flash0_OperatingMode;

  UINT8   MipiCam_Flash1_Model;                                                    
  UINT16  MipiCam_Flash1_ModuleName[16];
  UINT8   MipiCam_Flash1_I2cChannel;
  UINT16  MipiCam_Flash1_I2cAddress;
  UINT8   MipiCam_Flash1_GpioGroupPadNumber;
  UINT16  MipiCam_Flash1_GpioGroupNumber;
  UINT8   MipiCam_Flash1_GpioActiveValue;
  UINT8   MipiCam_Flash1_GpioInitialValue;
  UINT8   MipiCam_Flash1_OperatingMode;

  UINT8   MipiCam_Flash2_Model;                                                    
  UINT16  MipiCam_Flash2_ModuleName[16];
  UINT8   MipiCam_Flash2_I2cChannel;
  UINT16  MipiCam_Flash2_I2cAddress;
  UINT8   MipiCam_Flash2_GpioGroupPadNumber;
  UINT16  MipiCam_Flash2_GpioGroupNumber;
  UINT8   MipiCam_Flash2_GpioActiveValue;
  UINT8   MipiCam_Flash2_GpioInitialValue;
  UINT8   MipiCam_Flash2_OperatingMode;

  UINT8   MipiCam_Flash3_Model;                                                    
  UINT16  MipiCam_Flash3_ModuleName[16];
  UINT8   MipiCam_Flash3_I2cChannel;
  UINT16  MipiCam_Flash3_I2cAddress;
  UINT8   MipiCam_Flash3_GpioGroupPadNumber;
  UINT16  MipiCam_Flash3_GpioGroupNumber;
  UINT8   MipiCam_Flash3_GpioActiveValue;
  UINT8   MipiCam_Flash3_GpioInitialValue;
  UINT8   MipiCam_Flash3_OperatingMode;

  UINT8   MipiCam_Flash4_Model;                                                    
  UINT16  MipiCam_Flash4_ModuleName[16];
  UINT8   MipiCam_Flash4_I2cChannel;
  UINT16  MipiCam_Flash4_I2cAddress;
  UINT8   MipiCam_Flash4_GpioGroupPadNumber;
  UINT16  MipiCam_Flash4_GpioGroupNumber;
  UINT8   MipiCam_Flash4_GpioActiveValue;
  UINT8   MipiCam_Flash4_GpioInitialValue;
  UINT8   MipiCam_Flash4_OperatingMode;

  UINT8   MipiCam_Flash5_Model;                                                    
  UINT16  MipiCam_Flash5_ModuleName[16];
  UINT8   MipiCam_Flash5_I2cChannel;
  UINT16  MipiCam_Flash5_I2cAddress;
  UINT8   MipiCam_Flash5_GpioGroupPadNumber;
  UINT16  MipiCam_Flash5_GpioGroupNumber;
  UINT8   MipiCam_Flash5_GpioActiveValue;
  UINT8   MipiCam_Flash5_GpioInitialValue;
  UINT8   MipiCam_Flash5_OperatingMode;

  UINT8   PchI2cSensorDevicePort[8];

  UINT8   PchI2cTouchPadType;
  UINT8   PchI2cTouchPadIrqMode;
  UINT8   PchI2cTouchPadBusAddress;
  UINT16  PchI2cTouchPadHidAddress;
  UINT8   PchI2cTouchPadSpeed;

  UINT8   PchI2cTouchPanelType;
  UINT8   PchI2cTouchPanelIrqMode;
  UINT8   PchI2cTouchPanelBusAddress;
  UINT16  PchI2cTouchPanelHidAddress;
  UINT8   PchI2cTouchPanelSpeed;

  UINT8   PchSpiSensorDevicePort[7];
  UINT8   PchSpiFingerPrintType;
  UINT8   PchSpiSensorIrqMode;

  UINT8   PchUart1SensorDevice;
  UINT8   PchUart2SensorDevice;
  UINT8   PchI2cWittDevice;
  UINT8   PchI2cWittVersion;
  UINT8   PchUartUtkDevice;
  UINT8   DiscreteBtModule;
  UINT8   DiscreteBtModuleIrqMode;

  UINT8   PchSerialIoUseTimingParameters;

  UINT16  PchSerialIoTimingSSH0;  
  UINT16  PchSerialIoTimingSSL0;  
  UINT16  PchSerialIoTimingSSD0;  
  UINT16  PchSerialIoTimingFMH0;  
  UINT16  PchSerialIoTimingFML0;  
  UINT16  PchSerialIoTimingFMD0;  
  UINT16  PchSerialIoTimingFPH0;  
  UINT16  PchSerialIoTimingFPL0;  
  UINT16  PchSerialIoTimingFPD0;  
  UINT16  PchSerialIoTimingHSH0;  
  UINT16  PchSerialIoTimingHSL0;  
  UINT16  PchSerialIoTimingHSD0;  

  UINT16  PchSerialIoTimingSSH1;  
  UINT16  PchSerialIoTimingSSL1;  
  UINT16  PchSerialIoTimingSSD1;  
  UINT16  PchSerialIoTimingFMH1;  
  UINT16  PchSerialIoTimingFML1;  
  UINT16  PchSerialIoTimingFMD1;  
  UINT16  PchSerialIoTimingFPH1;  
  UINT16  PchSerialIoTimingFPL1;  
  UINT16  PchSerialIoTimingFPD1;  
  UINT16  PchSerialIoTimingHSH1;  
  UINT16  PchSerialIoTimingHSL1;  
  UINT16  PchSerialIoTimingHSD1;  

  UINT16  PchSerialIoTimingSSH2;  
  UINT16  PchSerialIoTimingSSL2;  
  UINT16  PchSerialIoTimingSSD2;  
  UINT16  PchSerialIoTimingFMH2;  
  UINT16  PchSerialIoTimingFML2;  
  UINT16  PchSerialIoTimingFMD2;  
  UINT16  PchSerialIoTimingFPH2;  
  UINT16  PchSerialIoTimingFPL2;  
  UINT16  PchSerialIoTimingFPD2;  
  UINT16  PchSerialIoTimingHSH2;  
  UINT16  PchSerialIoTimingHSL2;  
  UINT16  PchSerialIoTimingHSD2;  

  UINT16  PchSerialIoTimingSSH3;  
  UINT16  PchSerialIoTimingSSL3;  
  UINT16  PchSerialIoTimingSSD3;  
  UINT16  PchSerialIoTimingFMH3;  
  UINT16  PchSerialIoTimingFML3;  
  UINT16  PchSerialIoTimingFMD3;  
  UINT16  PchSerialIoTimingFPH3;  
  UINT16  PchSerialIoTimingFPL3;  
  UINT16  PchSerialIoTimingFPD3;  
  UINT16  PchSerialIoTimingHSH3;  
  UINT16  PchSerialIoTimingHSL3;  
  UINT16  PchSerialIoTimingHSD3;  

  UINT16  PchSerialIoTimingSSH4;  
  UINT16  PchSerialIoTimingSSL4;  
  UINT16  PchSerialIoTimingSSD4;  
  UINT16  PchSerialIoTimingFMH4;  
  UINT16  PchSerialIoTimingFML4;  
  UINT16  PchSerialIoTimingFMD4;  
  UINT16  PchSerialIoTimingFPH4;  
  UINT16  PchSerialIoTimingFPL4;  
  UINT16  PchSerialIoTimingFPD4;  
  UINT16  PchSerialIoTimingHSH4;  
  UINT16  PchSerialIoTimingHSL4;  
  UINT16  PchSerialIoTimingHSD4;  

  UINT16  PchSerialIoTimingSSH5;  
  UINT16  PchSerialIoTimingSSL5;  
  UINT16  PchSerialIoTimingSSD5;  
  UINT16  PchSerialIoTimingFMH5;  
  UINT16  PchSerialIoTimingFML5;  
  UINT16  PchSerialIoTimingFMD5;  
  UINT16  PchSerialIoTimingFPH5;  
  UINT16  PchSerialIoTimingFPL5;  
  UINT16  PchSerialIoTimingFPD5;  
  UINT16  PchSerialIoTimingHSH5;  
  UINT16  PchSerialIoTimingHSL5;  
  UINT16  PchSerialIoTimingHSD5;  

  UINT16  PchSerialIoTimingM0C0;  
  UINT16  PchSerialIoTimingM1C0;  
  UINT16  PchSerialIoTimingM0C1;  
  UINT16  PchSerialIoTimingM1C1;  
  UINT16  PchSerialIoTimingM0C2;  
  UINT16  PchSerialIoTimingM1C2;  
  UINT16  PchSerialIoTimingM0C3;  
  UINT16  PchSerialIoTimingM1C3;  
  UINT16  PchSerialIoTimingM0C4;  
  UINT16  PchSerialIoTimingM1C4;  
  UINT16  PchSerialIoTimingM0C5;  
  UINT16  PchSerialIoTimingM1C5;  
  UINT16  PchSerialIoTimingM0C6;  
  UINT16  PchSerialIoTimingM1C6;  
  UINT16  PchSerialIoTimingM0C7;  
  UINT16  PchSerialIoTimingM1C7;  
  UINT16  PchSerialIoTimingM0C8;  
  UINT16  PchSerialIoTimingM1C8;  
  UINT16  PchSerialIoTimingM0C9;  
  UINT16  PchSerialIoTimingM1C9;  
  UINT16  PchSerialIoTimingM0CA;  
  UINT16  PchSerialIoTimingM1CA;  
  UINT16  PchSerialIoTimingM0CB;  
  UINT16  PchSerialIoTimingM1CB;  

  UINT8   Ps2KbMsEnable;
  UINT8   TouchPanelMuxSelector;

  UINT8   Ac1TripPoint;
  UINT8   Ac0TripPoint;
  UINT8   Ac1FanSpeed;
  UINT8   Ac0FanSpeed;
  UINT8   PassiveThermalTripPoint;
  UINT8   CriticalThermalTripPoint;
  UINT8   PassiveTc1Value;
  UINT8   PassiveTc2Value;
  UINT8   PassiveTspValue;
  UINT8   DisableActiveTripPoints;
  UINT8   DisablePassiveTripPoints;
  UINT8   DisableCriticalTripPoints;
  UINT8   PmicVccLevel;
  UINT8   PmicVddqLevel;
  UINT8   TwoComponents;
  UINT8   CrcPmicNvmUpdateEnable;
  UINT8   CrcPmicCustomizationNvmUpdateEnable;
  UINT8   PmicNvmWriteLockEnable;

  UINT8   CPUTempReadEnable;
  UINT8   CPUEnergyReadEnable;
  UINT8   PCHTempReadEnable;
  UINT8   AlertEnableLock;
  UINT8   PchAlert;
  UINT8   DimmAlert;
  UINT8   CpuTemp;
  UINT8   CpuFanSpeed;

  
  
  
  UINT8   EnableDptf;
  UINT8   EnableDCFG;

  UINT8   EnableSaDevice;
  UINT32  PpccStepSize;

  UINT8   DetectEcFan[3];
  UINT8   EnableFan1Device;

  UINT8   EnableChargerParticipant;
  UINT8   EnablePowerParticipant;
  UINT16  PowerParticipantPollingRate;

  UINT8   EnableBatteryParticipant;
  UINT8   EnableInt3400Device;

  UINT8   EnableSen1ParticipantSupport; 
  UINT8   DetectEcSensors[5];
  UINT8   EnableSen1Participant;
  UINT8   EnableSen2Participant;
  UINT8   EnableSen3Participant;
  UINT8   EnableSen4Participant;
  UINT8   EnableSen5Participant;

  UINT8   EnablePchFivrParticipant;

  UINT8   PpccObject;
  UINT8   ArtgObject;
  UINT8   PmaxObject;
  UINT8   Tmp1Object;
  UINT8   Tmp2Object;
  UINT8   Tmp3Object;
  UINT8   Tmp4Object;
  UINT8   Tmp5Object;
  UINT8   Tmp6Object;
  UINT8   Tmp7Object;
  UINT8   Tmp8Object;
  UINT8   OptionalObjects;

  UINT8   OemDesignVariable0;
  UINT8   OemDesignVariable1;
  UINT8   OemDesignVariable2;
  UINT8   OemDesignVariable3;
  UINT8   OemDesignVariable4;
  UINT8   OemDesignVariable5;

  
  
  
  UINT8   Rtd3Support;
  UINT8   Rtd3P0dl;
  UINT8   Rtd3UsbPt1;
  UINT8   Rtd3UsbPt2;
  UINT16  Rtd3AudioDelay;
  UINT16  Rtd3TouchPadDelay;
  UINT16  Rtd3TouchPanelDelay;
  UINT16  Rtd3SensorHub;
  UINT16  VRRampUpDelay;
  UINT8   PstateCapping;
  UINT8   Rtd3ZpoddSupport;
  UINT8   Rtd3Zpodd;
  UINT8   Rtd3WWAN;
  UINT8   Rtd3SataPort0;
  UINT8   Rtd3SataPort1;
  UINT8   Rtd3SataPort2;
  UINT8   Rtd3SataPort3;
  UINT8   Rtd3SataPort4;
  UINT8   Rtd3SataPort5;
  UINT8   Rtd3SataPort6;
  UINT8   Rtd3SataPort7;
  UINT8   Rtd3WaGpio;
  UINT8   Rtd3RemapCR1;
  UINT8   Rtd3RemapCR2;
  UINT8   Rtd3RemapCR3;
  UINT8   Rtd3I2CTouchPanel;

  UINT8   PowerSharingManagerEnable;
  UINT8   PsmSplcDomainType1;
  UINT32  PsmSplcPowerLimit1;
  UINT32  PsmSplcTimeWindow1;

  UINT8   PsmDplcDomainType1;
  UINT8   PsmDplcDomainPreference1;
  UINT16  PsmDplcPowerLimitIndex1;
  UINT16  PsmDplcDefaultPowerLimit1;
  UINT32  PsmDplcDefaultTimeWindow1;
  UINT16  PsmDplcMinimumPowerLimit1;
  UINT16  PsmDplcMaximumPowerLimit1;
  UINT16  PsmDplcMaximumTimeWindow1;

  UINT8   WifiEnable;
  UINT8   WifiDomainType1;
  UINT16  WifiPowerLimit1;
  UINT32  WifiTimeWindow1;
  UINT8   TRxDelay0;
  UINT8   TRxCableLength0;
  UINT8   TRxDelay1;
  UINT8   TRxCableLength1;
  UINT8   WrddDomainType1;
  UINT16  WrddCountryIndentifier1;
  UINT8   WrddDomainType2;
  UINT16  WrddCountryIndentifier2;
  UINT8   WrdsWiFiSarEnable;
  UINT8   WrdsWiFiSarTxPowerSet1Limit1;
  UINT8   WrdsWiFiSarTxPowerSet1Limit2;
  UINT8   WrdsWiFiSarTxPowerSet1Limit3;
  UINT8   WrdsWiFiSarTxPowerSet1Limit4;
  UINT8   WrdsWiFiSarTxPowerSet1Limit5;
  UINT8   WrdsWiFiSarTxPowerSet1Limit6;
  UINT8   WrdsWiFiSarTxPowerSet1Limit7;
  UINT8   WrdsWiFiSarTxPowerSet1Limit8;
  UINT8   WrdsWiFiSarTxPowerSet1Limit9;
  UINT8   WrdsWiFiSarTxPowerSet1Limit10;

  UINT8   EwrdWiFiDynamicSarEnable;
  UINT8   EwrdWiFiDynamicSarRangeSets;
  UINT8   EwrdWiFiSarTxPowerSet2Limit1;
  UINT8   EwrdWiFiSarTxPowerSet2Limit2;
  UINT8   EwrdWiFiSarTxPowerSet2Limit3;
  UINT8   EwrdWiFiSarTxPowerSet2Limit4;
  UINT8   EwrdWiFiSarTxPowerSet2Limit5;
  UINT8   EwrdWiFiSarTxPowerSet2Limit6;
  UINT8   EwrdWiFiSarTxPowerSet2Limit7;
  UINT8   EwrdWiFiSarTxPowerSet2Limit8;
  UINT8   EwrdWiFiSarTxPowerSet2Limit9;
  UINT8   EwrdWiFiSarTxPowerSet2Limit10;
  UINT8   EwrdWiFiSarTxPowerSet3Limit1;
  UINT8   EwrdWiFiSarTxPowerSet3Limit2;
  UINT8   EwrdWiFiSarTxPowerSet3Limit3;
  UINT8   EwrdWiFiSarTxPowerSet3Limit4;
  UINT8   EwrdWiFiSarTxPowerSet3Limit5;
  UINT8   EwrdWiFiSarTxPowerSet3Limit6;
  UINT8   EwrdWiFiSarTxPowerSet3Limit7;
  UINT8   EwrdWiFiSarTxPowerSet3Limit8;
  UINT8   EwrdWiFiSarTxPowerSet3Limit9;
  UINT8   EwrdWiFiSarTxPowerSet3Limit10;
  UINT8   EwrdWiFiSarTxPowerSet4Limit1;
  UINT8   EwrdWiFiSarTxPowerSet4Limit2;
  UINT8   EwrdWiFiSarTxPowerSet4Limit3;
  UINT8   EwrdWiFiSarTxPowerSet4Limit4;
  UINT8   EwrdWiFiSarTxPowerSet4Limit5;
  UINT8   EwrdWiFiSarTxPowerSet4Limit6;
  UINT8   EwrdWiFiSarTxPowerSet4Limit7;
  UINT8   EwrdWiFiSarTxPowerSet4Limit8;
  UINT8   EwrdWiFiSarTxPowerSet4Limit9;
  UINT8   EwrdWiFiSarTxPowerSet4Limit10;
  UINT8   WgdsWiFiSarDeltaGroup1PowerMax1;
  UINT8   WgdsWiFiSarDeltaGroup1PowerChainA1;
  UINT8   WgdsWiFiSarDeltaGroup1PowerChainB1;
  UINT8   WgdsWiFiSarDeltaGroup1PowerMax2;
  UINT8   WgdsWiFiSarDeltaGroup1PowerChainA2;
  UINT8   WgdsWiFiSarDeltaGroup1PowerChainB2;
  UINT8   WgdsWiFiSarDeltaGroup2PowerMax1;
  UINT8   WgdsWiFiSarDeltaGroup2PowerChainA1;
  UINT8   WgdsWiFiSarDeltaGroup2PowerChainB1;
  UINT8   WgdsWiFiSarDeltaGroup2PowerMax2;
  UINT8   WgdsWiFiSarDeltaGroup2PowerChainA2;
  UINT8   WgdsWiFiSarDeltaGroup2PowerChainB2;
  UINT8   WgdsWiFiSarDeltaGroup3PowerMax1;
  UINT8   WgdsWiFiSarDeltaGroup3PowerChainA1;
  UINT8   WgdsWiFiSarDeltaGroup3PowerChainB1;
  UINT8   WgdsWiFiSarDeltaGroup3PowerMax2;
  UINT8   WgdsWiFiSarDeltaGroup3PowerChainA2;
  UINT8   WgdsWiFiSarDeltaGroup3PowerChainB2;
  UINT8   WiFiDynamicSarAntennaACurrentSet;
  UINT8   WiFiDynamicSarAntennaBCurrentSet;

  UINT8   BluetoothSar;
  UINT8   BluetoothSarBr;
  UINT8   BluetoothSarEdr2;
  UINT8   BluetoothSarEdr3;
  UINT8   BluetoothSarLe;
  UINT8   BluetoothSarLe2Mhz;
  UINT8   BluetoothSarLeLr;

  UINT8   AntennaDiversity;
  UINT8   CoExistenceManager;
  UINT8   PrebootBleEnable;
  UINT8   UsbFnEnable;

  UINT8   FanControl;
  UINT8   CpuFanControl;
  UINT8   LowestFanSpeed;

  
  
  
  UINT8   TbtSetupFormSupport;
  UINT8   TbtSetupDTbtPegTypeSupport;
  UINT8   DiscreteTbtSupport;
  UINT8   IntegratedTbtSupport;
  UINT8   TbtPcieSupport;
  UINT8   TbtUsbOn; 
  UINT8   TbtBootOn;
  UINT8   TbtWakeupSupport;
  UINT8   Gpio3ForcePwr;
  UINT16  Gpio3ForcePwrDly; 
  UINT8   CallSmiBeforeBoot;
  UINT8   Gpio5Filter;
  UINT8   TBTHotNotify;
  UINT8   EnableMsiInFadt;
  UINT8   DTbtController[2];
  UINT8   DTbtControllerType[2];
  UINT8   TBTSetClkReq;
  UINT8   TbtAspm;
  UINT8   TbtLtr;
  UINT8   DTbthostRouterPortNumber[2];
  UINT8   DTbtPcieExtraBusRsvd[2];
  UINT16  DTbtPcieMemRsvd[2];
  UINT8   DTbtPcieIoRsvd[2];
  UINT8   DTbtPcieMemAddrRngMax[2];
  UINT16  DTbtPciePMemRsvd[2];
  UINT8   DTbtPciePMemAddrRngMax[2];
  UINT8   Win10Support;
  UINT8   TrOsup; 
  UINT8   TbtL1SubStates;
  UINT8   TbtPtm;
  UINT8   OsNativeResourceBalance;
  UINT8   TbtAcDcSwitch; 
  UINT8   TbtLegacyModeSupport;
  
  UINT8   ITbtPcieRootPortSupported[6];
  UINT8   ITbtRootPort[6];
  UINT8   ITbtPcieExtraBusRsvd[6];
  UINT16  ITbtPcieMemRsvd[6];
  UINT8   ITbtPcieMemAddrRngMax[6];
  UINT16  ITbtPciePMemRsvd[6];
  UINT8   ITbtPciePMemAddrRngMax[6];
  UINT16  ITbtForcePowerOnTimeoutInMs;
  UINT16  ITbtConnectTopologyTimeoutInMs;
  UINT16  ReserveMemoryPerSlot;
  UINT16  ReservePMemoryPerSlot;
  UINT8   ReserveIoPerSlot;
  UINT8   ITbtPcieTunnelingForUsb4;  
  UINT8   TbtSkipPciOprom; 
  UINT8   TbtAcpiRemovalSupport;

  UINT8   OcWdtEnabled;
  UINT8   IccLockRegisters;
  UINT8   IccProfile;
  UINT8   ShowProfile;
  UINT8   NumProfiles;

  UINT8   CsModeFirst;
  UINT8   CsMode;
  UINT8   CsModeChanged;

  UINT8   PlatformUnstable;
  UINT8   IsOcDefaultsInitalized;

  UINT8   SecureEraseModeRealMode;
  UINT8   ForceSecureErase;

  UINT8   HidEventFilterDriverEnable;

  UINT8   GuidForward; 

  UINT8   PmicSlpS0VmSupport;
  UINT8   HebcValueSupport;
  UINT32  HebcValue;

  UINT8   I2cSarResetDelay;

  UINT8   WwanEnable;

  UINT8   UsbcBiosTcssHandshake;
  
  UINT32  UsbConnStatusTimeout;
  UINT32  UsbcSxEntryTimeout;
  UINT32  UsbcSxExitTimeout;


  UINT8   VtioSupport;
  UINT8   SdevCio2Entry;
  UINT8   SdevIspEntry;
  UINT8   SdevHeciEntry;
  UINT8   SdevSpi1Entry;
  UINT8   SdevSpi2Entry;
  UINT8   SdevXhciEntry;
  UINT16  SdevNumberOfSensors[5];
  UINT16  SdevSensorEntry1[5];
  UINT16  SdevSensorEntry2[5];

  UINT8   EcChargingMethod;
  UINT8   AlternateModeSynchDelay;
  UINT8   WakeOnWiGigSupport;

  UINT8   SystemTimeAndAlarmSource; 

  UINT8   TrustedDeviceSetupBoot;
  UINT8   TestUsbUnlockForNoa;

  UINT8   EnableCrashLog;
  UINT8   CrashLogOnAllReset;
  UINT8   CrashLogClearEnable;
  UINT8   CrashLogRearmEnable;

  UINT8   SysFwUpdateLoadDefault;
  UINT8   SysFwUpdateSkipPowerCheck;

  UINT8   OfflineCrashDumpEnable; 
  UINT8   BoardReworkComplainceEnable;
  UINT8   ItpxdpMuxSupport;
  UINT8   ItpxdpMux;

  UINT8   EpiDeviceSupport;  
  UINT8   EpiDeviceEnable;   
  UINT8   SerialPortAcpiDebug;  

  UINT8   OsDnx;

  UINT8   PepPeg0;
  
  UINT8   TcssUcmDevice;
  UINT8   PepPcieStorage;
  UINT8   TbtVtdBaseSecurity; 
  UINT8   KernelDebugPatch;
  UINT8   ITbtRtd3;
  UINT16  ITbtRtd3ExitDelay;
  UINT8   AuxOriOverrideSupport;
  UINT8   AuxOriOverride;
  UINT8   TccMode;

  UINT8   BclkSource;
  UINT8   PowermeterDeviceEnable; 
  UINT8   WwanResetWorkaround;
  UINT8   PuisEnable;
  UINT8   SdevXhciNumberOfDevices;
  UINT8   SdevXhciDeviceAttributes[2];
  UINT8   SdevXhciRootPortNumber[2];
  UINT16  SdevXhciVendorId[2];
  UINT16  SdevXhciProductId[2];
  UINT16  SdevXhciRevision[2];
  UINT8   SdevXhciInterfaceNumber[2];
  UINT8   SdevXhciClass[2];
  UINT8   SdevXhciSubClass[2];
  UINT8   SdevXhciProtocol[2];
  UINT16  SdevXhciAcpiPathStringOffset[2];
  UINT16  SdevXhciAcpiPathStringLength[2];
  UINT64  SdevXhciFirmwareHashDevice1[4];
  UINT64  SdevXhciFirmwareHashDevice2[4];
  UINT16  SdevXhciAcpiPathNameDevice1[49]; 
  UINT16  SdevXhciAcpiPathNameDevice2[49]; 

  UINT8   CurrentSecurityMode;

  UINT8   ControlIommu;

  UINT8   SdevFlags[5];
  UINT8   SdevXhciFlags;
  UINT8   DevicePasswordSupport;
  UINT8   PepVmd;
  UINT8   WwanFccLock; 
  UINT8   DTbtRtd3;
  UINT16  DTbtRtd3OffDelay;
  UINT32  DTbtRtd3ClkReq;
  UINT16  DTbtRtd3ClkReqDelay;
  UINT8   DTbtGo2SxCommand;
  UINT8   EnablePcieTunnelingOverUsb4;
  UINT8   CnvExtClock;

  UINT8   WifiAntGainEnale;
  UINT8   WifiAntGain2400ChainA;
  UINT8   WifiAntGain5150ChainA;
  UINT8   WifiAntGain5350ChainA;
  UINT8   WifiAntGain5470ChainA;
  UINT8   WifiAntGain5725ChainA;
  UINT8   WifiAntGain2400ChainB;
  UINT8   WifiAntGain5150ChainB;
  UINT8   WifiAntGain5350ChainB;
  UINT8   WifiAntGain5470ChainB;
  UINT8   WifiAntGain5725ChainB;

  UINT8   WifiSarGeoMappingMode;  
  UINT8   WifiSarGeoDefault;      
  UINT8   WifiSarGeoFcc;          
  UINT8   WifiSarGeoTwalike;      
  UINT8   WifiSarGeoCanadaIsed;   
  UINT8   WifiSarGeoEtsi5G8Srd;   
  UINT8   WifiSarGeoEtsi5G8Med;   
  UINT8   WifiSarGeoJapan;        
  UINT8   WifiSarGeoBrazil;       
  UINT8   WifiSarGeoEtsi5G8Fcc;   
  UINT8   WifiSarGeoIndonesia;    
  UINT8   WifiSarGeoSouthKorea;   
  UINT8   WifiSarGeoChile;        
  UINT8   WifiSarGeoEtsi5G8Pass;  
  UINT8   WifiSarGeoPakistan;     
  UINT8   WifiSarGeoEgypt;        
  UINT8   WifiSarGeoTunisia;      
  UINT8   WifiSarGeoChinaBios;    
  UINT8   WifiSarGeoRussia;       
  UINT8   WifiSarGeoEuEtsi5G8Srd; 
  UINT8   WifiSarGeoUsaOnly;      
  UINT8   WifiSarGeoEuEtsi5G8Dfs; 
  UINT8   WifiSarGeoQatar;        

  UINT8   MipiCam_Flash0_Mode;
  UINT8   MipiCam_Flash1_Mode;
  UINT8   MipiCam_Flash2_Mode;
  UINT8   MipiCam_Flash3_Mode;
  UINT8   MipiCam_Flash4_Mode;
  UINT8   MipiCam_Flash5_Mode;
  UINT8   TypecRetimerTxComplianceModeEn;
  UINT8   TypecRetimerPD0;
  UINT8   TypecRetimerPD1;
  UINT8   TypecRetimerPD2;
  UINT8   TypecRetimerPD3;
  UINT8   WifiActiveChannelSrd;
  UINT8   WifiIndonesia5GhzSupport;
  UINT8   CvfSupport;
  UINT8   DeepestUSBSleepWakeCapability;

  UINT8   PepSataEnumeration;
  UINT8   PepHeci3;


  UINT32  WifiUltraHighBandSupport;
  UINT8   WrdsWiFiSarTxPowerSet1Limit11;
  UINT8   WrdsWiFiSarTxPowerSet1Limit12;
  UINT8   WrdsWiFiSarTxPowerSet1Limit13;
  UINT8   WrdsWiFiSarTxPowerSet1Limit14;
  UINT8   WrdsWiFiSarTxPowerSet1Limit15;
  UINT8   WrdsWiFiSarTxPowerSet1Limit16;
  UINT8   WrdsWiFiSarTxPowerSet1Limit17;
  UINT8   WrdsWiFiSarTxPowerSet1Limit18;
  UINT8   WrdsWiFiSarTxPowerSet1Limit19;
  UINT8   WrdsWiFiSarTxPowerSet1Limit20;
  UINT8   WrdsWiFiSarTxPowerSet1Limit21;
  UINT8   WrdsWiFiSarTxPowerSet1Limit22;
  UINT8   EwrdWiFiSarTxPowerSet2Limit11;
  UINT8   EwrdWiFiSarTxPowerSet2Limit12;
  UINT8   EwrdWiFiSarTxPowerSet2Limit13;
  UINT8   EwrdWiFiSarTxPowerSet2Limit14;
  UINT8   EwrdWiFiSarTxPowerSet2Limit15;
  UINT8   EwrdWiFiSarTxPowerSet2Limit16;
  UINT8   EwrdWiFiSarTxPowerSet2Limit17;
  UINT8   EwrdWiFiSarTxPowerSet2Limit18;
  UINT8   EwrdWiFiSarTxPowerSet2Limit19;
  UINT8   EwrdWiFiSarTxPowerSet2Limit20;
  UINT8   EwrdWiFiSarTxPowerSet2Limit21;
  UINT8   EwrdWiFiSarTxPowerSet2Limit22;
  UINT8   EwrdWiFiSarTxPowerSet3Limit11;
  UINT8   EwrdWiFiSarTxPowerSet3Limit12;
  UINT8   EwrdWiFiSarTxPowerSet3Limit13;
  UINT8   EwrdWiFiSarTxPowerSet3Limit14;
  UINT8   EwrdWiFiSarTxPowerSet3Limit15;
  UINT8   EwrdWiFiSarTxPowerSet3Limit16;
  UINT8   EwrdWiFiSarTxPowerSet3Limit17;
  UINT8   EwrdWiFiSarTxPowerSet3Limit18;
  UINT8   EwrdWiFiSarTxPowerSet3Limit19;
  UINT8   EwrdWiFiSarTxPowerSet3Limit20;
  UINT8   EwrdWiFiSarTxPowerSet3Limit21;
  UINT8   EwrdWiFiSarTxPowerSet3Limit22;
  UINT8   EwrdWiFiSarTxPowerSet4Limit11;
  UINT8   EwrdWiFiSarTxPowerSet4Limit12;
  UINT8   EwrdWiFiSarTxPowerSet4Limit13;
  UINT8   EwrdWiFiSarTxPowerSet4Limit14;
  UINT8   EwrdWiFiSarTxPowerSet4Limit15;
  UINT8   EwrdWiFiSarTxPowerSet4Limit16;
  UINT8   EwrdWiFiSarTxPowerSet4Limit17;
  UINT8   EwrdWiFiSarTxPowerSet4Limit18;
  UINT8   EwrdWiFiSarTxPowerSet4Limit19;
  UINT8   EwrdWiFiSarTxPowerSet4Limit20;
  UINT8   EwrdWiFiSarTxPowerSet4Limit21;
  UINT8   EwrdWiFiSarTxPowerSet4Limit22;

  UINT8   WifiAntGain5945ChainA;
  UINT8   WifiAntGain6165ChainA;
  UINT8   WifiAntGain6405ChainA;
  UINT8   WifiAntGain6525ChainA;
  UINT8   WifiAntGain6705ChainA;
  UINT8   WifiAntGain6865ChainA;
  UINT8   WifiAntGain5945ChainB;
  UINT8   WifiAntGain6165ChainB;
  UINT8   WifiAntGain6405ChainB;
  UINT8   WifiAntGain6525ChainB;
  UINT8   WifiAntGain6705ChainB;
  UINT8   WifiAntGain6865ChainB;
  UINT8   AxSettingUkraine;
  UINT8   AxModeUkraine;
  UINT8   AxSettingRussia;
  UINT8   AxModeRussia;

  UINT8   WgdsWiFiSarDeltaGroup1PowerMax3;
  UINT8   WgdsWiFiSarDeltaGroup1PowerChainA3;
  UINT8   WgdsWiFiSarDeltaGroup1PowerChainB3;
  UINT8   WgdsWiFiSarDeltaGroup2PowerMax3;
  UINT8   WgdsWiFiSarDeltaGroup2PowerChainA3;
  UINT8   WgdsWiFiSarDeltaGroup2PowerChainB3;
  UINT8   WgdsWiFiSarDeltaGroup3PowerMax3;
  UINT8   WgdsWiFiSarDeltaGroup3PowerChainA3;
  UINT8   WgdsWiFiSarDeltaGroup3PowerChainB3;

  UINT8   WrdsCdbWiFiSarTxPowerSet1Limit1;
  UINT8   WrdsCdbWiFiSarTxPowerSet1Limit2;
  UINT8   WrdsCdbWiFiSarTxPowerSet1Limit3;
  UINT8   WrdsCdbWiFiSarTxPowerSet1Limit4;
  UINT8   WrdsCdbWiFiSarTxPowerSet1Limit5;
  UINT8   WrdsCdbWiFiSarTxPowerSet1Limit6;
  UINT8   WrdsCdbWiFiSarTxPowerSet1Limit7;
  UINT8   WrdsCdbWiFiSarTxPowerSet1Limit8;
  UINT8   WrdsCdbWiFiSarTxPowerSet1Limit9;
  UINT8   WrdsCdbWiFiSarTxPowerSet1Limit10;
  UINT8   WrdsCdbWiFiSarTxPowerSet1Limit11;
  UINT8   WrdsCdbWiFiSarTxPowerSet1Limit12;
  UINT8   WrdsCdbWiFiSarTxPowerSet1Limit13;
  UINT8   WrdsCdbWiFiSarTxPowerSet1Limit14;
  UINT8   WrdsCdbWiFiSarTxPowerSet1Limit15;
  UINT8   WrdsCdbWiFiSarTxPowerSet1Limit16;
  UINT8   WrdsCdbWiFiSarTxPowerSet1Limit17;
  UINT8   WrdsCdbWiFiSarTxPowerSet1Limit18;
  UINT8   WrdsCdbWiFiSarTxPowerSet1Limit19;
  UINT8   WrdsCdbWiFiSarTxPowerSet1Limit20;
  UINT8   WrdsCdbWiFiSarTxPowerSet1Limit21;
  UINT8   WrdsCdbWiFiSarTxPowerSet1Limit22;

  UINT8   EwrdCdbWiFiSarTxPowerSet2Limit1;
  UINT8   EwrdCdbWiFiSarTxPowerSet2Limit2;
  UINT8   EwrdCdbWiFiSarTxPowerSet2Limit3;
  UINT8   EwrdCdbWiFiSarTxPowerSet2Limit4;
  UINT8   EwrdCdbWiFiSarTxPowerSet2Limit5;
  UINT8   EwrdCdbWiFiSarTxPowerSet2Limit6;
  UINT8   EwrdCdbWiFiSarTxPowerSet2Limit7;
  UINT8   EwrdCdbWiFiSarTxPowerSet2Limit8;
  UINT8   EwrdCdbWiFiSarTxPowerSet2Limit9;
  UINT8   EwrdCdbWiFiSarTxPowerSet2Limit10;
  UINT8   EwrdCdbWiFiSarTxPowerSet2Limit11;
  UINT8   EwrdCdbWiFiSarTxPowerSet2Limit12;
  UINT8   EwrdCdbWiFiSarTxPowerSet2Limit13;
  UINT8   EwrdCdbWiFiSarTxPowerSet2Limit14;
  UINT8   EwrdCdbWiFiSarTxPowerSet2Limit15;
  UINT8   EwrdCdbWiFiSarTxPowerSet2Limit16;
  UINT8   EwrdCdbWiFiSarTxPowerSet2Limit17;
  UINT8   EwrdCdbWiFiSarTxPowerSet2Limit18;
  UINT8   EwrdCdbWiFiSarTxPowerSet2Limit19;
  UINT8   EwrdCdbWiFiSarTxPowerSet2Limit20;
  UINT8   EwrdCdbWiFiSarTxPowerSet2Limit21;
  UINT8   EwrdCdbWiFiSarTxPowerSet2Limit22;

  UINT8   EwrdCdbWiFiSarTxPowerSet3Limit1;
  UINT8   EwrdCdbWiFiSarTxPowerSet3Limit2;
  UINT8   EwrdCdbWiFiSarTxPowerSet3Limit3;
  UINT8   EwrdCdbWiFiSarTxPowerSet3Limit4;
  UINT8   EwrdCdbWiFiSarTxPowerSet3Limit5;
  UINT8   EwrdCdbWiFiSarTxPowerSet3Limit6;
  UINT8   EwrdCdbWiFiSarTxPowerSet3Limit7;
  UINT8   EwrdCdbWiFiSarTxPowerSet3Limit8;
  UINT8   EwrdCdbWiFiSarTxPowerSet3Limit9;
  UINT8   EwrdCdbWiFiSarTxPowerSet3Limit10;
  UINT8   EwrdCdbWiFiSarTxPowerSet3Limit11;
  UINT8   EwrdCdbWiFiSarTxPowerSet3Limit12;
  UINT8   EwrdCdbWiFiSarTxPowerSet3Limit13;
  UINT8   EwrdCdbWiFiSarTxPowerSet3Limit14;
  UINT8   EwrdCdbWiFiSarTxPowerSet3Limit15;
  UINT8   EwrdCdbWiFiSarTxPowerSet3Limit16;
  UINT8   EwrdCdbWiFiSarTxPowerSet3Limit17;
  UINT8   EwrdCdbWiFiSarTxPowerSet3Limit18;
  UINT8   EwrdCdbWiFiSarTxPowerSet3Limit19;
  UINT8   EwrdCdbWiFiSarTxPowerSet3Limit20;
  UINT8   EwrdCdbWiFiSarTxPowerSet3Limit21;
  UINT8   EwrdCdbWiFiSarTxPowerSet3Limit22;

  UINT8   EwrdCdbWiFiSarTxPowerSet4Limit1;
  UINT8   EwrdCdbWiFiSarTxPowerSet4Limit2;
  UINT8   EwrdCdbWiFiSarTxPowerSet4Limit3;
  UINT8   EwrdCdbWiFiSarTxPowerSet4Limit4;
  UINT8   EwrdCdbWiFiSarTxPowerSet4Limit5;
  UINT8   EwrdCdbWiFiSarTxPowerSet4Limit6;
  UINT8   EwrdCdbWiFiSarTxPowerSet4Limit7;
  UINT8   EwrdCdbWiFiSarTxPowerSet4Limit8;
  UINT8   EwrdCdbWiFiSarTxPowerSet4Limit9;
  UINT8   EwrdCdbWiFiSarTxPowerSet4Limit10;
  UINT8   EwrdCdbWiFiSarTxPowerSet4Limit11;
  UINT8   EwrdCdbWiFiSarTxPowerSet4Limit12;
  UINT8   EwrdCdbWiFiSarTxPowerSet4Limit13;
  UINT8   EwrdCdbWiFiSarTxPowerSet4Limit14;
  UINT8   EwrdCdbWiFiSarTxPowerSet4Limit15;
  UINT8   EwrdCdbWiFiSarTxPowerSet4Limit16;
  UINT8   EwrdCdbWiFiSarTxPowerSet4Limit17;
  UINT8   EwrdCdbWiFiSarTxPowerSet4Limit18;
  UINT8   EwrdCdbWiFiSarTxPowerSet4Limit19;
  UINT8   EwrdCdbWiFiSarTxPowerSet4Limit20;
  UINT8   EwrdCdbWiFiSarTxPowerSet4Limit21;
  UINT8   EwrdCdbWiFiSarTxPowerSet4Limit22;

  
  UINT32  WifiPhyFilterConfigA;    
  UINT32  WifiPhyFilterConfigB;    
  UINT32  WifiPhyFilterConfigC;    
  UINT32  WifiPhyFilterConfigD;    

  UINT8   MipiCam_Link0_LanesClkDiv;
  UINT8   MipiCam_Link1_LanesClkDiv;
  UINT8   MipiCam_Link2_LanesClkDiv;
  UINT8   MipiCam_Link3_LanesClkDiv;
  UINT8   MipiCam_Link4_LanesClkDiv;
  UINT8   MipiCam_Link5_LanesClkDiv;
  UINT8   EnableFan2Device;
  UINT8   EnableFan3Device;
  UINT8   EnableDgpuParticipant;
  UINT8   AdlSAepBoard;

  UINT8   WifiTASSelection;
  UINT8   WifiTASListEntries;
  UINT8   PlnEnable;

  
  UINT8   TcssPdPsOnEnable;

  UINT8   PepPcieLan;
  UINT8   PepPcieWlan;
  UINT8   PepPcieGfx;
  UINT8   PepPcieOther;
  UINT8   AuxRailBudget;
  UINT8   CvfSpiSpeed; 
  UINT8   CvfTestDevice; 
  UINT8   PepPcieDg;
  UINT8   DgPlatformSupport;
  UINT8   VramSrEnable;      
  #line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Include\\SetupVariableRestricted.h"









































  UINT8   EnableTestMenu;
  UINT8   MsbddSupport;
  UINT8   SmmSpsEnable;
  UINT8   SmmDgrStateSaveProtect;
  UINT8   SmmDgrSpaEnable;
  UINT8   SmmSkipOemExceptionHandler;
  UINT8   LlcWaysEnable;
  UINT16  LlcWays;


  
  

  
  

  
  
  
  UINT8   Enable4TAGEC;
  UINT8   RegisterSvBootOption;

  
  UINT8   ReducedShellEntryTime;
  UINT8   ForceSerialAfterConsoleReady;
  UINT8   ShellEntryMapPrint;

  
  
  
  UINT8   TestForceWake;
  UINT8   TestGfxPause;
  UINT8   TestGraphicsFreqModify;
  UINT8   TestGraphicsFreqReq;
  UINT8   TestPmLock;
  UINT8   TestPavpHeavyMode;
  UINT8   TestDopClockGating;
  UINT8   TestUnsolicitedAttackOverride;
  UINT8   TestWOPCMSupport;
  UINT8   TestWOPCMSize;
  UINT8   TestPavpAsmf;
  UINT8   TestGraphicsVideoFreq;
  UINT8   TestUnitLevelClockGating;
  UINT8   TestAutoTearDown;
  UINT8   TestSamplePartStatusOverride;
  UINT8   TestSpcLock;
  UINT8   TestSrlLock;
  UINT8   TestDeIommuPostedIntCap;
  
  
  
  UINT8   PsmiHandlerSize;
  UINT8   PsmiTraceRegion0;
  UINT8   TraceRegion0CacheType;
  UINT8   TraceRegion0RangeCompatible;
  UINT8   PsmiTraceRegion1;
  UINT8   TraceRegion1CacheType;
  UINT8   TraceRegion1RangeCompatible;
  UINT8   PsmiTraceRegion2;
  UINT8   TraceRegion2CacheType;
  UINT8   TraceRegion2RangeCompatible;
  UINT8   PsmiTraceRegion3;
  UINT8   TraceRegion3CacheType;
  UINT8   TraceRegion3RangeCompatible;
  UINT8   PsmiTraceRegion4;
  UINT8   TraceRegion4CacheType;
  UINT8   TraceRegion4RangeCompatible;
  UINT8   ContiguousTraceRegion;
  
  
  
  UINT8   TestDmiCapRegLock;
  UINT8   TestDmiMaxPayloadSize;
  UINT8   TestSaSecurityLock;
  UINT8   TestGnaErrorCheckDis;
  UINT8   TestModeEdramInternal;
  UINT8   TestIommuDrhdWa;
  
  
  
  UINT8   DmiGen3DsPresetEnable;
  UINT8   DmiGen3DsPortRxPreset[8];
  UINT8   DmiGen3DsPortTxPreset[8];
  UINT8   DmiGen3UsPresetEnable;
  UINT8   DmiGen3UsPortRxPreset[8];
  UINT8   DmiGen3UsPortTxPreset[8];
  UINT8   DmiGen3MultiVC;
  UINT8   DmiGen3Vc1Control;
  UINT8   DmiGen3VcMControl;
  UINT8   Gen3EqPhase23Bypass;
  UINT8   Gen3EqPhase3Bypass;
  UINT8   Gen3LtcoEnable;
  UINT8   Gen3RtcoRtpoEnable;
  UINT8   DmiGen3Ltcpre[8];
  UINT8   DmiGen3Ltcpo[8];
  UINT8   DmiGen3RtcoPreset[8];
  UINT8   DmiGen3RtcoCpre[8];
  UINT8   DmiGen3RtcoCpo[8];
  UINT8   DmiSrl;
  UINT8   Gen4EqPhase23Bypass;
  UINT8   Gen4EqPhase3Bypass;
  UINT8   DmiGen4DsPresetEnable;
  UINT8   DmiGen4UsPresetEnable;
  UINT8   DmiGen4Ltcpre[8];
  UINT8   DmiGen4Ltcpo[8];
  UINT8   DmiGen4DsPortTxPreset[8];
  UINT8   DmiGen4UsPortTxPreset[8];
  UINT8   Gen4RtcoRtpoEnable;
  UINT8   Gen4LtcoEnable;
  UINT8   CpuDmiFomsCp;




  UINT8   UnlockMchbarCtrlRegs;
  UINT8   OpioTxClkGating;
  UINT8   OpioRxClkGating;
  UINT8   OpioLowPwrMode;
  UINT8   SelfRefSrMode;
  UINT8   SelfRefSrSeq;
  UINT8   SelfRefBurstSpacing;




  UINT8   TestMdllOffSen;
  UINT8   TestMpllOffSen;
  
  
  
  UINT8   TestDdrThrottling;

  
  
  
  UINT8   TestPchSataGCAssel;
  UINT8   TestRstPcieStorageRemapPortConfigCheck;
  UINT8   TestRstPcieStorageRemapTestMode[3];
  UINT8   TestRstPcieStorageRemapAspmProgramming[3];
  UINT8   TestRstPcieStorageRemapSaveRestore[3];
  UINT8   TestRstPcieStorageRemapDeviceInterface[3];
  UINT8   TestRstPcieStorageRemapDeviceBarSizeCheck[3];
  UINT8   TestRstPcieStorageRemapDeviceBarSelection[3];
  UINT8   TestRstPcieStorageRemapDeviceInterrupt[3];
  UINT8   GlobalSmiLock;

  UINT8   TestPchTcLockDown;
  UINT8   TestPchPmRegisterLock;

  UINT8   TestPchDmiExtSync;
  UINT8   PchDmiL1C0;
  UINT8   TestDmiUpPortTranPresetEn;
  UINT8   TestDmiMeUmaRootSpaceCheck;
  UINT8   DisableResets;
  UINT8   DisableWatchdogTimer;
  UINT8   TestMpcSecureRegisterLock;
  UINT8   TestXhciAccessControlLock;
  UINT8   TestSerialIoEnable;
  
  
  
  UINT8   TestPchDmiUpPortTranPreset[8];
  UINT8   TestPchDmiTranCoOverEn[8];
  UINT8   TestPchDmiTranCoOverPostCur[8];
  UINT8   TestPchDmiTranCoOverPreCur[8];

  UINT8   TestPchDmiRtlepceb;

  
  
  
  UINT8 TestPchWOLFastSupport;

  
  
  
  UINT8   EnableTurboCriticalPowerClamp;

  UINT8   EnableDynamicTurboCriticalPowerClamp;

  
  
  
  UINT8   ForceTxtEnable;
  UINT8   EnableScheck;
  UINT8   TestLtDprLock;

  
  
  
  UINT8   UsbModifyOsc;
  UINT8   UsbModifyPldUpc;
  UINT8   Hsp1ConnectorLocation;
  UINT8   Hsp2ConnectorLocation;
  UINT8   Hsp3ConnectorLocation;
  UINT8   Hsp4ConnectorLocation;
  UINT8   TestUsbEPTypeLockPolicy[24];
  UINT8   TestRootPortPolicyControl[20];
  UINT8   TestXhciEnabled;

  
  
  
  UINT8   SuperDebugDptf;

  
  UINT8 TestHdaPowerClockGating;
  UINT8 TestHdaConfigLockdown;
  UINT8 TestHdaLowFreqLinkClockSource;




  
  UINT8   SvDmiDynCG;
  UINT8   DmiL1PmcControl;

  
  UINT8   OpiL1NandOvrPcie;
  UINT8   OpiL1Rcep;
  UINT8   OpiClkGatEn;
  UINT8   OpiLpmcDlcge;
  UINT8   OpiLpmcDtcge;
  UINT8   OpiLpmcDscge;
  UINT8   OpiLpmcLctge;
  UINT8   OpiLpmcTctge;
  UINT8   OpiLpmcPllse;
  UINT8   OpiLpmcDtqe;
  UINT8   OpiLpmcHailep;
  UINT8   OpiLpmcPllRefcge;
  UINT8   OpiLpmcHaie;
  UINT8   TestDmiSrl;
  UINT8   TestOpiPllPowerGating;

  
  UINT8   PchDmiAspmCap;

  UINT8   DmiVC1Enable;

  UINT8   xhci_break_en;
  UINT8   pcie_break_en;
  UINT8   PciExVc1Map;

  UINT8   VcpEhciEnable;
  UINT8   VcpUhciEnable;
  UINT8   VcpXhciEnable;

  UINT8   GlobalSmiEnable;
  UINT8   ClearCes;
  UINT8   CPVsettings;

  UINT8   TestFlashLockDown;
  UINT8   BiosInterfaceUnlock;

  
  UINT8   SvDmiSpL0sL1Dep;
  UINT8   SvDmiPortStaggering;
  UINT8   SvDmiRetryBufferDepth;
  UINT8   SvDmiRetryBufferDepthByte[6];
  UINT8   SvSpSpeedSp[28];
  UINT8   SvSpScramblerBypass;
  UINT8   SvSpAdvErrorReport;

  
  UINT8   SpiBiosSize;

  
  UINT8   SvUsbXhciMsiEn;
  UINT8   SvUsbXhciMsiMme;
  UINT8   SvXhciControllerState;
  UINT8   SvUsb2HcSelect;
  UINT8   SvUsbXhci1;
  UINT8   SvUsbXhciIntMode;
  UINT8   SvUsbWake;
  UINT8   SvXhciSsppen;
  UINT8   SvEhciPortLength;

  
  UINT8   SvSmbusStaticClockGating;
  UINT8 SvSmbusPchDtsReadDisable;

  
  UINT8   SvAdvPchThermLock;

  UINT8   SvAdvPchNvramTT;
  UINT8   SvAdvPchXhciTT;
  UINT8   SvAdvPchDmiTT;
  UINT8   SvAdvPgOverrideEn;
  UINT16  SvAdvPchPowerGatingWord0[4];
  UINT16  SvAdvPchPowerGatingWord1[4];
  UINT8   SvAdvPchDeepSxS4Support;
  UINT8   SvAdvPchDeepSxS5Support;
  UINT8   SvAdvPchDmiPllShutdown;
  UINT8   SvAdvPchSlpS3Stretch;
  UINT8   SvAdvPchSlpS4tretch;
  UINT8   SvAdvPchSlpSusStretch;
  UINT8   SvAdvPchSlpAStretch;
  UINT8   SvAdvPchSlpSxStretchG3;
  UINT8   SvAdvPchTripleFaultPolicy;
  UINT16  SvAdvPchFunctionEnableWord[2];
  UINT16  SvAdvPchFunctionDisableWord[2];
  
  UINT8   TestClkGatingXhci;
  UINT8   SvClkGatingUsb;
  UINT8   SvClkGatingGbE;
  UINT8   SvClkGatingAzalia;
  UINT8   SvClkGatingLegacy;

  UINT8   SvAdvPeriodicSmi;
  UINT8   SvSwSmiRateSel;
  UINT8   SvSmiCallBack;
  UINT8   SvAdvLtr;
  UINT8   SvIgnSpr;
  UINT8   SvAdvOBFFProgramming;
  UINT8   SvAdvDCAP2OBFFS;
  UINT8   SvAdvLgmr;
  UINT8   SvAdvPchNvmPG;
  UINT8   SvAdvPchPowerMgt;
  UINT8   SvAdvClockGating;
  UINT8   SvSlpLanMinAsstWdth;
  UINT8   SvPchClearPowerSts;
  UINT16  Spvvd;
  UINT8   TestCyclonePcieSwitchWA;
  UINT8   SvL1SnoozEn;
  UINT8   SvL1OffEn;
  UINT8   SvAllowOpiPllSdInc0;
  UINT8   SvAllowSpxbCgInc0;
  UINT8   SvPmRspDmdOverride1En;
  UINT32  SvPmRspDmdOverride1EnDWord;
  UINT8   SvPmRspDmdOverride2En;
  UINT32  SvPmRspDmdOverride2EnDWord;
  UINT8   SvCppmVrIC;
  UINT32  SvCppmVrICDWord;
  UINT8   SvMaxCpuMsgLtr;
  UINT32  SvMaxCpuMsgLtrDWord;
  UINT8   SvCxPmDmdEn;
  UINT8   SvCppmCgQual;
  UINT8   SvCppmOpiPllQual;
  UINT8   SvCppmIclkQual;
  UINT8   SvUsbConDsxMode;
  UINT8   SvInjectorCard;
  UINT8   TestPchRootPort;
  UINT8   CpvPm;




  
  
  
  UINT8   TestPcieIltrOvrdSxlV;
  UINT8   TestPcieIltrOvrdForceSxl;
  UINT8   TestPcieIltrOvrdSxlMode;
  UINT8   TestPcieIltrOvrdSxlM;
  UINT16  TestPcieIltrOvrdSxl;
  UINT8   TestPcieIltrOvrdNlV;
  UINT8   TestPcieIltrOvrdForceNl;
  UINT8   TestPcieIltrOvrdNlMode;
  UINT8   TestPcieIltrOvrdNlM;
  UINT16  TestPcieIltrOvrdNstl;




  UINT8   PcieVcLimLock;
  UINT8   PcieVCmCmpLim;
  UINT8   PcieVCpCmpLim;
  UINT8   PcieVCmPLim;
  UINT8   PcieVCmNpLim;
  UINT8   PcieVCpPLim;
  UINT8   PcieVCpNpLim;




  UINT8   TestPchMemCloseStateEn;
  UINT8   TestPchInternalObffEn;
  UINT8   TestPchExternalObffEn;
  UINT8   TestPchClientObffEn;
  UINT8   TestPchCxObffEntryDelay;
  UINT8   TestPchPcieEqPh2Override[28];
  UINT8   TestPchPcieEqPh2Preset[28];

  UINT8   TestPchSataLtrConfigLock;
  UINT8   TestPchSataLtrEnable;
  UINT8   TestPchSataLtrOverride;
  UINT8   TestPchSataSnoopLatencyOverrideMultiplier;
  UINT16  TestPchSataSnoopLatencyOverrideValue;
  UINT8   TestPmcDbgModeLock;
  UINT8   TestSlpsxStrPolLock;
  
  
  
  UINT8   PttSuppressCommandSend;

  UINT8   GtCoreOnOff;




  UINT8   CpuSvBootMode;
  UINT8   PrefetchNonPrefetchRatio;
  UINT8   JtagAPIEn;
  UINT8   RestoreCliAfterTestDone;
  UINT8   TxtVgaSupport;
  UINT8   BoardType;
  UINT8   TriStateBit;
  UINT8   MailboxType;
  UINT8   BSPFinalSVLoop;
  UINT8   APFinalSVLoop;
  UINT8   USB_Stop;
  UINT8   ResetLoop;
  UINT8   SvDrng;
  UINT8   LagunaCreditWA;
  UINT8   RubiconCreditWA;
  UINT16  RubiconVC0PostedCreditsData;
  UINT8   RubiconVC0PostedCreditsHeader;
  UINT16  RubiconVC0CompletionCreditsData;
  UINT8   RubiconVC0CompletionCreditsHeader;
  UINT8   SvPcXmlVersion3;
  
  BOOLEAN HangOnAllocationFailure;
  UINT64  ValidationMegaBlockBaseAboveOneMb;
  UINT32  ValidationMegaBlockSizeAboveOneMb;
  UINT8   ValidationMegaBlockUsedPolicyAboveOneMb;
  UINT8   ValidationMegaBlockUnUsedPolicyAboveOneMb;
  
  UINT64  ValidationMegaBlockBaseBelowOneMb;
  UINT32  ValidationMegaBlockSizeBelowOneMb;
  UINT8   ValidationMegaBlockUsedPolicyBelowOneMb;
  UINT8   ValidationMegaBlockUnUsedPolicyBelowOneMb;
  
  UINT64  ValidationMegaBlockBaseAboveFourGb;
  UINT32  ValidationMegaBlockSizeAboveFourGb;
  UINT8   ValidationMegaBlockUsedPolicyAboveFourGb;
  UINT8   ValidationMegaBlockUnUsedPolicyAboveFourGb;

  UINT8   FinalSVReset;
  UINT16  FinalSVResetCount;
  UINT8   SvDimmPopulationWarning;
  UINT8   SvIgnoreXeLimitations;

  UINT8   SV_DMI_GEN1_halt;
  UINT8   SV_nFTS_DMI_auto;
  UINT8   SvDMI_nFTS;
  UINT8   nFTS_auto;
  UINT8   SvPEG_nFTS[3];
  UINT8   nFTS_gen3_auto;
  UINT8   SvPEG_gen3_nccFTS[3];
  UINT8   SvPEG_gen3_ccFTS[3];
  UINT8   SVIAER;
  UINT8   SvScramblerDmi;
  UINT8   SvScramblerPeg[3];
  UINT8   SvScramblerPegGen3[3];
  UINT8   SvDmiSerr;
  UINT8   SvPegSerr[3];

  UINT8   SvSaPegGen3DeEmphasisEn;
  UINT8   SvSaPegGen3EQCTL0_DCTP[16];
  UINT8   SvSaPegGen3EQCTL0_DCRPH[16];
  UINT8   SvSaPegGen3EQCTL0_UCTP[16];



  
  UINT16  SvRemapBaseOverride;

  UINT8   WriteVrefStart;
  UINT8   WriteVrefEnd;
  UINT8   WriteVrefInc;
  UINT8   WriteVrefEyeStart;
  UINT8   WriteVrefEyeMin;
  UINT8   WriteVrefEyeHeight;
  UINT8   ReadVref;
  UINT8   InternalReadVref;
  UINT8   AggressiveTraining;
  UINT8   CommandTraining;
  UINT8   ODTStretchFail;
  
  UINT8   SystemAgentClockGatingEnable;
  UINT8   PciePllShutdownEnable;
  UINT8   BusMastering;
  UINT8   NewPlatformConfigPciRegsView;
  UINT8   PchPmDemandMsg;  




  UINT8   TestRtd3PcieRootports;
  UINT8   TestRtd3Usb;
  UINT8   TestRtd3AudioCodec;
  UINT8   TestRtd3HdAudio;
  UINT8   TestRtd3TouchPanel;
  UINT8   Rpls14Ssd3ReworkStatus;

  UINT8   TestPchIshFpakEnable;

  
  
  
  UINT8   TestCpuPcieAspmOc[4];
  UINT8   PcieRootPortDekelBreakPoint;
  UINT8   PcieSetSecuredRegisterLock;
  UINT8   PcieRootPortGen3EqPh3Bypass[4];
  UINT8   PcieRootPortGen4EqPh3Bypass[4];
  UINT8   PcieRootPortGen5EqPh3Bypass[4];
  UINT8   PcieRootPortGen3EqPh23Bypass[4];
  UINT8   PcieRootPortGen4EqPh23Bypass[4];
  UINT8   PcieRootPortGen5EqPh23Bypass[4];
  UINT8   CpuPcieGen3PresetCoeffSelection[4];
  UINT8   CpuPcieGen4PresetCoeffSelection[4];
  UINT8   CpuPcieGen5PresetCoeffSelection[4];
  UINT8   PcieHwEqGen3Coeff0Cm[4];
  UINT8   PcieHwEqGen3Coeff1Cm[4];
  UINT8   PcieHwEqGen3Coeff2Cm[4];
  UINT8   PcieHwEqGen3Coeff3Cm[4];
  UINT8   PcieHwEqGen3Coeff4Cm[4];
  UINT8   PcieHwEqGen3Coeff0Cp[4];
  UINT8   PcieHwEqGen3Coeff1Cp[4];
  UINT8   PcieHwEqGen3Coeff2Cp[4];
  UINT8   PcieHwEqGen3Coeff3Cp[4];
  UINT8   PcieHwEqGen3Coeff4Cp[4];
  UINT8   PcieHwEqGen4Coeff0Cm[4];
  UINT8   PcieHwEqGen4Coeff1Cm[4];
  UINT8   PcieHwEqGen4Coeff2Cm[4];
  UINT8   PcieHwEqGen4Coeff3Cm[4];
  UINT8   PcieHwEqGen4Coeff4Cm[4];
  UINT8   PcieHwEqGen4Coeff0Cp[4];
  UINT8   PcieHwEqGen4Coeff1Cp[4];
  UINT8   PcieHwEqGen4Coeff2Cp[4];
  UINT8   PcieHwEqGen4Coeff3Cp[4];
  UINT8   PcieHwEqGen4Coeff4Cp[4];
  UINT8   PcieHwEqGen5Coeff0Cm[4];
  UINT8   PcieHwEqGen5Coeff1Cm[4];
  UINT8   PcieHwEqGen5Coeff2Cm[4];
  UINT8   PcieHwEqGen5Coeff3Cm[4];
  UINT8   PcieHwEqGen5Coeff4Cm[4];
  UINT8   PcieHwEqGen5Coeff0Cp[4];
  UINT8   PcieHwEqGen5Coeff1Cp[4];
  UINT8   PcieHwEqGen5Coeff2Cp[4];
  UINT8   PcieHwEqGen5Coeff3Cp[4];
  UINT8   PcieHwEqGen5Coeff4Cp[4];
  UINT8   CpuPcieGen3PcetTimer[4];
  UINT8   CpuPcieGen4PcetTimer[4];
  UINT8   CpuPcieGen5PcetTimer[4];
  UINT8   CpuPcieGen3TsLockTimer[4];
  UINT8   CpuPcieGen4TsLockTimer[4];
  UINT8   CpuPcieGen5TsLockTimer[4];
  UINT8   CpuPcieGen3NumberOfPresetCoeffList[4];
  UINT8   CpuPcieGen4NumberOfPresetCoeffList[4];
  UINT8   CpuPcieGen5NumberOfPresetCoeffList[4];
  UINT8   CpuPcieGen3PreCursor[0x14];
  UINT8   CpuPcieGen3PostCursor[0x14];
  UINT8   CpuPcieGen4PreCursor[0x14];
  UINT8   CpuPcieGen4PostCursor[0x14];
  UINT8   CpuPcieGen5PreCursor[0x14];
  UINT8   CpuPcieGen5PostCursor[0x14];
  UINT8   PcieRootPortGen3TxOverride[4];
  UINT8   PcieRootPortGen4TxOverride[4];
  UINT8   PcieRootPortGen5TxOverride[4];
  UINT8   PcieRootPortAggressiveDynamicClockGating[4];
  UINT8   CpuPcieFomsCp; 
  UINT8   SkipLinkTraining;
  UINT8   ForceDetection;
  UINT8   DGWait;
  
  
  
  UINT8   SvPegArifen[4];
  UINT8   DlsuldlsdEnable;
  UINT8   CpuPcieSerr[4];
  UINT8   TestCpuPcieEqPh2Override[4];
  UINT8   PcieGen3HwEqOverride[4];
  UINT8   PcieGen4HwEqOverride[4];
  UINT8   PcieGen5HwEqOverride[4];

  UINT32  WrcVcEnable;
  UINT64  WrcVcAllocate;
  UINT64  WrcVcClos;
  UINT32  WrcVC0aAllocateBase;
  UINT32  WrcVC0aAllocateMask;

#line 625 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Include\\SetupVariableRestricted.h"
  UINT8   SvLt;
  UINT8   BiosGuardModuleSelection;


  UINT8   TestPchPmErDebugMode;
  UINT8   TestCnviBtInterface;
  UINT8   TestCnviBtUartType;
  UINT8   TestCnviWifiLtrEn;
  UINT8   TestCnviLteCoex;
  UINT8   TestDisableCr0Wp;
  UINT8   Reserved1;
  UINT8   TestCnviSharedXtalClocking;

  
  UINT8   ITbtImrControl;





  
  UINT8   BiosGuard;
  UINT8   BiosGuardSimicsBoot;
#line 649 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Include\\SetupVariableRestricted.h"



  UINT16  PchGraphicsRstPinDelay;
  UINT16  PchGraphicsRstPinPostDelay;





  
  UINT8   PsciPchFeature;
  UINT8   PsciCpuFeature;
#line 663 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Include\\SetupVariableRestricted.h"







  UINT8   ForceRpe;
  UINT32  SimulateRpeCsmeBitMask;
  UINT32  SimulateRpeMaxRetries;





  UINT8   SkipVidDidCheck;

  UINT8   Peg60PcieDump;
  UINT8   Peg10PcieDump;
  UINT8   Peg11PcieDump;
  UINT8   Peg62PcieDump;




  UINT16  VTdReservedRtMemory;



  UINT8   PcieSerl;

  UINT8   EcFanControl;



  UINT8   Usb4ClassOption;



#line 703 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Include\\SetupVariableRestricted.h"
#line 1592 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Include\\SetupVariable.h"
  UINT16  WTASBlockedList[16];
  UINT8   DTbtRtd3OffDelayOptEn;
  
  UINT8   DisableTbtPcieTreeBme;

  UINT8   BtTileMode;
  UINT8   TileS0;
  UINT8   TileS0ix;
  UINT8   TileS4;
  UINT8   TileS5;
  UINT8   SpecialLedConfig;
  UINT16  LedDuration;
  UINT8   AirplaneMode;
  UINT8   StorageRtd3Support;
  UINT8   PmaxDevice;
  UINT8   PmaxAudioCodec;
  UINT8   PmaxWfCamera;
  UINT8   PmaxUfCamera;
  UINT8   PmaxFlashDevice;
  UINT8   SecondConfigReworkOption; 
  UINT8   MPdtSupport;

  UINT8   DiscreteTbtPlatformConfigurationSupport;
  
  
  
  UINT16  WwanTOn2ResDelayMs;
  UINT16  WwanTOnRes2PerDelayMs;
  UINT16  WwanTOnPer2PdsDelayMs;
  UINT16  WwanTRes2OffDelayMs;
  UINT16  WwanTOffDisDelayMs;
  UINT16  WwanTResTogDelayMs;
  UINT16  WwanTRes2PdsDelayMs;
  UINT16  WwanTPer2ResDelayMs;
  
  
  
  UINT8   WwanFwFlashDevice;
  UINT8   DtbtCmSupport;
  UINT8   Usb4CmMode;
  
  
  
  UINT8   Usb4CmVer2Support;
  
  
  
  
  
  
  UINT8   DpInExternalEn;
  UINT8   PepUfs0;
  UINT8   PepUfs1;
  UINT8   ClosedLidWovLightingSupport;
  
  
  
  UINT8   TestEnableTcssCovTypeA[4]; 
  
  
  
  UINT8   TestDisableTcssPortUcxxSupport[10]; 
  UINT16  CpuBclkFreq;
  UINT8   PegDmiClkFreq;
  UINT8   DccClkCtrl;
  UINT8   UsbcDataRoleSwapPlatformDisable; 
  
  
  
  UINT8   TwoMapleRidgeBoard;
  
  
  
  UINT8   MipiCam_Link0_DriverData_FlashID;
  UINT8   MipiCam_Link1_DriverData_FlashID;
  UINT8   MipiCam_Link2_DriverData_FlashID;
  UINT8   MipiCam_Link3_DriverData_FlashID;
  UINT8   MipiCam_Link4_DriverData_FlashID;
  UINT8   MipiCam_Link5_DriverData_FlashID;

  UINT16  PchSerialIoTimingSSH6;  
  UINT16  PchSerialIoTimingSSL6;  
  UINT16  PchSerialIoTimingSSD6;  
  UINT16  PchSerialIoTimingFMH6;  
  UINT16  PchSerialIoTimingFML6;  
  UINT16  PchSerialIoTimingFMD6;  
  UINT16  PchSerialIoTimingFPH6;  
  UINT16  PchSerialIoTimingFPL6;  
  UINT16  PchSerialIoTimingFPD6;  
  UINT16  PchSerialIoTimingHSH6;  
  UINT16  PchSerialIoTimingHSL6;  
  UINT16  PchSerialIoTimingHSD6;  
  UINT16  PchSerialIoTimingM0CC;  
  UINT16  PchSerialIoTimingM1CC;  
  UINT8   PepI2c6;

  UINT16  PchSerialIoTimingSSH7;  
  UINT16  PchSerialIoTimingSSL7;  
  UINT16  PchSerialIoTimingSSD7;  
  UINT16  PchSerialIoTimingFMH7;  
  UINT16  PchSerialIoTimingFML7;  
  UINT16  PchSerialIoTimingFMD7;  
  UINT16  PchSerialIoTimingFPH7;  
  UINT16  PchSerialIoTimingFPL7;  
  UINT16  PchSerialIoTimingFPD7;  
  UINT16  PchSerialIoTimingHSH7;  
  UINT16  PchSerialIoTimingHSL7;  
  UINT16  PchSerialIoTimingHSD7;  
  UINT16  PchSerialIoTimingM0CD;  
  UINT16  PchSerialIoTimingM1CD;  
  UINT8   PepI2c7;
  UINT8   DTbtDpInSupport;
  UINT16  WwanOemSvid;
  UINT16  WwanSvidTimeout;
  UINT8   BtLedConfig;
  UINT8   BtLedPulseDuration;
  UINT8   BtLedPulseInterval;
  UINT32  WifiRegulatoryConfigurations;
  UINT32  WifiUartConfigurations;
  UINT32  WifiUnii4;
  UINT32  WifiIndoorControl;
  UINT8   PepEmmc;
  UINT8   SdCardD3ColdDisable;  
  UINT8   SDCardD3ColdSupport; 
  UINT8   WirelessCnvConfigDevice;
  UINT16  CurrentCpuBclkFreq;
  UINT16  CurrentPegDmiClkFreq;
  UINT8   WirelessLowBandIsolation;  
  UINT8   WirelessHighBandIsolation; 
  UINT8   WgdsWiFiSarDeltaGroupNumber;
  UINT8   WgdsWiFiSarDeltaGroup4PowerMax1;
  UINT8   WgdsWiFiSarDeltaGroup4PowerChainA1;
  UINT8   WgdsWiFiSarDeltaGroup4PowerChainB1;
  UINT8   WgdsWiFiSarDeltaGroup4PowerMax2;
  UINT8   WgdsWiFiSarDeltaGroup4PowerChainA2;
  UINT8   WgdsWiFiSarDeltaGroup4PowerChainB2;
  UINT8   WgdsWiFiSarDeltaGroup4PowerMax3;
  UINT8   WgdsWiFiSarDeltaGroup4PowerChainA3;
  UINT8   WgdsWiFiSarDeltaGroup4PowerChainB3;
  UINT8   WgdsWiFiSarDeltaGroup5PowerMax1;
  UINT8   WgdsWiFiSarDeltaGroup5PowerChainA1;
  UINT8   WgdsWiFiSarDeltaGroup5PowerChainB1;
  UINT8   WgdsWiFiSarDeltaGroup5PowerMax2;
  UINT8   WgdsWiFiSarDeltaGroup5PowerChainA2;
  UINT8   WgdsWiFiSarDeltaGroup5PowerChainB2;
  UINT8   WgdsWiFiSarDeltaGroup5PowerMax3;
  UINT8   WgdsWiFiSarDeltaGroup5PowerChainA3;
  UINT8   WgdsWiFiSarDeltaGroup5PowerChainB3;
  UINT8   WgdsWiFiSarDeltaGroup6PowerMax1;
  UINT8   WgdsWiFiSarDeltaGroup6PowerChainA1;
  UINT8   WgdsWiFiSarDeltaGroup6PowerChainB1;
  UINT8   WgdsWiFiSarDeltaGroup6PowerMax2;
  UINT8   WgdsWiFiSarDeltaGroup6PowerChainA2;
  UINT8   WgdsWiFiSarDeltaGroup6PowerChainB2;
  UINT8   WgdsWiFiSarDeltaGroup6PowerMax3;
  UINT8   WgdsWiFiSarDeltaGroup6PowerChainA3;
  UINT8   WgdsWiFiSarDeltaGroup6PowerChainB3;
  UINT8   WgdsWiFiSarDeltaGroup7PowerMax1;
  UINT8   WgdsWiFiSarDeltaGroup7PowerChainA1;
  UINT8   WgdsWiFiSarDeltaGroup7PowerChainB1;
  UINT8   WgdsWiFiSarDeltaGroup7PowerMax2;
  UINT8   WgdsWiFiSarDeltaGroup7PowerChainA2;
  UINT8   WgdsWiFiSarDeltaGroup7PowerChainB2;
  UINT8   WgdsWiFiSarDeltaGroup7PowerMax3;
  UINT8   WgdsWiFiSarDeltaGroup7PowerChainA3;
  UINT8   WgdsWiFiSarDeltaGroup7PowerChainB3;
  UINT8   WgdsWiFiSarDeltaGroup8PowerMax1;
  UINT8   WgdsWiFiSarDeltaGroup8PowerChainA1;
  UINT8   WgdsWiFiSarDeltaGroup8PowerChainB1;
  UINT8   WgdsWiFiSarDeltaGroup8PowerMax2;
  UINT8   WgdsWiFiSarDeltaGroup8PowerChainA2;
  UINT8   WgdsWiFiSarDeltaGroup8PowerChainB2;
  UINT8   WgdsWiFiSarDeltaGroup8PowerMax3;
  UINT8   WgdsWiFiSarDeltaGroup8PowerChainA3;
  UINT8   WgdsWiFiSarDeltaGroup8PowerChainB3;
  UINT8   Rp08D3ColdSupport;
  UINT8   Rp08D3ColdDisable;
  UINT8   Rp08WakeReworkDone;

  UINT32  WifiTASSelectionValue;
  UINT8   RplSAepBoard;
  UINT8   PchDmiGen3RtcoCpre[8];
  UINT8   PchDmiGen3RtcoCpo[8];
  UINT8   DmiGen4RtcoCpre[8];
  UINT8   DmiGen4RtcoCpo[8];
  UINT8   DmiHweq;

  UINT8   ZpoddSuportForVmd;
  UINT8   IsAdlSNative;
  UINT8   IsRpeSupported;
  UINT8   IsRplFamily;

  UINT16  BtRfKillTime;
} SETUP_DATA;





















































































typedef struct {
  UINT8   Revision;
  UINT8   CpuRatio;
  UINT8   CpuDefaultRatio;
  UINT8   CpuRatioOverride;
  UINT8   Peci;
  UINT8   HyperThreading;



  UINT8   ActiveCoreCount;
  UINT8   BistOnReset;
  UINT8   JtagC10PowerGateDisable;
  UINT8   EnableGv;
  UINT8   RaceToHalt;
  UINT8   EnableHwp;
  UINT8   EnableItbm;
  UINT8   Reserved;

  UINT8   EnablePerCorePState;
  UINT8   EnableHwpAutoPerCorePstate;
  UINT8   EnableHwpAutoEppGrouping;
  UINT8   EnableEpbPeciOverride;
  UINT8   EnableFastMsrHwpReq;

  UINT8   BootFrequency;
  UINT8   EnableCx;
  UINT8   EnableC1e;
  UINT8   TurboMode;
  UINT32  PowerLimit1;
  UINT8   LongDurationPwrLimitOverride;
  UINT8   PowerLimit1Time;
  UINT8   PowerLimit2;
  UINT32  PowerLimit2Power;
  UINT8   PowerLimit3Override;
  UINT32  PowerLimit3;
  UINT8   PowerLimit3Time;
  UINT8   PowerLimit3DutyCycle;
  UINT8   PowerLimit3Lock;
  UINT8   PowerLimit4Override;
  UINT32  PowerLimit4;
  UINT8   PowerLimit4Lock;
  UINT8   TurboPowerLimitLock;
  UINT8   PlatformPowerLimit1Enable;
  UINT32  PlatformPowerLimit1Power;
  UINT8   PlatformPowerLimit1Time;
  UINT8   PlatformPowerLimit2Enable;
  UINT32  PlatformPowerLimit2Power;
  UINT8   EnergyEfficientPState;
  UINT8   CStatePreWake;
  UINT8   CStateAutoDemotion;
  UINT8   CStateUnDemotion;
  UINT8   PkgCStateDemotion;
  UINT8   PkgCStateUnDemotion;
  UINT8   EnableThermalMonitor;
  UINT8   PmgCstCfgCtrlLock;
  UINT8   ConfigTdpLevel;
  UINT8   ConfigTdpLock;
  UINT8   ConfigTdpBios;
  UINT8   TimedMwait;
  UINT8   PmgCstCfgCtrIoMwaitRedirection;
  UINT8   InterruptRedirectMode;

  UINT8   HdcControl;
  UINT8   PkgCStateLimit;
  UINT8   CstateLatencyControl1TimeUnit;
  UINT8   CstateLatencyControl2TimeUnit;
  UINT8   CstateLatencyControl3TimeUnit;
  UINT8   CstateLatencyControl4TimeUnit;
  UINT8   CstateLatencyControl5TimeUnit;
  UINT16  CstateLatencyControl1Irtl;
  UINT16  CstateLatencyControl2Irtl;
  UINT16  CstateLatencyControl3Irtl;
  UINT16  CstateLatencyControl4Irtl;
  UINT16  CstateLatencyControl5Irtl;

  UINT32  Custom1PowerLimit1Power;
  UINT32  Custom1PowerLimit2Power;
  UINT8   Custom1PowerLimit1Time;
  UINT8   Custom1TurboActivationRatio;
  UINT32  Custom2PowerLimit1Power;
  UINT32  Custom2PowerLimit2Power;
  UINT8   Custom2PowerLimit1Time;
  UINT8   Custom2TurboActivationRatio;
  UINT32  Custom3PowerLimit1Power;
  UINT32  Custom3PowerLimit2Power;
  UINT8   Custom3PowerLimit1Time;
  UINT8   Custom3TurboActivationRatio;
  UINT8   TStatesEnable;
  UINT8   EnableProcHot;
  UINT8   DisableProcHotOut;
  UINT8   DisableVrThermalAlert;
  UINT8   ProcHotLock;
  UINT8   ProcHotResponse;
  UINT8   TCCActivationOffset;
  UINT8   NumOfCustomPStates;
  UINT8   StateRatio[40];
  UINT8   StateRatioMax16[16];
  UINT8   VT;
  UINT8   AES;
  UINT8   MachineCheck;
  UINT8   MonitorMwait;
  UINT16  DprSize;
  UINT8   HwPrefetcher;
  UINT8   AclPrefetch;
  UINT8   Txt;
  UINT8   LtDprProgramming;
  UINT8   ResetAux;
  UINT8   AcheckRequest;
  UINT8   MsegOpt;
  UINT8   MsegSize;

  UINT8   EcTurboControlMode;
  UINT8   AcBrickCapacity;
  UINT8   EcPollingPeriod;
  UINT8   EcGuardBandValue;
  UINT8   EcAlgorithmSel;

  UINT8   IsTurboRatioDefaultsInitialized;
  UINT8   FlexRatioOverrideDefault;
  UINT8   RatioLimitRatioDefault[8];
  UINT8   RatioLimitRatio[8];
  UINT8   RatioLimitNumCoreDefault[8];
  UINT8   RatioLimitNumCore[8];
  UINT8   AtomRatioLimitRatioDefault[8];
  UINT8   AtomRatioLimitRatio[8];
  UINT8   AtomRatioLimitNumCoreDefault[8];
  UINT8   AtomRatioLimitNumCore[8];
  UINT8   OverclockingLock;

  
  UINT8   Reserved1;
  UINT8   BiosGuardToolsInterface;

  UINT8   DebugInterfaceEnable;
  UINT8   DebugInterfaceLockEnable;
  UINT8   DebugCpuDisabled;

  UINT8   EnableC6Dram;
  UINT8   EnableSgx;              
  UINT8   EpochUpdate;            
  UINT8   ShowEpoch;              
  UINT32  MaxPrmrrSize;           
  UINT32  PrmrrSize;              
  UINT8   ApIdleManner;

  UINT8   ProcessorTraceOutputScheme;
  UINT8   ProcessorTraceMemSize;
  UINT8   ProcessorTraceEnable;

  UINT8   SkipStopPbet;
  UINT8   ThreeStrikeCounterDisable;
  UINT8   EpocFclkFreq;

  
  
  
  UINT8   PsysSlope;
  UINT16  PsysOffset;
  UINT8   PsysOffsetPrefix;
  UINT16  PsysPmax;
  UINT8   VrConfigEnable[5];
  UINT16  AcLoadline[5];
  UINT16  DcLoadline[5];
  UINT16  Psi1Threshold[5];
  UINT16  Psi2Threshold[5];
  UINT16  Psi3Threshold[5];
  UINT8   Psi3Enable[5];
  UINT8   Psi4Enable[5];
  UINT16  ImonSlope[5];
  UINT16  ImonOffset[5];
  UINT8   ImonOffsetPrefix[5];
  UINT16  IccMax[5];
  UINT16  TdcCurrentLimit[5];
  UINT8   TdcEnable[5];
  UINT32  TdcTimeWindow[5];
  UINT8   TdcLock[5];
  UINT8   Irms[5];
  UINT16  VrVoltageLimit[5];
  UINT32  TccOffsetTimeWindow;
  UINT8   TccOffsetClamp;
  UINT8   TccOffsetLock;

  
  
  
  UINT8   FlexOverrideEnable;
  UINT8   MaxEfficiencyRatio;
  UINT8   MaxNonTurboRatio;
  UINT8   FlexRatioOverride;

  UINT8   BusSpeedEnable;
  UINT8   ProcessorBusSpeedOverride;

  UINT8   PciePll;
  UINT8   EnergyEfficientTurbo;

  UINT8   WDTSupportforNextOSBoot;
  UINT16  TimeforNextOSBoot;

  
  
  
  UINT8   OverclockingSupport;

  UINT8   CoreRatioExtensionMode;
  UINT8   CoreMaxOcRatio;
  UINT8   PvdRatioThreshold;
  UINT8   CoreVoltageMode;
  UINT16  CoreVoltageOverride;
  UINT16  CoreVoltageOffset;
  UINT8   CoreVoltageOffsetPrefix;
  UINT16  CoreExtraTurboVoltage;
  UINT8   Avx2RatioOffset;
  UINT8   Avx3RatioOffset;  
  UINT8   RingMaxOcRatio;
  UINT8   RingDownBin;
  UINT8   RingVoltageMode;
  UINT16  RingVoltageOverride;
  UINT16  RingVoltageOffset;
  UINT8   RingVoltageOffsetPrefix;
  UINT16  RingExtraTurboVoltage;

  UINT8   EnableAllThermalFunctions;
  UINT8   CorePllVoltageOffset;
  UINT8   GtPllVoltageOffset;
  UINT8   RingPllVoltageOffset;
  UINT8   SaPllVoltageOffset;
  UINT8   AtomPllVoltageOffset;
  UINT8   McPllVoltageOffset;
  UINT8   TjMaxOffset;

  
  
  
  UINT16 FivrRfiFrequency;
  UINT8  FivrSpreadSpectrum;

  
  
  
  UINT8   AcousticNoiseMitigation;
  UINT8   FastPkgCRampDisable[5];
  UINT8   SlowSlewRate[5];
  UINT8   EnableMinVoltageOverride;
  UINT16  MinVoltageRuntime;
  UINT16  MinVoltageC8;

  UINT8   HwpInterruptControl;
  UINT8   BclkAdaptiveVoltageEnable;

  UINT8   PpinSupport;
  UINT8   PpinEnableMode;

  UINT8   MinRingRatioLimit;
  UINT8   MaxRingRatioLimit;

  UINT8   SafModeDisableBiosGuard; 
  
  UINT32  BclkRfi10KhzFreq[4];
  UINT8   CpuBclkSpread;

  UINT8   AcSplitLock;
  UINT8   Avx2VoltageScaleFactor;
  UINT8   Avx512VoltageScaleFactor;  
  UINT8   ApplyConfigTdp;
  UINT8   HwpLock;
  UINT8   TmeEnable;
  UINT8   SmmMsrSaveStateEnable;
  UINT8   SmmUseDelayIndication;
  UINT8   SmmUseBlockIndication;
  UINT8   SmmUseSmmEnableIndication;
  UINT8   SmmProcTraceEnable;
  
  
  
  UINT8   ActiveSmallCoreCount;
  
  
  
  UINT16  PerCoreHtDisable;



  UINT8   CoreVfPointOffsetMode;
  UINT8   CoreVfPointCount;
  UINT16  CoreVfPointOffset[0xF];
  UINT8   CoreVfPointOffsetPrefix[0xF];

  UINT8   CoreVfConfigScope;
  UINT16  PerCoreVoltageOffset[8];
  UINT8   PerCoreVoltageOffsetPrefix[8];
  UINT8   Reserved2[2];




  UINT8   RingVfPointOffsetMode;
  UINT8   RingVfPointCount;
  UINT16  RingVfPointOffset[0xF];
  UINT8   RingVfPointOffsetPrefix[0xF];

  
  
  
  UINT8   AllSmallCoreCount;
  UINT8   AllBigCoreCount;

  UINT8   DualTauBoost;
  
  
  
  UINT8   AtomL2MaxOcRatio;  

  UINT8   AtomL2VoltageMode;

  UINT16  AtomL2VoltageOverride;

  UINT16  AtomL2VoltageOffset;

  UINT8   AtomL2VoltageOffsetPrefix;

  UINT16  AtomL2ExtraTurboVoltage;

  UINT8   AtomClusterRatio[4];

  UINT8   PerCoreRatioOverride;
  UINT8   PerCoreRatio[8];
  
  
  
  UINT8   UnlimitedIccMax;            

  
  
  
  UINT8   VccCoreOverrideEnable;      
  UINT16  VccCoreOverrideVoltage;     
  UINT8   VccStOverrideEnable;        
  UINT16  VccStOverrideVoltage;       
  UINT8   VccSaOverrideEnable;        
  UINT16  VccSaOverrideVoltage;       
  UINT8   VccSfrOcOverrideEnable;     
  UINT16  VccSfrOcOverrideVoltage;    
  UINT8   VccSfrOverrideEnable;       
  UINT16  VccSfrOverrideVoltage;      
  UINT8   VccIoOverrideEnable;        
  UINT16  VccIoOverrideVoltage;       

  
  
  
  UINT8   CoreVrDcLLOverrideEnable;
  UINT8   CoreDcLoadline;

  
  
  
  UINT8   PreWake;
  UINT8   RampUp;
  UINT8   RampDown;

  UINT8   AvxDisable;
  UINT8   Avx3Disable;  
  
  
  
  UINT8  SaVoltageMode;
  UINT16 SaVoltageOverride;
  UINT16 SaExtraTurboVoltage;

  
  
  
  UINT8   TvbRatioClipping;
  UINT8   TvbVoltageOptimization;
  UINT8   Reserved4[3];

  
  
  
  UINT16  VccInAuxImonIccImax;
  UINT16  VccInAuxImonSlope;
  UINT16  VccInAuxImonOffset;
  UINT8   VccInAuxImonOffsetPrefix;

  
  
  
  UINT8  EnableVsysCritical;
  UINT8  VsysFullScale;          
  UINT8  VsysCriticalThreshold;  
  UINT8  VsysAssertionDeglitchMantissa;
  UINT8  VsysAssertionDeglitchExponent;
  UINT8  VsysDeassertionDeglitchMantissa;
  UINT8  VsysDeassertionDeglitchExponent;

  
  
  
  UINT8   FivrSpectrumEnable;
  
  
  
  UINT32  CpuBclkOcFrequency;

  
  
  
  UINT8   PerCoreDisable[8];  
  UINT8   PerAtomDisable[16]; 

  
  
  
  UINT8   VrPowerDeliveryDesign;

  UINT8   CrashLogGprs;

  UINT16  PerAtomClusterVoltageOffset[4];
  UINT8   PerAtomClusterVoltageOffsetPrefix[4];

  
  
  
  UINT8   Vcc1p8OverrideEnable;
  UINT16  Vcc1p8OverrideVoltage;
  UINT8   Vcc1p05OverrideEnable;
  UINT16  Vcc1p05OverrideVoltage;
  UINT8   VccDd2OverrideEnable;
  UINT16  VccDd2OverrideVoltage;

  
  
  
  UINT16  IccLimit[5];

  
  
  
  UINT8   IaCepEnable;
  UINT8   GtCepEnable;

  UINT8   VccInAuxEnable;
  UINT16  VccInAuxVoltage;
  UINT8   RichtekVccIaEnable;
  UINT8   RichtekVccGtEnable;
  UINT8   RichtekVccIaFixedVidMode;
  UINT8   RichtekVccGtFixedVidMode;
  UINT16  RichtekVccIaVoltage;
  UINT16  RichtekVccGtVoltage;

  
  
  
  UINT8   DlvrBypassModeEnable; 

  
  
  
  UINT8   SaPllFreqOverride;

  
  
  
  UINT8   PllMaxBandingRatio;  

  
  
  
  UINT8   TscDisableHwFixup;
  UINT8   Reserved5[1];

  
  
  
  UINT8   IaIccUnlimitedMode;
  UINT16  IaIccMax;
  UINT8   GtIccUnlimitedMode;
  UINT16  GtIccMax;
  UINT8   PerCoreDisableConfiguration;
  
  
  
  UINT8   GameCompatibilityMode;
  
  
  
  UINT8   TvbDownBinsTempThreshold0;
  UINT8   TvbTempThreshold0;
  UINT8   TvbTempThreshold1;
  UINT8   TvbDownBinsTempThreshold1;
  UINT8   FllOcModeEn;
  UINT8   FllOverclockMode;

  UINT32  PerCoreDisableOriMask;
  UINT8   PerCoreDisable1[32];
  UINT8   Etvb;




  UINT8   PostedInterruptCapability;







  UINT8   ForceUnlockAES;
  
  
  
  UINT8   HwpReqFastUncoreMsr;
  UINT8   ThreadInfoFastUncoreMsr;

  
  UINT64  TmeExclusionBase;
  UINT64  TmeExclusionLength;



  
  
  
  UINT8   EnableFastVmode[5];
  UINT8   IsBootFrequencyDefaultsInitialized;
  UINT8   BootFrequencyDefault;
  UINT8   TurboModeDefault;
  UINT8   UnderVoltProtection;
  UINT8   OverclockingMsrStatus;
  UINT8   StepDownMode;
  UINT8   PlatformAtxTelemetryUnit;
  UINT32  VsysFullScale1;
  UINT32  VsysCriticalThreshold1;
  UINT32  PsysFullScale;
  UINT32  PsysCriticalThreshold;
  UINT8   Reserved6[44];
} CPU_SETUP;










typedef struct {
  UINT16  CpuFamilyModel;
  UINT16  CpuExtendedFamilyModel;
  UINT8   CpuStepping;
  UINT8   EdramSupported;

  
  
  
  UINT8  CoreVrLocked;
  UINT8  GtVrLocked;
  UINT8  SaVrLocked;
  UINT8  TccSupported;

  
  
  
  UINT8  FastVmodeSupported;
} CPU_SETUP_VOLATILE_DATA;










typedef struct {
  UINT8                DTbtContollersNumber;
  UINT8                ITbtRootPortsNumber;
  UINT8                TcssCpuXhciPortSupport[4];
} TBT_SETUP_VOLATILE_DATA;














typedef struct {
  UINT8  Revision;
  
  
  
  UINT8  MeFirmwareInfo;
  UINT8  MeImageType;
  UINT8  MeFwDowngrade;
  UINT8  CommsHubEnable;

  UINT8  HeciTimeouts;
  UINT8  DidInitStat;
  UINT8  DisableCpuReplacedPolling;
  UINT8  DisableMessageCheck;
  UINT8  SkipMbpHob;
  UINT8  HeciCommunication2;
  UINT8  KtDeviceEnable;
  UINT8  DisableD0I3SettingForHeci;
  UINT8  MctpBroadcastCycle;

  UINT8  ChangeEps;
  UINT8  UnconfigOnRtcAvailable;
  UINT8  MeUnconfigOnRtcClear;
  UINT8  CoreBiosDoneEnabled;
  UINT8  EndOfPostMessage;
  UINT8  MeJhiSupport;

  
  
  
  UINT8  Amt;
  UINT8  AmtbxHotKeyPressed;        
  UINT8  AmtbxSelectionScreen;      
  UINT8  HideUnConfigureMeConfirm;  
  UINT8  MebxDebugMsg;              
  UINT8  UnConfigureMe;
  UINT8  AmtCiraRequest;
  UINT8  AmtCiraTimeout;            
  UINT8  UsbProvision;
  UINT8  FwProgress;

  
  
  
  UINT8  AsfSensorsTable;

  
  
  
  UINT8  WatchDogEnabled;
  UINT16 WatchDogTimerOs;
  UINT16 WatchDogTimerBios;

  
  
  
  UINT8  MebxNonUiTextMode;         
  UINT8  MebxUiTextMode;            
  UINT8  MebxGraphicsMode;          

  
  
  
  UINT8  ExtendMeMeasuredBoot;

  
  
  
  UINT8  AutoArbSvnCommit;

  
  
  
  UINT8  BiosReflash;
  UINT8  BiosSetup;
  UINT8  BiosPause;
  UINT8  SecureBootExposureToFw;
  UINT8  vProTbtDock;

  
  
  
  UINT8  MacPassThrough;

  
  
  
  UINT8  OcrBootHttps;
  UINT8  OcrBootPba;
  UINT8  OcrBootWinRe;
  UINT8  OcrAmtDisSecBoot;

  
  
  
  UINT8  EnableRpe;
  UINT8  RpeSsdEraseRealMode;

  
  UINT8  CseDataResilience;

  
  
  
  
  UINT8  HeciCommunication;
  UINT8  HeciCommunication3;
  UINT8  HostResetNotification;
  UINT8  ManufRstAndHaltOnS3Resume;
  UINT8  SendDidMsgRestricted;

  
  UINT8  CpuTypeEmulation;
  UINT8  CLINKDisableOverride;
  UINT8  VproAllowed;
  
  
  
} ME_SETUP;















typedef struct {
  
  
  
  UINT8  Revision;
  UINT8  LpeEnable;
  UINT8  LpeEraseAll;
  UINT8  LpeEraseSSD;
  UINT8  LpeClearTPM;
  UINT8  LpeOemCustumAction;
  UINT8  LpeClearNvm;
  UINT8  LpeBiosReloadGoldenConfig;
  UINT8  LpeCsmeUnconfigure;
  UINT8  LpeSsdEraseRealMode;
} LPE_SETUP;





























































typedef struct {
  UINT8   Revision;
  UINT8   BdatEnable;

  
  
  
  UINT8   XmpProfileEnable;
  UINT16  MemoryVoltage;
  
  
  
  UINT8   DdrRefClk;
  UINT8   DdrRatio;
  UINT8   DdrOddRatioMode;  
  UINT8   tCL;
  UINT8   tCWL;
  UINT16  tFAW;
  UINT16  tRAS;
  UINT8   tRCDtRP;
  UINT16  tREFI;
  UINT16  tRFC;
  UINT8   tRRD;
  UINT8   tRTP;
  UINT8   tWR;
  UINT8   tWTR;
  UINT8   NModeSupport;
  
  
  
  UINT8   tCLDefault;
  UINT8   tCWLDefault;
  UINT16  tFAWDefault;
  UINT16  tRASDefault;
  UINT8   tRCDtRPDefault;
  UINT16  tREFIDefault;
  UINT16  tRFCDefault;
  UINT8   tRRDDefault;
  UINT8   tRTPDefault;
  UINT8   tWRDefault;
  UINT8   tWTRDefault;
  UINT8   NModeDefault;

  UINT16  GtDid;                    
  UINT8   IgdBootType;
  UINT8   DisplayPipeB;
  UINT8   LcdPanelType;

  UINT8   LcdPanelScaling;

  UINT8   EnableRenderStandby;
  UINT8   IgdLcdBlc;
  UINT8   AlsEnable;
  UINT8   ActiveLFP;
  UINT8   LfpColorDepth;
  UINT8   GTTSize;
  UINT8   ApertureSize;
  UINT8   GtPsmiSupport;
  UINT8   GtPsmiRegionSize;
  UINT8   PanelPowerEnable;
  UINT8   PmSupport;
  UINT8   PeiGraphicsPeimInit;
  UINT8   PavpEnable;
  UINT8   GopConfigEnable;  
  UINT8   VbtSelect;
  UINT8   LidStatusPolling;  
  UINT8   T3Timing;  
  UINT8   VbiosBrightness;
  UINT8   CdynmaxClampEnable;
  UINT8   CdClock;
  UINT8   GtFreqMax;
  UINT8   DisableTurboGt;
  UINT8   SkipCdClockInit;
  UINT8   RC1pFreqEnable;
  UINT8   SriovEnable;  
  UINT8   SriovMmioSizeAbove4Gb;  
  UINT8   GtProchotEnable;  
  
  
  
  UINT8   BclkOverride;
  UINT32  BclkFrequency;

  
  
  
  UINT8   PegAspm[4];
  UINT8   Peg0Enable;
  UINT8   Peg1Enable;
  UINT8   Peg2Enable;
  UINT8   Peg3Enable;
  UINT8   Peg0PowerDownUnusedLanes;
  UINT8   Peg1PowerDownUnusedLanes;
  UINT8   Peg2PowerDownUnusedLanes;
  UINT8   Peg3PowerDownUnusedLanes;


  UINT8   TestStrongRootPointTxEqEnable; 

  UINT8   PegMaxPayload[4];
  UINT8   Peg0LtrEnable;
  UINT8   Peg1LtrEnable;
  UINT8   Peg2LtrEnable;
  UINT8   Peg3LtrEnable;
  UINT8   Peg0ObffEnable;
  UINT8   Peg1ObffEnable;
  UINT8   Peg2ObffEnable;
  UINT8   Peg3ObffEnable;
  UINT8   InitAspmAfterOprom;
  UINT8   PegRootPortHPE[4];



  
  
  
  UINT8   PegExtraBusRsvd[4];
  UINT16  PegMemRsvd[4];
  UINT8   PegIoRsvd[4];

  UINT8   EpgEnable;
  UINT16  Idd3n;
  UINT16  Idd3p;

  
  
  
  UINT8   IgdDvmt50PreAlloc;
  UINT8   IgdDvmt50TotalAlloc;  
  
  
  
  UINT8   SaDevice4;
  UINT8   EnableVtd;
  UINT8   EnableAbove4GBMmio;
  UINT8   GnaEnable;
  UINT8   SaIpuEnable;
  UINT8   SaIpuImrConfiguration;
  UINT8   EdramTestMode;
  UINT8   CpuTraceHubMode;
  UINT8   CpuTraceHubMemReg0Size;
  UINT8   CpuTraceHubMemReg1Size;
  
  
  
  UINT8   X2ApicOptOut;
  UINT8   DmaControlGuarantee;
  UINT8   VtdIgdEnable;
  UINT8   VtdIpuEnable;
  UINT8   VtdIopEnable;
  
  
  
  UINT8   DmiMaxLinkSpeed;

  UINT8   DmiDeEmphasis;
  UINT8   DmiGen3EqPh2Enable;
  UINT8   DmiGen3EqPh3Method;
  UINT8   DmiGen3ProgramStaticEq;
  UINT8   DmiGen3RootPortPreset[8];
  UINT8   DmiGen3EndPointPreset[8];
  UINT8   DmiGen3EndPointHint[8];
  UINT8   DmiGen3RxCtlePeaking[4];
  UINT8   DmiAspm;
  UINT8   DmiAspmCtrl;
  UINT8   DmiAspmL1ExitLatency;
  
  UINT8   AutoNsg;
  UINT8   NumStopGrant;
  
  UINT8   PrimaryDisplay;
  UINT8   PcieCardSelect;
  UINT16  DelayAfterPwrEn;
  UINT16  DelayAfterHoldReset;
  UINT8   InternalGraphics;
  
  UINT8   GfxTurboIMON;
  UINT8   PcieMultipleSegmentEnabled;
  
  UINT8   TcssItbtPcie0En;
  UINT8   TcssItbtPcie1En;
  UINT8   TcssItbtPcie2En;
  UINT8   TcssItbtPcie3En;
  UINT8   TcssXhciEn;
  UINT8   TcssXdciEn;
  UINT8   TcssDma0En;
  UINT8   TcssDma1En;

  
  UINT8   TcssVccstStatus;
  
  UINT8   UsbOverride;
  
  UINT8   D3ColdEnable;
  
  UINT8   D3HotEnable;

  
  UINT8   PtmEnabled[4];
  
  
  
  UINT8   SaPcieItbtLtrEnable[4];
  UINT8   SaPcieItbtSnoopLatencyOverrideMode[4];
  UINT8   SaPcieItbtSnoopLatencyOverrideMultiplier[4];
  UINT16  SaPcieItbtSnoopLatencyOverrideValue[4];
  UINT8   SaPcieItbtNonSnoopLatencyOverrideMode[4];
  UINT8   SaPcieItbtNonSnoopLatencyOverrideMultiplier[4];
  UINT16  SaPcieItbtNonSnoopLatencyOverrideValue[4];
  UINT8   SaPcieItbtForceLtrOverride[4];
  UINT8   SaPcieItbtLtrConfigLock[4];
  
  
  
  UINT8   CpuCrashLogDevice;

  
  
  
  UINT8   VmdSupported;
  UINT8   VmdEnable;
  UINT8   VmdPort[31];
  UINT8   VmdPortDev[31];
  UINT8   VmdPortFunc[31];
  UINT8   VmdPortPresent[31];
  UINT8   VmdCfgBarSize;
  UINT8   VmdCfgBarAttr;
  UINT8   VmdMemBarSize1;
  UINT8   VmdMemBar1Attr;
  UINT8   VmdMemBarSize2;
  UINT8   VmdMemBar2Attr;
  UINT8   VmdPortAPresent;
  UINT8   VmdPortBPresent;
  UINT8   VmdPortCPresent;
  UINT8   VmdPortDPresent;
  UINT8   RaidR0;
  UINT8   RaidR1;
  UINT8   RaidR10;
  UINT8   RaidR5;
  UINT8   Rrt;
  UINT8   RrtOnlyEsata;
  UINT8   OptaneMemory;
  UINT8   VmdRsvd[2];

  
  
  UINT8   DisplayDdiPort1;
  UINT8   DisplayDdiPort2;
  UINT8   DisplayDdiPort3;
  UINT8   DisplayDdiPort4;
  
  
  
  
  
  
  UINT8   HobBufferSize;
  UINT8   EccSupport;
  UINT8   MaxTolud;
  UINT16  DdrFreqLimit;
  UINT8   SpdProfileSelected;
  UINT8   MrcTimeMeasure;
  UINT8   MrcFastBoot;
  UINT8   RmtPerTask;
  UINT8   TrainTrace;
  UINT8   ChHashOverride;
  UINT8   ChHashEnable;
  UINT16  ChHashMask;
  UINT8   ChHashInterleaveBit;
  UINT8   PerBankRefresh;
  UINT8   Vc1ReadMeter;
  UINT8   StrongWkLeaker;
  UINT8   ForceSingleRank;
  UINT8   LpddrMemWriteLatencySet;
  UINT8   RetrainOnFastFail;
  UINT8   Ddr4OneDpc;
  UINT8   SafeMode;
  UINT8   BdatTestType;
  UINT8   RMTLoopCount;
  UINT8   MemTestOnWarmBoot;
  UINT8   PowerDownMode;
  UINT8   PwdwnIdleCounter;
  UINT8   DisPgCloseIdleTimeout;
  UINT8   Ibecc;
  UINT8   IbeccOperationMode;
  UINT8   IbeccProtectedRangeEnable[8];
  UINT32  IbeccProtectedRangeBase[8];
  UINT32  IbeccProtectedRangeMask[8];
  UINT8   EccDftEn;
  UINT8   Write0;



  UINT8   ForceRetrainPath;
  UINT8   EnCmdRate;
  UINT8   CmdTriStateDis;
  UINT8   EnLA;
  UINT8   WeaklockEn;
  UINT8   AsyncOdtDis;
  UINT8   OpportunisticRead;
  UINT8   MemStackMode;
  UINT8   StackModeChBit;
  UINT8   Disable2CycleBypass;

  UINT8   ExitMode;
  UINT8   RankInterleave;
  UINT8   EnhancedInterleave;
  UINT8   PcuDdrVoltage;

  UINT8   BerEnable;
  UINT64  BerAddress[4];

  UINT8   VttTermination;
  UINT8   VttCompForVsshi;

  
  
  
  
  UINT8   tRRSG;
  UINT8   tRRDG;
  UINT8   tRRDR;
  UINT8   tRRDD;
  
  UINT8   tWRSG;
  UINT8   tWRDG;
  UINT8   tWRDR;
  UINT8   tWRDD;
  
  UINT8   tWWSG;
  UINT8   tWWDG;
  UINT8   tWWDR;
  UINT8   tWWDD;
  
  UINT8   tRWSG;
  UINT8   tRWDG;
  UINT8   tRWDR;
  UINT8   tRWDD;
  
  
  
  UINT8   CAVrefCtlOffset;
  UINT8   VrefCtlOffset;
  UINT8   ClkPiCodeOffset;
  UINT8   RcvEnOffset;
  UINT8   RxDqsOffset;
  UINT8   TxDqOffset;
  UINT8   TxDqsOffset;
  UINT8   VrefOffset;
  UINT8   CntrlrMask;
  UINT8   ChMask;
  UINT8   Dummy[5]; 
  UINT8   Interpreter;
  UINT8   LowMemChannel;
  
  
  
  UINT8   DcttTest;
  UINT32  DcttRhHammerCount;
  UINT8   DcttRhIterationOnRow;
  UINT8   DcttRhPageCloseDelay;
  UINT8   DcttRhRefreshEnable;
  UINT8   DcttDataBase;
  UINT8   DcttRowSwizzleType;
  UINT8   DcttRefreshMultiplier;
  UINT8   DcttBankDisableMask;
  
  
  
  UINT8   ScramClockGateAB;
  UINT8   ScramClockGateC;
  UINT8   ScramEnableDbiAB;

  UINT16  VddqVoltageOverride;




  UINT8   SaGv;
  UINT16  SaGvFreq[4];
  UINT8   SaGvGear[4];
  UINT8   GearRatio;
  
  
  
  UINT8   ECT;
  UINT8   SOT;
  UINT8   ERDMPRTC2D;
  UINT8   RDMPRT;
  UINT8   RCVET;
  UINT8   JWRL;
  UINT8   EWRTC2D;
  UINT8   ERDTC2D;
  UINT8   WRTC1D;
  UINT8   WRVC1D;
  UINT8   RDTC1D;
  UINT8   DIMMODTT;
  UINT8   DIMMRONT;
  UINT8   WRDSEQT;
  UINT8   WRSRT;
  UINT8   RDODTT;
  UINT8   RDEQT;
  UINT8   RDAPT;
  UINT8   WRTC2D;
  UINT8   RDTC2D;
  UINT8   CMDVC;
  UINT8   WRVC2D;
  UINT8   RDVC2D;
  UINT8   LCT;
  UINT8   RTL;
  UINT8   TAT;
  UINT8   RMT;
  UINT8   MEMTST;
  UINT8   ALIASCHK;
  UINT8   RCVENC1D;
  UINT8   RMC;
  UINT8   WRDSUDT;



  UINT8   MCREGOFFSET;




  
  
  
  UINT8   EnablePwrDn;
  UINT8   EnablePwrDnLpddr;
  UINT8   Refresh2X;
  UINT8   LockPTMregs;

  UINT8   SrefCfgEna;
  UINT16  SrefCfgIdleTmr;
  UINT8   ThrtCkeMinDefeat;
  UINT8   ThrtCkeMinTmr;
  UINT8   ThrtCkeMinDefeatLpddr;
  UINT8   ThrtCkeMinTmrLpddr;
  UINT8   AllowOppRefBelowWriteThrehold;
  UINT8   WriteThreshold;

  UINT8   MemoryThermalManagement;
  UINT8   PeciInjectedTemp;
  UINT8   ExttsViaTsOnBoard;
  UINT8   ExttsViaTsOnDimm;
  UINT8   VirtualTempSensor;
  UINT8   ScramblerSupport;
  UINT8   ForceColdReset;
  UINT8   DisableMc0Ch0;
  UINT8   DisableMc0Ch1;
  UINT8   DisableMc0Ch2;
  UINT8   DisableMc0Ch3;
  UINT8   DisableMc1Ch0;
  UINT8   DisableMc1Ch1;
  UINT8   DisableMc1Ch2;
  UINT8   DisableMc1Ch3;
  UINT8   RemapEnable;
  UINT8   MrcSafeConfig;
  UINT8   LpDdrDqDqsReTraining;
  UINT8   RhSelect;
  UINT8   Lfsr0Mask;
  UINT8   Lfsr1Mask;
  UINT8   McRefresh2X;    
  UINT8   RefreshPanicWm; 
  UINT8   RefreshHpWm;    
  UINT8   MaxRttWr;
  UINT8   ExitOnFailure;
  UINT8   NewFeatureEnable1;
  UINT8   NewFeatureEnable2;
  UINT8   RDVC1D;
  UINT8   TXTCO;
  UINT8   TXTCODQS;
  UINT8   VCCDLLBP;
  UINT8   CLKTCO;
  UINT8   CMDDSEQ;
  UINT8   CMDSR;
  UINT8   CMDDRUD;
  UINT8   DIMMODTCA;
  UINT8   PVTTDNLP;
  UINT8   RDVREFDC;
  UINT8   VDDQT;
  UINT8   DCC;
  UINT8   RMTBIT;
  UINT8   SkipExtGfxScan;
  
  
  
  UINT8   CridEnable;

  UINT8   SlateIndicatorRT;
  UINT8   SlateIndicatorSx;
  UINT8   DockIndicatorRT;
  UINT8   DockIndicatorSx;
  UINT8   IuerButtonEnable;
  UINT8   IuerConvertibleEnable;
  UINT8   IuerDockEnable;

  
  
  
  UINT16  UncoreVoltageOffset;
  UINT8   UncoreVoltageOffsetPrefix;

  
  
  
  UINT8   GtMaxOcRatio;                 
  UINT8   GtVoltageMode;                
  UINT16  GtVoltageOffset;              
  UINT8   GtVoltageOffsetPrefix;
  UINT16  GtVoltageOverride;            
  UINT16  GtExtraTurboVoltage;          
  UINT8   GtusMaxOcRatio;                
  UINT8   GtusVoltageMode;               
  UINT16  GtusVoltageOffset;             
  UINT8   GtusVoltageOffsetPrefix;
  UINT16  GtusVoltageOverride;           
  UINT16  GtusExtraTurboVoltage;         

  UINT8   RealtimeMemoryTiming;         
  UINT8   BclkChangeWarmReset;
  UINT8   BclkChangeContinues;

  UINT8   WrcFeatureEnable;

  
  
  
  UINT8   PcieRootPortEn[4];
  UINT8   PcieLaneCm[0x14];
  UINT8   PcieLaneCp[0x14];
  UINT8   PcieFiaProgramming;
  UINT8   PcieRootPortClockGating[4];
  UINT8   PcieRootPortPowerGating[4];
  UINT8   PcieComplianceTestMode;
  UINT8   RpFunctionSwap; 
  UINT8   PegGen3RootPortPreset[0x14];
  UINT8   PegGen3EndPointPreset[0x14];
  UINT8   PegGen3EndPointHint[0x14];
  UINT8   PegGen4RootPortPreset[0x14];
  UINT8   PegGen4EndPointPreset[0x14];
  UINT8   PegGen4EndPointHint[0x14];
  UINT8   PcieRootPortLinkDownGpios;
  UINT8   PcieRootPortClockReqMsgEnable[4];
  UINT8   PcieSlotSelection;
  UINT8   PcieRootPortDekelProgramming; 
  UINT8   PcieRootPortHPE[4];
  UINT8   PcieRootPortSI[4];
  UINT8   PcieRootPortPMCE[4];
  UINT8   PcieRootPortTHS[4];
  UINT8   PcieRootPortACS[4];
  UINT8   PcieRootPortAER[4];
  UINT8   PcieRootPortURE[4];
  UINT8   PcieRootPortFEE[4];
  UINT8   PcieRootPortNFE[4];
  UINT8   PcieRootPortCEE[4];
  UINT8   PcieRootPortSFE[4];
  UINT8   PcieRootPortSNE[4];
  UINT8   PcieRootPortSCE[4];
  UINT8   PcieRootPortDPC[4];
  UINT8   PcieRootPortEDPC[4];
  UINT8   PcieRootPortSpeed[4];
  UINT8   PcieRootPortEqPh3Method[4];
  UINT8   PcieRootPortGen4EqPh3Method[4];
  UINT8   PcieRootPortGen5EqPh3Method[4];
  UINT8   PcieRootPortAspm[4];
  UINT8   PcieRootPortL1SubStates[4];
  UINT8   PcieRootPortGen3Uptp[4];
  UINT8   PcieRootPortGen3Dptp[4];
  UINT8   PcieRootPortGen4Uptp[4];
  UINT8   PcieRootPortGen4Dptp[4];
  UINT8   PcieRootPortGen5Uptp[4];
  UINT8   PcieRootPortGen5Dptp[4];
  UINT8   PcieRootPortPTM[4];
  UINT16  PcieDetectTimeoutMs[4];
  UINT8   PcieRootPortMultiVc[4];
  UINT8   PcieRootPortMultiVcSupported[4];
  
  
  
  UINT8   CpuPcieLtrEnable[4];
  UINT8   CpuPcieLtrConfigLock[4];
  UINT8   CpuPcieSnoopLatencyOverrideMode[4];
  UINT8   CpuPcieSnoopLatencyOverrideMultiplier[4];
  UINT16  CpuPcieSnoopLatencyOverrideValue[4];
  UINT8   CpuPcieNonSnoopLatencyOverrideMode[4];
  UINT8   CpuPcieNonSnoopLatencyOverrideMultiplier[4];
  UINT16  CpuPcieNonSnoopLatencyOverrideValue[4];
  UINT8   CpuPcieForceLtrOverride[4];

  
  
  
  UINT8   DisplayFusaConfigEnable;
  UINT8   GraphicFusaConfigEnable;
  UINT8   OpioFusaConfigEnable;

  UINT8   GtClosEnable;

  UINT8   CpuPcieFomsCp[4];
  UINT8   CpuPcieRtd3;  
  UINT8   DpmemSupport;
  UINT8   CpuPcieRootPortPeerToPeerMode[4];
  UINT8   VmdGlobalMapping;
  
  UINT8   TcStateLimit;

  
  UINT8   CpuUsbPdoProgramming;
  UINT8   CpuUsbPortDisable;
  UINT8   CpuUsbSsPort[4];

  UINT8   DisplayAudioLink;

  
  UINT8   PprEnable;
  UINT8   MarginLimitCheck;
  UINT16  MarginLimitL2;

  UINT8   LpddrRttWr;
  UINT8   LpddrRttCa;

  UINT16  MemoryVddqVoltage;
  UINT16  MemoryVppVoltage;
  UINT8   PcieRootPortNewFom[4];
  UINT8   DmiNewFom;
  UINT8   DmiCdrRelock;
  UINT8   PcieRootPortCdrRelock[4];
  UINT8   DIMMDFE;              
  UINT8   ExtendedBankHashing;
  UINT8   IbeccErrInjControl;
  UINT64  IbeccErrInjAddress;
  UINT64  IbeccErrInjMask;
  UINT32  IbeccErrInjCount;
  UINT8   DynamicMemoryBoost;
  UINT8   HgSupport;

  
  UINT8   FusaConfigEnable;
  UINT8   FusaRunStartupArrayBist;
  UINT8   FusaRunStartupScanBist;
  UINT8   FusaRunPeriodicScanBist;
  UINT8   Module0Lockstep;
  UINT8   Module1Lockstep;
  UINT8   RefreshWm;
  UINT8   PcieFunc0LinkDisable [4];
  UINT32  DebugValue;
  UINT8   PcieResizableBarSupport;
  UINT8   McRefreshRate;
  UINT8   RealtimeMemoryFrequency;
  UINT8   PeriodicDcc;
  UINT8   LpMode;
  UINT8   TcColdPowerSavingFactorSwitch;
  UINT8   IomStayInTCColdSeconds;
  UINT8   IomBeforeEnteringTCColdSeconds;
  UINT8   TXDQSDCC; 
  UINT16  tRFCpb;
  UINT16  tRFC2;
  UINT16  tRFC4;
  UINT8   tRRD_L;
  UINT8   tRRD_S;
  UINT8   tWTR_L;
  UINT8   tCCD_L;
  UINT8   tWTR_S;
  UINT16  tRFCpbDefault;
  UINT16  tRFC2Default;
  UINT16  tRFC4Default;
  UINT8   tRRD_LDefault;
  UINT8   tRRD_SDefault;
  UINT8   tWTR_LDefault;
  UINT8   tCCD_LDefault;
  UINT8   tWTR_SDefault;
  UINT64  EccErrInjAddress;
  UINT64  EccErrInjMask;
  UINT32  EccErrInjCount;
  UINT16  FreqLimitMixedConfig;
  UINT8   FirstDimmBitMask;
  UINT8   SagvSwitchFactorIA;
  UINT8   SagvSwitchFactorGT;
  UINT8   SagvSwitchFactorIO;
  UINT8   SagvSwitchFactorStall;
  UINT8   SagvHeuristicsUpControl;
  UINT8   SagvHeuristicsDownControl;
  UINT8   DRAMDCA;              
  UINT8   DynamicMemoryBoostTrainingFailed;
  UINT16  FreqLimitMixedConfig_1R1R_8GB;
  UINT16  FreqLimitMixedConfig_1R1R_16GB;
  UINT16  FreqLimitMixedConfig_1R1R_8GB_16GB;
  UINT16  FreqLimitMixedConfig_2R2R;
  UINT16  LctCmdEyeWidth;
  UINT8   FirstDimmBitMaskEcc;
  UINT8   Lp5BankMode; 
  UINT8   TypeCHpdRetryTimeout; 
  UINT8   WRDS;
  UINT8   EARLYDIMMDFE;            
  UINT8   OverloadSAM;
  UINT8   OCSafeMode;
  UINT8   DQSOFFSETADJUST;
  UINT8   DfeGain;
  
  
  
  UINT16  DynamicBoostEnable; 
  UINT16  AcTotalGraphicsPowerValue;
  UINT16  DcTotalGraphicsPowerValue;
  UINT16  AcTotalGraphicsPowerMaxValue;
  UINT16  AcTotalGraphicsPowerMinValue;
  UINT16  AcTotalProcessPowerValue;
  UINT16  DcTotalProcessPowerValue;
  
  
  
  UINT8   Reserved[253];
} SA_SETUP;



























typedef struct {
  UINT8   Revision;
  UINT8   ExternalDma;
  UINT16  RootPortDid;              

  UINT8   DeepSxMode;
  UINT8   LanWakeFromDeepSx;
  UINT8   DisableDsxAcPresentPulldown;
  UINT8   PmcReadDisable;
  UINT8   OsDebugPort;
  UINT8   PchLan;
  UINT8   DciUsb3TypecUfpDbg;
  UINT8   PchEnableDbcObs;
  UINT8   PchWakeOnLan;
  UINT8   SlpLanLowDc;
  UINT8   PchWakeOnWlan;
  UINT8   PchWakeOnWlanDeepSx;
  UINT8   PchEnergyReport;
  UINT8   EnableTcoTimer;
  UINT8   PchCrid;
  UINT8   PmcLpmS0i2p0En;
  UINT8   PmcLpmS0i2p1En;
  UINT8   PmcLpmS0i2p2En;
  UINT8   PmcLpmS0i3p0En;
  UINT8   PmcLpmS0i3p1En;
  UINT8   PmcLpmS0i3p2En;
  UINT8   PmcLpmS0i3p3En;
  UINT8   PmcLpmS0i3p4En;

  UINT8   PchRtcMemoryLock;
  UINT8   PchBiosLock;
  UINT8   UnlockGpioPads;
  UINT8   PsOnEnable;

  UINT8   Hpet;
  UINT8   StateAfterG3;
  UINT8   IchPort80Route;
  UINT8   EnhancePort8xhDecoding;
  UINT8   PciePllSsc;
  UINT8   WdtEnable;
  UINT8   PchS0ixAutoDemotion;
  UINT8   PchLatchEventsC10Exit;
  
  
  
  UINT8   PchUsbPortDisable;
  UINT8   PchUsbHsPort[16];
  UINT8   PchUsbSsPort[10];
  UINT8   PchUsbPdoProgramming;
  UINT8   PchUsbOverCurrentEnable;
  UINT8   PchXhciOcLock;
  UINT8   PchXhciAcLock;
  UINT8   PchUsb2SusWellPgEnable;

  
  
  
  UINT8   PchXdciSupport;

  
  
  
  UINT8   PchSata;
  UINT8   SataInterfaceMode;
  UINT8   SataPort[8];
  UINT8   SataHotPlug[8];
  UINT8   SataMechanicalSw[8];
  UINT8   SataSpinUp[8];
  UINT8   SataExternal[8];
  UINT8   SataType[8];
  UINT8   SataTopology[8];
  UINT8   SataRaidR0;
  UINT8   SataRaidR1;
  UINT8   SataRaidR10;
  UINT8   SataRaidR5;
  UINT8   SataRaidIrrt;
  UINT8   SataRaidOub;
  UINT8   SataHddlk;
  UINT8   SataLedl;
  UINT8   SataRaidIooe;
  UINT8   SataRaidSrt;
  UINT8   SataRaidOromDelay;
  UINT8   SataRstForceForm;
  UINT8   SataLegacyOrom;
  UINT8   SataRstOptaneMemory;
  UINT8   SataRstCpuAttachedStorage;
  UINT8   RaidDeviceId;
  UINT8   SataSalp;
  UINT8   SataTestMode;
  UINT8   PxDevSlp[8];
  UINT8   EnableDitoConfig[8];
  UINT16  DitoVal[8];
  UINT8   DmVal[8];

  
  
  
  UINT8   PcieRootPort8xhDecode;
  UINT8   Pcie8xhDecodePortIndex;
  UINT8   PcieRootPortPeerMemoryWriteEnable[28];
  UINT8   PcieComplianceTestMode;

  
  
  
  UINT8   PchPcieClockUsageOverride[18];
  UINT8   PchPcieClkReqSupport[18];

  UINT8   PcieRootPortEn[28];
  UINT8   PcieRootPortAspm[28];
  UINT8   PcieRootPortURE[28];
  UINT8   PcieRootPortFEE[28];
  UINT8   PcieRootPortNFE[28];
  UINT8   PcieRootPortCEE[28];
  UINT8   PcieRootPortCTD[28];
  UINT8   PcieRootPortPIE[28];
  UINT8   PcieRootPortSFE[28];
  UINT8   PcieRootPortSNE[28];
  UINT8   PcieRootPortSCE[28];
  UINT8   PcieRootPortPMCE[28];
  UINT8   PcieRootPortHPE[28];
  UINT8   PcieRootPortAER[28];
  UINT8   PcieRootPortSpeed[28];
  UINT8   PcieRootPortTHS[28];
  UINT8   PcieRootPortL1SubStates[28];
  UINT8   PcieRootPortL1Low[28];
  UINT8   PcieRootPortACS[28];
  UINT8   PcieRootPortPTM[28];
  UINT8   PcieRootPortDPC[28];
  UINT8   PcieRootPortEDPC[28];
  UINT8   PcieRootPortSI[28];
  UINT16  PcieDetectTimeoutMs[28];
  UINT8   RpFunctionSwap;
  UINT8   TestPcieClockGating;

  
  
  
  UINT8   PcieEqOverrideDefault;
  UINT8   PcieEqMethod;
  UINT8   PcieEqMode;
  UINT8   PcieEqPh2LocalTransmitterOverrideEnable;
  UINT8   PcieEqPh1DownstreamPortTransmitterPreset;
  UINT8   PcieEqPh1UpstreamPortTransmitterPreset;
  UINT8   PcieEqPh3NumberOfPresetsOrCoefficients;
  UINT8   PcieEqPh3PreCursorList[10];
  UINT8   PcieEqPh3PostCursorList[10];
  UINT8   PcieEqPh3PresetList[11];
  UINT8   PcieEqPh2LocalTransmitterOverridePreset;

  
  
  
  UINT8   PchPcieLtrEnable[28];
  UINT8   PchPcieLtrConfigLock[28];
  UINT8   PchPcieSnoopLatencyOverrideMode[28];
  UINT8   PchPcieSnoopLatencyOverrideMultiplier[28];
  UINT8   PchPcieNonSnoopLatencyOverrideMode[28];
  UINT8   PchPcieNonSnoopLatencyOverrideMultiplier[28];
  UINT16  PchPcieSnoopLatencyOverrideValue[28];
  UINT16  PchPcieNonSnoopLatencyOverrideValue[28];
  UINT8   PchPcieForceLtrOverride[28];

  
  
  
  UINT8   PchDmiAspm;
  UINT8   PchDelayEnDmiAspm; 

  
  
  
  UINT8   ThcPort0Assignment;
  UINT8   ThcPort0Clock;
  UINT8   ThcPort0WakeOnTouch;
  UINT8   ThcPort1Assignment;
  UINT8   ThcPort1Clock;
  UINT8   ThcPort1WakeOnTouch;

  
  
  
  UINT8  IehMode;

  
  
  
  UINT8   PcieExtraBusRsvd[28];
  UINT16  PcieMemRsvd[28];
  UINT8   PcieIoRsvd[28];

  
  
  
  UINT8   PchHdAudio;
  UINT8   PchHdAudioDsp;
  UINT8   PchHdAudioDspUaaCompliance;
  UINT8   PchHdaIDisplayCodecDisconnect;
  UINT8   PchHdAudioPme;
  UINT8   PchHdAudioHdaLinkEnable;
  UINT8   PchHdAudioDmicLinkEnable[2];
  UINT8   PchHdAudioDmicClockSelect[2];
  UINT8   PchHdAudioSndwLinkEnable[4];
  UINT8   PchHdAudioSspLinkEnable[6];
  UINT8   PchHdaHdAudioLinkFreq;
  UINT8   PchHdaIDisplayLinkFreq;
  UINT8   PchHdaIDisplayLinkTmode;
  UINT8   PchHdAudioCodecSxWakeCapability;
  UINT8   PchHdaAutonomousClockStopSndw[4];
  UINT8   PchHdaDataOnActiveIntervalSelectSndw[4];
  UINT8   PchHdaDataOnDelaySelectSndw[4];
  UINT8   PchHdAudioI2sCodecSelect;
  UINT8   PchHdAudioI2sCodecBusNumber;
  UINT8   PchHdAudioFeature[9];
  UINT8   PchHdAudioPostProcessingMod[32];
  CHAR16  PchHdAudioPostProcessingModCustomGuid1[37];
  CHAR16  PchHdAudioPostProcessingModCustomGuid2[37];
  CHAR16  PchHdAudioPostProcessingModCustomGuid3[37];
  UINT32  AudioSubsystemIds; 

  
  
  
  UINT8   PchIoApic24119Entries;
  UINT8   Enable8254ClockGating;

  
  
  
  UINT8   PchCrossThrottling;
  
  
  
  UINT8   PchScsUfsEnable[2];

  
  
  
  UINT8   PchIshEnable;
  UINT8   PchIshSpiEnable[1];
  UINT8   PchIshSpiCs0Enable[1];
  UINT8   PchIshUartEnable[2];
  UINT8   PchIshI2cEnable[3];
  UINT8   PchIshGpEnable[8];
  UINT8   PchIshPdtUnlock;

  
  
  
  UINT8   PchSpiCsPolarity[14]; 
  UINT8   PchSerialIoSpi[7];
  UINT8   PchSpiCsPolaritySelect[2];
  UINT8   PchSerialIoUart[7];
  UINT8   PchUartDmaEnable[7];
  UINT8   PchUartHwFlowCtrl[7];
  UINT8   PchUartPowerGating[7];
  UINT8   PchSerialIoI2c[8];
  UINT8   PchSerialIoDeviceI2C4Support;
  UINT8   PchGpio;
  UINT8   PchGpioIrqRoute;
  UINT16  PchGpioDebounce;
  UINT8   PchGpioTestDevices;
  UINT8   PchAdditionalSerialIoDevices;
  
  
  
  UINT8   PchTraceHubMode;
  UINT8   PchTraceHubMemReg0Size;
  UINT8   PchTraceHubMemReg1Size;
  
  
  
  UINT8   PchTtLevelSuggestSet;
  UINT16  PchThrmT0Level;
  UINT16  PchThrmT1Level;
  UINT16  PchThrmT2Level;
  UINT8   PchThrmTtEnable;
  UINT8   PchThrmTtState13Enable;
  UINT8   PchThrmTtLock;

  
  
  
  UINT8   PchDmiTsSuggestSet;
  UINT8   PchTs0Width;
  UINT8   PchTs1Width;
  UINT8   PchTs2Width;
  UINT8   PchTs3Width;
  UINT8   PchDmiTsawEn;
  
  
  
  UINT8   PchSataTsSuggestSet;
  UINT8   PchP0T1M;
  UINT8   PchP0T2M;
  UINT8   PchP0T3M;
  UINT8   PchP0TDisp;
  UINT8   PchP0Tinact;
  UINT8   PchP0TDispFinit;
  UINT8   PchP1T1M;
  UINT8   PchP1T2M;
  UINT8   PchP1T3M;
  UINT8   PchP1TDisp;
  UINT8   PchP1Tinact;
  UINT8   PchP1TDispFinit;
  
  
  
  UINT8   CnviMode;
  UINT8   CnviWifiCore;
  UINT8   CnviBtCore;
  UINT8   CnviBtAudioOffload;
  UINT8   CnviDdrRfim;
  
  
  
  UINT8   PchEspiLgmrEnable;
  UINT8   PchEspiHostC10ReportEnable;

  
  
  
  UINT8   SmbusSpdWriteDisable;
  
  
  
  UINT8   PchSidebandLock;
  
  
  
  UINT8   FprrEnable;

  
  
  
  UINT8   DciEn;
  UINT8   DciDbcMode;
  UINT8   DciModphyPg;      
  UINT8   PmcDbgMsgEn;

  
  UINT8   EnableTimedGpio0;
  UINT8   EnableTimedGpio1;

  
  
  
  UINT8   ExternalV1p05StateEnable[6];
  UINT8   ExternalVnnStateEnable[6];
  UINT8   ExternalVnnSxStateEnable[6];
  UINT8   ExternalV1p05SupportedVoltageStates[4];
  UINT8   ExternalVnnSupportedVoltageStates[4];
  UINT8   ExternalVnnSupportedVoltageConfigurations;

  UINT8   ExternalV1p05IccMax;    
  UINT16  ExternalV1p05Voltage;
  UINT8   ExternalVnnIccMax;      
  UINT16  ExternalVnnVoltage;
  UINT8   ExternalVnnSxIccMax;    
  UINT16  ExternalVnnSxVoltage;

  UINT8   PchRetToLowCurModeVolTranTime;
  UINT8   PchRetToHighCurModeVolTranTime;
  UINT8   PchLowToHighCurModeVolTranTime;
  UINT16  PchOffToHighCurModeVolTranTime;
  UINT8   PchFivrDynPm;

  
  
  
  UINT8   PchPmcOsIdleModeEnable;
  UINT8   PchLegacyIoLowLatency;

  
  
  
  UINT8   PsfTccEnable;

  
  
  
  UINT8   PchTsnEnable;
  UINT8   PchTsnLinkSpeed;
  UINT8   TsnPcsEnabled;

  
  
  UINT8   PsfFusaConfigEnable;
  
  
  
  UINT8   IotgPllSscEn;
  
  
  

  
  
  
  UINT8   HybridStorageMode;

  UINT8   TsnMultiVcEnable;

  UINT16  ExternalV1p05IccMaximum;
  UINT16  ExternalVnnIccMaximum;
  UINT16  ExternalVnnSxIccMaximum;
  UINT8   PmcC10DynamicThresholdAdjustment;

  
  UINT8   ExtendedBiosDecodeRangeEnable;

  
  
  
  UINT8   PmcAdrEn;
  UINT8   PmcAdrTimer1Val;
  UINT8   PmcAdrMultiplier1Val;
  UINT8   PmcAdrHostPartitionReset;

  
  
  
  UINT8   PchXhciUaol;

  
  
  
  UINT8   FoxvilleLanSupport;
  UINT8   FoxvilleWakeOnLan;
  
  
  
  UINT8   SerialIoDebugUartPowerGating;

  
  
  
  UINT8   CpuRootportUsedForHybridStorage;
  UINT8   PchRootportUsedForCpuAttach;

  
  
  
  UINT8   IopFusaConfigEnable;
  
  
  
  UINT8   AcpiL6dPmeHandling;
  UINT8   HdaVcType; 
  UINT8   CpuHybridStorageConnected;
  
  
  
  UINT8   PchScsEmmcEnabled;
  UINT8   PchScsEmmcHs400Enabled;
  UINT8   PchScsEmmcHs400SoftwareTuning;
  UINT8   PchScsEmmcHs400DriverStrength;

  UINT8   PchSkipVccInConfig;
  UINT8   PchHdaAlc245DmicConfiguration;

  
  
  
  UINT8   ThcMode[2];
  UINT32  ThcActiveLtr[2];
  UINT32  ThcIdleLtr[2];
  UINT32  ThcLimitPacketSize[2];
  UINT32  ThcPerformanceLimitation[2];
  UINT32  ThcHidFlags[2];
  UINT32  ThcHidConnectionSpeed[2];
  UINT32  ThcHidInputReportBodyAddress[2];
  UINT32  ThcHidInputReportHeaderAddress[2];
  UINT32  ThcHidOutputReportAddress[2];
  UINT32  ThcHidReadOpcode[2];
  UINT32  ThcHidWriteOpcode[2];
  UINT32  ThcHidResetPadTrigger[2];
  UINT8   PchXhciHsiiEnable;
  UINT8   PchHdAudioFeatureV2[10];
  UINT8   PchHdaSndwDeviceConfiguration[1]; 
  UINT8   PchHdAudioFeatureV3[12];
  UINT8   PchFivrVccstIccMaxControl;
} PCH_SETUP;











typedef struct {
  UINT8   Revision;
  UINT8   PlatformDebugConsent;
  
  
  
  UINT8   PcieImrEnable;
  UINT16  PcieImrSize;
  UINT8   PcieImrRpLocation;
  UINT8   PcieImrRpSelection;
} SI_SETUP;









typedef struct {
  UINT8   StreamingTraceSink;
  UINT8   TraceHubForceOn;
  UINT8   JtagC10PgDis;
  UINT8   UsbOverCurrentOvrd;
} DEBUG_SETUP_VOLATILE_DATA;



typedef struct {
  
  UINT16 FabId;
  UINT16 BoardBomId;

  BOOLEAN EcPresent;
  UINT8   EcEspiFlashSharingMode;
  UINT8   EcMajorRevision;
  UINT8   EcMinorRevision;
  UINT16  BoardId;
  BOOLEAN SpdPresent;
  UINT8   PlatformGeneration;
  UINT16  DisplayId;
  UINT8   EcPeciMode;
} BOARD_INFO_SETUP;

#pragma pack()



#line 3965 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Include\\SetupVariable.h"


































#line 4000 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Include\\SetupVariable.h"
#line 39 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Include\\Setup.h"



#line 43 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Include\\Setup.h"























































typedef struct _SYSTEM_ACCESS
{
  
  
  
  UINT8       Access;
} SYSTEM_ACCESS;












typedef struct {
  UINT8   AdminName;
  UINT8   UserName;
} EFI_PASSWORD_STATUS;

#pragma pack(1)











typedef struct {
  UINT8 SerialDebugMrcLevel;
  UINT8 SerialDebug;
  UINT8 SerialDebugBaudRate;
  UINT8 RamDebugInterface;
  UINT8 UartDebugInterface;
  UINT8 Usb3DebugInterface;
  UINT8 SerialIoDebugInterface;
  UINT8 TraceHubDebugInterface;
  
  UINT8 SerialIoUartDebugControllerNumber;
  UINT32 SerialIoUartDebugBaudRate;
  UINT8 SerialIoUartDebugStopBits;
  UINT8 SerialIoUartDebugParity;
  UINT8 SerialIoUartDebugFlowControl;
  UINT8 SerialIoUartDebugDataBits;
} DEBUG_CONFIG_DATA;






#pragma pack()










































#line 201 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Include\\Setup.h"










#line 212 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Include\\Setup.h"
#line 118 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SetupPrivate.h"
#line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SetupId.h"
















































































































































































































































































































































































































































































































































#line 530 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SetupId.h"























































































































































































































































#line 778 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SetupId.h"
#line 119 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SetupPrivate.h"
#line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Include\\OemSetup.h"





































































#pragma pack(1)





















typedef struct _SETUP_VOLATILE_DATA
{
  UINT16 PlatId;
  UINT8  PlatformFlavor;
  UINT8  PlatformType;
  UINT8  BoardType;
  UINT8  VTdAvailable;
  UINT8  PchGeneration;
  UINT8  GbeSupportByPch;            
  UINT8  GbeAvailable;               
  UINT8  ThcSupported;
  UINT8  ThcAvailable;
  UINT8  IshAvailable;
  UINT8  DimmPresent[16];
  UINT8  MemoryType;                
  UINT8  PciePortCfg[28];
  UINT8  PchUsb2PortCount;
  UINT8  PchUsb3PortCount;
  UINT8  CpuPciePortCfg[4];
  UINT8  EmmcSupported;
  UINT8  UfsSupported[2];
  UINT32 AcpiDebugAddress;
  UINT8  SataMpsPresent[8];
  UINT8  DockAttached;
  UINT8  AudioHdaLinkSupported;
  UINT8  AudioDmicLinkSupported[2];
  UINT8  AudioSspLinkSupported[6];
  UINT8  AudioSndwLinkSupported[4];
  UINT8  PchCridSupport;
  UINT8  IpuSupport;
  UINT8  ShowRestricted; 
  UINT8  TbtVtdBaseSecurityGrayOut; 
  UINT8  CdClockSelector;
  UINT8  TsnSupportByPch;
  UINT8  TsnAvailable;
  UINT8  PSOnSupported;
  UINT8  TsnGbeLaneNum;
  UINT8  OcrBootHttpsSupported;
  UINT8  OcrBootPbaSupported;
  UINT8  OcrBootWinReSupported;
  UINT8  OcrAmtDisSecBootSupported;
  UINT8  TcssPdType;
  UINT8  TotalNumberOfTypeCPortsSupported;
  UINT8  MobileOcUnSupport;
  UINT8  AudioDspFusedOut;
  UINT8  UsbcEcPdNegotiation;
} SETUP_VOLATILE_DATA;




















typedef struct {
  UINT8 XDBitAvailable;
  UINT8 TurboModeAvailable;
  UINT8 XETdcTdpLimitAvailable;
  UINT8 CoreRatioLimitAvailable;
  UINT8 HTAvailable;
  UINT8 MultiCoreAvailable;
  UINT8 VTAvailable;
  UINT8 AESAvailable;  
  UINT8 TXTAvailable;
  UINT8 CxAvailable;
  UINT8 C1Available;
  UINT8 C1EAvailable;
  UINT8 C3Available;
  UINT8 C6Available;
  UINT8 C7Available;
  UINT8 C8Available;
  UINT8 C9Available;
  UINT8 C10Available;
  UINT8 EISTAvailable;
  UINT8 HwpAvailable;
  UINT8 ItbmAvailable;
  UINT8 NumCores;
  UINT8 MultiSocketAvailable;
  UINT8 MultiSocketPopulated;
  UINT8 LocalX2ApicAvailable;
  UINT8 EnergyEfficientTurboAvailable;
  UINT8 Reserved;
  UINT8 C6DramSupported;
  UINT8 ApicIdFlag;
  UINT8 ConfigTdpAvailable;
  UINT8 PpinFeatureAvailable;
  UINT8 LpmAvailable;
  UINT8 TimedMwaitSupported;
  UINT8 DebugInterfaceSupported;
  UINT8 ProcTraceSupported;
  UINT8 SmmEnhancementSupported;
  UINT8 SmmTargetedSmiAvailable;
  UINT8 SmmCpuSvrstrAvailable;
  UINT8 SmmLongFlowAvailable;
  UINT8 HdcSupported;
  UINT8 HwpInterruptSupported;
  UINT8 CtdpDownSupported; 
  UINT8 CtdpUpSupported;   
  UINT8 FivrSupported;
  UINT8 FclkSupported;
  UINT8 NumSmallCores;
  UINT8 PerCoreHtDisableSupported;
  UINT8 GtUnsliceSupported;
  UINT8 CpuSkuOcSupported;
  UINT8 TmeSupported;
  BOOLEAN SaVrSupport;
  UINT8 IsFastMsrHwpSupport;
  UINT8 CtdpLevel1Supported;
  UINT8 CtdpLevel2Supported;
  UINT8 NumSmallCoresCLuster;
  
  
  
  UINT8 HwpReqSupported;
  UINT8 ThreadInfoSupported;
  
  
  
} SETUP_CPU_FEATURES;









typedef struct {
  UINT8   OsProfile;
  UINT8   PrevOs;
} OS_PROFILE;

#pragma pack()





#line 245 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Include\\OemSetup.h"
#line 120 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SetupPrivate.h"

extern SA_SETUP                  mSaSetup;
extern ME_SETUP                  mMeSetup;
extern CPU_SETUP                 mCpuSetup;
extern PCH_SETUP                 mPchSetup;
extern SETUP_DATA                mSetupData;
extern SETUP_VOLATILE_DATA       mSetupVolatileData;



























#line 155 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SetupPrivate.h"
#line 49 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\Advanced.vfr"
#line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaSetup.h"





































































































#line 103 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaSetup.h"
#line 50 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\Advanced.vfr"
#line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\MeSetup.h"














































#pragma pack(1)












typedef struct {
  UINT8 MngState;
  UINT8 FwUpdEnabled;
  UINT8 MeStateControl;
  UINT8 AfterEoP;
  UINT8 RemoteSessionActive;
  UINT8 PttState;
  UINT8 TpmDeactivate;
  UINT8 BootGuardSupport;
  UINT8 MeasureBoot;
  UINT8 DelayedAuthenticationMode;
  UINT8 FipsModeSelect;
  UINT8 InvokeArbSvnCommit;
  UINT8 AmtState;
  UINT8 UpidSupport;
  UINT8 UpidState;
  UINT8 UpidOsControlState;
  UINT8 ActiveLanInterface;
  UINT8 EnhancedFeature;
} ME_SETUP_STORAGE;

typedef struct {
  UINT8  MeFirmwareInfo;
  UINT32 MeMajor;
  UINT32 MeMinor;
  UINT32 MeHotFix;
  UINT32 MeBuildNo;
} ME_INFO_SETUP_DATA;

#pragma pack()

#line 92 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\MeSetup.h"
#line 51 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\Advanced.vfr"
#line 1 "c:\\data\\alderlake\\Intel\\AlderLakeBoardPkg\\Include\\PlatformBoardId.h"













































































































































































































































































#line 271 "c:\\data\\alderlake\\Intel\\AlderLakeBoardPkg\\Include\\PlatformBoardId.h"
#line 52 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\Advanced.vfr"

#line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Include\\TcgSetup.h"






































#pragma pack(1)









typedef struct {
  UINT8   dTpm12Present;
  BOOLEAN HideTpm;
  UINT8   TpmCurrentState;
  BOOLEAN MorState;
  UINT8   dTpm20Present;
  UINT8   TpmOperation;
  UINT8   PttPresent;
} TCG_SETUP;
#pragma pack()







#line 67 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Include\\TcgSetup.h"



#line 71 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Include\\TcgSetup.h"






extern UINT8 _VerifyOffsetTCG_SETUPHideTpm[(((UINTN) &(((TCG_SETUP *)0)->HideTpm)) == 0x1) / (((UINTN) &(((TCG_SETUP *)0)->HideTpm)) == 0x1)];
extern UINT8 _VerifyOffsetTCG_SETUPMorState[(((UINTN) &(((TCG_SETUP *)0)->MorState)) == 0x3) / (((UINTN) &(((TCG_SETUP *)0)->MorState)) == 0x3)];
#line 80 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Include\\TcgSetup.h"
#line 54 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\Advanced.vfr"
#line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Include\\Tcg2ConfigNvData.h"





































#line 1 "c:\\data\\alderlake\\Edk2\\MdePkg\\Include\\Guid/HiiPlatformSetupFormset.h"



























extern EFI_GUID  gEfiHiiPlatformSetupFormsetGuid;
extern EFI_GUID  gEfiHiiDriverHealthFormsetGuid;
extern EFI_GUID  gEfiHiiUserCredentialFormsetGuid;
extern EFI_GUID  gEfiHiiRestStyleFormsetGuid;

#line 34 "c:\\data\\alderlake\\Edk2\\MdePkg\\Include\\Guid/HiiPlatformSetupFormset.h"
#line 39 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Include\\Tcg2ConfigNvData.h"
#line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Include\\Guid/Tcg2ConfigHii.h"










































#line 44 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Include\\Guid/Tcg2ConfigHii.h"
#line 40 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Include\\Tcg2ConfigNvData.h"
#line 1 "c:\\data\\alderlake\\Edk2\\MdePkg\\Include\\IndustryStandard/TcgPhysicalPresence.h"


























































































































#line 124 "c:\\data\\alderlake\\Edk2\\MdePkg\\Include\\IndustryStandard/TcgPhysicalPresence.h"
#line 41 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Include\\Tcg2ConfigNvData.h"
#line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Include\\Guid/PttInstance.h"








































#line 42 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Include\\Guid/PttInstance.h"
#line 42 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Include\\Tcg2ConfigNvData.h"
#line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Include\\Guid/PttPTPInstanceGuid.h"








































#line 42 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Include\\Guid/PttPTPInstanceGuid.h"
#line 43 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Include\\Tcg2ConfigNvData.h"




































typedef struct {
  UINT8   TpmDevice;
} TCG2_CONFIGURATION;





typedef struct {
  UINT8   TpmDeviceDetected;
} TCG2_DEVICE_DETECTION;










#line 101 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Include\\Tcg2ConfigNvData.h"
#line 55 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\Advanced.vfr"
#line 56 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\Advanced.vfr"


#line 59 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\Advanced.vfr"



#line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Include\\IccSetupData.h"


































































#pragma pack(1)









typedef struct _ICC_SETUP_DATA {
  UINT16 Frequency;
  UINT8  Spread;
  UINT8  ShowFrequency;
  UINT8  ShowSpread;
  UINT8  ShowProfile;
  UINT8  Profile;
  UINT8  AllowAdvancedOptions;
} ICC_SETUP_DATA;

#pragma pack()

#line 90 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Include\\IccSetupData.h"
#line 63 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\Advanced.vfr"
#line 1 "c:\\data\\alderlake\\Intel\\Features\\Audio\\NhltFeaturePkg\\Include\\NhltEndpointsConfigurationVariable.h"














































#pragma pack (1)









typedef struct {
  UINT8  Version;
  UINT8  NhltConfigurationEnabled[16]; 
} NHLT_ENDPOINTS_TABLE_CONFIGURATION_VARIABLE;
#pragma pack ()

#line 64 "c:\\data\\alderlake\\Intel\\Features\\Audio\\NhltFeaturePkg\\Include\\NhltEndpointsConfigurationVariable.h"
#line 64 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\Advanced.vfr"

#line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Include\\PciBusSetup.h"




































#pragma pack(1)















typedef struct {
  UINT8 InstallExtOpRom;
} PCI_BUS_SETUP;
#line 57 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Include\\PciBusSetup.h"


#pragma pack()
#line 66 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\Advanced.vfr"
#line 67 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\Advanced.vfr"
#line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Include\\WheaSetup.h"








































































#line 74 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Include\\WheaSetup.h"
#line 68 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\Advanced.vfr"

formset guid = { 0xe14f04fa, 0x8706, 0x4353, { 0x92, 0xf2, 0x9c, 0x24, 0x24, 0x74, 0x6f, 0x9f } },
  title      = STRING_TOKEN(0x1EE4),
  help       = STRING_TOKEN(0x1EE5),
  classguid  = { 0xe58809f8, 0xfbc1, 0x48e2, { 0x88, 0x3a, 0xa3, 0xf, 0xdc, 0x4b, 0x44, 0x1e } },
  class      = 0x02,
  subclass   = 0,

  efivarstore SA_SETUP, varid = 2, attribute = 0x7, name = SaSetup, guid = { 0x72c5e28c, 0x7783, 0x43a1, { 0x87, 0x67, 0xfa, 0xd7, 0x3f, 0xcc, 0xaf, 0xa4 } };
  efivarstore ME_SETUP, varid = 4, attribute = 0x7, name = MeSetup, guid = { 0x5432122d, 0xd034, 0x49d2, { 0xa6, 0xde, 0x65, 0xa8, 0x29, 0xeb, 0x4c, 0x74 } };
  efivarstore CPU_SETUP, varid = 3, attribute = 0x7, name = CpuSetup, guid = { 0xb08f97ff, 0xe6e8, 0x4193, { 0xa9, 0x97, 0x5e, 0x9e, 0x9b, 0xa, 0xdb, 0x32 } };
  efivarstore PCH_SETUP, varid = 5, attribute = 0x7, name = PchSetup, guid = { 0x4570b7f1, 0xade8, 0x4943, { 0x8d, 0xc3, 0x40, 0x64, 0x72, 0x84, 0x23, 0x84 } };
  efivarstore SI_SETUP, varid = 6, attribute = 0x7, name = SiSetup, guid = { 0xAAF8E719, 0x48F8, 0x4099, { 0xA6, 0xF7, 0x64, 0x5F, 0xBD, 0x69, 0x4C, 0x3D } };
  efivarstore SETUP_DATA, varid = 1, attribute = 0x7, name = Setup, guid = { 0xEC87D643, 0xEBA4, 0x4BB5, { 0xA1, 0xE5, 0x3F, 0x3E, 0x36, 0xB2, 0x0D, 0xA9 } };
  efivarstore LPE_SETUP, varid = 8, attribute = 0x3, name = LpeSetup, guid = { 0xb5fbe0c8, 0xa72a, 0x408d, { 0x85, 0x9c, 0xf, 0xd7, 0x53, 0x7a, 0xaa, 0x5f } };        
  efivarstore BOARD_INFO_SETUP, varid = 7, attribute = 0x7, name = BoardInfoSetup, guid = { 0x1E785E1A, 0x8EC4, 0x49E4, { 0x82, 0x75, 0xFB, 0xBD, 0xED, 0xED, 0x18, 0xE7 } };
  varstore SYSTEM_ACCESS, varid = 0xF000, name = SystemAccess, guid = { 0xE770BB69, 0xBCB4, 0x4D04, { 0x9E, 0x97, 0x23, 0xFF, 0x94, 0x56, 0xFE, 0xAC }};

  efivarstore DEBUG_CONFIG_DATA, varid = 0xF001, attribute = 0x7, name = DebugConfigData, guid = { 0xDE0A5E74, 0x4E3E, 0x3D96, { 0xA4, 0x40, 0x2C, 0x96, 0xEC, 0xBD, 0x3C, 0x97 } };
#line 88 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\Advanced.vfr"

efivarstore NHLT_ENDPOINTS_TABLE_CONFIGURATION_VARIABLE,
  attribute = 0x7,
  name = NhltEndpointsTableConfigurationVariable,
  guid = { 0xA1D89A3A, 0x4A90, 0x429D, { 0x43, 0x65, 0x1F, 0x64, 0xC3, 0xA2, 0x96, 0x14 } };


  efivarstore PCI_BUS_SETUP, attribute = 0x7, name = PciBusSetup, guid = { 0xEC87D643, 0xEBA4, 0x4BB5, { 0xA1, 0xE5, 0x3F, 0x3E, 0x36, 0xB2, 0x0D, 0xA9 } };
#line 97 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\Advanced.vfr"





  varstore SETUP_VOLATILE_DATA,
    varid = 4107,
    name  = SetupVolatileData,
    guid  = { 0xEC87D643, 0xEBA4, 0x4BB5, { 0xA1, 0xE5, 0x3F, 0x3E, 0x36, 0xB2, 0x0D, 0xA9 } };

  varstore OS_PROFILE,
    name  = OsProfile,
    guid  = { 0xE59376D7, 0x2DD9, 0x42A3, { 0x9E, 0xC8, 0x1D, 0x71, 0xD5, 0xE3, 0xC1, 0xEC }};

  varstore SETUP_CPU_FEATURES,
    varid = 4108,
    name  = SetupCpuFeatures,
    guid  = { 0xEC87D643, 0xEBA4, 0x4BB5, { 0xA1, 0xE5, 0x3F, 0x3E, 0x36, 0xB2, 0x0D, 0xA9 } };

  varstore CPU_SETUP_VOLATILE_DATA,
    varid = 5053,
    name  = CpuSetupVolatileData,
    guid  = { 0xb08f97ff, 0xe6e8, 0x4193, { 0xa9, 0x97, 0x5e, 0x9e, 0x9b, 0xa, 0xdb, 0x32 } };

  varstore TBT_SETUP_VOLATILE_DATA,
    varid = 5084,
    name  = TbtSetupVolatileData,
    guid  = { 0xEC87D643, 0xEBA4, 0x4BB5, { 0xA1, 0xE5, 0x3F, 0x3E, 0x36, 0xB2, 0x0D, 0xA9 } };

  varstore ME_SETUP_STORAGE,
    varid = 4360,
    name  = MeSetupStorage,
    guid  = { 0x5432122d, 0xd034, 0x49d2, { 0xa6, 0xde, 0x65, 0xa8, 0x29, 0xeb, 0x4c, 0x74 } };

  varstore DEBUG_SETUP_VOLATILE_DATA,
    varid = 5471,
    name  = DebugSetupVolatileData,
    guid  = { 0xEC87D643, 0xEBA4, 0x4BB5, { 0xA1, 0xE5, 0x3F, 0x3E, 0x36, 0xB2, 0x0D, 0xA9 } };



  
  
  efivarstore TCG_SETUP,
    attribute = 0x7,
    name      = TcgSetup,
    guid      = { 0xEC87D643, 0xEBA4, 0x4BB5, { 0xA1, 0xE5, 0x3F, 0x3E, 0x36, 0xB2, 0x0D, 0xA9 } };

  varstore TCG2_CONFIGURATION,
    varid = 4388,
    name  = TCG2_CONFIGURATION,
    guid  = { 0x6339d487, 0x26ba, 0x424b, { 0x9a, 0x5d, 0x68, 0x7e, 0x25, 0xd7, 0x40, 0xbc } };
#line 150 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\Advanced.vfr"

  

































#line 186 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\Advanced.vfr"














































  varstore ICC_SETUP_DATA,
    name = IccAdvancedSetupDataVar,
    guid = {0x64192dca, 0xd034, 0x49d2, { 0xa6, 0xde, 0x65, 0xa8, 0x29, 0xeb, 0x4c, 0x74 }};

  defaultstore MyStandardDefault,
    prompt    = STRING_TOKEN(0x1EFF),
    attribute = 0x0000; 

  form formid = 4097,
    title     = STRING_TOKEN(0x1EE4);

   text
     help   = STRING_TOKEN(0x0851),
     text   = STRING_TOKEN(0x1570),
     text   = STRING_TOKEN(0x1571),
     flags  = 0,
     key    = 0;

   text
     help   = STRING_TOKEN(0x0851),
     text   = STRING_TOKEN(0x156E),
     text   = STRING_TOKEN(0x156F),
     flags  = 0,
     key    = 0;

   text
     help   = STRING_TOKEN(0x0851),
     text   = STRING_TOKEN(0x1572),
     text   = STRING_TOKEN(0x1573),
     flags  = 0,
     key    = 0;

   text
     help   = STRING_TOKEN(0x0851),
     text   = STRING_TOKEN(0x1574),
     text   = STRING_TOKEN(0x1575),
     flags  = 0,
     key    = 0;

   text
     help   = STRING_TOKEN(0x0851),
     text   = STRING_TOKEN(0x1576),
     text   = STRING_TOKEN(0x1577),
     flags  = 0,
     key    = 0;

   text
     help   = STRING_TOKEN(0x0851),
     text   = STRING_TOKEN(0x1578),
     text   = STRING_TOKEN(0x1579),
     flags  = 0,
     key    = 0;

    oneof varid   = SETUP_DATA.FirmwareConfiguration,
      prompt      = STRING_TOKEN(0x077D),
      help        = STRING_TOKEN(0x077E),

      option text = STRING_TOKEN(0x077F), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0780), value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0781), value = 2, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0782), value = 3, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0783), value = 4, flags = DEFAULT | RESET_REQUIRED;
      option text = STRING_TOKEN(0x0784), value = 5, flags = RESET_REQUIRED;




#line 300 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\Advanced.vfr"
    endoneof;


    oneof varid   = SETUP_DATA.LoadValidationFv,
      prompt      = STRING_TOKEN(0x0785),
      help        = STRING_TOKEN(0x0786),
      option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
    endoneof;


    oneof varid   = SETUP_DATA.PlatformDriverSupport,
      prompt      = STRING_TOKEN(0x0787),
      help        = STRING_TOKEN(0x0788),
      option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0006), value = 2, flags = DEFAULT | RESET_REQUIRED;
    endoneof;
#line 319 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\Advanced.vfr"

    
    disableif TRUE;
      oneof varid   = SETUP_VOLATILE_DATA.PlatId,
        prompt      = STRING_TOKEN(0x132B),
        help        = STRING_TOKEN(0),
        option text = STRING_TOKEN(0x0005), value = 0, flags = 0;
      endoneof;
    endif; 

    suppressif TRUE;
    
    oneof varid   = OS_PROFILE.OsProfile,
      prompt      = STRING_TOKEN(0x1537),
      help        = STRING_TOKEN(0x1538),
      option text = STRING_TOKEN(0x0005), value = 0, flags = DEFAULT | RESET_REQUIRED;
      option text = STRING_TOKEN(0x1539), value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x153A), value = 2, flags = RESET_REQUIRED;
    endoneof;
    endif;

    

    
    goto
      formsetguid = {0x8fd6d4e5, 0x138c, 0x4b5c, {0xef, 0x95, 0xdd, 0x00, 0xd2, 0x68, 0x9b, 0x8c}},  
      formid      = 1,  
      question    = 0,
      prompt      = STRING_TOKEN(0x1F07),
      help        = STRING_TOKEN(0x1F08);

    goto 4102,
      prompt = STRING_TOKEN(0x0709),
      help   = STRING_TOKEN(0x070A);

    
    goto 4104,
      prompt = STRING_TOKEN(0x1304),
      help   = STRING_TOKEN(0x1307);

    
    goto 4106,
      prompt = STRING_TOKEN(0x0009),
      help   = STRING_TOKEN(0x000A);

    
    goto 4109,
      prompt = STRING_TOKEN(0x02D7),
      help   = STRING_TOKEN(0x02D8);

    goto 5074,
      prompt = STRING_TOKEN(0x00FF),
      help   = STRING_TOKEN(0x0100);

    goto 4110,
      prompt = STRING_TOKEN(0x03D3),
      help   = STRING_TOKEN(0x03D4);









#line 386 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\Advanced.vfr"

    suppressif ideqval SETUP_CPU_FEATURES.CpuSkuOcSupported == 0;
      goto 4115,
        prompt = STRING_TOKEN(0x0852),
        help   = STRING_TOKEN(0x0853);
    endif;

    
    goto 4136,
      prompt = STRING_TOKEN(0x1594),
      help   = STRING_TOKEN(0x1595);

    goto 4137,
      prompt = STRING_TOKEN(0x1592),
      help   = STRING_TOKEN(0x1593);

    
    goto 5433,
      prompt = STRING_TOKEN(0x1320),
      help   = STRING_TOKEN(0x1321);

    
    goto 4143,
      prompt = STRING_TOKEN(0x09F9),
      help   = STRING_TOKEN(0x09FA);

    
    goto 4158,
      prompt = STRING_TOKEN(0x07AE),
      help   = STRING_TOKEN(0x07AF);

    goto 4166,
      prompt = STRING_TOKEN(0x138C),
      help   = STRING_TOKEN(0x138D);

    
    goto 4389,
      prompt = STRING_TOKEN(0x1468),
      help   = STRING_TOKEN(0x1469);

    goto 4339,
      prompt = STRING_TOKEN(0x1507),
      help   = STRING_TOKEN(0x1508);



    goto 4172,
      prompt = STRING_TOKEN(0x204C),
      help   = STRING_TOKEN(0x204D);
#line 436 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\Advanced.vfr"






#line 443 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\Advanced.vfr"








    goto 5001,
      prompt = STRING_TOKEN(0x07A0),
      help   = STRING_TOKEN(0x07A4),
      flags  = 0,
      key    = 0;



    goto 4319,
      prompt = STRING_TOKEN(0x1F7F),
      help   = STRING_TOKEN(0x1F80);
#line 463 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\Advanced.vfr"
#line 464 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\Advanced.vfr"

  endform;

  #line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\DebugSetup.hfr"

































form formid = 4102,
  title     = STRING_TOKEN(0x0709);

  subtitle text = STRING_TOKEN(0x0709);
  subtitle text = STRING_TOKEN(0x0002);

  oneof varid     = PCH_SETUP.OsDebugPort,
    prompt      = STRING_TOKEN(0x070D),
    help        = STRING_TOKEN(0x0713),
    default     = 0, defaultstore = MyStandardDefault,
    option text = STRING_TOKEN(0x070E), value = 0, flags = RESET_REQUIRED;

    option text = STRING_TOKEN(0x0710), value = 3, flags = RESET_REQUIRED;


#line 50 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\DebugSetup.hfr"
  endoneof;

  suppressif ideqval PCH_SETUP.OsDebugPort == 0;
    oneof varid  = PCH_SETUP.SerialIoDebugUartPowerGating,
      prompt   = STRING_TOKEN(0x0711),
      help     = STRING_TOKEN(0x0712),
      option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
    endoneof;
  endif; 

  oneof varid = SETUP_DATA.KernelDebugPatch,
    prompt    = STRING_TOKEN(0x0714),
    help      = STRING_TOKEN(0x0715),
    option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
  endoneof;

  text
    help  = STRING_TOKEN(0x0716),
    text  = STRING_TOKEN(0x0716),
    text  = STRING_TOKEN(0x0717),
    flags = 0,
    key   = 0;

  grayoutif ideqval DEBUG_SETUP_VOLATILE_DATA.StreamingTraceSink == 0x1;
    oneof varid = SI_SETUP.PlatformDebugConsent,
      questionid = 4103,
      prompt   = STRING_TOKEN(0x0718),
      help     = STRING_TOKEN(0x0719),
      option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED | INTERACTIVE;
      option text = STRING_TOKEN(0x071A), value = 2, flags = RESET_REQUIRED | INTERACTIVE;
      option text = STRING_TOKEN(0x071B), value = 6, flags = RESET_REQUIRED | INTERACTIVE;
      option text = STRING_TOKEN(0x071C), value = 7, flags = RESET_REQUIRED | INTERACTIVE;
    endoneof;
  endif;




  goto 5470,
       prompt = STRING_TOKEN(0x075C),
       help = STRING_TOKEN(0x075D);

  goto 4182,
       prompt = STRING_TOKEN(0x070B),
       help = STRING_TOKEN(0x070C);
endform;

form formid   = 5470,
  title         = STRING_TOKEN(0x075C);
  grayoutif ideqval SETUP_VOLATILE_DATA.VTdAvailable == 0
              OR ideqval SA_SETUP.EnableVtd == 0;

    oneof varid   =  SA_SETUP.VtdIgdEnable,
      prompt   = STRING_TOKEN(0x1C52),
      help     = STRING_TOKEN(0x1C53),
      option text = STRING_TOKEN (0x1590),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN (0x1591), value = 0, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   =  SA_SETUP.VtdIpuEnable,
      prompt   = STRING_TOKEN(0x1C54),
      help     = STRING_TOKEN(0x1C55),
      option text = STRING_TOKEN (0x1590),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN (0x1591), value = 0, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   =  SA_SETUP.VtdIopEnable,
      prompt   = STRING_TOKEN(0x1C56),
      help     = STRING_TOKEN(0x1C57),
      option text = STRING_TOKEN (0x1590),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN (0x1591), value = 0, flags = RESET_REQUIRED;
    endoneof;
  endif;
endform; 

form formid   = 4182,
  title         = STRING_TOKEN(0x070B);

  oneof varid  = PCH_SETUP.DciUsb3TypecUfpDbg,
    prompt   = STRING_TOKEN(0x0737),
    help     = STRING_TOKEN(0x0738),
    option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(0x0735), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
  endoneof;

  oneof varid  = PCH_SETUP.DciDbcMode,
    prompt   = STRING_TOKEN(0x071F),
    help     = STRING_TOKEN(0x0720),
    option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(0x0721), value = 1, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(0x0722), value = 2, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(0x0723), value = 3, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(0x0735), value = 4, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
  endoneof;

  grayoutif NOT ideqval SI_SETUP.PlatformDebugConsent == 7;
    suppressif ideqval SI_SETUP.PlatformDebugConsent == 0;
      oneof varid  = PCH_SETUP.DciEn,
        prompt   = STRING_TOKEN(0x071D),
        help     = STRING_TOKEN(0x071E),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;
    endif; 

    grayoutif ideqval DEBUG_SETUP_VOLATILE_DATA.TraceHubForceOn == 0x1;
      oneof varid  = PCH_SETUP.PchTraceHubMode,
        prompt   = STRING_TOKEN(0x073B),
        help     = STRING_TOKEN(0x073C),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0743), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0744), value = 2, flags = RESET_REQUIRED;
      endoneof;
    endif;

    suppressif ideqval PCH_SETUP.PchTraceHubMode == 0;
      oneof varid  = PCH_SETUP.PchTraceHubMemReg0Size,
        prompt   = STRING_TOKEN(0x073D),
        help     = STRING_TOKEN(0x0741),
        option text = STRING_TOKEN(0x0745),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0746),   value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0747),   value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0748),  value = 3, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0749), value = 4, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x074A), value = 5, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x074B), value = 6, flags = RESET_REQUIRED;
      endoneof;

      oneof varid  = PCH_SETUP.PchTraceHubMemReg1Size,
        prompt   = STRING_TOKEN(0x073E),
        help     = STRING_TOKEN(0x0742),
        option text = STRING_TOKEN(0x0745),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0746),   value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0747),   value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0748),  value = 3, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0749), value = 4, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x074A), value = 5, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x074B), value = 6, flags = RESET_REQUIRED;
      endoneof;
    endif;

    oneof varid  = SA_SETUP.CpuTraceHubMode,
      prompt     = STRING_TOKEN (0x074C),
      help       = STRING_TOKEN (0x073C),
      option text = STRING_TOKEN (0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN (0x0743), value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN (0x0744),  value = 2, flags = RESET_REQUIRED;
    endoneof;

    suppressif ideqval SA_SETUP.CpuTraceHubMode == 0;
      oneof varid  = SA_SETUP.CpuTraceHubMemReg0Size,
        prompt     = STRING_TOKEN (0x073F),
        help       = STRING_TOKEN (0x0741),
        option text = STRING_TOKEN (0x0745),  value = 0x0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN (0x0746),   value = 0x1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x0747),   value = 0x2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x0748),  value = 0x3, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x0749), value = 0x4, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x074A), value = 0x5, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x074B), value = 0x6, flags = RESET_REQUIRED;
      endoneof;

      suppressif ideqval CPU_SETUP.DebugCpuDisabled == 1;
        oneof varid  = SA_SETUP.CpuTraceHubMemReg1Size,
          prompt     = STRING_TOKEN (0x0740),
          help       = STRING_TOKEN (0x0742),
          option text = STRING_TOKEN (0x0745),  value = 0x0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN (0x0746),   value = 0x1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x0747),   value = 0x2, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x0748),  value = 0x3, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x0749), value = 0x4, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x074A), value = 0x5, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x074B), value = 0x6, flags = RESET_REQUIRED;
        endoneof;
      endif;
    endif;
  endif; 

  suppressif  ideqval SETUP_CPU_FEATURES.DebugInterfaceSupported == 0;
    oneof varid   = CPU_SETUP.DebugInterfaceEnable,
      prompt      = STRING_TOKEN(0x0724),
      help        = STRING_TOKEN(0x0725),
      option text = STRING_TOKEN(0x1591),  value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x1590),  value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0736), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;
    suppressif  ideqval CPU_SETUP.DebugInterfaceEnable == 2;
      oneof varid   = CPU_SETUP.DebugInterfaceLockEnable,
        prompt      = STRING_TOKEN(0x0726),
        help        = STRING_TOKEN(0x0727),
        option text = STRING_TOKEN(0x0004),  value = 0, flags =  RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;
    endif;
  endif; 

  grayoutif ideqval DEBUG_SETUP_VOLATILE_DATA.UsbOverCurrentOvrd == 0x1;
    oneof varid = PCH_SETUP.PchEnableDbcObs,
      prompt   = STRING_TOKEN(0x0739),
      help     = STRING_TOKEN(0x073A),
      option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
    endoneof;
  endif;

  suppressif  ideqval SETUP_CPU_FEATURES.ProcTraceSupported == 0;
    oneof varid   = CPU_SETUP.ProcessorTraceMemSize,
      prompt      = STRING_TOKEN(0x0729),
      help        = STRING_TOKEN(0x072A),
      option text = STRING_TOKEN(0x0004), value = 0xFF, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x06C7), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x06C8), value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x06C9), value = 2, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x06CA), value = 3, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x06CB), value = 4, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x06CC), value = 5, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x06CD), value = 6, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x06CE), value = 7, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x06CF), value = 8, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x06D0), value = 9, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x06D1), value = 10, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x06D2), value = 11, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x06D3), value = 12, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x06D4), value = 13, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x06D5), value = 14, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x06D6), value = 15, flags = RESET_REQUIRED;
    endoneof;
  endif;

  suppressif  ideqval SETUP_CPU_FEATURES.ProcTraceSupported == 0
           OR ideqval CPU_SETUP.ProcessorTraceMemSize == 0xFF;
    oneof varid   = CPU_SETUP.ProcessorTraceEnable,
      prompt      = STRING_TOKEN(0x072B),
      help        = STRING_TOKEN(0x072C),
      option text = STRING_TOKEN(0x1591),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x1590),  value = 1, flags =  RESET_REQUIRED;
    endoneof;

    oneof varid   = CPU_SETUP.ProcessorTraceOutputScheme,
      prompt      = STRING_TOKEN(0x072D),
      help        = STRING_TOKEN(0x072E),
      option text = STRING_TOKEN(0x06C5),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x06C6),  value = 1, flags =  RESET_REQUIRED;
    endoneof;

    oneof varid   = CPU_SETUP.SmmProcTraceEnable,
      prompt      = STRING_TOKEN (0x072F),
      help        = STRING_TOKEN (0x0730),
      option text = STRING_TOKEN (0x0004),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN (0x0003),   value = 1, flags = RESET_REQUIRED;
    endoneof;
  endif;




  grayoutif ideqval DEBUG_SETUP_VOLATILE_DATA.JtagC10PgDis == 0x1;
    oneof varid   = CPU_SETUP.JtagC10PowerGateDisable,
      prompt      = STRING_TOKEN(0x0731),
      help        = STRING_TOKEN(0x0732),
      option text = STRING_TOKEN(0x0004), value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;
  endif;




  oneof varid     = CPU_SETUP.ThreeStrikeCounterDisable,
      prompt      = STRING_TOKEN(0x0733),
      help        = STRING_TOKEN(0x0734),
      option text = STRING_TOKEN(0x0004),  value = 1, flags =  RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
  endoneof;

  oneof varid  = SETUP_DATA.EnableCrashLog,
    prompt      = STRING_TOKEN(0x074D),
    help        = STRING_TOKEN(0x074E),
    option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
  endoneof;

  suppressif  ideqval SETUP_DATA.EnableCrashLog == 0;
    oneof varid  = SETUP_DATA.CrashLogOnAllReset,
      prompt      = STRING_TOKEN(0x074F),
      help        = STRING_TOKEN(0x0750),
      option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
    endoneof;
  endif;

  suppressif  ideqval SETUP_DATA.EnableCrashLog == 0;
    oneof varid  = SETUP_DATA.CrashLogRearmEnable,
      prompt      = STRING_TOKEN(0x0751),
      help        = STRING_TOKEN(0x0752),
      option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;
  endif;

  suppressif  ideqval SETUP_DATA.EnableCrashLog == 0;
    oneof varid  = SETUP_DATA.CrashLogClearEnable,
      prompt      = STRING_TOKEN(0x0753),
      help        = STRING_TOKEN(0x0754),
      option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
    endoneof;

  suppressif (ideqval CPU_SETUP_VOLATILE_DATA.CpuStepping == 0 AND
             ideqval CPU_SETUP_VOLATILE_DATA.CpuFamilyModel == 0x00000670);
   oneof varid  = CPU_SETUP.CrashLogGprs,
    prompt      = STRING_TOKEN(0x0755),
    help        = STRING_TOKEN(0x0756),
    option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(0x0757), value = 2, flags = RESET_REQUIRED;
  endoneof;
  endif;

  endif;

  oneof varid  = PCH_SETUP.PmcDbgMsgEn,
    prompt      = STRING_TOKEN(0x0758),
    help        = STRING_TOKEN(0x0759),
    option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
  endoneof;

  grayoutif ideqval ME_SETUP_STORAGE.AfterEoP == 0x1;
    oneof varid   = ME_SETUP_STORAGE.DelayedAuthenticationMode,
      questionid  = 5071,
      prompt      = STRING_TOKEN(0x075A),
      help        = STRING_TOKEN(0x075B),
      option text = STRING_TOKEN(0x0004),  value = 0, flags = DEFAULT | RESET_REQUIRED | INTERACTIVE;
      option text = STRING_TOKEN(0x0003),  value = 1, flags = RESET_REQUIRED | INTERACTIVE;
    endoneof;
  endif; 

endform; 
#line 468 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\Advanced.vfr"
  #line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PciBusSetup.hfr"

































form formid = 4104,
  title     = STRING_TOKEN(0x1304);

  subtitle text = STRING_TOKEN(0x130A);
  subtitle text = STRING_TOKEN(0x0002);

  
  text
    help  = STRING_TOKEN(0x1307),
    text  = STRING_TOKEN(0x1305),
    text  = STRING_TOKEN(0x1306),
    flags = 0,
    key   = 0;

  
  grayoutif ideqval SYSTEM_ACCESS.Access == 1;
    oneof varid   = SETUP_DATA.OpRomPost,
      prompt      = STRING_TOKEN(0x1313),
      help        = STRING_TOKEN(0x1314),
      option text = STRING_TOKEN(0x1315), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x1316), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;
  endif; 

  
  grayoutif ideqval SYSTEM_ACCESS.Access == 1;
    oneof varid   = PCH_SETUP.ExternalDma,
      prompt      = STRING_TOKEN(0x131C),
      help        = STRING_TOKEN(0x131D),
      option text = STRING_TOKEN(0x0045), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x0046), value = 1, flags = RESET_REQUIRED;
    endoneof;
  endif; 


  grayoutif ideqval SYSTEM_ACCESS.Access == 1;
    oneof varid   = PCI_BUS_SETUP.InstallExtOpRom,
      prompt      = STRING_TOKEN(0x1317),
      help        = STRING_TOKEN(0x1318),
      option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x1319), value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x131A), value = 2, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x131B), value = 3, flags = RESET_REQUIRED;
    endoneof;
  endif; 
#line 80 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PciBusSetup.hfr"

  
  grayoutif ideqval SYSTEM_ACCESS.Access == 1;
    oneof varid   = SETUP_DATA.PciLatency,
      prompt      = STRING_TOKEN(0x1308),
      help        = STRING_TOKEN(0x1309),
      option text = STRING_TOKEN(0x130B), value = 32, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x130C), value = 64, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x130D), value = 96, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x130E), value = 128, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x130F), value = 160, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x1310), value = 192, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x1311), value = 224, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x1312), value = 248, flags = RESET_REQUIRED;
    endoneof;
  endif; 

endform;
#line 469 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\Advanced.vfr"
  #line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\AcpiSetup.hfr"

































form formid = 4106,
  title     = STRING_TOKEN(0x0009);

  subtitle text = STRING_TOKEN(0x0009);
  subtitle text = STRING_TOKEN(0x0002);

  text
    help  = STRING_TOKEN(0x000D),
    text  = STRING_TOKEN(0x000C),
    text  = STRING_TOKEN(0x000E),
    flags = 0,
    key = 0;

  grayoutif ideqval SYSTEM_ACCESS.Access == 1;
    checkbox varid = SETUP_DATA.AcpiAuto,
      prompt       = STRING_TOKEN(0x0014),
      help         = STRING_TOKEN(0x0015),
      flags        = 0, 
      key          = 0,
    endcheckbox;
  endif; 

  subtitle text = STRING_TOKEN(0x0002);
  suppressif ideqval SETUP_DATA.AcpiAuto == 0x1;
    grayoutif ideqval SYSTEM_ACCESS.Access == 1;

      checkbox varid = SETUP_DATA.AcpiHibernate,
        prompt       = STRING_TOKEN(0x0012),
        help         = STRING_TOKEN(0x0013),
        flags        = CHECKBOX_DEFAULT | CHECKBOX_DEFAULT_MFG | RESET_REQUIRED, 
        key          = 0,
      endcheckbox;

      checkbox varid = SETUP_DATA.PtidSupport,
        prompt       = STRING_TOKEN(0x001C),
        help         = STRING_TOKEN(0x001D),
        flags        = CHECKBOX_DEFAULT | CHECKBOX_DEFAULT_MFG | RESET_REQUIRED, 
        key          = 0,
      endcheckbox;

      oneof varid   = SETUP_DATA.PeciAccessMethod,
        prompt      = STRING_TOKEN(0x001E),
        help        = STRING_TOKEN(0x001F),
        option text = STRING_TOKEN(0x0020), value = 0, flags = RESET_REQUIRED|DEFAULT | MANUFACTURING;
        option text = STRING_TOKEN(0x0021), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = SETUP_DATA.AcpiSleepState,
        prompt      = STRING_TOKEN(0x000B),
        help        = STRING_TOKEN(0x000F),
        option text = STRING_TOKEN(0x0008), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0007), value = 1, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
      endoneof;
  endif; endif;

  suppressif ideqval PCH_SETUP.PcieRootPortEn[0x0] == 0x0;
    oneof varid   = SETUP_DATA.PciExpNative,
      prompt      = STRING_TOKEN(0x0016),
      help        = STRING_TOKEN(0x0017),
      option text = STRING_TOKEN(0x0008), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0007), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;
  endif; 

  suppressif ideqval SETUP_DATA.PciExpNative == 0x0;
    oneof varid   = SETUP_DATA.NativeAspmEnable,
      prompt      = STRING_TOKEN(0x0018),
      help        = STRING_TOKEN(0x0019),
      option text = STRING_TOKEN(0x0006), value = 2, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
      option text = STRING_TOKEN(0x0007), value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0008), value = 0, flags = RESET_REQUIRED;
    endoneof;
  endif; 




  oneof varid   = SETUP_DATA.GuidForward,
    prompt      = STRING_TOKEN(0x001A),
    help        = STRING_TOKEN(0x001B),
    default     = 0, defaultstore = MyStandardDefault,
    option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
  endoneof;



  oneof varid   = SA_SETUP.BdatEnable,
    prompt      = STRING_TOKEN(0x0010),
    help        = STRING_TOKEN(0x0011),
    default     = 0, defaultstore = MyStandardDefault,
    option text = STRING_TOKEN(0x0008), value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(0x0007), value = 1, flags = RESET_REQUIRED;
  endoneof;

  subtitle text = STRING_TOKEN(0x0002);


  oneof varid   = SETUP_DATA.WakeOnRTCS5,
    prompt      = STRING_TOKEN(0x0029),
    help        = STRING_TOKEN(0x002A),
    option text = STRING_TOKEN(0x0004), value=0, flags= DEFAULT | MANUFACTURING | RESET_REQUIRED;
    option text = STRING_TOKEN(0x0003), value=1, flags= RESET_REQUIRED;
  endoneof;
#line 139 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\AcpiSetup.hfr"


  oneof varid   = SETUP_DATA.AcpiDebug,
    prompt      = STRING_TOKEN(0x0022),
    help        = STRING_TOKEN(0x0023),
    option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
  endoneof;

  suppressif ideqval SETUP_DATA.AcpiDebug == 0;
    text
      help  = STRING_TOKEN(0x0024),
      text  = STRING_TOKEN(0x0025),
      text  = STRING_TOKEN(0x0026),
      flags = 0,
      key   = 0;
  
  
  
    oneof varid   = SETUP_DATA.SerialPortAcpiDebug,
      prompt      = STRING_TOKEN(0x0027),
      help        = STRING_TOKEN(0x0028),
      option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
    endoneof;
  
  
  
  endif; 
#line 169 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\AcpiSetup.hfr"















































































































    oneof varid   = SETUP_DATA.StorageRtd3Support,
      prompt      = STRING_TOKEN(0x0048),
      help        = STRING_TOKEN(0x0049),
      option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x004A), value = 1, flags = RESET_REQUIRED;
      suppressif NOT ideqval SETUP_DATA.Rtd3Support == 1;
        option text = STRING_TOKEN(0x004B),  value = 2, flags = RESET_REQUIRED;
      endif;
      default value = cond(get(SETUP_DATA.Rtd3Support) == 1 ? 2 : 1),
    endoneof;

     
      oneof varid   = SETUP_DATA.LowPowerS0Idle,
        questionid  = 4381,
        prompt      = STRING_TOKEN(0x004C),
        help        = STRING_TOKEN(0x004D),
        flags       = INTERACTIVE,






#line 304 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\AcpiSetup.hfr"



        default     = 0, defaultstore = MyStandardDefault,
#line 309 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\AcpiSetup.hfr"


#line 312 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\AcpiSetup.hfr"
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED | INTERACTIVE;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED | INTERACTIVE;
        warningif prompt = STRING_TOKEN(0x00A1),
          ideqval SETUP_DATA.LowPowerS0Idle == 1
        endif
      endoneof;
     

      grayoutif NOT ideqval SETUP_DATA.LowPowerS0Idle == 1;
        oneof varid = SETUP_DATA.PuisEnable,
            prompt   = STRING_TOKEN(0x004E),
            help     = STRING_TOKEN(0x004F),
            option text = STRING_TOKEN(0x0003), value = 1, flags =  RESET_REQUIRED;
            option text = STRING_TOKEN(0x0004), value = 0, flags =  DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
      endif;


    suppressif NOT ideqval SETUP_DATA.LowPowerS0Idle == 1;
      oneof varid   = SETUP_DATA.CSNotifyEC,
        prompt      = STRING_TOKEN(0x0095),
        help        = STRING_TOKEN(0x0096),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      suppressif NOT ideqval SETUP_DATA.CSNotifyEC == 1;
        oneof varid   = SETUP_DATA.CSDebugLightEC,
          questionid  = 5013,
          prompt      = STRING_TOKEN(0x0097),
          help        = STRING_TOKEN(0x0098),
          option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED | INTERACTIVE;
          option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED | INTERACTIVE;
        endoneof;

        oneof varid   = SETUP_DATA.EcLowPowerMode,
          prompt      = STRING_TOKEN(0x0099),
          help        = STRING_TOKEN(0x009A),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
      endif; 

      oneof varid   = SETUP_DATA.SensorStandby,
        prompt      = STRING_TOKEN(0x009B),
        help        = STRING_TOKEN(0x009C),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = SETUP_DATA.PL1LimitCS,
        prompt      = STRING_TOKEN(0x009D),
        help        = STRING_TOKEN(0x009E),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      suppressif NOT ideqval SETUP_DATA.PL1LimitCS == 1;
        numeric varid = SETUP_DATA.PL1LimitCSValue,
          prompt      = STRING_TOKEN(0x009F),
          help        = STRING_TOKEN(0x00A0),
          minimum     = 3000,
          maximum     = 20000,
          step        = 125,
          default     = 4500,
        endnumeric;
      endif; 

       goto 4394,
          prompt = STRING_TOKEN(0x0050),
          help = STRING_TOKEN(0x0051);

      oneof varid   = SETUP_DATA.LpitResidencyCounter,
        prompt      = STRING_TOKEN(0x00A2),
        help        = STRING_TOKEN(0x00A3),
        option text = STRING_TOKEN(0x00A5), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x00A4), value = 3, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        suppressif ideqval SETUP_VOLATILE_DATA.PSOnSupported == 0;
          option text = STRING_TOKEN(0x00A6), value = 7, flags = RESET_REQUIRED;
        endif;
      endoneof;

    endif; 

  subtitle text = STRING_TOKEN(0x0002);

  oneof varid   = SETUP_DATA.LoadSSDTFromFile,
    prompt      = STRING_TOKEN(0x00A7),
    help        = STRING_TOKEN(0x00A7),
    option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | RESET_REQUIRED;
    option text = STRING_TOKEN(0x0003), value = 1, flags =  RESET_REQUIRED;
  endoneof;

  subtitle text = STRING_TOKEN(0x0002);

  oneof varid     = SETUP_DATA.PciDelayOptimizationEcr,
    prompt      = STRING_TOKEN(0x00A8),
    help        = STRING_TOKEN(0x00A9),
    option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
  endoneof;

  oneof varid  = SETUP_DATA.EnableMsiInFadt,
    prompt = STRING_TOKEN(0x00AA),
    help = STRING_TOKEN(0x00AB),
    option text = STRING_TOKEN(0x0004),  value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(0x0003),   value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
  endoneof;

endform;  




form formid = 4394,
  title = STRING_TOKEN(0x0050);

  subtitle text = STRING_TOKEN(0x0050);
  subtitle text = STRING_TOKEN(0x0002);

  oneof varid       = SETUP_DATA.PepCpu,
        prompt      = STRING_TOKEN(0x0052),
        help        = STRING_TOKEN(0x0053),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = SETUP_DATA.PepGfx,
        prompt      = STRING_TOKEN(0x0054),
        help        = STRING_TOKEN(0x0055),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = SETUP_DATA.PepIpu,
        prompt      = STRING_TOKEN(0x0056),
        help        = STRING_TOKEN(0x0057),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = SETUP_DATA.PepGna,
        prompt      = STRING_TOKEN(0x0058),
        help        = STRING_TOKEN(0x0059),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = SETUP_DATA.PepSataContraints,
        prompt      = STRING_TOKEN(0x005A),
        help        = STRING_TOKEN(0x005B),
        option text = STRING_TOKEN(0x005E), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x005C),    value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0070),        value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x005D),    value = 3, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = SETUP_DATA.PepSataEnumeration,
        prompt      = STRING_TOKEN(0x005F),
        help        = STRING_TOKEN(0x0060),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = SETUP_DATA.PepPcieStorage,
        prompt      = STRING_TOKEN(0x0061),
        help        = STRING_TOKEN(0x0062),
        option text = STRING_TOKEN(0x0063), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0064),  value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0065),  value = 3, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = SETUP_DATA.PepPcieLan,
        prompt      = STRING_TOKEN(0x0066),
        help        = STRING_TOKEN(0x0067),
        option text = STRING_TOKEN(0x0063), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0064),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0065),   value = 3, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = SETUP_DATA.PepPcieWlan,
        prompt      = STRING_TOKEN(0x0068),
        help        = STRING_TOKEN(0x0069),
        option text = STRING_TOKEN(0x0063), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0064),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0065),   value = 3, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = SETUP_DATA.PepPcieGfx,
        prompt      = STRING_TOKEN(0x006A),
        help        = STRING_TOKEN(0x006B),
        option text = STRING_TOKEN(0x0063), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0064),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0065),   value = 3,  flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = SETUP_DATA.PepPcieOther,
        prompt      = STRING_TOKEN(0x006C),
        help        = STRING_TOKEN(0x006D),
        option text = STRING_TOKEN(0x0063), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0064),  value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0065),   value = 3, flags = RESET_REQUIRED;
      endoneof;








#line 524 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\AcpiSetup.hfr"

      grayoutif ideqval PCH_SETUP.PchSerialIoUart[0x0] == 0 AND
                ideqval PCH_SETUP.PchSerialIoUart[0x1] == 0 AND
                ideqval PCH_SETUP.PchSerialIoUart[0x2] == 0;
        oneof varid   = SETUP_DATA.PepUart,
          prompt      = STRING_TOKEN(0x0071),
          help        = STRING_TOKEN(0x0072),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
      endif;

      grayoutif ideqval PCH_SETUP.PchSerialIoI2c[0x0] == 0;
        oneof varid   = SETUP_DATA.PepI2c0,
          prompt      = STRING_TOKEN(0x0075),
          help        = STRING_TOKEN(0x007D),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
      endif;

      grayoutif ideqval PCH_SETUP.PchSerialIoI2c[0x1] == 0;
        oneof varid   = SETUP_DATA.PepI2c1,
          prompt      = STRING_TOKEN(0x0076),
          help        = STRING_TOKEN(0x007D),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
      endif;

      grayoutif ideqval PCH_SETUP.PchSerialIoI2c[0x2] == 0;
        oneof varid   = SETUP_DATA.PepI2c2,
          prompt      = STRING_TOKEN(0x0077),
          help        = STRING_TOKEN(0x007D),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
      endif;

      grayoutif ideqval PCH_SETUP.PchSerialIoI2c[0x3] == 0;
        oneof varid   = SETUP_DATA.PepI2c3,
          prompt      = STRING_TOKEN(0x0078),
          help        = STRING_TOKEN(0x007D),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
      endif;

      grayoutif ideqval PCH_SETUP.PchSerialIoI2c[0x4] == 0;
        oneof varid   = SETUP_DATA.PepI2c4,
          prompt      = STRING_TOKEN(0x0079),
          help        = STRING_TOKEN(0x007D),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
      endif;

      grayoutif ideqval PCH_SETUP.PchSerialIoI2c[0x5] == 0;
        oneof varid   = SETUP_DATA.PepI2c5,
          prompt      = STRING_TOKEN(0x007A),
          help        = STRING_TOKEN(0x007D),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
      endif;

      grayoutif ideqval PCH_SETUP.PchSerialIoI2c[0x6] == 0;
        oneof varid   = SETUP_DATA.PepI2c6,
          prompt      = STRING_TOKEN(0x007B),
          help        = STRING_TOKEN(0x007D),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
      endif;

      grayoutif ideqval PCH_SETUP.PchSerialIoI2c[0x7] == 0;
        oneof varid   = SETUP_DATA.PepI2c7,
          prompt      = STRING_TOKEN(0x007C),
          help        = STRING_TOKEN(0x007D),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
      endif;

      grayoutif ideqval PCH_SETUP.PchSerialIoSpi[0x0] == 0 AND
                ideqval PCH_SETUP.PchSerialIoSpi[0x1] == 0 AND
                ideqval PCH_SETUP.PchSerialIoSpi[0x2] == 0;
        oneof varid   = SETUP_DATA.PepSpi,
          prompt      = STRING_TOKEN(0x0073),
          help        = STRING_TOKEN(0x0074),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
      endif;

      oneof varid   = SETUP_DATA.PepXhci,
        prompt      = STRING_TOKEN(0x007E),
        help        = STRING_TOKEN(0x007F),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      grayoutif ideqval PCH_SETUP.PchHdAudio == 0;
        oneof varid   = SETUP_DATA.PepAudio,
          prompt      = STRING_TOKEN(0x0080),
          help        = STRING_TOKEN(0x0081),
          option text = STRING_TOKEN(0x0063), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0064),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0065),   value = 3, flags = RESET_REQUIRED;
        endoneof;
      endif;

      oneof varid   = SETUP_DATA.PepCsme,
        prompt      = STRING_TOKEN(0x0084),
        help        = STRING_TOKEN(0x0085),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

     oneof varid   = SETUP_DATA.PepHeci3,
        prompt      = STRING_TOKEN(0x0086),
        help        = STRING_TOKEN(0x0087),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;


      oneof varid   = SETUP_DATA.PepGbe,
        prompt      = STRING_TOKEN(0x0088),
        help        = STRING_TOKEN(0x0089),
        
        
        
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        
        
        
      endoneof;
#line 664 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\AcpiSetup.hfr"


      oneof varid   = SETUP_DATA.PepThc0,
        prompt      = STRING_TOKEN(0x008A),
        help        = STRING_TOKEN(0x008C),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = SETUP_DATA.PepThc1,
        prompt      = STRING_TOKEN(0x008B),
        help        = STRING_TOKEN(0x008C),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;
#line 680 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\AcpiSetup.hfr"














#line 695 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\AcpiSetup.hfr"
      oneof varid   = SETUP_DATA.PepTcss,
        prompt      = STRING_TOKEN(0x0091),
        help        = STRING_TOKEN(0x0092),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;



    grayoutif ideqval SA_SETUP.VmdEnable == 0x0;
      oneof varid   = SETUP_DATA.PepVmd,
        prompt      = STRING_TOKEN(0x0093),
        help        = STRING_TOKEN(0x0094),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;
    endif; 
#line 713 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\AcpiSetup.hfr"

    suppressif ideqval PCH_SETUP.PchScsEmmcEnabled == 0;
      oneof varid   = SETUP_DATA.PepEmmc,
        prompt      = STRING_TOKEN(0x0082),
        help        = STRING_TOKEN(0x0083),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;
    endif;


endform; 
#line 470 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\Advanced.vfr"
  #line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\CpuSetup.hfr"

































  form formid = 4109,
  title = STRING_TOKEN (0x02D7);

  subtitle text = STRING_TOKEN (0x02D7);
  subtitle text = STRING_TOKEN(0x0002);

  suppressif ideqval CPU_SETUP.AllSmallCoreCount == 0 OR
               ideqval CPU_SETUP.ActiveSmallCoreCount == 0;
    goto 5460,
      prompt = STRING_TOKEN (0x0702),
      help   = STRING_TOKEN (0x0703);
  endif;

  grayoutif ideqval CPU_SETUP.AllBigCoreCount == 0 OR
              ideqval CPU_SETUP.ActiveCoreCount == 0;
    goto 5461,
      prompt = STRING_TOKEN (0x0704),
      help   = STRING_TOKEN (0x0705);
  endif;
  subtitle text = STRING_TOKEN(0x0002);

  text
    help  = STRING_TOKEN (0x039D),
    text  = STRING_TOKEN (0x039B),
    text  = STRING_TOKEN (0x039C),
    flags = 0,
    key   = 0;

  text
    help  = STRING_TOKEN (0x0399),
    text  = STRING_TOKEN (0x0398),
    text  = STRING_TOKEN (0x039A),
    flags = 0,
    key   = 0;

  text
    help  = STRING_TOKEN (0x03B7),
    text  = STRING_TOKEN (0x03B6),
    text  = STRING_TOKEN (0x03B8),
    flags = 0,
    key   = 0;

  text
    help  = STRING_TOKEN (0x03BA),
    text  = STRING_TOKEN (0x03B9),
    text  = STRING_TOKEN (0x03BB),
    flags = 0,
    key   = 0;

  text
    help  = STRING_TOKEN(0x03BD),
    text  = STRING_TOKEN(0x03BC),
    text  = STRING_TOKEN(0x03BE),
    flags = 0,
    key   = 0;

  text
    help  = STRING_TOKEN(0x03C0),
    text  = STRING_TOKEN(0x03BF),
    text  = STRING_TOKEN(0x03C1),
    flags = 0,
    key   = 0;

  text
    help  = STRING_TOKEN(0x03C3),
    text  = STRING_TOKEN(0x03C2),
    text  = STRING_TOKEN(0x03C4),
    flags = 0,
    key   = 0;

   text
    help  = STRING_TOKEN(0x03C6),
    text  = STRING_TOKEN(0x03C5),
    text  = STRING_TOKEN(0x03C7),
    flags = 0,
    key   = 0;

  text
    help  = STRING_TOKEN(0x03C9),
    text  = STRING_TOKEN(0x03C8),
    text  = STRING_TOKEN(0x03CA),
    flags = 0,
    key   = 0;

  subtitle text = STRING_TOKEN(0x0002);

  suppressif ideqval SETUP_CPU_FEATURES.C6DramSupported == 0;
    oneof varid   = CPU_SETUP.EnableC6Dram,
      questionid  = 32769,
      prompt      = STRING_TOKEN (0x06C3),
      help        = STRING_TOKEN (0x06C4),
      default     = 1, defaultstore = MyStandardDefault,

      option text = STRING_TOKEN (0x0004), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN (0x0003),  value = 1, flags = RESET_REQUIRED;
    endoneof;
  endif; 

  oneof varid   = CPU_SETUP.CpuRatioOverride,
    prompt      = STRING_TOKEN (0x03CF),
    help        = STRING_TOKEN (0x03D0),
    option text = STRING_TOKEN (0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    option text = STRING_TOKEN (0x0003), value = 1, flags = RESET_REQUIRED;
  endoneof;

  label 1;

  grayoutif ideqval CPU_SETUP.CpuRatioOverride == 0;
    numeric varid = CPU_SETUP.CpuRatio,
      prompt      = STRING_TOKEN (0x03CD),
      help        = STRING_TOKEN (0x03CE),
      flags       = RESET_REQUIRED | INTERACTIVE, key = 4321,
      minimum     = 0,
      maximum     = 63,
      step        = 0,
      default     = 20,
    endnumeric;
  endif; 

  oneof varid   = CPU_SETUP.HwPrefetcher,
    prompt      = STRING_TOKEN (0x0406),
    help        = STRING_TOKEN (0x0407),
    option text = STRING_TOKEN (0x0004), value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN (0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
  endoneof;

  oneof varid   = CPU_SETUP.AclPrefetch,
    prompt      = STRING_TOKEN (0x0408),
    help        = STRING_TOKEN (0x0409),
    option text = STRING_TOKEN (0x0004), value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN (0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
  endoneof;

  suppressif ideqval SETUP_CPU_FEATURES.VTAvailable == 0;
    grayoutif ideqval SYSTEM_ACCESS.Access == 1;
       
        oneof varid   = CPU_SETUP.VT,
          questionid  = 5145,
          prompt      = STRING_TOKEN (0x040A),
          help        = STRING_TOKEN (0x040B),
          option text = STRING_TOKEN (0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
       
  endif; endif;

  oneof varid   = CPU_SETUP.Peci,
    prompt      = STRING_TOKEN (0x03D1),
    help        = STRING_TOKEN (0x03D2),
    option text = STRING_TOKEN (0x0004), value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN (0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
  endoneof;


  suppressif ideqval SETUP_CPU_FEATURES.PpinFeatureAvailable == 0;
    oneof varid = CPU_SETUP.PpinSupport,
      prompt      = STRING_TOKEN (0x06DD),
      help        = STRING_TOKEN (0x06DE),
      option text = STRING_TOKEN (0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN (0x06DF), value = 1, flags = RESET_REQUIRED;
    endoneof;

    suppressif ideqval CPU_SETUP.PpinSupport == 0;
      oneof varid = CPU_SETUP.PpinEnableMode,
        prompt      = STRING_TOKEN (0x06E0),
        help        = STRING_TOKEN (0x06E1),
        option text = STRING_TOKEN (0x06E2), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN (0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;
    endif;
  endif;
#line 206 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\CpuSetup.hfr"

  oneof varid = CPU_SETUP.AvxDisable,
    prompt      = STRING_TOKEN (0x06E3),
    help        = STRING_TOKEN (0x06E4),
    option text = STRING_TOKEN (0x0003), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    option text = STRING_TOKEN (0x0004), value = 1, flags = RESET_REQUIRED;
  endoneof;

  grayoutif ideqval CPU_SETUP.Txt == 1;
    suppressif ideqval CPU_SETUP.AllBigCoreCount == 0;
      grayoutif ideqval CPU_SETUP.PerCoreDisableConfiguration == 1;
        oneof varid     = CPU_SETUP.ActiveCoreCount,
          prompt        = STRING_TOKEN (0x03F0),
          help          = STRING_TOKEN (0x03F1),
          option text   = STRING_TOKEN (0x0405), value = 0xFF, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          suppressif ideqval CPU_SETUP.AllBigCoreCount < 8;
            option text = STRING_TOKEN (0x03FB), value = 7, flags = RESET_REQUIRED;
          endif 
          suppressif ideqval CPU_SETUP.AllBigCoreCount < 7;
            option text = STRING_TOKEN (0x03FA), value = 6, flags = RESET_REQUIRED;
          endif 
          suppressif ideqval CPU_SETUP.AllBigCoreCount < 6;
            option text = STRING_TOKEN (0x03F9), value = 5, flags = RESET_REQUIRED;
          endif 
          suppressif ideqval CPU_SETUP.AllBigCoreCount < 5;
            option text = STRING_TOKEN (0x03F8), value = 4, flags = RESET_REQUIRED;
          endif 
          suppressif ideqval CPU_SETUP.AllBigCoreCount < 4;
            option text = STRING_TOKEN (0x03F7), value = 3, flags = RESET_REQUIRED;
          endif 
          suppressif ideqval CPU_SETUP.AllBigCoreCount < 3;
            option text = STRING_TOKEN (0x03F6), value = 2, flags = RESET_REQUIRED;
          endif 
          suppressif ideqval CPU_SETUP.AllBigCoreCount < 2;
           option text   = STRING_TOKEN (0x03F5), value = 1, flags = RESET_REQUIRED;
          endif 
        endoneof;
      endif; 
    endif;

    suppressif ideqval CPU_SETUP.AllSmallCoreCount == 0;
      grayoutif ideqval CPU_SETUP.PerCoreDisableConfiguration == 1;
      oneof varid     = CPU_SETUP.ActiveSmallCoreCount,
        prompt        = STRING_TOKEN (0x03F2),
        help          = STRING_TOKEN (0x03F3),
          option text   = STRING_TOKEN (0x0405), value = 0xFF, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;



          suppressif ideqval CPU_SETUP.AllSmallCoreCount < 16;
            option text = STRING_TOKEN (0x0403), value = 15, flags = RESET_REQUIRED;
          endif 
          suppressif ideqval CPU_SETUP.AllSmallCoreCount < 15;
            option text = STRING_TOKEN (0x0402), value = 14, flags = RESET_REQUIRED;
          endif 
          suppressif ideqval CPU_SETUP.AllSmallCoreCount < 14;
            option text = STRING_TOKEN (0x0401), value = 13, flags = RESET_REQUIRED;
          endif 
          suppressif ideqval CPU_SETUP.AllSmallCoreCount < 13;
            option text = STRING_TOKEN (0x0400), value = 12, flags = RESET_REQUIRED;
          endif 
          suppressif ideqval CPU_SETUP.AllSmallCoreCount < 12;
            option text = STRING_TOKEN (0x03FF), value = 11, flags = RESET_REQUIRED;
          endif 
          suppressif ideqval CPU_SETUP.AllSmallCoreCount < 11;
            option text = STRING_TOKEN (0x03FE), value = 10, flags = RESET_REQUIRED;
          endif 
          suppressif ideqval CPU_SETUP.AllSmallCoreCount < 10;
            option text = STRING_TOKEN (0x03FD), value = 9, flags = RESET_REQUIRED;
          endif 
          suppressif ideqval CPU_SETUP.AllSmallCoreCount < 9;
            option text = STRING_TOKEN (0x03FC), value = 8, flags = RESET_REQUIRED;
          endif 



          suppressif ideqval CPU_SETUP.AllSmallCoreCount < 8;
            option text = STRING_TOKEN (0x03FB), value = 7, flags = RESET_REQUIRED;
          endif 
          suppressif ideqval CPU_SETUP.AllSmallCoreCount < 7;
            option text = STRING_TOKEN (0x03FA), value = 6, flags = RESET_REQUIRED;
          endif 
          suppressif ideqval CPU_SETUP.AllSmallCoreCount < 6;
            option text = STRING_TOKEN (0x03F9), value = 5, flags = RESET_REQUIRED;
          endif 
          suppressif ideqval CPU_SETUP.AllSmallCoreCount < 5;
            option text = STRING_TOKEN (0x03F8), value = 4, flags = RESET_REQUIRED;
          endif 
          suppressif ideqval CPU_SETUP.AllSmallCoreCount < 4;
            option text = STRING_TOKEN (0x03F7), value = 3, flags = RESET_REQUIRED;
          endif 
          suppressif ideqval CPU_SETUP.AllSmallCoreCount < 3;
            option text = STRING_TOKEN (0x03F6), value = 2, flags = RESET_REQUIRED;
          endif 
          suppressif ideqval CPU_SETUP.AllSmallCoreCount < 2;
           option text   = STRING_TOKEN (0x03F5), value = 1, flags = RESET_REQUIRED;
          endif 
          option text   = STRING_TOKEN (0x03F4), value = 0, flags = RESET_REQUIRED;
        endoneof;
      endif;
    endif;
  endif; 

  suppressif ideqval SETUP_CPU_FEATURES.HTAvailable == 0;
    grayoutif ideqval CPU_SETUP.Txt == 1;
       
        oneof varid   = CPU_SETUP.HyperThreading,
          questionid  = 5143,
          prompt      = STRING_TOKEN (0x03DF),
          help        = STRING_TOKEN (0x03E0),

          option text = STRING_TOKEN (0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;



#line 323 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\CpuSetup.hfr"
        endoneof;
       
  endif; endif;

  oneof varid   = CPU_SETUP.BistOnReset,
    prompt      = STRING_TOKEN (0x03E1),
    help        = STRING_TOKEN (0x03E2),
    option text = STRING_TOKEN (0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    option text = STRING_TOKEN (0x0003), value = 1, flags = RESET_REQUIRED;
  endoneof;

  oneof varid   = CPU_SETUP.ApIdleManner,
    prompt      = STRING_TOKEN (0x03E3),
    help        = STRING_TOKEN (0x03E4),
    option text = STRING_TOKEN (0x03E5), value = 1, flags = RESET_REQUIRED;
    option text = STRING_TOKEN (0x03E6), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    option text = STRING_TOKEN (0x03E7), value = 3, flags = RESET_REQUIRED;
  endoneof;

  grayoutif ideqval SYSTEM_ACCESS.Access == 1;
        oneof varid     = CPU_SETUP.AES,
            prompt      = STRING_TOKEN (0x03E8),
            help        = STRING_TOKEN (0x03E9),
            option text = STRING_TOKEN (0x0004),  value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN (0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
  endif;  




      suppressif NOT ideqval SETUP_DATA.FirmwareConfiguration == 5;
        oneof varid     = CPU_SETUP.ForceUnlockAES,
            prompt      = STRING_TOKEN (0x03EA),
            help        = STRING_TOKEN (0x03EB),
            option text = STRING_TOKEN (0x0004),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN (0x0003),  value = 1, flags = RESET_REQUIRED;
        endoneof;
      endif; 




  oneof varid     = CPU_SETUP.MachineCheck,
      prompt      = STRING_TOKEN (0x03EC),
      help        = STRING_TOKEN (0x03ED),
      option text = STRING_TOKEN (0x0004),  value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN (0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
  endoneof;

  oneof varid     = CPU_SETUP.MonitorMwait,
      prompt      = STRING_TOKEN (0x03EE),
      help        = STRING_TOKEN (0x03EF),
      option text = STRING_TOKEN (0x0004),  value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN (0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
  endoneof;

  suppressif  ideqval SETUP_CPU_FEATURES.TXTAvailable == 0;
  grayoutif ideqval CPU_SETUP.VT == 0


#line 385 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\CpuSetup.hfr"

              OR (
                  (NOT ideqval SETUP_DATA.FirmwareConfiguration == 5) AND 
                  ideqval TCG_SETUP.dTpm12Present == 0 AND
                  ideqval TCG_SETUP.dTpm20Present == 0 AND
                  ideqval TCG_SETUP.PttPresent == 0)
#line 392 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\CpuSetup.hfr"
              OR ideqval SA_SETUP.EnableVtd == 0
              OR ideqval ME_SETUP_STORAGE.RemoteSessionActive == 1;
        oneof varid     = CPU_SETUP.Txt,
            questionid  = 5449,
            prompt      = STRING_TOKEN (0x040C),
            help        = STRING_TOKEN (0x040D),
            flags       = INTERACTIVE,
            option text = STRING_TOKEN (0x0004),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN (0x0003),   value = 1, flags = RESET_REQUIRED;
        endoneof;
      endif; endif;

      suppressif  ideqval SETUP_CPU_FEATURES.TXTAvailable == 0;
      grayoutif ideqval CPU_SETUP.Txt == 0;
        oneof varid    = CPU_SETUP.AcheckRequest,
           prompt      = STRING_TOKEN (0x040E),
           help        = STRING_TOKEN (0x040F),
           option text = STRING_TOKEN (0x0004),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
           option text = STRING_TOKEN (0x0003),  value = 1, flags = RESET_REQUIRED;
        endoneof;
      endif; endif;

      suppressif  ideqval SETUP_CPU_FEATURES.TXTAvailable == 0;
      grayoutif ideqval CPU_SETUP.LtDprProgramming == 1

              OR (ideqval TCG_SETUP.dTpm12Present == 0 AND ideqval TCG_SETUP.dTpm20Present == 0)
#line 419 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\CpuSetup.hfr"
              OR ideqval CPU_SETUP.VT == 0
              OR ideqval SA_SETUP.EnableVtd == 0
              OR ideqval CPU_SETUP.Txt == 0
              OR NOT (ideqval CPU_SETUP.ActiveCoreCount == 0xFF AND ideqval CPU_SETUP.ActiveSmallCoreCount == 0xFF);
      numeric varid = CPU_SETUP.DprSize,
        prompt      = STRING_TOKEN (0x03CB),
        help        = STRING_TOKEN (0x03CC),
        minimum     = 0,
        maximum     = 255,
        step        = 1,    
        default     = 4,    
      endnumeric;
      endif; endif;

      suppressif  ideqval SETUP_CPU_FEATURES.TXTAvailable == 0;
      grayoutif ideqval CPU_SETUP.LtDprProgramming == 1

              OR ((ideqval TCG_SETUP.dTpm12Present == 0 OR NOT ideqval TCG_SETUP.TpmCurrentState == 2)
              AND ideqval TCG_SETUP.dTpm20Present == 0)
#line 439 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\CpuSetup.hfr"
              OR ideqval CPU_SETUP.VT == 0
              OR ideqval SA_SETUP.EnableVtd == 0
              OR ideqval CPU_SETUP.Txt == 1
              OR NOT ideqval CPU_SETUP.ActiveCoreCount == 0
              OR (ideqval CPU_SETUP.HyperThreading == 0 AND ideqval SETUP_CPU_FEATURES.HTAvailable == 1);
      oneof varid   = CPU_SETUP.ResetAux,
        prompt      = STRING_TOKEN (0x0699),
        help        = STRING_TOKEN (0x069A),
        option text = STRING_TOKEN (0x0046), value=1, flags=RESET_REQUIRED;
        option text = STRING_TOKEN (0x0045), value=0, flags=DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;
      endif; endif;


      goto 5124,
        prompt = STRING_TOKEN (0x0691),
        help = STRING_TOKEN (0x0691);
#line 457 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\CpuSetup.hfr"

      suppressif ideqval SETUP_CPU_FEATURES.SmmEnhancementSupported == 0;
        goto 4368,
          prompt = STRING_TOKEN (0x06E7),
          help = STRING_TOKEN (0x06E8);
      endif;

    suppressif ideqval SETUP_CPU_FEATURES.FclkSupported == 0;
      oneof varid   = CPU_SETUP.EpocFclkFreq,
        prompt      = STRING_TOKEN (0x06F1),
        help        = STRING_TOKEN (0x06F2),
        option text = STRING_TOKEN (0x06F3),  value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x06F5),  value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x06F4),  value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x0006),  value = 3, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;
    endif;

    
    
    
    suppressif NOT ideqval SETUP_DATA.FirmwareConfiguration == 5;
      oneof varid     = SETUP_DATA.LlcWaysEnable,
              prompt      = STRING_TOKEN (0x06F8),
              help        = STRING_TOKEN (0x06F9),
              option text = STRING_TOKEN (0x0004),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
              option text = STRING_TOKEN (0x0003),  value = 1, flags = RESET_REQUIRED;
      endoneof;

      suppressif ideqval SETUP_DATA.LlcWaysEnable == 0;
              numeric varid  = SETUP_DATA.LlcWays,
                      prompt  = STRING_TOKEN (0x06FA),
                      help    = STRING_TOKEN (0x06FB),
                      flags   = RESET_REQUIRED,
                      minimum = 0,
                      maximum = 0xFFFF,
                      step    = 1,
                      default = 0xFFFF,
              endnumeric;
      endif;
    endif; 
    
    
    

    suppressif ideqval SETUP_CPU_FEATURES.TmeSupported == 0;
      oneof varid   = CPU_SETUP.TmeEnable,
        questionid  = 32770,
        prompt      = STRING_TOKEN (0x06FC),
        help        = STRING_TOKEN (0x06FD),

        option text = STRING_TOKEN (0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN (0x0003),  value = 1, flags = RESET_REQUIRED;
      endoneof;






























#line 542 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\CpuSetup.hfr"



    endif; 


    oneof varid   = CPU_SETUP.GameCompatibilityMode,
        questionid  = 5125,
        prompt      = STRING_TOKEN (0x0706),
        help        = STRING_TOKEN (0x0707),
        flags       = INTERACTIVE,
        option text = STRING_TOKEN (0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN (0x0003), value = 1, flags = RESET_REQUIRED;
        warningif prompt = STRING_TOKEN(0x0708),
          ideqval CPU_SETUP.GameCompatibilityMode == 1
        endif
      endoneof;
#line 560 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\CpuSetup.hfr"

  endform; 

  form formid = 5460,
  title = STRING_TOKEN (0x0702);

  subtitle text = STRING_TOKEN (0x0702);
  subtitle text = STRING_TOKEN(0x0002);

  text
    help  = STRING_TOKEN (0x03A0),
    text  = STRING_TOKEN (0x039E),
    text  = STRING_TOKEN (0x039F),
    flags = 0,
    key   = 0;

  text
    help  = STRING_TOKEN (0x03A3),
    text  = STRING_TOKEN (0x03A1),
    text  = STRING_TOKEN (0x03A2),
    flags = 0,
    key   = 0;

  text
    help  = STRING_TOKEN (0x03A6),
    text  = STRING_TOKEN (0x03A4),
    text  = STRING_TOKEN (0x03A5),
    flags = 0,
    key   = 0;

  text
    help  = STRING_TOKEN (0x03A9),
    text  = STRING_TOKEN (0x03A7),
    text  = STRING_TOKEN (0x03A8),
    flags = 0,
    key   = 0;
  endform;

  form formid = 5461,
  title = STRING_TOKEN (0x0704);

  subtitle text = STRING_TOKEN (0x0704);
  subtitle text = STRING_TOKEN(0x0002);

  text
    help  = STRING_TOKEN (0x03AC),
    text  = STRING_TOKEN (0x03AA),
    text  = STRING_TOKEN (0x03AB),
    flags = 0,
    key   = 0;

  text
    help  = STRING_TOKEN (0x03AF),
    text  = STRING_TOKEN (0x03AD),
    text  = STRING_TOKEN (0x03AE),
    flags = 0,
    key   = 0;

  text
    help  = STRING_TOKEN (0x03B2),
    text  = STRING_TOKEN (0x03B0),
    text  = STRING_TOKEN (0x03B1),
    flags = 0,
    key   = 0;

  text
    help  = STRING_TOKEN (0x03B5),
    text  = STRING_TOKEN (0x03B3),
    text  = STRING_TOKEN (0x03B4),
    flags = 0,
    key   = 0;
  endform;

    
    
    
    form formid = 5124,
    title = STRING_TOKEN (0x0692);

      subtitle text = STRING_TOKEN (0x0692);
      subtitle text = STRING_TOKEN(0x0002);

      
      
      
      suppressif NOT ideqval SETUP_DATA.FirmwareConfiguration == 5;
        oneof varid     = SETUP_DATA.BiosGuardModuleSelection,
            prompt      = STRING_TOKEN (0x0695),
            help        = STRING_TOKEN (0x0696),
            option text = STRING_TOKEN (0x0697), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN (0x0698), value = 1, flags = RESET_REQUIRED;
         endoneof;
      endif; 
      
      
      


      oneof varid     = CPU_SETUP.BiosGuardToolsInterface,
        prompt      = STRING_TOKEN (0x0693),
        help        = STRING_TOKEN (0x0694),
        option text = STRING_TOKEN (0x0004),  value = 0, flags = RESET_REQUIRED;
        
        
        
        
        option text = STRING_TOKEN (0x0003),   value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

    endform; 

  
  
  
  suppressif ideqval SETUP_CPU_FEATURES.SmmEnhancementSupported == 0;
    form formid = 4368,
    title = STRING_TOKEN (0x06E7);

        subtitle text = STRING_TOKEN (0x06E7);
        subtitle text = STRING_TOKEN(0x0002);

       suppressif ideqval SETUP_CPU_FEATURES.SmmCpuSvrstrAvailable == 0;
        oneof varid       = CPU_SETUP.SmmMsrSaveStateEnable,
              prompt      = STRING_TOKEN (0x06E9),
              help        = STRING_TOKEN (0x06EA),
              option text = STRING_TOKEN (0x0004),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
              option text = STRING_TOKEN (0x0003),   value = 1, flags = RESET_REQUIRED;
        endoneof;
       endif;
       suppressif ideqval SETUP_CPU_FEATURES.SmmLongFlowAvailable == 0;
        oneof varid       = CPU_SETUP.SmmUseDelayIndication,
              prompt      = STRING_TOKEN (0x06EB),
              help        = STRING_TOKEN (0x06EC),
              option text = STRING_TOKEN (0x0004),  value = 0, flags = RESET_REQUIRED;
              option text = STRING_TOKEN (0x0003),   value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
       endif;
        oneof varid       = CPU_SETUP.SmmUseBlockIndication,
              prompt      = STRING_TOKEN (0x06ED),
              help        = STRING_TOKEN (0x06EE),
              option text = STRING_TOKEN (0x0004),  value = 0, flags = RESET_REQUIRED;
              option text = STRING_TOKEN (0x0003),   value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
       suppressif ideqval SETUP_CPU_FEATURES.SmmTargetedSmiAvailable == 0;
        oneof varid       = CPU_SETUP.SmmUseSmmEnableIndication,
              prompt      = STRING_TOKEN (0x06EF),
              help        = STRING_TOKEN (0x06F0),
              option text = STRING_TOKEN (0x0004),  value = 0, flags = RESET_REQUIRED;
              option text = STRING_TOKEN (0x0003),   value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
       endif;

  endform;
  endif;

  form formid = 4110,
  title = STRING_TOKEN (0x03D3);

    subtitle text = STRING_TOKEN (0x03D3);
    subtitle text = STRING_TOKEN(0x0002);

    goto 4111,
      prompt = STRING_TOKEN (0x03D9),
      help = STRING_TOKEN (0x03DA);

    goto 4142,
      prompt = STRING_TOKEN (0x03DB),
      help = STRING_TOKEN (0x03DC);

  suppressif ((ideqval SETUP_CPU_FEATURES.HwpAvailable == 0) OR
              (ideqval SETUP_CPU_FEATURES.HwpInterruptSupported == 0));
    oneof varid = CPU_SETUP.HwpInterruptControl,
      prompt = STRING_TOKEN (0x06D7),
      help   = STRING_TOKEN (0x06D8),
      option text = STRING_TOKEN (0x0004),  value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN (0x0003),   value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;
  endif;




  suppressif ideqval SETUP_CPU_FEATURES.HwpReqSupported == 0;
    oneof varid = CPU_SETUP.HwpReqFastUncoreMsr,
      prompt = STRING_TOKEN (0x06D9),
      help   = STRING_TOKEN (0x06DA),
      option text = STRING_TOKEN (0x0004),  value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN (0x0003),   value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;
  endif; 

  suppressif ideqval SETUP_CPU_FEATURES.ThreadInfoSupported == 0;
    oneof varid = CPU_SETUP.ThreadInfoFastUncoreMsr,
      prompt = STRING_TOKEN (0x06DB),
      help   = STRING_TOKEN (0x06DC),
      option text = STRING_TOKEN (0x0004),  value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN (0x0003),   value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;
  endif; 



  endform; 

  form formid = 4111,
  title = STRING_TOKEN (0x03D9);

      subtitle text = STRING_TOKEN (0x03D9);
      subtitle text = STRING_TOKEN(0x0002);

    suppressif ((ideqval SETUP_VOLATILE_DATA.PlatformType == 0x2)
                  OR (ideqval SETUP_CPU_FEATURES.ItbmAvailable == 0));
      text
        help  = STRING_TOKEN (0x045B),
        text  = STRING_TOKEN (0x045A),
        text  = STRING_TOKEN (0x045C),
        flags = 0,
        key   = 0;

      suppressif ideqval SETUP_CPU_FEATURES.NumCores < 2;
        text
          help  = STRING_TOKEN (0x045E),
          text  = STRING_TOKEN (0x045D),
          text  = STRING_TOKEN (0x045F),
          flags = 0,
          key   = 0;
      endif; 

      suppressif ideqval SETUP_CPU_FEATURES.NumCores < 3;
        text
          help  = STRING_TOKEN (0x0461),
          text  = STRING_TOKEN (0x0460),
          text  = STRING_TOKEN (0x0462),
          flags = 0,
          key   = 0;
      endif; 

      suppressif ideqval SETUP_CPU_FEATURES.NumCores < 4;
        text
          help  = STRING_TOKEN (0x0464),
          text  = STRING_TOKEN (0x0463),
          text  = STRING_TOKEN (0x0465),
          flags = 0,
          key   = 0;
      endif; 

      suppressif ideqval SETUP_CPU_FEATURES.NumCores < 5;
        text
          help  = STRING_TOKEN (0x0467),
          text  = STRING_TOKEN (0x0466),
          text  = STRING_TOKEN (0x0468),
          flags = 0,
          key   = 0;
      endif; 

      suppressif ideqval SETUP_CPU_FEATURES.NumCores < 6;
        text
          help  = STRING_TOKEN (0x046A),
          text  = STRING_TOKEN (0x0469),
          text  = STRING_TOKEN (0x046B),
          flags = 0,
          key   = 0;
      endif; 

      suppressif ideqval SETUP_CPU_FEATURES.NumCores < 7;
        text
          help  = STRING_TOKEN (0x046D),
          text  = STRING_TOKEN (0x046C),
          text  = STRING_TOKEN (0x046E),
          flags = 0,
          key   = 0;
      endif; 

      suppressif ideqval SETUP_CPU_FEATURES.NumCores < 8;
        text
          help  = STRING_TOKEN (0x0470),
          text  = STRING_TOKEN (0x046F),
          text  = STRING_TOKEN (0x0471),
          flags = 0,
          key   = 0;
      endif; 
    endif;

      oneof varid = CPU_SETUP.BootFrequency,
          questionid  = 5496,
          prompt  = STRING_TOKEN (0x0472),
          help    = STRING_TOKEN (0x0473),
          flags = INTERACTIVE,
          default     = 2, defaultstore = MyStandardDefault,
          option text = STRING_TOKEN (0x0474), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x0475), value = 1, flags = RESET_REQUIRED;
          suppressif ideqval SETUP_CPU_FEATURES.TurboModeAvailable == 0;
            option text = STRING_TOKEN (0x0476), value = 2, flags = RESET_REQUIRED;
          endif;
      endoneof;

      suppressif ideqval SETUP_CPU_FEATURES.EISTAvailable == 0;
         
          oneof varid     = CPU_SETUP.EnableGv,
              questionid  = 5130,
              prompt      = STRING_TOKEN (0x0410),
              help        = STRING_TOKEN (0x0411),
              option text = STRING_TOKEN (0x0004),  value = 0, flags = RESET_REQUIRED;
              option text = STRING_TOKEN (0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          endoneof;
         
      endif;

        oneof varid     = CPU_SETUP.RaceToHalt,
            prompt      = STRING_TOKEN (0x06F6),
            help        = STRING_TOKEN (0x06F7),
            option text = STRING_TOKEN (0x0004),  value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN (0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

       
        oneof varid     = CPU_SETUP.EnableHwp,
            questionid  = 5128,
            prompt      = STRING_TOKEN (0x0414),
            help        = STRING_TOKEN (0x0415),

            option text = STRING_TOKEN (0x0004),  value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN (0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;



#line 887 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\CpuSetup.hfr"
        endoneof;
       

      
      
      
      suppressif ((ideqval SETUP_CPU_FEATURES.HwpAvailable == 0)
                    OR (ideqval SETUP_CPU_FEATURES.ItbmAvailable == 0));
         
          oneof varid   = CPU_SETUP.EnableItbm,
            questionid  = 5129,
            prompt      = STRING_TOKEN (0x0416),
            help        = STRING_TOKEN (0x0417),
            option text = STRING_TOKEN (0x0004),  value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN (0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          endoneof;
         

      endif; 

        
        
        
        oneof varid   = CPU_SETUP.EnablePerCorePState,
          prompt      = STRING_TOKEN (0x0418),
          help        = STRING_TOKEN (0x0419),
          option text = STRING_TOKEN (0x0004),  value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

      suppressif ideqval SETUP_CPU_FEATURES.HwpAvailable == 0;

        oneof varid   = CPU_SETUP.EnableHwpAutoPerCorePstate,
          prompt      = STRING_TOKEN (0x041A),
          help        = STRING_TOKEN (0x041B),
          option text = STRING_TOKEN (0x0004),  value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        oneof varid   = CPU_SETUP.EnableHwpAutoEppGrouping,
          prompt      = STRING_TOKEN (0x041C),
          help        = STRING_TOKEN (0x041D),
          option text = STRING_TOKEN (0x0004),  value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        oneof varid   = CPU_SETUP.EnableEpbPeciOverride,
          prompt      = STRING_TOKEN (0x041E),
          help        = STRING_TOKEN (0x041F),
          option text = STRING_TOKEN (0x0004),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN (0x0003),  value = 1, flags = RESET_REQUIRED;
        endoneof;

        
        
        
        suppressif ideqval SETUP_CPU_FEATURES.IsFastMsrHwpSupport == 0;
          oneof varid  = CPU_SETUP.EnableFastMsrHwpReq,
            prompt   = STRING_TOKEN (0x0420),
            help     = STRING_TOKEN (0x0421),
            option text = STRING_TOKEN (0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN (0x0003), value = 1, flags = RESET_REQUIRED;
          endoneof;
        endif;

        
        
        
        oneof varid   = CPU_SETUP.HwpLock,
          prompt      = STRING_TOKEN (0x0422),
          help        = STRING_TOKEN (0x0423),
          option text = STRING_TOKEN (0x0004),  value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
      endif; 

      oneof varid  = CPU_SETUP.HdcControl,
        prompt   = STRING_TOKEN (0x06E5),
        help     = STRING_TOKEN (0x06E6),
        option text = STRING_TOKEN (0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      suppressif (ideqval CPU_SETUP.EnableGv == 0
              AND ideqval CPU_SETUP.EnableHwp == 0)
              OR ideqval SETUP_CPU_FEATURES.TurboModeAvailable == 0;
        oneof varid  = CPU_SETUP.TurboMode,
            questionid  = 5497,
            prompt   = STRING_TOKEN (0x047B),
            help     = STRING_TOKEN (0x047C),
            flags = INTERACTIVE,
            option text = STRING_TOKEN (0x0004),  value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN (0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        goto 4113,
          prompt = STRING_TOKEN (0x02D9),
          help = STRING_TOKEN (0x02DA);
      endif;

      suppressif ideqval SETUP_CPU_FEATURES.ConfigTdpAvailable == 0;
        goto 4329,
          prompt = STRING_TOKEN (0x043E),
          help = STRING_TOKEN (0x0440);
      endif;

    goto 5047,
      prompt = STRING_TOKEN (0x02E0),
      help = STRING_TOKEN (0x02E0);

    oneof varid  = CPU_SETUP.PlatformPowerLimit1Enable,
        prompt   = STRING_TOKEN (0x047D),
        help     = STRING_TOKEN (0x047E),
        option text = STRING_TOKEN (0x0004),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN (0x0003),  value = 1, flags = RESET_REQUIRED;
    endoneof;

    suppressif ideqval CPU_SETUP.PlatformPowerLimit1Enable == 0;
      numeric varid   = CPU_SETUP.PlatformPowerLimit1Power,
          prompt   = STRING_TOKEN (0x047F),
          help     = STRING_TOKEN (0x0480),
          flags    = 0 | RESET_REQUIRED,
          minimum  = 0,
          maximum  = 4095875,
          step     = 125,        
                                 
          default = 0,
      endnumeric;

      oneof varid   = CPU_SETUP.PlatformPowerLimit1Time,
          prompt   = STRING_TOKEN (0x0481),
          help     = STRING_TOKEN (0x0482),
          flags    = 0 | RESET_REQUIRED,
          option text = STRING_TOKEN (0x03F4),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN (0x03F5),  value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x03F6),  value = 2, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x03F7),  value = 3, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x03F8),  value = 4, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x03F9),  value = 5, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x03FA),  value = 6, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x03FB),  value = 7, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x03FC),  value = 8, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x03FE),  value = 10, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x0400),  value = 12, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x0402),  value = 14, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x0404),  value = 16, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x09A5),  value = 20, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x09A6),  value = 24, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x09A7),  value = 28, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x09A8),  value = 32, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x09A9),  value = 40, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x09AA),  value = 48, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x09AB),  value = 56, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x09AC),  value = 64, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x09AD),  value = 80, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x09AE),  value = 96, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x09AF),  value = 112, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x09B0),  value = 128, flags = RESET_REQUIRED;
      endoneof;
    endif;

    oneof varid  = CPU_SETUP.PlatformPowerLimit2Enable,
        prompt   = STRING_TOKEN (0x0483),
        help     = STRING_TOKEN (0x0484),
        option text = STRING_TOKEN (0x0004),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN (0x0003),  value = 1, flags = RESET_REQUIRED;
    endoneof;

  suppressif ideqval CPU_SETUP.PlatformPowerLimit2Enable == 0;
    numeric varid   = CPU_SETUP.PlatformPowerLimit2Power,
        prompt   = STRING_TOKEN (0x0485),
        help     = STRING_TOKEN (0x0486),
        flags    = 0 | RESET_REQUIRED,
        minimum  = 0,
        maximum  = 4095875,
        step     = 125,        
                               
        default = 0,
    endnumeric;
  endif;

      
      
      
 
    suppressif ideqval SETUP_DATA.IsAdlSNative == 0x1;
      oneof varid  = CPU_SETUP.PlatformAtxTelemetryUnit,
         prompt   = STRING_TOKEN (0x0487),
         help     = STRING_TOKEN (0x0488),
         default  = 0, defaultstore = MyStandardDefault,
         option text = STRING_TOKEN (0x0489),  value = 0, flags = RESET_REQUIRED;
         option text = STRING_TOKEN (0x048A),  value = 1, flags = RESET_REQUIRED;
      endoneof;
    endif;
 #line 1082 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\CpuSetup.hfr"
      
      
      

    oneof varid  = CPU_SETUP.PowerLimit4Override,
       prompt   = STRING_TOKEN (0x04B0),
       help     = STRING_TOKEN (0x04B1),
       default  = 0, defaultstore = MyStandardDefault,
       option text = STRING_TOKEN (0x0004),  value = 0, flags = RESET_REQUIRED;
       option text = STRING_TOKEN (0x0003),  value = 1, flags = RESET_REQUIRED;
    endoneof;

  suppressif ideqval CPU_SETUP.PowerLimit4Override == 0;
      numeric varid   = CPU_SETUP.PowerLimit4,
          prompt   = STRING_TOKEN (0x04B2),
          help     = STRING_TOKEN (0x04B3),
          flags    = 0 | RESET_REQUIRED,
          minimum  = 0,
          maximum  = 4095875,
          step     = 125,
          default  = 0, defaultstore = MyStandardDefault,
      endnumeric;
   endif;

  suppressif ideqval CPU_SETUP.PowerLimit4Override == 0;
      oneof varid  = CPU_SETUP.PowerLimit4Lock,
         prompt   = STRING_TOKEN (0x04B4),
         help     = STRING_TOKEN (0x04B5),
         option text = STRING_TOKEN (0x0004),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
         option text = STRING_TOKEN (0x0003),  value = 1, flags = RESET_REQUIRED;
      endoneof;
  endif;

      suppressif ideqval SETUP_CPU_FEATURES.CxAvailable == 0;
         
          oneof varid     = CPU_SETUP.EnableCx,
              questionid  = 5126,
              prompt      = STRING_TOKEN (0x0477),
              help        = STRING_TOKEN (0x0478),
              default     = 1, defaultstore = MyStandardDefault,
              option text = STRING_TOKEN (0x0004),  value = 0, flags = RESET_REQUIRED;
              option text = STRING_TOKEN (0x0003),  value = 1, flags = RESET_REQUIRED;
          endoneof;
         
      endif;

      suppressif ideqval SETUP_CPU_FEATURES.CxAvailable == 0 OR ideqval CPU_SETUP.EnableCx == 0 OR ideqval SETUP_CPU_FEATURES.C1EAvailable == 0;
        oneof varid     = CPU_SETUP.EnableC1e,
            prompt      = STRING_TOKEN (0x0479),
            help        = STRING_TOKEN (0x047A),
            option text = STRING_TOKEN (0x0004),  value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN (0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
      endif;

      suppressif ideqval SETUP_CPU_FEATURES.CxAvailable == 0 OR ideqval CPU_SETUP.EnableCx == 0;
        oneof varid       = CPU_SETUP.CStateAutoDemotion,
              prompt      = STRING_TOKEN (0x0451),
              help        = STRING_TOKEN (0x0452),
              option text = STRING_TOKEN (0x0004), value = 0, flags = RESET_REQUIRED;
              option text = STRING_TOKEN (0x0453), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        oneof varid       = CPU_SETUP.CStateUnDemotion,
              prompt      = STRING_TOKEN (0x0454),
              help        = STRING_TOKEN (0x0455),
              option text = STRING_TOKEN (0x0004), value = 0, flags = RESET_REQUIRED;
              option text = STRING_TOKEN (0x0453), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        oneof varid       = CPU_SETUP.PkgCStateDemotion,
              prompt      = STRING_TOKEN (0x0456),
              help        = STRING_TOKEN (0x0456),
              option text = STRING_TOKEN (0x0004), value = 0, flags = RESET_REQUIRED;
              option text = STRING_TOKEN (0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        oneof varid       = CPU_SETUP.PkgCStateUnDemotion,
              prompt      = STRING_TOKEN (0x0457),
              help        = STRING_TOKEN (0x0457),
              option text = STRING_TOKEN (0x0004), value = 0, flags = RESET_REQUIRED;
              option text = STRING_TOKEN (0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        oneof varid       = CPU_SETUP.CStatePreWake,
              prompt      = STRING_TOKEN (0x0458),
              help        = STRING_TOKEN (0x0459),
              option text = STRING_TOKEN (0x0004), value = 0, flags = RESET_REQUIRED;
              option text = STRING_TOKEN (0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        oneof varid       = CPU_SETUP.PmgCstCfgCtrIoMwaitRedirection,
              prompt      = STRING_TOKEN (0x0672),
              help        = STRING_TOKEN (0x0673),
              default     = 0, defaultstore = MyStandardDefault,
              option text = STRING_TOKEN (0x0004),  value = 0, flags = RESET_REQUIRED;
              option text = STRING_TOKEN (0x0003),   value = 1, flags = RESET_REQUIRED;
        endoneof;

      oneof varid    = CPU_SETUP.PkgCStateLimit,
            prompt   = STRING_TOKEN (0x069B),
            help     = STRING_TOKEN (0x069C),
            default  = 255, defaultstore = MyStandardDefault,
            option text = STRING_TOKEN (0x069D), value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN (0x069E), value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN (0x069F), value = 2, flags = RESET_REQUIRED;
            option text = STRING_TOKEN (0x06A0), value = 3, flags = RESET_REQUIRED;
            option text = STRING_TOKEN (0x06A1), value = 4, flags = RESET_REQUIRED;
            option text = STRING_TOKEN (0x06A2), value = 5, flags = RESET_REQUIRED;
            option text = STRING_TOKEN (0x06A3), value = 6, flags = RESET_REQUIRED;
            option text = STRING_TOKEN (0x06A4), value = 7, flags = RESET_REQUIRED;
            option text = STRING_TOKEN (0x06A5), value = 8, flags = RESET_REQUIRED;
            option text = STRING_TOKEN (0x06A6), value = 254, flags = RESET_REQUIRED;
            option text = STRING_TOKEN (0x06A7), value = 255, flags = RESET_REQUIRED;
      endoneof;

      subtitle text = STRING_TOKEN (0x06AC);

      oneof varid = CPU_SETUP.CstateLatencyControl1TimeUnit,
        prompt   = STRING_TOKEN (0x06B1),
        help     = STRING_TOKEN (0x06B6),
        option text = STRING_TOKEN (0x06BD), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x06BE), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x06BF), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN (0x06C0), value = 3, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x06C1), value = 4, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x06C2), value = 5, flags = RESET_REQUIRED;
      endoneof;

      numeric varid = CPU_SETUP.CstateLatencyControl1Irtl,
        prompt    = STRING_TOKEN (0x06B7),
        help      = STRING_TOKEN (0x06BC),
        flags     = RESET_REQUIRED,
        minimum   = 0,
        maximum   = 0x3FF,
        step      = 1,
        default   = 0,
      endnumeric;

      subtitle text = STRING_TOKEN(0x06AD);

      oneof varid = CPU_SETUP.CstateLatencyControl2TimeUnit,
        prompt   = STRING_TOKEN(0x06B2),
        help     = STRING_TOKEN(0x06B6),
        option text = STRING_TOKEN(0x06BD), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x06BE), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x06BF), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x06C0), value = 3, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x06C1), value = 4, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x06C2), value = 5, flags = RESET_REQUIRED;
      endoneof;

      numeric varid = CPU_SETUP.CstateLatencyControl2Irtl,
        prompt    = STRING_TOKEN(0x06B8),
        help      = STRING_TOKEN(0x06BC),
        flags     = RESET_REQUIRED,
        minimum   = 0,
        maximum   = 0x3FF,
        step      = 1,
        default   = 0,
      endnumeric;

        suppressif NOT ideqval SETUP_VOLATILE_DATA.PlatformType == 0x2;
          subtitle text = STRING_TOKEN (0x06AE);

          oneof varid = CPU_SETUP.CstateLatencyControl3TimeUnit,
            prompt   = STRING_TOKEN (0x06B3),
            help     = STRING_TOKEN (0x06B6),
            option text = STRING_TOKEN (0x06BD), value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN (0x06BE), value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN (0x06BF), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN (0x06C0), value = 3, flags = RESET_REQUIRED;
            option text = STRING_TOKEN (0x06C1), value = 4, flags = RESET_REQUIRED;
            option text = STRING_TOKEN (0x06C2), value = 5, flags = RESET_REQUIRED;
          endoneof;

          numeric varid = CPU_SETUP.CstateLatencyControl3Irtl,
            prompt    = STRING_TOKEN (0x06B9),
            help      = STRING_TOKEN (0x06BC),
            flags     = RESET_REQUIRED,
            minimum   = 0,
            maximum   = 0x3FF,
            step      = 1,
            default   = 0,
          endnumeric;

          subtitle text = STRING_TOKEN(0x06AF);

          oneof varid = CPU_SETUP.CstateLatencyControl4TimeUnit,
            prompt   = STRING_TOKEN(0x06B4),
            help     = STRING_TOKEN(0x06B6),
            option text = STRING_TOKEN(0x06BD), value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x06BE), value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x06BF), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(0x06C0), value = 3, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x06C1), value = 4, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x06C2), value = 5, flags = RESET_REQUIRED;
          endoneof;

          numeric varid = CPU_SETUP.CstateLatencyControl4Irtl,
            prompt    = STRING_TOKEN(0x06BA),
            help      = STRING_TOKEN(0x06BC),
            flags     = RESET_REQUIRED,
            minimum   = 0,
            maximum   = 0x3FF,
            step      = 1,
            default   = 0,
          endnumeric;

          subtitle text = STRING_TOKEN(0x06B0);

          oneof varid = CPU_SETUP.CstateLatencyControl5TimeUnit,
            prompt   = STRING_TOKEN(0x06B5),
            help     = STRING_TOKEN(0x06B6),
            option text = STRING_TOKEN(0x06BD), value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x06BE), value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x06BF), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(0x06C0), value = 3, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x06C1), value = 4, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x06C2), value = 5, flags = RESET_REQUIRED;
          endoneof;

          numeric varid = CPU_SETUP.CstateLatencyControl5Irtl,
            prompt    = STRING_TOKEN(0x06BB),
            help      = STRING_TOKEN(0x06BC),
            flags     = RESET_REQUIRED,
            minimum   = 0,
            maximum   = 0x3FF,
            step      = 1,
            default   = 0,
          endnumeric;
        endif;
      endif;

      oneof varid   = CPU_SETUP.EnableThermalMonitor,
        prompt      = STRING_TOKEN (0x06A8),
        help        = STRING_TOKEN (0x06A9),
        option text = STRING_TOKEN (0x0004),  value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid = CPU_SETUP.InterruptRedirectMode,
        prompt   = STRING_TOKEN (0x0676),
        help     = STRING_TOKEN (0x0677),
        option text = STRING_TOKEN (0x0678), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN (0x0679), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x067A), value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x067B), value = 7, flags = RESET_REQUIRED;
      endoneof;

      suppressif  ideqval SETUP_CPU_FEATURES.TimedMwaitSupported == 0;
        oneof varid   = CPU_SETUP.TimedMwait,
          prompt      = STRING_TOKEN (0x06AA),
          help        = STRING_TOKEN (0x06AB),
          option text = STRING_TOKEN (0x0004),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN (0x0003),  value = 1, flags =  RESET_REQUIRED;
        endoneof;
      endif;

      goto 4112,
        prompt = STRING_TOKEN (0x03DD),
        help = STRING_TOKEN (0x03DE);



 
   suppressif ((NOT ideqval SETUP_VOLATILE_DATA.PlatformFlavor == 0x1) AND
              (NOT ideqval SETUP_VOLATILE_DATA.PlatformFlavor == 0x6) AND
              (NOT ideqval SETUP_VOLATILE_DATA.PlatformFlavor == 0x5)) OR
              ideqval CPU_SETUP.TurboMode == 0;
        oneof varid  = CPU_SETUP.EcTurboControlMode,
            prompt   = STRING_TOKEN (0x067C),
            help     = STRING_TOKEN (0x067D),
            option text = STRING_TOKEN (0x0004),  value = 0, flags = DEFAULT | MANUFACTURING |RESET_REQUIRED;
            option text = STRING_TOKEN (0x0003),  value = 1, flags = RESET_REQUIRED;
          endoneof;
    endif;

   suppressif ideqval CPU_SETUP.EcTurboControlMode == 0;
        oneof varid  = CPU_SETUP.AcBrickCapacity,
            prompt   = STRING_TOKEN (0x067E),
            help     = STRING_TOKEN (0x067F),
            option text = STRING_TOKEN (0x068C),  value = 1, flags = DEFAULT | MANUFACTURING |RESET_REQUIRED;
            option text = STRING_TOKEN (0x068D),  value = 2, flags = RESET_REQUIRED;
            option text = STRING_TOKEN (0x068E),  value = 3, flags = RESET_REQUIRED;
          endoneof;

      numeric varid = CPU_SETUP.EcPollingPeriod,
            prompt  = STRING_TOKEN (0x0680),
            help    = STRING_TOKEN (0x0681),
            flags   = RESET_REQUIRED,
            minimum = 1,
            maximum = 255,
            step    = 1,
            default = 1,
      endnumeric;

      numeric varid = CPU_SETUP.EcGuardBandValue,
            prompt  = STRING_TOKEN (0x0682),
            help    = STRING_TOKEN (0x0683),
            flags   = RESET_REQUIRED,
            minimum = 0,
            maximum = 20,
            step    = 1,
            default = 0,
      endnumeric;

      numeric varid = CPU_SETUP.EcAlgorithmSel,
            prompt  = STRING_TOKEN (0x0684),
            help    = STRING_TOKEN (0x0685),
            flags   = RESET_REQUIRED,
            minimum = 1,
            maximum = 10,
            step    = 1,
            default = 1,
      endnumeric;

    endif;



    oneof varid   = SA_SETUP.EpgEnable,
      prompt      = STRING_TOKEN (0x0686),
      help        = STRING_TOKEN (0x0687),
      option text = STRING_TOKEN (0x0004),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN (0x0003),  value = 1, flags = RESET_REQUIRED;
    endoneof;

    grayoutif ideqval SA_SETUP.EpgEnable == 0;
      numeric varid = SA_SETUP.Idd3n,
            prompt  = STRING_TOKEN (0x0688),
            help    = STRING_TOKEN (0x0689),
            flags   = RESET_REQUIRED,
            minimum = 0,
            maximum = 2000,
            step    = 1,
            default = 26,
      endnumeric;

      numeric varid = SA_SETUP.Idd3p,
            prompt  = STRING_TOKEN (0x068A),
            help    = STRING_TOKEN (0x068B),
            flags   = RESET_REQUIRED,
            minimum = 0,
            maximum = 2000,
            step    = 1,
            default = 11,
      endnumeric;
    endif;  

    goto 4369,
      prompt = STRING_TOKEN (0x04A0),
      help = STRING_TOKEN (0x04A1);

    goto 4114,
      prompt  = STRING_TOKEN (0x03D5),
      help    = STRING_TOKEN (0x03D6);

    suppressif NOT ideqval SETUP_VOLATILE_DATA.PlatformFlavor == 0x2;
      grayoutif ideqval SETUP_DATA.EnableDptf == 1;
        oneof varid   = CPU_SETUP.DualTauBoost,
          prompt      = STRING_TOKEN(0x03D7),
          help        = STRING_TOKEN(0x03D8),
          option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
        endoneof;
      endif;
    endif;

  endform; 

  form formid = 4112,
  title = STRING_TOKEN (0x03DD);

      subtitle text = STRING_TOKEN (0x03DD);
      subtitle text = STRING_TOKEN(0x0002);

      numeric varid = CPU_SETUP.NumOfCustomPStates,
            prompt  = STRING_TOKEN (0x04B6),
            help    = STRING_TOKEN (0x04B7),
            flags   = RESET_REQUIRED,
            minimum = 0,
            maximum = 40,
            step    = 0,
            default = 0,
      endnumeric;

      suppressif ideqval CPU_SETUP.NumOfCustomPStates < 2;
        numeric varid   = CPU_SETUP.StateRatio[0x0],
                prompt  = STRING_TOKEN (0x04B8),
                help    = STRING_TOKEN (0x04B9),
                flags   = RESET_REQUIRED,
                minimum = 0,
                maximum = 0x7F,
                step    = 0,
                default = 0,
        endnumeric;

        numeric varid   = CPU_SETUP.StateRatio[0x1],
            prompt  = STRING_TOKEN (0x04BA),
                help    = STRING_TOKEN (0x04E1),
                flags   = RESET_REQUIRED,
                minimum = 0,
                maximum = 0x7F,
                step    = 0,
                default = 0,
        endnumeric;

      endif;

      suppressif ideqval CPU_SETUP.NumOfCustomPStates < 3;
        numeric varid   = CPU_SETUP.StateRatio[0x2],
                prompt  = STRING_TOKEN (0x04BB),
                help    = STRING_TOKEN (0x04E1),
                flags   = RESET_REQUIRED,
                minimum = 0,
                maximum = 0x7F,
                step    = 0,
                default = 0,
        endnumeric;
      endif;

      suppressif ideqval CPU_SETUP.NumOfCustomPStates < 4;
        numeric varid   = CPU_SETUP.StateRatio[0x3],
                prompt  = STRING_TOKEN (0x04BC),
                help    = STRING_TOKEN (0x04E1),
                flags   = RESET_REQUIRED,
                minimum = 0,
                maximum = 0x7F,
                step    = 0,
                default = 0,
        endnumeric;
      endif;

      suppressif ideqval CPU_SETUP.NumOfCustomPStates < 5;
        numeric varid   = CPU_SETUP.StateRatio[0x4],
                prompt  = STRING_TOKEN (0x04BD),
                help    = STRING_TOKEN (0x04E1),
                flags   = RESET_REQUIRED,
                minimum = 0,
                maximum = 0x7F,
                step    = 0,
                default = 0,
        endnumeric;
      endif;

      suppressif ideqval CPU_SETUP.NumOfCustomPStates < 6;
        numeric varid   = CPU_SETUP.StateRatio[0x5],
                prompt  = STRING_TOKEN (0x04BE),
                help    = STRING_TOKEN (0x04E1),
                flags   = RESET_REQUIRED,
                minimum = 0,
                maximum = 0x7F,
                step    = 0,
                default = 0,
        endnumeric;
      endif;

      suppressif ideqval CPU_SETUP.NumOfCustomPStates < 7;
        numeric varid   = CPU_SETUP.StateRatio[0x6],
                prompt  = STRING_TOKEN (0x04BF),
                help    = STRING_TOKEN (0x04E1),
                flags   = RESET_REQUIRED,
                minimum = 0,
                maximum = 0x7F,
                step    = 0,
                default = 0,
        endnumeric;
      endif;

      suppressif ideqval CPU_SETUP.NumOfCustomPStates < 8;
        numeric varid   = CPU_SETUP.StateRatio[0x7],
                prompt  = STRING_TOKEN (0x04C0),
                help    = STRING_TOKEN (0x04E1),
                flags   = RESET_REQUIRED,
                minimum = 0,
                maximum = 0x7F,
                step    = 0,
                default = 0,
        endnumeric;
      endif;

      suppressif ideqval CPU_SETUP.NumOfCustomPStates < 9;
        numeric varid   = CPU_SETUP.StateRatio[0x8],
                prompt  = STRING_TOKEN (0x04C1),
                help    = STRING_TOKEN (0x04E1),
                flags   = RESET_REQUIRED,
                minimum = 0,
                maximum = 0x7F,
                step    = 0,
                default = 0,
        endnumeric;
      endif;

      suppressif ideqval CPU_SETUP.NumOfCustomPStates < 10;
        numeric varid   = CPU_SETUP.StateRatio[0x9],
                prompt  = STRING_TOKEN (0x04C2),
                help    = STRING_TOKEN (0x04E1),
                flags   = RESET_REQUIRED,
                minimum = 0,
                maximum = 0x7F,
                step    = 0,
                default = 0,
        endnumeric;
      endif;

      suppressif ideqval CPU_SETUP.NumOfCustomPStates < 11;
        numeric varid   = CPU_SETUP.StateRatio[0xa],
                prompt  = STRING_TOKEN (0x04C3),
                help    = STRING_TOKEN (0x04E1),
                flags   = RESET_REQUIRED,
                minimum = 0,
                maximum = 0x7F,
                step    = 0,
                default = 0,
        endnumeric;
      endif;

      suppressif ideqval CPU_SETUP.NumOfCustomPStates < 12;
        numeric varid   = CPU_SETUP.StateRatio[0xb],
                prompt  = STRING_TOKEN (0x04C4),
                help    = STRING_TOKEN (0x04E1),
                flags   = RESET_REQUIRED,
                minimum = 0,
                maximum = 0x7F,
                step    = 0,
                default = 0,
        endnumeric;
      endif;

      suppressif ideqval CPU_SETUP.NumOfCustomPStates < 13;
        numeric varid   = CPU_SETUP.StateRatio[0xc],
                prompt  = STRING_TOKEN (0x04C5),
                help    = STRING_TOKEN (0x04E1),
                flags   = RESET_REQUIRED,
                minimum = 0,
                maximum = 0x7F,
                step    = 0,
                default = 0,
        endnumeric;
      endif;

      suppressif ideqval CPU_SETUP.NumOfCustomPStates < 14;
        numeric varid   = CPU_SETUP.StateRatio[0xd],
                prompt  = STRING_TOKEN (0x04C6),
                help    = STRING_TOKEN (0x04E1),
                flags   = RESET_REQUIRED,
                minimum = 0,
                maximum = 0x7F,
                step    = 0,
                default = 0,
        endnumeric;
      endif;

      suppressif ideqval CPU_SETUP.NumOfCustomPStates < 15;
        numeric varid   = CPU_SETUP.StateRatio[0xe],
                prompt  = STRING_TOKEN (0x04C7),
                help    = STRING_TOKEN (0x04E1),
                flags   = RESET_REQUIRED,
                minimum = 0,
                maximum = 0x7F,
                step    = 0,
                default = 0,
        endnumeric;
      endif;

      suppressif ideqval CPU_SETUP.NumOfCustomPStates < 16;
        numeric varid   = CPU_SETUP.StateRatio[0xf],
                prompt  = STRING_TOKEN (0x04C8),
                help    = STRING_TOKEN (0x04E1),
                flags   = RESET_REQUIRED,
                minimum = 0,
                maximum = 0x7F,
                step    = 0,
                default = 0,
        endnumeric;
      endif;

      suppressif ideqval CPU_SETUP.NumOfCustomPStates < 17;
        numeric varid   = CPU_SETUP.StateRatio[0x10],
                prompt  = STRING_TOKEN (0x04C9),
                help    = STRING_TOKEN (0x04E1),
                flags   = RESET_REQUIRED,
                minimum = 0,
                maximum = 0x7F,
                step    = 0,
                default = 0,
        endnumeric;
      endif;

      suppressif ideqval CPU_SETUP.NumOfCustomPStates < 18;
        numeric varid   = CPU_SETUP.StateRatio[0x11],
                prompt  = STRING_TOKEN (0x04CA),
                help    = STRING_TOKEN (0x04E1),
                flags   = RESET_REQUIRED,
                minimum = 0,
                maximum = 0x7F,
                step    = 0,
                default = 0,
        endnumeric;
      endif;

      suppressif ideqval CPU_SETUP.NumOfCustomPStates < 19;
        numeric varid   = CPU_SETUP.StateRatio[0x12],
                prompt  = STRING_TOKEN (0x04CB),
                help    = STRING_TOKEN (0x04E1),
                flags   = RESET_REQUIRED,
                minimum = 0,
                maximum = 0x7F,
                step    = 0,
                default = 0,
        endnumeric;
      endif;

      suppressif ideqval CPU_SETUP.NumOfCustomPStates < 20;
        numeric varid   = CPU_SETUP.StateRatio[0x13],
                prompt  = STRING_TOKEN (0x04CC),
                help    = STRING_TOKEN (0x04E1),
                flags   = RESET_REQUIRED,
                minimum = 0,
                maximum = 0x7F,
                step    = 0,
                default = 0,
        endnumeric;
      endif;

      suppressif ideqval CPU_SETUP.NumOfCustomPStates < 21;
        numeric varid   = CPU_SETUP.StateRatio[0x14],
                prompt  = STRING_TOKEN (0x04CD),
                help    = STRING_TOKEN (0x04E1),
                flags   = RESET_REQUIRED,
                minimum = 0,
                maximum = 0x7F,
                step    = 0,
                default = 0,
        endnumeric;
      endif;

      suppressif ideqval CPU_SETUP.NumOfCustomPStates < 22;
        numeric varid   = CPU_SETUP.StateRatio[0x15],
                prompt  = STRING_TOKEN (0x04CE),
                help    = STRING_TOKEN (0x04E1),
                flags   = RESET_REQUIRED,
                minimum = 0,
                maximum = 0x7F,
                step    = 0,
                default = 0,
        endnumeric;
      endif;

      suppressif ideqval CPU_SETUP.NumOfCustomPStates < 23;
        numeric varid   = CPU_SETUP.StateRatio[0x16],
                prompt  = STRING_TOKEN (0x04CF),
                help    = STRING_TOKEN (0x04E1),
                flags   = RESET_REQUIRED,
                minimum = 0,
                maximum = 0x7F,
                step    = 0,
                default = 0,
        endnumeric;
      endif;

      suppressif ideqval CPU_SETUP.NumOfCustomPStates < 24;
        numeric varid   = CPU_SETUP.StateRatio[0x17],
                prompt  = STRING_TOKEN (0x04D0),
                help    = STRING_TOKEN (0x04E1),
                flags   = RESET_REQUIRED,
                minimum = 0,
                maximum = 0x7F,
                step    = 0,
                default = 0,
        endnumeric;
      endif;

      suppressif ideqval CPU_SETUP.NumOfCustomPStates < 25;
        numeric varid   = CPU_SETUP.StateRatio[0x18],
                prompt  = STRING_TOKEN (0x04D1),
                help    = STRING_TOKEN (0x04E1),
                flags   = RESET_REQUIRED,
                minimum = 0,
                maximum = 0x7F,
                step    = 0,
                default = 0,
        endnumeric;
      endif;

      suppressif ideqval CPU_SETUP.NumOfCustomPStates < 26;
        numeric varid   = CPU_SETUP.StateRatio[0x19],
                prompt  = STRING_TOKEN (0x04D2),
                help    = STRING_TOKEN (0x04E1),
                flags   = RESET_REQUIRED,
                minimum = 0,
                maximum = 0x7F,
                step    = 0,
                default = 0,
        endnumeric;
      endif;

      suppressif ideqval CPU_SETUP.NumOfCustomPStates < 27;
        numeric varid   = CPU_SETUP.StateRatio[0x1a],
                prompt  = STRING_TOKEN (0x04D3),
                help    = STRING_TOKEN (0x04E1),
                flags   = RESET_REQUIRED,
                minimum = 0,
                maximum = 0x7F,
                step    = 0,
                default = 0,
        endnumeric;
      endif;

      suppressif ideqval CPU_SETUP.NumOfCustomPStates < 28;
        numeric varid   = CPU_SETUP.StateRatio[0x1b],
                prompt  = STRING_TOKEN (0x04D4),
                help    = STRING_TOKEN (0x04E1),
                flags   = RESET_REQUIRED,
                minimum = 0,
                maximum = 0x7F,
                step    = 0,
                default = 0,
        endnumeric;
      endif;

      suppressif ideqval CPU_SETUP.NumOfCustomPStates < 29;
        numeric varid   = CPU_SETUP.StateRatio[0x1c],
                prompt  = STRING_TOKEN (0x04D5),
                help    = STRING_TOKEN (0x04E1),
                flags   = RESET_REQUIRED,
                minimum = 0,
                maximum = 0x7F,
                step    = 0,
                default = 0,
        endnumeric;
      endif;

      suppressif ideqval CPU_SETUP.NumOfCustomPStates < 30;
        numeric varid   = CPU_SETUP.StateRatio[0x1d],
                prompt  = STRING_TOKEN (0x04D6),
                help    = STRING_TOKEN (0x04E1),
                flags   = RESET_REQUIRED,
                minimum = 0,
                maximum = 0x7F,
                step    = 0,
                default = 0,
        endnumeric;
      endif;

      suppressif ideqval CPU_SETUP.NumOfCustomPStates < 31;
        numeric varid   = CPU_SETUP.StateRatio[0x1e],
                prompt  = STRING_TOKEN (0x04D7),
                help    = STRING_TOKEN (0x04E1),
                flags   = RESET_REQUIRED,
                minimum = 0,
                maximum = 0x7F,
                step    = 0,
                default = 0,
        endnumeric;
      endif;

      suppressif ideqval CPU_SETUP.NumOfCustomPStates < 32;
        numeric varid   = CPU_SETUP.StateRatio[0x1f],
                prompt  = STRING_TOKEN (0x04D8),
                help    = STRING_TOKEN (0x04E1),
                flags   = RESET_REQUIRED,
                minimum = 0,
                maximum = 0x7F,
                step    = 0,
                default = 0,
        endnumeric;
      endif;

      suppressif ideqval CPU_SETUP.NumOfCustomPStates < 33;
        numeric varid   = CPU_SETUP.StateRatio[0x20],
                prompt  = STRING_TOKEN (0x04D9),
                help    = STRING_TOKEN (0x04E1),
                flags   = RESET_REQUIRED,
                minimum = 0,
                maximum = 0x7F,
                step    = 0,
                default = 0,
        endnumeric;
      endif;

      suppressif ideqval CPU_SETUP.NumOfCustomPStates < 34;
        numeric varid   = CPU_SETUP.StateRatio[0x21],
                prompt  = STRING_TOKEN (0x04DA),
                help    = STRING_TOKEN (0x04E1),
                flags   = RESET_REQUIRED,
                minimum = 0,
                maximum = 0x7F,
                step    = 0,
                default = 0,
        endnumeric;
      endif;

      suppressif ideqval CPU_SETUP.NumOfCustomPStates < 35;
        numeric varid   = CPU_SETUP.StateRatio[0x22],
                prompt  = STRING_TOKEN (0x04DB),
                help    = STRING_TOKEN (0x04E1),
                flags   = RESET_REQUIRED,
                minimum = 0,
                maximum = 0x7F,
                step    = 0,
                default = 0,
        endnumeric;
      endif;
      suppressif ideqval CPU_SETUP.NumOfCustomPStates < 36;
        numeric varid   = CPU_SETUP.StateRatio[0x23],
                prompt  = STRING_TOKEN (0x04DC),
                help    = STRING_TOKEN (0x04E1),
                flags   = RESET_REQUIRED,
                minimum = 0,
                maximum = 0x7F,
                step    = 0,
                default = 0,
        endnumeric;
      endif;
      suppressif ideqval CPU_SETUP.NumOfCustomPStates < 37;
        numeric varid   = CPU_SETUP.StateRatio[0x24],
                prompt  = STRING_TOKEN (0x04DD),
                help    = STRING_TOKEN (0x04E1),
                flags   = RESET_REQUIRED,
                minimum = 0,
                maximum = 0x7F,
                step    = 0,
                default = 0,
        endnumeric;
      endif;
      suppressif ideqval CPU_SETUP.NumOfCustomPStates < 38;
        numeric varid   = CPU_SETUP.StateRatio[0x25],
                prompt  = STRING_TOKEN (0x04DE),
                help    = STRING_TOKEN (0x04E1),
                flags   = RESET_REQUIRED,
                minimum = 0,
                maximum = 0x7F,
                step    = 0,
                default = 0,
        endnumeric;
      endif;
      suppressif ideqval CPU_SETUP.NumOfCustomPStates < 39;
        numeric varid   = CPU_SETUP.StateRatio[0x26],
                prompt  = STRING_TOKEN (0x04DF),
                help    = STRING_TOKEN (0x04E1),
                flags   = RESET_REQUIRED,
                minimum = 0,
                maximum = 0x7F,
                step    = 0,
                default = 0,
        endnumeric;
      endif;

      suppressif ideqval CPU_SETUP.NumOfCustomPStates < 40;
        numeric varid   = CPU_SETUP.StateRatio[0x27],
                prompt  = STRING_TOKEN (0x04E0),
                help    = STRING_TOKEN (0x04E1),
                flags   = RESET_REQUIRED,
                minimum = 0,
                maximum = 0x7F,
                step    = 0,
                default = 0,
        endnumeric;
      endif;

      suppressif ideqval CPU_SETUP.NumOfCustomPStates < 17;
        subtitle text = STRING_TOKEN(0x0002);
        subtitle text = STRING_TOKEN (0x04E2);
        subtitle text = STRING_TOKEN(0x0002);

        numeric varid   = CPU_SETUP.StateRatioMax16[0x0],
                prompt  = STRING_TOKEN (0x04E3),
                help    = STRING_TOKEN (0x04F3),
                flags   = RESET_REQUIRED,
                minimum = 0,
                maximum = 0x7F,
                step    = 0,
                default = 0,
        endnumeric;

        numeric varid   = CPU_SETUP.StateRatioMax16[0x1],
                prompt  = STRING_TOKEN (0x04E4),
                help    = STRING_TOKEN (0x04F3),
                flags   = RESET_REQUIRED,
                minimum = 0,
                maximum = 0x7F,
                step    = 0,
                default = 0,
        endnumeric;

        numeric varid   = CPU_SETUP.StateRatioMax16[0x2],
                prompt  = STRING_TOKEN (0x04E5),
                help    = STRING_TOKEN (0x04F3),
                flags   = RESET_REQUIRED,
                minimum = 0,
                maximum = 0x7F,
                step    = 0,
                default = 0,
        endnumeric;

        numeric varid   = CPU_SETUP.StateRatioMax16[0x3],
                prompt  = STRING_TOKEN (0x04E6),
                help    = STRING_TOKEN (0x04F3),
                flags   = RESET_REQUIRED,
                minimum = 0,
                maximum = 0x7F,
                step    = 0,
                default = 0,
        endnumeric;

        numeric varid   = CPU_SETUP.StateRatioMax16[0x4],
                prompt  = STRING_TOKEN (0x04E7),
                help    = STRING_TOKEN (0x04F3),
                flags   = RESET_REQUIRED,
                minimum = 0,
                maximum = 0x7F,
                step    = 0,
                default = 0,
        endnumeric;

        numeric varid   = CPU_SETUP.StateRatioMax16[0x5],
                prompt  = STRING_TOKEN (0x04E8),
                help    = STRING_TOKEN (0x04F3),
                flags   = RESET_REQUIRED,
                minimum = 0,
                maximum = 0x7F,
                step    = 0,
                default = 0,
        endnumeric;

        numeric varid   = CPU_SETUP.StateRatioMax16[0x6],
                prompt  = STRING_TOKEN (0x04E9),
                help    = STRING_TOKEN (0x04F3),
                flags   = RESET_REQUIRED,
                minimum = 0,
                maximum = 0x7F,
                step    = 0,
                default = 0,
        endnumeric;

        numeric varid   = CPU_SETUP.StateRatioMax16[0x7],
                prompt  = STRING_TOKEN (0x04EA),
                help    = STRING_TOKEN (0x04F3),
                flags   = RESET_REQUIRED,
                minimum = 0,
                maximum = 0x7F,
                step    = 0,
                default = 0,
        endnumeric;

        numeric varid   = CPU_SETUP.StateRatioMax16[0x8],
                prompt  = STRING_TOKEN (0x04EB),
                help    = STRING_TOKEN (0x04F3),
                flags   = RESET_REQUIRED,
                minimum = 0,
                maximum = 0x7F,
                step    = 0,
                default = 0,
        endnumeric;

        numeric varid   = CPU_SETUP.StateRatioMax16[0x9],
                prompt  = STRING_TOKEN (0x04EC),
                help    = STRING_TOKEN (0x04F3),
                flags   = RESET_REQUIRED,
                minimum = 0,
                maximum = 0x7F,
                step    = 0,
                default = 0,
        endnumeric;

        numeric varid   = CPU_SETUP.StateRatioMax16[0xa],
                prompt  = STRING_TOKEN (0x04ED),
                help    = STRING_TOKEN (0x04F3),
                flags   = RESET_REQUIRED,
                minimum = 0,
                maximum = 0x7F,
                step    = 0,
                default = 0,
        endnumeric;

        numeric varid   = CPU_SETUP.StateRatioMax16[0xb],
                prompt  = STRING_TOKEN (0x04EE),
                help    = STRING_TOKEN (0x04F3),
                flags   = RESET_REQUIRED,
                minimum = 0,
                maximum = 0x7F,
                step    = 0,
                default = 0,
        endnumeric;

        numeric varid   = CPU_SETUP.StateRatioMax16[0xc],
                prompt  = STRING_TOKEN (0x04EF),
                help    = STRING_TOKEN (0x04F3),
                flags   = RESET_REQUIRED,
                minimum = 0,
                maximum = 0x7F,
                step    = 0,
                default = 0,
        endnumeric;

        numeric varid   = CPU_SETUP.StateRatioMax16[0xd],
                prompt  = STRING_TOKEN (0x04F0),
                help    = STRING_TOKEN (0x04F3),
                flags   = RESET_REQUIRED,
                minimum = 0,
                maximum = 0x7F,
                step    = 0,
                default = 0,
        endnumeric;

        numeric varid   = CPU_SETUP.StateRatioMax16[0xe],
                prompt  = STRING_TOKEN (0x04F1),
                help    = STRING_TOKEN (0x04F3),
                flags   = RESET_REQUIRED,
                minimum = 0,
                maximum = 0x7F,
                step    = 0,
                default = 0,
        endnumeric;

        numeric varid   = CPU_SETUP.StateRatioMax16[0xf],
                prompt  = STRING_TOKEN (0x04F2),
                help    = STRING_TOKEN (0x04F3),
                flags   = RESET_REQUIRED,
                minimum = 0,
                maximum = 0x7F,
                step    = 0,
                default = 0,
        endnumeric;

      endif;

  endform; 

  form formid = 4117,
  title = STRING_TOKEN (0x02DD);

    subtitle text = STRING_TOKEN (0x02DF);
    subtitle text = STRING_TOKEN(0x0002);

    
    
    
    suppressif ideqval CPU_SETUP.ActiveCoreCount == 0 AND (NOT ideqval CPU_SETUP.ActiveSmallCoreCount == 0) OR
                 ideqval CPU_SETUP.AllBigCoreCount == 0;

      text
        help   = STRING_TOKEN(0x05D0),
        text   = STRING_TOKEN(0x05D1),
        text   = STRING_TOKEN(0x05D2),
        flags  = 0, key = 0;

      text
        help   = STRING_TOKEN(0x05D3),
        text   = STRING_TOKEN(0x05D4),
        text   = STRING_TOKEN(0x05D5),
        flags  = 0, key = 0;

      text
        help   = STRING_TOKEN(0x05D6),
        text   = STRING_TOKEN(0x05D7),
        text   = STRING_TOKEN(0x05D8),
        flags  = 0, key = 0;

      text
        help   = STRING_TOKEN(0x05D9),
        text   = STRING_TOKEN(0x05DA),
        text   = STRING_TOKEN(0x05DB),
        flags  = 0, key = 0;

      text
        help   = STRING_TOKEN(0x05DC),
        text   = STRING_TOKEN(0x05DD),
        text   = STRING_TOKEN(0x05DE),
        flags  = 0, key = 0;

      text
        help   = STRING_TOKEN(0x05DF),
        text   = STRING_TOKEN(0x05E0),
        text   = STRING_TOKEN(0x05E1),
        flags  = 0, key = 0;

      text
        help   = STRING_TOKEN(0x05E2),
        text   = STRING_TOKEN(0x05E3),
        text   = STRING_TOKEN(0x05E4),
        flags  = 0, key = 0;

      text
        help   = STRING_TOKEN(0x05E5),
        text   = STRING_TOKEN(0x05E6),
        text   = STRING_TOKEN(0x05E7),
        flags  = 0, key = 0;

      text
        help   = STRING_TOKEN (0x05E8),
        text   = STRING_TOKEN (0x05E9),
        text   = STRING_TOKEN (0x05EA),
        flags  = 0, key = 0;

      text
        help   = STRING_TOKEN (0x05EB),
        text   = STRING_TOKEN (0x05EC),
        text   = STRING_TOKEN (0x05ED),
        flags  = 0, key = 0;

      text
        help   = STRING_TOKEN (0x05EE),
        text   = STRING_TOKEN (0x05EF),
        text   = STRING_TOKEN (0x05F0),
        flags  = 0, key = 0;

      text
        help   = STRING_TOKEN (0x05F1),
        text   = STRING_TOKEN (0x05F2),
        text   = STRING_TOKEN (0x05F3),
        flags  = 0, key = 0;

      text
        help   = STRING_TOKEN (0x05F4),
        text   = STRING_TOKEN (0x05F5),
        text   = STRING_TOKEN (0x05F6),
        flags  = 0, key = 0;

      text
        help   = STRING_TOKEN (0x05F7),
        text   = STRING_TOKEN (0x05F8),
        text   = STRING_TOKEN (0x05F9),
        flags  = 0, key = 0;

      text
        help   = STRING_TOKEN (0x05FA),
        text   = STRING_TOKEN (0x05FB),
        text   = STRING_TOKEN (0x05FC),
        flags  = 0, key = 0;

      text
        help   = STRING_TOKEN (0x05FD),
        text   = STRING_TOKEN (0x05FE),
        text   = STRING_TOKEN (0x05FF),
        flags  = 0, key = 0;

    endif; 

    
    
    
    suppressif ideqval CPU_SETUP.ActiveSmallCoreCount == 0 AND (NOT ideqval CPU_SETUP.ActiveCoreCount == 0) OR
                 ideqval CPU_SETUP.AllSmallCoreCount == 0;

      text
        help   = STRING_TOKEN(0x0600),
        text   = STRING_TOKEN(0x0601),
        text   = STRING_TOKEN(0x0602),
        flags  = 0, key = 0;

      text
        help   = STRING_TOKEN(0x0603),
        text   = STRING_TOKEN(0x0604),
        text   = STRING_TOKEN(0x0605),
        flags  = 0, key = 0;

      text
        help   = STRING_TOKEN(0x0606),
        text   = STRING_TOKEN(0x0607),
        text   = STRING_TOKEN(0x0608),
        flags  = 0, key = 0;

      text
        help   = STRING_TOKEN(0x0609),
        text   = STRING_TOKEN(0x060A),
        text   = STRING_TOKEN(0x060B),
        flags  = 0, key = 0;

      text
        help   = STRING_TOKEN(0x060C),
        text   = STRING_TOKEN(0x060D),
        text   = STRING_TOKEN(0x060E),
        flags  = 0, key = 0;

      text
        help   = STRING_TOKEN(0x060F),
        text   = STRING_TOKEN(0x0610),
        text   = STRING_TOKEN(0x0611),
        flags  = 0, key = 0;

      text
        help   = STRING_TOKEN(0x0612),
        text   = STRING_TOKEN(0x0613),
        text   = STRING_TOKEN(0x0614),
        flags  = 0, key = 0;

      text
        help   = STRING_TOKEN(0x0615),
        text   = STRING_TOKEN(0x0616),
        text   = STRING_TOKEN(0x0617),
        flags  = 0, key = 0;

      text
        help   = STRING_TOKEN (0x0618),
        text   = STRING_TOKEN (0x0619),
        text   = STRING_TOKEN (0x061A),
        flags  = 0, key = 0;

      text
        help   = STRING_TOKEN (0x061B),
        text   = STRING_TOKEN (0x061C),
        text   = STRING_TOKEN (0x061D),
        flags  = 0, key = 0;

      text
        help   = STRING_TOKEN (0x061E),
        text   = STRING_TOKEN (0x061F),
        text   = STRING_TOKEN (0x0620),
        flags  = 0, key = 0;

      text
        help   = STRING_TOKEN (0x0621),
        text   = STRING_TOKEN (0x0622),
        text   = STRING_TOKEN (0x0623),
        flags  = 0, key = 0;

      text
        help   = STRING_TOKEN (0x0624),
        text   = STRING_TOKEN (0x0625),
        text   = STRING_TOKEN (0x0626),
        flags  = 0, key = 0;

      text
        help   = STRING_TOKEN (0x0627),
        text   = STRING_TOKEN (0x0628),
        text   = STRING_TOKEN (0x0629),
        flags  = 0, key = 0;

      text
        help   = STRING_TOKEN (0x062A),
        text   = STRING_TOKEN (0x062B),
        text   = STRING_TOKEN (0x062C),
        flags  = 0, key = 0;

      text
        help   = STRING_TOKEN (0x062D),
        text   = STRING_TOKEN (0x062E),
        text   = STRING_TOKEN (0x062F),
        flags  = 0, key = 0;

    endif;

    subtitle text = STRING_TOKEN(0x0002);

    suppressif ideqval SETUP_CPU_FEATURES.CoreRatioLimitAvailable == 0
                        OR ideqval CPU_SETUP.EnableGv == 0
                        OR ideqval CPU_SETUP.TurboMode == 0;
      
      
      
      suppressif ideqval CPU_SETUP.ActiveCoreCount == 0 AND (NOT ideqval CPU_SETUP.ActiveSmallCoreCount == 0) OR
                   ideqval CPU_SETUP.AllBigCoreCount == 0;

        numeric varid   = CPU_SETUP.RatioLimitNumCore[0],
                prompt  = STRING_TOKEN(0x0631),
                help    = STRING_TOKEN(0x0630),
                flags   = RESET_REQUIRED | INTERACTIVE, key = 4257,
                minimum = 0,
                maximum = 255,      
                step    = 1,        
                                    
                default = 0,
        endnumeric;

        numeric varid   = CPU_SETUP.RatioLimitNumCore[1],
                prompt  = STRING_TOKEN(0x0633),
                help    = STRING_TOKEN(0x0632),
                flags   = RESET_REQUIRED | INTERACTIVE, key = 4258,
                minimum = 0,
                maximum = 255,      
                step    = 1,        
                                    
                default = 0,
        endnumeric;

        numeric varid   = CPU_SETUP.RatioLimitNumCore[2],
                prompt  = STRING_TOKEN(0x0635),
                help    = STRING_TOKEN(0x0634),
                flags   = RESET_REQUIRED | INTERACTIVE, key = 4259,
                minimum = 0,
                maximum = 255,      
                step    = 1,        
                                    
                default = 0,
        endnumeric;

        numeric varid   = CPU_SETUP.RatioLimitNumCore[3],
                prompt  = STRING_TOKEN(0x0637),
                help    = STRING_TOKEN(0x0636),
                flags   = RESET_REQUIRED | INTERACTIVE, key = 4260,
                minimum = 0,
                maximum = 255,      
                step    = 1,        
                                    
                default = 0,
        endnumeric;

        numeric varid   = CPU_SETUP.RatioLimitNumCore[4],
                prompt  = STRING_TOKEN(0x0639),
                help    = STRING_TOKEN(0x0638),
                flags   = RESET_REQUIRED | INTERACTIVE, key = 4261,
                minimum = 0,
                maximum = 255,      
                step    = 1,        
                                    
                default = 0,
        endnumeric;

        numeric varid   = CPU_SETUP.RatioLimitNumCore[5],
                prompt  = STRING_TOKEN(0x063B),
                help    = STRING_TOKEN(0x063A),
                flags   = RESET_REQUIRED | INTERACTIVE, key = 4262,
                minimum = 0,
                maximum = 255,      
                step    = 1,        
                                    
                default = 0,
        endnumeric;

        numeric varid   = CPU_SETUP.RatioLimitNumCore[6],
                prompt  = STRING_TOKEN(0x063D),
                help    = STRING_TOKEN(0x063C),
                flags   = RESET_REQUIRED | INTERACTIVE, key = 4263,
                minimum = 0,
                maximum = 255,      
                step    = 1,        
                                    
                default = 0,
        endnumeric;

        numeric varid   = CPU_SETUP.RatioLimitNumCore[7],
                prompt  = STRING_TOKEN(0x063F),
                help    = STRING_TOKEN(0x063E),
                flags   = RESET_REQUIRED | INTERACTIVE, key = 4264,
                minimum = 0,
                maximum = 255,      
                step    = 1,        
                                    
                default = 0,
        endnumeric;

        numeric varid   = CPU_SETUP.RatioLimitRatio[0],
                prompt  = STRING_TOKEN (0x0641),
                help    = STRING_TOKEN (0x0640),
                flags   = RESET_REQUIRED | INTERACTIVE, key = 4265,
                minimum = 0,
                maximum = 120,
                step    = 1,        
                                    
                default = 0,
        endnumeric;

        numeric varid   = CPU_SETUP.RatioLimitRatio[1],
                prompt  = STRING_TOKEN (0x0643),
                help    = STRING_TOKEN (0x0642),
                flags   = RESET_REQUIRED | INTERACTIVE, key = 4266,
                minimum = 0,
                maximum = 120,
                step    = 1,        
                                    
                default = 0,
        endnumeric;

        numeric varid   = CPU_SETUP.RatioLimitRatio[2],
                prompt  = STRING_TOKEN (0x0645),
                help    = STRING_TOKEN (0x0644),
                flags   = RESET_REQUIRED | INTERACTIVE, key = 4267,
                minimum = 0,
                maximum = 120,      
                step    = 1,        
                                    
                default = 0,
        endnumeric;

        numeric varid   = CPU_SETUP.RatioLimitRatio[3],
                prompt  = STRING_TOKEN (0x0647),
                help    = STRING_TOKEN (0x0646),
                flags   = RESET_REQUIRED | INTERACTIVE, key = 4268,
                minimum = 0,
                maximum = 120,       
                step    = 1,        
                                    
                default = 0,
        endnumeric;

        numeric varid   = CPU_SETUP.RatioLimitRatio[4],
                prompt  = STRING_TOKEN (0x0649),
                help    = STRING_TOKEN (0x0648),
                flags   = RESET_REQUIRED | INTERACTIVE, key = 4269,
                minimum = 0,
                maximum = 120,       
                step    = 1,        
                                    
                default = 0,
        endnumeric;

        numeric varid   = CPU_SETUP.RatioLimitRatio[5],
                prompt  = STRING_TOKEN (0x064B),
                help    = STRING_TOKEN (0x064A),
                flags   = RESET_REQUIRED | INTERACTIVE, key = 4270,
                minimum = 0,
                maximum = 120,       
                step    = 1,        
                                    
                default = 0,
        endnumeric;

        numeric varid   = CPU_SETUP.RatioLimitRatio[6],
                prompt  = STRING_TOKEN (0x064D),
                help    = STRING_TOKEN (0x064C),
                flags   = RESET_REQUIRED | INTERACTIVE, key = 4271,
                minimum = 0,
                maximum = 120,       
                step    = 1,        
                                    
                default = 0,
        endnumeric;

        numeric varid   = CPU_SETUP.RatioLimitRatio[7],
                prompt  = STRING_TOKEN (0x064F),
                help    = STRING_TOKEN (0x064E),
                flags   = RESET_REQUIRED | INTERACTIVE, key = 4272,
                minimum = 0,
                maximum = 120,       
                step    = 1,        
                                    
                default = 0,
        endnumeric;
      endif; 

      
      
      
      suppressif ideqval CPU_SETUP.ActiveSmallCoreCount == 0 AND (NOT ideqval CPU_SETUP.ActiveCoreCount == 0) OR
                   ideqval CPU_SETUP.AllSmallCoreCount == 0;

        numeric varid   = CPU_SETUP.AtomRatioLimitNumCore[0],
                prompt  = STRING_TOKEN(0x0651),
                help    = STRING_TOKEN(0x0650),
                flags   = RESET_REQUIRED | INTERACTIVE, key = 4273,
                minimum = 0,
                maximum = 255,      
                step    = 1,        
                                    
                default = 0,
        endnumeric;

        numeric varid   = CPU_SETUP.AtomRatioLimitNumCore[1],
                prompt  = STRING_TOKEN(0x0653),
                help    = STRING_TOKEN(0x0652),
                flags   = RESET_REQUIRED | INTERACTIVE, key = 4274,
                minimum = 0,
                maximum = 255,      
                step    = 1,        
                                    
                default = 0,
        endnumeric;

        numeric varid   = CPU_SETUP.AtomRatioLimitNumCore[2],
                prompt  = STRING_TOKEN(0x0655),
                help    = STRING_TOKEN(0x0654),
                flags   = RESET_REQUIRED | INTERACTIVE, key = 4275,
                minimum = 0,
                maximum = 255,      
                step    = 1,        
                                    
                default = 0,
        endnumeric;

        numeric varid   = CPU_SETUP.AtomRatioLimitNumCore[3],
                prompt  = STRING_TOKEN(0x0657),
                help    = STRING_TOKEN(0x0656),
                flags   = RESET_REQUIRED | INTERACTIVE, key = 4276,
                minimum = 0,
                maximum = 255,      
                step    = 1,        
                                    
                default = 0,
        endnumeric;

        numeric varid   = CPU_SETUP.AtomRatioLimitNumCore[4],
                prompt  = STRING_TOKEN(0x0659),
                help    = STRING_TOKEN(0x0658),
                flags   = RESET_REQUIRED | INTERACTIVE, key = 4277,
                minimum = 0,
                maximum = 255,      
                step    = 1,        
                                    
                default = 0,
        endnumeric;

        numeric varid   = CPU_SETUP.AtomRatioLimitNumCore[5],
                prompt  = STRING_TOKEN(0x065B),
                help    = STRING_TOKEN(0x065A),
                flags   = RESET_REQUIRED | INTERACTIVE, key = 4278,
                minimum = 0,
                maximum = 255,      
                step    = 1,        
                                    
                default = 0,
        endnumeric;

        numeric varid   = CPU_SETUP.AtomRatioLimitNumCore[6],
                prompt  = STRING_TOKEN(0x065D),
                help    = STRING_TOKEN(0x065C),
                flags   = RESET_REQUIRED | INTERACTIVE, key = 4279,
                minimum = 0,
                maximum = 255,      
                step    = 1,        
                                    
                default = 0,
        endnumeric;

        numeric varid   = CPU_SETUP.AtomRatioLimitNumCore[7],
                prompt  = STRING_TOKEN(0x065F),
                help    = STRING_TOKEN(0x065E),
                flags   = RESET_REQUIRED | INTERACTIVE, key = 4280,
                minimum = 0,
                maximum = 255,      
                step    = 1,        
                                    
                default = 0,
        endnumeric;

        numeric varid   = CPU_SETUP.AtomRatioLimitRatio[0],
                prompt  = STRING_TOKEN (0x0661),
                help    = STRING_TOKEN (0x0660),
                flags   = RESET_REQUIRED | INTERACTIVE, key = 4281,
                minimum = 0,
                maximum = 85,      
                step    = 1,        
                                    
                default = 0,
        endnumeric;

        numeric varid   = CPU_SETUP.AtomRatioLimitRatio[1],
                prompt  = STRING_TOKEN (0x0663),
                help    = STRING_TOKEN (0x0662),
                flags   = RESET_REQUIRED | INTERACTIVE, key = 4282,
                minimum = 0,
                maximum = 85,       
                step    = 1,        
                                    
                default = 0,
        endnumeric;

        numeric varid   = CPU_SETUP.AtomRatioLimitRatio[2],
                prompt  = STRING_TOKEN (0x0665),
                help    = STRING_TOKEN (0x0664),
                flags   = RESET_REQUIRED | INTERACTIVE, key = 4283,
                minimum = 0,
                maximum = 85,       
                step    = 1,        
                                    
                default = 0,
        endnumeric;

        numeric varid   = CPU_SETUP.AtomRatioLimitRatio[3],
                prompt  = STRING_TOKEN (0x0667),
                help    = STRING_TOKEN (0x0666),
                flags   = RESET_REQUIRED | INTERACTIVE, key = 4284,
                minimum = 0,
                maximum = 85,       
                step    = 1,        
                                    
                default = 0,
        endnumeric;

        numeric varid   = CPU_SETUP.AtomRatioLimitRatio[4],
                prompt  = STRING_TOKEN (0x0669),
                help    = STRING_TOKEN (0x0668),
                flags   = RESET_REQUIRED | INTERACTIVE, key = 4285,
                minimum = 0,
                maximum = 85,       
                step    = 1,        
                                    
                default = 0,
        endnumeric;

        numeric varid   = CPU_SETUP.AtomRatioLimitRatio[5],
                prompt  = STRING_TOKEN (0x066B),
                help    = STRING_TOKEN (0x066A),
                flags   = RESET_REQUIRED | INTERACTIVE, key = 4286,
                minimum = 0,
                maximum = 85,       
                step    = 1,        
                                    
                default = 0,
        endnumeric;

        numeric varid   = CPU_SETUP.AtomRatioLimitRatio[6],
                prompt  = STRING_TOKEN (0x066D),
                help    = STRING_TOKEN (0x066C),
                flags   = RESET_REQUIRED | INTERACTIVE, key = 4287,
                minimum = 0,
                maximum = 85,       
                step    = 1,        
                                    
                default = 0,
        endnumeric;

        numeric varid   = CPU_SETUP.AtomRatioLimitRatio[7],
                prompt  = STRING_TOKEN (0x066F),
                help    = STRING_TOKEN (0x066E),
                flags   = RESET_REQUIRED | INTERACTIVE, key = 4288,
                minimum = 0,
                maximum = 85,       
                step    = 1,        
                                    
                default = 0,
        endnumeric;

      endif;

    endif;

  endform; 

  form formid = 4113,
  title = STRING_TOKEN (0x02D9);

      subtitle text = STRING_TOKEN (0x02DC);
      subtitle text = STRING_TOKEN(0x0002);

      text
        help   = STRING_TOKEN (0x04F4),
        text   = STRING_TOKEN (0x04F5),
        text   = STRING_TOKEN (0x04F6),
        flags  = 0, key = 0;

      text
        help   = STRING_TOKEN (0x04F7),
        text   = STRING_TOKEN (0x04F8),
        text   = STRING_TOKEN (0x04F9),
        flags  = 0, key = 0;

      text
        help   = STRING_TOKEN (0x0500),
        text   = STRING_TOKEN (0x0501),
        text   = STRING_TOKEN (0x0502),
        flags  = 0, key = 0;

      text
        help   = STRING_TOKEN (0x0493),
        text   = STRING_TOKEN (0x04FB),
        text   = STRING_TOKEN (0x04FC),
        flags  = 0, key = 0;

      text
        help   = STRING_TOKEN (0x049F),
        text   = STRING_TOKEN (0x04FE),
        text   = STRING_TOKEN (0x04FF),
        flags  = 0, key = 0;

      subtitle text = STRING_TOKEN(0x0002);

      goto 4117,
        prompt = STRING_TOKEN (0x02DD),
        help = STRING_TOKEN (0x02DE);

      suppressif ideqval CPU_SETUP.EnableGv == 0
                         OR ideqval SETUP_VOLATILE_DATA.PlatformFlavor == 0x4;
        oneof varid   = CPU_SETUP.EnergyEfficientPState,
            prompt   = STRING_TOKEN (0x0412),
            help     = STRING_TOKEN (0x0413),
            option text = STRING_TOKEN (0x0004),  value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN (0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
       endif;

       suppressif ideqval CPU_SETUP.EnableGv == 0;
        oneof varid  = CPU_SETUP.TurboPowerLimitLock,
            prompt   = STRING_TOKEN (0x048B),
            help     = STRING_TOKEN (0x048C),
            option text = STRING_TOKEN (0x0004),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN (0x0003),  value = 1, flags = RESET_REQUIRED;
        endoneof;
       endif;

       suppressif ideqval SETUP_CPU_FEATURES.ConfigTdpAvailable == 1;
        oneof varid  = CPU_SETUP.LongDurationPwrLimitOverride,
            prompt   = STRING_TOKEN (0x048D),
            help     = STRING_TOKEN (0x048E),
            default  = 0, defaultstore = MyStandardDefault,
            option text = STRING_TOKEN (0x0004),  value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN (0x0003),  value = 1, flags = RESET_REQUIRED;
        endoneof;
      endif;

       suppressif ideqval SETUP_CPU_FEATURES.ConfigTdpAvailable == 1
                       OR  ideqval CPU_SETUP.LongDurationPwrLimitOverride == 0;
          numeric varid   = CPU_SETUP.PowerLimit1,
              prompt   = STRING_TOKEN (0x048F),
              help     = STRING_TOKEN (0x0493),
              flags    = 0 | RESET_REQUIRED,
              minimum  = 0,
              maximum  = 4095875,
              step     = 125,        
                                   
              default  = 0, defaultstore = MyStandardDefault,
          endnumeric;
      endif;

      suppressif ideqval SETUP_CPU_FEATURES.ConfigTdpAvailable == 1
                       OR  ideqval CPU_SETUP.LongDurationPwrLimitOverride == 0;
          oneof varid   = CPU_SETUP.PowerLimit1Time,
              prompt   = STRING_TOKEN (0x0494),
              help     = STRING_TOKEN (0x0498),
              flags    = 0 | RESET_REQUIRED,
              default  = 0, defaultstore = MyStandardDefault,
              option text = STRING_TOKEN (0x03F4),  value = 0, flags = RESET_REQUIRED;
              option text = STRING_TOKEN (0x03F5),  value = 1, flags = RESET_REQUIRED;
              option text = STRING_TOKEN (0x03F6),  value = 2, flags = RESET_REQUIRED;
              option text = STRING_TOKEN (0x03F7),  value = 3, flags = RESET_REQUIRED;
              option text = STRING_TOKEN (0x03F8),  value = 4, flags = RESET_REQUIRED;
              option text = STRING_TOKEN (0x03F9),  value = 5, flags = RESET_REQUIRED;
              option text = STRING_TOKEN (0x03FA),  value = 6, flags = RESET_REQUIRED;
              option text = STRING_TOKEN (0x03FB),  value = 7, flags = RESET_REQUIRED;
              option text = STRING_TOKEN (0x03FC),  value = 8, flags = RESET_REQUIRED;
              option text = STRING_TOKEN (0x03FE),  value = 10, flags = RESET_REQUIRED;
              option text = STRING_TOKEN (0x0400),  value = 12, flags = RESET_REQUIRED;
              option text = STRING_TOKEN (0x0402),  value = 14, flags = RESET_REQUIRED;
              option text = STRING_TOKEN (0x0404),  value = 16, flags = RESET_REQUIRED;
              option text = STRING_TOKEN (0x09A5),  value = 20, flags = RESET_REQUIRED;
              option text = STRING_TOKEN (0x09A6),  value = 24, flags = RESET_REQUIRED;
              option text = STRING_TOKEN (0x09A7),  value = 28, flags = RESET_REQUIRED;
              option text = STRING_TOKEN (0x09A8),  value = 32, flags = RESET_REQUIRED;
              option text = STRING_TOKEN (0x09A9),  value = 40, flags = RESET_REQUIRED;
              option text = STRING_TOKEN (0x09AA),  value = 48, flags = RESET_REQUIRED;
              option text = STRING_TOKEN (0x09AB),  value = 56, flags = RESET_REQUIRED;
              option text = STRING_TOKEN (0x09AC),  value = 64, flags = RESET_REQUIRED;
              option text = STRING_TOKEN (0x09AD),  value = 80, flags = RESET_REQUIRED;
              option text = STRING_TOKEN (0x09AE),  value = 96, flags = RESET_REQUIRED;
              option text = STRING_TOKEN (0x09AF),  value = 112, flags = RESET_REQUIRED;
              option text = STRING_TOKEN (0x09B0),  value = 128, flags = RESET_REQUIRED;
          endoneof;
      endif;

      suppressif ideqval SETUP_CPU_FEATURES.ConfigTdpAvailable == 1;
          oneof varid  = CPU_SETUP.PowerLimit2,
             prompt   = STRING_TOKEN (0x0499),
             help     = STRING_TOKEN (0x049A),
             option text = STRING_TOKEN (0x0004),  value = 0, flags =RESET_REQUIRED;
             option text = STRING_TOKEN (0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          endoneof;
      endif;

      suppressif ideqval SETUP_CPU_FEATURES.ConfigTdpAvailable == 1
                        OR ideqval CPU_SETUP.PowerLimit2 == 0;
          numeric varid   = CPU_SETUP.PowerLimit2Power,
              prompt   = STRING_TOKEN (0x049B),
              help     = STRING_TOKEN (0x049F),
              flags    = 0 | RESET_REQUIRED,
              minimum  = 0,
              maximum  = 4095875,
              step     = 125,        
                                   
              default  = 0, defaultstore = MyStandardDefault,
          endnumeric;
       endif;

        oneof varid  = CPU_SETUP.EnergyEfficientTurbo,
           prompt   = STRING_TOKEN (0x068F),
           help     = STRING_TOKEN (0x0690),
           option text = STRING_TOKEN (0x0004),  value = 0, flags = RESET_REQUIRED;
           option text = STRING_TOKEN (0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
  endform; 

  form formid = 5047,
  title = STRING_TOKEN (0x02E0);

      subtitle text = STRING_TOKEN (0x02E1);
      subtitle text = STRING_TOKEN(0x0002);

      text
        help  = STRING_TOKEN(0x0535),
        text  = STRING_TOKEN(0x0536),
        text  = STRING_TOKEN(0x0537),
        flags = 0,
        key   = 0;

      numeric varid   = CPU_SETUP.PsysSlope,
        prompt        = STRING_TOKEN (0x055C),
        help          = STRING_TOKEN (0x055D),
        flags         = RESET_REQUIRED,
        minimum       = 0,
        maximum       = 200,
        step          = 1,
        default       = 0,
      endnumeric;

      numeric varid   = CPU_SETUP.PsysOffset,
        prompt        = STRING_TOKEN (0x055E),
        help          = STRING_TOKEN (0x055F),
        flags         = RESET_REQUIRED,
        minimum       = 0,
        maximum       = 63999,
        step          = 1,
        default       = 0,
      endnumeric;

      oneof varid   = CPU_SETUP.PsysOffsetPrefix,
        prompt      = STRING_TOKEN (0x0560),
        help        = STRING_TOKEN (0x0561),
        option text = STRING_TOKEN (0x02F1),  value = 0, flags =  DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN (0x02F2),  value = 1, flags = RESET_REQUIRED;
      endoneof;

      numeric varid = CPU_SETUP.PsysPmax,
        prompt  = STRING_TOKEN (0x0562),
        help    = STRING_TOKEN (0x0563),
        flags   = RESET_REQUIRED,
        minimum = 0,
        maximum = 0x1FFF,
        step    = 1,
        default = 0, defaultstore = MyStandardDefault,
      endnumeric;

      oneof varid  = CPU_SETUP.EnableMinVoltageOverride,
        prompt   = STRING_TOKEN (0x05CA),
        help     = STRING_TOKEN (0x05CB),
        option text = STRING_TOKEN (0x0004),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN (0x0003),  value = 1, flags = RESET_REQUIRED;
      endoneof;

      suppressif ideqval CPU_SETUP.EnableMinVoltageOverride == 0;
        numeric varid = CPU_SETUP.MinVoltageRuntime,
          prompt  = STRING_TOKEN (0x05CC),
          help    = STRING_TOKEN (0x05CD),
          flags   = RESET_REQUIRED,
          minimum = 0,
          maximum = 1999,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = CPU_SETUP.MinVoltageC8,
          prompt  = STRING_TOKEN (0x05CE),
          help    = STRING_TOKEN (0x05CF),
          flags   = RESET_REQUIRED,
          minimum = 0,
          maximum = 1999,
          step    = 1,
          default = 0,
        endnumeric;
      endif;

      numeric varid   = CPU_SETUP.VccInAuxImonIccImax,
        prompt        = STRING_TOKEN (0x0564),
        help          = STRING_TOKEN (0x0565),
        flags         = RESET_REQUIRED,
        minimum       = 0,
        maximum       = 512,
        step          = 1,
        default       = 0,
      endnumeric;

      numeric varid   = CPU_SETUP.VccInAuxImonSlope,
        prompt        = STRING_TOKEN (0x0566),
        help          = STRING_TOKEN (0x0567),
        flags         = RESET_REQUIRED,
        minimum       = 0,
        maximum       = 200,
        step          = 1,
        default       = 100,
      endnumeric;

      numeric varid   = CPU_SETUP.VccInAuxImonOffset,
        prompt        = STRING_TOKEN (0x0568),
        help          = STRING_TOKEN (0x0569),
        flags         = RESET_REQUIRED,
        minimum       = 0,
        maximum       = 63999,
        step          = 1,
        default       = 0,
      endnumeric;

      oneof varid   = CPU_SETUP.VccInAuxImonOffsetPrefix,
        prompt      = STRING_TOKEN (0x056A),
        help        = STRING_TOKEN (0x056B),
        option text = STRING_TOKEN (0x02F1),  value = 0, flags =  DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN (0x02F2),  value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid = CPU_SETUP.EnableVsysCritical,
        prompt      = STRING_TOKEN (0x056C),
        help        = STRING_TOKEN (0x056D),
        option text = STRING_TOKEN (0x0004),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN (0x056F),  value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x056E),  value = 2, flags = RESET_REQUIRED;
      endoneof;

      suppressif (ideqval CPU_SETUP.EnableVsysCritical == 0) OR (ideqval CPU_SETUP.EnableVsysCritical == 2);
        numeric varid = CPU_SETUP.PsysFullScale,
          prompt  = STRING_TOKEN (0x0570),
          help    = STRING_TOKEN (0x0571),
          flags   = RESET_REQUIRED,
          minimum = 0,
          maximum = 255000,
          step    = 1,
          default = 200000,
        endnumeric;

        numeric varid = CPU_SETUP.PsysCriticalThreshold,
          prompt  = STRING_TOKEN (0x0572),
          help    = STRING_TOKEN (0x0573),
          flags   = RESET_REQUIRED,
          minimum = 0,
          maximum = 255000,
          step    = 1,
          default = 130000,
        endnumeric;
      endif;

      suppressif (ideqval CPU_SETUP.EnableVsysCritical == 0) OR (ideqval CPU_SETUP.EnableVsysCritical == 1);
        numeric varid = CPU_SETUP.VsysFullScale1,
          prompt  = STRING_TOKEN (0x0570),
          help    = STRING_TOKEN (0x0571),
          flags   = RESET_REQUIRED,
          minimum = 0,
          maximum = 255000,
          step    = 1,
          default = 24000,
        endnumeric;

        numeric varid = CPU_SETUP.VsysCriticalThreshold1,
          prompt  = STRING_TOKEN (0x0572),
          help    = STRING_TOKEN (0x0573),
          flags   = RESET_REQUIRED,
          minimum = 0,
          maximum = 255000,
          step    = 1,
          default = 6000,
        endnumeric;
      endif;

      numeric varid = CPU_SETUP.VsysAssertionDeglitchMantissa,
        prompt  = STRING_TOKEN (0x0574),
        help    = STRING_TOKEN (0x0575),
        flags   = RESET_REQUIRED,
        minimum = 0,
        maximum = 255,
        step    = 1,
        default = 1,
      endnumeric;

      numeric varid = CPU_SETUP.VsysAssertionDeglitchExponent,
        prompt  = STRING_TOKEN (0x0576),
        help    = STRING_TOKEN (0x0577),
        flags   = RESET_REQUIRED,
        minimum = 0,
        maximum = 255,
        step    = 1,
        default = 0,
      endnumeric;

      numeric varid = CPU_SETUP.VsysDeassertionDeglitchMantissa,
        prompt  = STRING_TOKEN (0x0578),
        help    = STRING_TOKEN (0x0579),
        flags   = RESET_REQUIRED,
        minimum = 0,
        maximum = 255,
        step    = 1,
        default = 13,
      endnumeric;

      numeric varid = CPU_SETUP.VsysDeassertionDeglitchExponent,
        prompt  = STRING_TOKEN (0x057A),
        help    = STRING_TOKEN (0x057B),
        flags   = RESET_REQUIRED,
        minimum = 0,
        maximum = 255,
        step    = 1,
        default = 2,
      endnumeric;

      oneof varid   = CPU_SETUP.VrPowerDeliveryDesign,
        questionid  = 4290,
        prompt      = STRING_TOKEN(0x0303),
        help        = STRING_TOKEN(0x0304),
        flags       = INTERACTIVE,
        default     = 0, defaultstore = MyStandardDefault,
        option text = STRING_TOKEN(0x0305), value = 0, flags = RESET_REQUIRED;
        suppressif (NOT ideqval SETUP_VOLATILE_DATA.PlatformFlavor == 0x2) AND
                   (NOT ideqval SETUP_VOLATILE_DATA.PlatformFlavor == 0x6);
          option text = STRING_TOKEN(0x0306),   value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0307),   value = 2, flags = RESET_REQUIRED; 
          option text = STRING_TOKEN(0x0308),   value = 3, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0309),  value = 4, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x030A),  value = 5, flags = RESET_REQUIRED; 
          option text = STRING_TOKEN(0x030B),   value = 6, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x030C),   value = 7, flags = RESET_REQUIRED; 
          option text = STRING_TOKEN(0x030D),   value = 8, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x030E),  value = 9, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x030F),   value = 10, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0310),   value = 11, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0311),  value = 12, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0312),   value = 13, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0313),   value = 14, flags = RESET_REQUIRED; 
          option text = STRING_TOKEN(0x0314),   value = 15, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0315),   value = 16, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0316),  value = 17, flags = RESET_REQUIRED; 
          option text = STRING_TOKEN(0x0317),   value = 18, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0318),   value = 19, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0319),  value = 20, flags = RESET_REQUIRED;  
          option text = STRING_TOKEN(0x031A),   value = 21, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x031B),   value = 22, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x031C),   value = 23, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x031D),   value = 24, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x031E),   value = 25, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x031F),   value = 26, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0320),   value = 27, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0321),   value = 28, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0322),   value = 29, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0323),   value = 30, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0324),   value = 31, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0325),   value = 32, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0326),   value = 33, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0327),   value = 34, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0328),   value = 35, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0329),   value = 36, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x032A),   value = 37, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x032B),   value = 38, flags = RESET_REQUIRED;




          option text = STRING_TOKEN(0x032C),       value = 0x80, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x032D),       value = 0x81, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x032E),       value = 0x82, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x032F),      value = 0x83, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0330),      value = 0x84, flags = RESET_REQUIRED;

          option text = STRING_TOKEN(0x0331),        value = 0x85, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0332),        value = 0x86, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0333),       value = 0x87, flags = RESET_REQUIRED;

          option text = STRING_TOKEN(0x0334),       value = 0x88, flags = RESET_REQUIRED;

          option text = STRING_TOKEN(0x0335),        value = 0x89, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0336),       value = 0x8A, flags = RESET_REQUIRED;

          option text = STRING_TOKEN(0x0337),        value = 0x8B, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0338),        value = 0x8C, flags = RESET_REQUIRED;

          option text = STRING_TOKEN(0x0339),        value = 0x8D, flags = RESET_REQUIRED; 
          option text = STRING_TOKEN(0x033A),        value = 0x8E, flags = RESET_REQUIRED; 

          option text = STRING_TOKEN(0x033B),        value = 0x8F, flags = RESET_REQUIRED;

          option text = STRING_TOKEN(0x033C),      value = 0xA0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x033D),      value = 0xA1, flags = RESET_REQUIRED; 

          option text = STRING_TOKEN(0x033E),      value = 0xA2, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x033F),      value = 0xA3, flags = RESET_REQUIRED; 

          option text = STRING_TOKEN(0x0340),       value = 0xA4, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0341),       value = 0xA5, flags = RESET_REQUIRED; 
          option text = STRING_TOKEN(0x0342),       value = 0xA6, flags = RESET_REQUIRED; 
          option text = STRING_TOKEN(0x0343),       value = 0xA7, flags = RESET_REQUIRED; 
          option text = STRING_TOKEN(0x0344),       value = 0xA8, flags = RESET_REQUIRED; 
          option text = STRING_TOKEN(0x0345),       value = 0xA9, flags = RESET_REQUIRED; 
          option text = STRING_TOKEN(0x0346),       value = 0xAA, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0347),       value = 0xAB, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0348),       value = 0xAC, flags = RESET_REQUIRED;

          option text = STRING_TOKEN(0x0349),           value = 0xE0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x034A),           value = 0xE1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x034B),           value = 0xE2, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x034C),           value = 0xE3, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x034D),           value = 0xE4, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x034E),           value = 0xE5, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x034F),           value = 0xE6, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0350),           value = 0xE7, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0351),           value = 0xE8, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0352),           value = 0xE9, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0353),           value = 0xEA, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0354),           value = 0xEB, flags = RESET_REQUIRED;

          option text = STRING_TOKEN(0x0355),     value = 0xF0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0356),     value = 0xF1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0357),     value = 0xF2, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0358),     value = 0xF3, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0359),     value = 0xF4, flags = RESET_REQUIRED;
#line 3171 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\CpuSetup.hfr"



        endif;
        suppressif (NOT ideqval SETUP_VOLATILE_DATA.PlatformFlavor == 0x1) OR (NOT ideqval SETUP_CPU_FEATURES.SaVrSupport == 0);
          option text = STRING_TOKEN(0x035A),   value = 0x30, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x035B),   value = 0x31, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x035C),   value = 0x32, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x035D),   value = 0x33, flags = RESET_REQUIRED;  
          option text = STRING_TOKEN(0x035E),   value = 0x34, flags = RESET_REQUIRED;  
          option text = STRING_TOKEN(0x035F),   value = 0x35, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0360),   value = 0x36, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0361),   value = 0x37, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0362),   value = 0x38, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0363),   value = 0x39, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0364),   value = 0x3A, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0365),   value = 0x3B, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0366),   value = 0x3C, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0367),   value = 0x3D, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0368),   value = 0x3E, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0369),   value = 0x3F, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x036A),   value = 0x40, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x036B),   value = 0x41, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x036C),   value = 0x42, flags = RESET_REQUIRED;
























#line 3220 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\CpuSetup.hfr"



        endif
        
        
        
        suppressif (NOT ideqval SETUP_VOLATILE_DATA.PlatformFlavor == 0x1) OR (ideqval SETUP_CPU_FEATURES.SaVrSupport == 0);
          option text = STRING_TOKEN(0x0380),        value = 0x50, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0381),        value = 0x51, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0382),        value = 0x52, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0383),        value = 0x53, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0384),  value = 0x54, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0385),  value = 0x55, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0386),  value = 0x56, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0389),  value = 0x57, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0387),  value = 0x58, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0388),  value = 0x59, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x038A),  value = 0x5A, flags = RESET_REQUIRED; 
          option text = STRING_TOKEN(0x038B), value = 0x5B, flags = RESET_REQUIRED; 
          option text = STRING_TOKEN(0x038C), value = 0x5C, flags = RESET_REQUIRED; 
          option text = STRING_TOKEN(0x038D), value = 0x5D, flags = RESET_REQUIRED; 
          option text = STRING_TOKEN(0x038F), value = 0x5E, flags = RESET_REQUIRED; 
          option text = STRING_TOKEN(0x038E), value = 0x5F, flags = RESET_REQUIRED; 
          option text = STRING_TOKEN(0x0390), value = 0x60, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0391), value = 0x61, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0393), value = 0x62, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0392), value = 0x63, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0394), value = 0x64, flags = RESET_REQUIRED; 
          option text = STRING_TOKEN(0x0395), value = 0x65, flags = RESET_REQUIRED; 
          option text = STRING_TOKEN(0x0397), value = 0x66, flags = RESET_REQUIRED; 
          option text = STRING_TOKEN(0x0396), value = 0x67, flags = RESET_REQUIRED; 
        endif;
      endoneof;

      goto 5050,
        prompt = STRING_TOKEN (0x02E2),
        help = STRING_TOKEN (0x02E3);

      suppressif ideqval CPU_SETUP_VOLATILE_DATA.CoreVrLocked == 1;
        goto 5049,
          prompt = STRING_TOKEN (0x02E8),
          help = STRING_TOKEN (0x02E8);
      endif;

      suppressif ideqval CPU_SETUP_VOLATILE_DATA.GtVrLocked == 1;
        goto 5052,
          prompt = STRING_TOKEN (0x02EA),
          help = STRING_TOKEN (0x02EA);
      endif;

      suppressif ideqval CPU_SETUP_VOLATILE_DATA.SaVrLocked == 1
                      OR ideqval SETUP_CPU_FEATURES.SaVrSupport == 0;
        goto 5048,
          prompt = STRING_TOKEN (0x02EC),
          help = STRING_TOKEN (0x02EC);
      endif;

      suppressif ideqval SETUP_CPU_FEATURES.FivrSupported == 0;
        goto 5251,
          prompt = STRING_TOKEN (0x02EE),
          help = STRING_TOKEN (0x02EE);
      endif;


endform; 

  form formid = 5050,
  title = STRING_TOKEN (0x02E2);

      subtitle text = STRING_TOKEN (0x02E4);
      subtitle text = STRING_TOKEN(0x0002);

      oneof varid  = CPU_SETUP.AcousticNoiseMitigation,
         prompt   = STRING_TOKEN (0x057C),
         help     = STRING_TOKEN (0x057D),
         option text = STRING_TOKEN (0x0004),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
         option text = STRING_TOKEN (0x0003),  value = 1, flags = RESET_REQUIRED;
      endoneof;

      grayoutif ideqval CPU_SETUP.AcousticNoiseMitigation == 0;

          
          
          
          numeric varid = CPU_SETUP.PreWake,
            prompt  = STRING_TOKEN (0x0584),
            help    = STRING_TOKEN (0x0585),
            flags   = RESET_REQUIRED,
            minimum = 0,
            maximum = 255,
            step    = 1,
            default = 0,
          endnumeric;

          numeric varid = CPU_SETUP.RampUp,
            prompt  = STRING_TOKEN (0x0586),
            help    = STRING_TOKEN (0x0587),
            flags   = RESET_REQUIRED,
            minimum = 0,
            maximum = 255,
            step    = 1,
            default = 0,
          endnumeric;

          numeric varid = CPU_SETUP.RampDown,
            prompt  = STRING_TOKEN (0x0588),
            help    = STRING_TOKEN (0x0589),
            flags   = RESET_REQUIRED,
            minimum = 0,
            maximum = 255,
            step    = 1,
            default = 0,
          endnumeric;

          subtitle text = STRING_TOKEN(0x0002);
          subtitle text = STRING_TOKEN (0x02E5);
          oneof varid = CPU_SETUP.FastPkgCRampDisable[0],
            prompt      = STRING_TOKEN (0x057E),
            help        = STRING_TOKEN (0x0581),
            option text = STRING_TOKEN (0x0582),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN (0x0583),  value = 1, flags = RESET_REQUIRED;
          endoneof;

          oneof varid = CPU_SETUP.SlowSlewRate[0],
            prompt      = STRING_TOKEN (0x058A),
            help        = STRING_TOKEN (0x058B),
            option text = STRING_TOKEN (0x058E),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN (0x058F),  value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN (0x0590),  value = 2, flags = RESET_REQUIRED;
            option text = STRING_TOKEN (0x0591),  value = 3, flags = RESET_REQUIRED;
          endoneof;

          subtitle text = STRING_TOKEN(0x0002);
          subtitle text = STRING_TOKEN(0x02E6);
          oneof varid = CPU_SETUP.FastPkgCRampDisable[1],
            prompt      = STRING_TOKEN (0x057F),
            help        = STRING_TOKEN (0x0581),
            option text = STRING_TOKEN(0x0582),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(0x0583),  value = 1, flags = RESET_REQUIRED;
          endoneof;

          oneof varid = CPU_SETUP.SlowSlewRate[1],
            prompt      = STRING_TOKEN (0x058C),
            help        = STRING_TOKEN (0x058D),
            option text = STRING_TOKEN(0x058E),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(0x058F),  value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0590),  value = 2, flags = RESET_REQUIRED;
          endoneof;

          suppressif ideqval SETUP_CPU_FEATURES.SaVrSupport == 0;
            subtitle text = STRING_TOKEN(0x0002);
            subtitle text = STRING_TOKEN(0x02E7);
            oneof varid = CPU_SETUP.FastPkgCRampDisable[2],
              prompt      = STRING_TOKEN (0x0580),
              help        = STRING_TOKEN (0x0581),
              option text = STRING_TOKEN(0x0582),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
              option text = STRING_TOKEN(0x0583),  value = 1, flags = RESET_REQUIRED;
            endoneof;
          endif;
      endif;
endform;

  form formid = 5049,
  title = STRING_TOKEN(0x02E8);

      subtitle text = STRING_TOKEN(0x02E9);
      subtitle text = STRING_TOKEN(0x0002);
        
        
        
        oneof varid = CPU_SETUP.VrConfigEnable[0],
          prompt  = STRING_TOKEN (0x0538),
          help    = STRING_TOKEN (0x0539),
          option text = STRING_TOKEN (0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

      suppressif ideqval CPU_SETUP.VrConfigEnable[0] == 0;

        text
          help  = STRING_TOKEN(0x0503),
          text  = STRING_TOKEN(0x0504),
          text  = STRING_TOKEN(0x0505),
          flags = 0,
          key   = 0;

        text
          help  = STRING_TOKEN(0x0508),
          text  = STRING_TOKEN(0x0509),
          text  = STRING_TOKEN(0x050A),
          flags = 0,
          key   = 0;

        text
          help  = STRING_TOKEN(0x050D),
          text  = STRING_TOKEN(0x050E),
          text  = STRING_TOKEN(0x050F),
          flags = 0,
          key   = 0;

        text
          help  = STRING_TOKEN(0x0512),
          text  = STRING_TOKEN(0x0513),
          text  = STRING_TOKEN(0x0514),
          flags = 0,
          key   = 0;

        text
          help  = STRING_TOKEN(0x0517),
          text  = STRING_TOKEN(0x0518),
          text  = STRING_TOKEN(0x0519),
          flags = 0,
          key   = 0;

        text
          help  = STRING_TOKEN(0x051C),
          text  = STRING_TOKEN(0x051D),
          text  = STRING_TOKEN(0x051E),
          flags = 0,
          key   = 0;

        text
          help  = STRING_TOKEN(0x0521),
          text  = STRING_TOKEN(0x0522),
          text  = STRING_TOKEN(0x0523),
          flags = 0,
          key   = 0;

        text
          help  = STRING_TOKEN(0x0526),
          text  = STRING_TOKEN(0x0527),
          text  = STRING_TOKEN(0x0528),
          flags = 0,
          key   = 0;

        text
          help  = STRING_TOKEN(0x052B),
          text  = STRING_TOKEN(0x052C),
          text  = STRING_TOKEN(0x052D),
          flags = 0,
          key   = 0;

        text
          help  = STRING_TOKEN(0x0530),
          text  = STRING_TOKEN(0x0531),
          text  = STRING_TOKEN(0x0532),
          flags = 0,
          key   = 0;

        numeric varid   = CPU_SETUP.AcLoadline[0],
            prompt   = STRING_TOKEN (0x053A),
            help     = STRING_TOKEN (0x053B),
            flags    = 0 | RESET_REQUIRED,
            minimum  = 0,
            maximum  = 62500,
            step     = 0,        
                                 
            default  = 0, defaultstore = MyStandardDefault,
        endnumeric;

        numeric varid   = CPU_SETUP.DcLoadline[0],
            prompt   = STRING_TOKEN (0x053C),
            help     = STRING_TOKEN (0x053D),
            flags    = 0 | RESET_REQUIRED,
            minimum  = 0,
            maximum  = 62500,
            step     = 0,        
                                 
            default  = 0, defaultstore = MyStandardDefault,
        endnumeric;

        numeric varid = CPU_SETUP.Psi1Threshold[0],
          prompt  = STRING_TOKEN (0x054A),
          help    = STRING_TOKEN (0x054B),
          flags   = RESET_REQUIRED,
          minimum = 0,
          maximum = 512,
          step    = 1,
          default = 80,
        endnumeric;

        numeric varid = CPU_SETUP.Psi2Threshold[0],
          prompt  = STRING_TOKEN (0x054C),
          help    = STRING_TOKEN (0x054D),
          flags   = RESET_REQUIRED,
          minimum = 0,
          maximum = 512,
          step    = 1,
          default = 20,
        endnumeric;

        numeric varid = CPU_SETUP.Psi3Threshold[0],
          prompt  = STRING_TOKEN (0x054E),
          help    = STRING_TOKEN (0x054F),
          flags   = RESET_REQUIRED,
          minimum = 0,
          maximum = 512,
          step    = 1,
          default = 4,
        endnumeric;

        oneof varid = CPU_SETUP.Psi3Enable[0],
          prompt  = STRING_TOKEN (0x0550),
          help    = STRING_TOKEN (0x0551),
          option text = STRING_TOKEN (0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        oneof varid = CPU_SETUP.Psi4Enable[0],
          prompt  = STRING_TOKEN (0x0552),
          help    = STRING_TOKEN (0x0553),
          option text = STRING_TOKEN (0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        numeric varid   = CPU_SETUP.ImonSlope[0],
          prompt        = STRING_TOKEN (0x0556),
          help          = STRING_TOKEN (0x0557),
          flags         = RESET_REQUIRED,
          minimum       = 0,
          maximum       = 200,
          step          = 1,
          default       = 0,
        endnumeric;

        numeric varid   = CPU_SETUP.ImonOffset[0],
          prompt        = STRING_TOKEN (0x0558),
          help          = STRING_TOKEN (0x0559),
          flags         = RESET_REQUIRED,
          minimum       = 0,
          maximum       = 63999,
          step          = 1,
          default       = 0,
        endnumeric;

        oneof varid   = CPU_SETUP.ImonOffsetPrefix[0],
          prompt      = STRING_TOKEN (0x055A),
          help        = STRING_TOKEN (0x055B),
          option text = STRING_TOKEN (0x02F1),  value = 0, flags =  DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN (0x02F2),  value = 1, flags = RESET_REQUIRED;
        endoneof;

        grayoutif ideqval CPU_SETUP.OverclockingSupport == 1;
          numeric varid = CPU_SETUP.IccMax[0],
            prompt  = STRING_TOKEN (0x053E),
            help    = STRING_TOKEN (0x053F),
            flags   = RESET_REQUIRED,
            minimum = 0,
            maximum = 2048,
            step    = 1,
            default = 0,
          endnumeric;
        endif;




        suppressif ideqval CPU_SETUP_VOLATILE_DATA.FastVmodeSupported == 0;
          oneof varid  = CPU_SETUP.EnableFastVmode[0],
            questionid  = 4291,
            prompt   = STRING_TOKEN (0x0540),
            help     = STRING_TOKEN (0x0541),
            flags    = INTERACTIVE,
            option text = STRING_TOKEN (0x0004),  value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN (0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          endoneof;

          suppressif ideqval CPU_SETUP.EnableFastVmode[0] == 0;
            numeric varid = CPU_SETUP.IccLimit[0],
              prompt  = STRING_TOKEN (0x0546),
              help    = STRING_TOKEN (0x0547),
              flags   = RESET_REQUIRED | INTERACTIVE, key = 4294,
              minimum = 0,
              maximum = 2040,
              step    = 1,
              default = 0,
            endnumeric;
          endif;
        endif;




        numeric varid = CPU_SETUP.VrVoltageLimit[0],
          prompt  = STRING_TOKEN (0x0554),
          help    = STRING_TOKEN (0x0555),
          flags   = RESET_REQUIRED,
          minimum = 0,
          maximum = 7999,
          step    = 1,
          default = 0,
        endnumeric;

        oneof varid  = CPU_SETUP.TdcEnable[0],
          prompt   = STRING_TOKEN (0x0592),
          help     = STRING_TOKEN (0x0593),
          option text = STRING_TOKEN(0x0004),  value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        suppressif ideqval CPU_SETUP.TdcEnable[0] == 0;
          numeric varid   = CPU_SETUP.TdcCurrentLimit[0],
            prompt   = STRING_TOKEN (0x0594),
            help     = STRING_TOKEN (0x0595),
            flags    = 0 | RESET_REQUIRED,
            minimum  = 0,
            maximum  = 32767,
            step     = 125,        
                                   
            default = 0,
          endnumeric;

          oneof varid  = CPU_SETUP.TdcTimeWindow[0],
            prompt   = STRING_TOKEN (0x0596),
            help     = STRING_TOKEN (0x0597),
            option text = STRING_TOKEN(0x05A7),  value = 1000, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(0x05A8),  value = 2000, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x05A9),  value = 3000, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x05AA),  value = 4000, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x05AB),  value = 5000, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x05AC),  value = 6000, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x05AD),  value = 7000, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x05AE),  value = 8000, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x05AF),  value = 10000, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x05B0),  value = 12000, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x05B1),  value = 14000, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x05B2),  value = 16000, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x05B3),  value = 20000, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x05B4),  value = 24000, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x05B5),  value = 28000, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x05B6),  value = 32000, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x05B7),  value = 40000, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x05B8),  value = 48000, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x05B9),  value = 56000, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x05BA),  value = 64000, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x05BB),  value = 80000, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x05BC),  value = 96000, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x05BD),  value = 112000, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x05BE),  value = 128000, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x05BF),  value = 160000, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x05C0),  value = 192000, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x05C1),  value = 224000, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x05C2),  value = 256000, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x05C3),  value = 320000, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x05C4),  value = 384000, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x05C5),  value = 448000, flags = RESET_REQUIRED;
          endoneof;

          oneof varid  = CPU_SETUP.TdcLock[0],
              prompt   = STRING_TOKEN (0x05C6),
              help     = STRING_TOKEN (0x05C7),
              option text = STRING_TOKEN(0x0004),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
              option text = STRING_TOKEN(0x0003),  value = 1, flags = RESET_REQUIRED;
          endoneof;
        endif; 

        oneof varid  = CPU_SETUP.Irms[0],
            prompt   = STRING_TOKEN (0x05C8),
            help     = STRING_TOKEN (0x05C9),
            option text = STRING_TOKEN(0x0004),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(0x0003),  value = 1, flags = RESET_REQUIRED;
        endoneof;
      endif;

endform;

  form formid = 5052,
  title = STRING_TOKEN(0x02EA);

      subtitle text = STRING_TOKEN(0x02EB);
      subtitle text = STRING_TOKEN(0x0002);

        
        
        
        oneof varid = CPU_SETUP.VrConfigEnable[1],
          prompt  = STRING_TOKEN (0x0538),
          help    = STRING_TOKEN (0x0539),
          option text = STRING_TOKEN (0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

      suppressif ideqval CPU_SETUP.VrConfigEnable[1] == 0;

        text
          help  = STRING_TOKEN(0x0503),
          text  = STRING_TOKEN(0x0504),
          text  = STRING_TOKEN(0x0506),
          flags = 0,
          key   = 0;

        text
          help  = STRING_TOKEN(0x0508),
          text  = STRING_TOKEN(0x0509),
          text  = STRING_TOKEN(0x050B),
          flags = 0,
          key   = 0;

        text
          help  = STRING_TOKEN(0x050D),
          text  = STRING_TOKEN(0x050E),
          text  = STRING_TOKEN(0x0510),
          flags = 0,
          key   = 0;

        text
          help  = STRING_TOKEN(0x0512),
          text  = STRING_TOKEN(0x0513),
          text  = STRING_TOKEN(0x0515),
          flags = 0,
          key   = 0;

        text
          help  = STRING_TOKEN(0x0517),
          text  = STRING_TOKEN(0x0518),
          text  = STRING_TOKEN(0x051A),
          flags = 0,
          key   = 0;

        text
          help  = STRING_TOKEN(0x051C),
          text  = STRING_TOKEN(0x051D),
          text  = STRING_TOKEN(0x051F),
          flags = 0,
          key   = 0;

        text
          help  = STRING_TOKEN(0x0521),
          text  = STRING_TOKEN(0x0522),
          text  = STRING_TOKEN(0x0524),
          flags = 0,
          key   = 0;

        text
          help  = STRING_TOKEN(0x0526),
          text  = STRING_TOKEN(0x0527),
          text  = STRING_TOKEN(0x0529),
          flags = 0,
          key   = 0;

        text
          help  = STRING_TOKEN(0x052B),
          text  = STRING_TOKEN(0x052C),
          text  = STRING_TOKEN(0x052E),
          flags = 0,
          key   = 0;

        text
          help  = STRING_TOKEN(0x0530),
          text  = STRING_TOKEN(0x0531),
          text  = STRING_TOKEN(0x0533),
          flags = 0,
          key   = 0;

        numeric varid   = CPU_SETUP.AcLoadline[1],
            prompt   = STRING_TOKEN (0x053A),
            help     = STRING_TOKEN (0x053B),
            flags    = 0 | RESET_REQUIRED,
            minimum  = 0,
            maximum  = 62500,
            step     = 0,        
                                 
            default  = 0, defaultstore = MyStandardDefault,
        endnumeric;

        numeric varid   = CPU_SETUP.DcLoadline[1],
            prompt   = STRING_TOKEN (0x053C),
            help     = STRING_TOKEN (0x053D),
            flags    = 0 | RESET_REQUIRED,
            minimum  = 0,
            maximum  = 62500,
            step     = 0,        
                                 
            default  = 0, defaultstore = MyStandardDefault,
        endnumeric;

        numeric varid = CPU_SETUP.Psi1Threshold[1],
          prompt  = STRING_TOKEN (0x054A),
          help    = STRING_TOKEN (0x054B),
          flags   = RESET_REQUIRED,
          minimum = 0,
          maximum = 512,
          step    = 1,
          default = 80,
        endnumeric;

        numeric varid = CPU_SETUP.Psi2Threshold[1],
          prompt  = STRING_TOKEN (0x054C),
          help    = STRING_TOKEN (0x054D),
          flags   = RESET_REQUIRED,
          minimum = 0,
          maximum = 512,
          step    = 1,
          default = 20,
        endnumeric;

        numeric varid = CPU_SETUP.Psi3Threshold[1],
          prompt  = STRING_TOKEN (0x054E),
          help    = STRING_TOKEN (0x054F),
          flags   = RESET_REQUIRED,
          minimum = 0,
          maximum = 512,
          step    = 1,
          default = 4,
        endnumeric;

        oneof varid = CPU_SETUP.Psi3Enable[1],
          prompt  = STRING_TOKEN (0x0550),
          help    = STRING_TOKEN (0x0551),
          option text = STRING_TOKEN (0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        oneof varid = CPU_SETUP.Psi4Enable[1],
          prompt  = STRING_TOKEN (0x0552),
          help    = STRING_TOKEN (0x0553),
          option text = STRING_TOKEN (0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        numeric varid   = CPU_SETUP.ImonSlope[1],
          prompt        = STRING_TOKEN (0x0556),
          help          = STRING_TOKEN (0x0557),
          flags         = RESET_REQUIRED,
          minimum       = 0,
          maximum       = 200,
          step          = 1,
          default       = 0,
        endnumeric;

        numeric varid   = CPU_SETUP.ImonOffset[1],
          prompt        = STRING_TOKEN (0x0558),
          help          = STRING_TOKEN (0x0559),
          flags         = RESET_REQUIRED,
          minimum       = 0,
          maximum       = 63999,
          step          = 1,
          default       = 0,
        endnumeric;

        oneof varid   = CPU_SETUP.ImonOffsetPrefix[1],
          prompt      = STRING_TOKEN (0x055A),
          help        = STRING_TOKEN (0x055B),
          option text = STRING_TOKEN (0x02F1),  value = 0, flags =  DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN (0x02F2),  value = 1, flags = RESET_REQUIRED;
        endoneof;

        grayoutif ideqval CPU_SETUP.OverclockingSupport == 1;
          numeric varid = CPU_SETUP.IccMax[1],
            prompt  = STRING_TOKEN (0x053E),
            help    = STRING_TOKEN (0x053F),
            flags   = RESET_REQUIRED,
            minimum = 0,
            maximum = 2048,
            step    = 1,
            default = 0,
          endnumeric;
        endif;




        suppressif ideqval CPU_SETUP_VOLATILE_DATA.FastVmodeSupported == 0;
          oneof varid  = CPU_SETUP.EnableFastVmode[1],
            questionid  = 4292,
            prompt   = STRING_TOKEN (0x0542),
            help     = STRING_TOKEN (0x0543),
            flags    = INTERACTIVE,
            option text = STRING_TOKEN (0x0004),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN (0x0003),  value = 1, flags = RESET_REQUIRED;
          endoneof;

          suppressif ideqval CPU_SETUP.EnableFastVmode[1] == 0;
            numeric varid = CPU_SETUP.IccLimit[1],
              prompt  = STRING_TOKEN (0x0546),
              help    = STRING_TOKEN (0x0547),
              flags   = RESET_REQUIRED | INTERACTIVE, key = 4295,
              minimum = 0,
              maximum = 2040,
              step    = 1,
              default = 0,
            endnumeric;
          endif;
        endif;




        numeric varid = CPU_SETUP.VrVoltageLimit[1],
          prompt  = STRING_TOKEN (0x0554),
          help    = STRING_TOKEN (0x0555),
          flags   = RESET_REQUIRED,
          minimum = 0,
          maximum = 7999,
          step    = 1,
          default = 0,
        endnumeric;

        oneof varid  = CPU_SETUP.TdcEnable[1],
          prompt   = STRING_TOKEN (0x0592),
          help     = STRING_TOKEN (0x0593),
          option text = STRING_TOKEN (0x0004),  value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        suppressif ideqval CPU_SETUP.TdcEnable[1] == 0;
          numeric varid   = CPU_SETUP.TdcCurrentLimit[1],
            prompt   = STRING_TOKEN (0x0594),
            help     = STRING_TOKEN (0x0595),
            flags    = 0 | RESET_REQUIRED,
            minimum  = 0,
            maximum  = 32767,
            step     = 125,        
                                 
            default = 0,
          endnumeric;

          oneof varid  = CPU_SETUP.TdcTimeWindow[1],
              prompt   = STRING_TOKEN (0x0596),
              help     = STRING_TOKEN (0x0597),
            option text = STRING_TOKEN(0x05A7),  value = 1000, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(0x05A8),  value = 2000, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x05A9),  value = 3000, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x05AA),  value = 4000, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x05AB),  value = 5000, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x05AC),  value = 6000, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x05AD),  value = 7000, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x05AE),  value = 8000, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x05AF),  value = 10000, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x05B0),  value = 12000, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x05B1),  value = 14000, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x05B2),  value = 16000, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x05B3),  value = 20000, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x05B4),  value = 24000, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x05B5),  value = 28000, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x05B6),  value = 32000, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x05B7),  value = 40000, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x05B8),  value = 48000, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x05B9),  value = 56000, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x05BA),  value = 64000, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x05BB),  value = 80000, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x05BC),  value = 96000, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x05BD),  value = 112000, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x05BE),  value = 128000, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x05BF),  value = 160000, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x05C0),  value = 192000, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x05C1),  value = 224000, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x05C2),  value = 256000, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x05C3),  value = 320000, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x05C4),  value = 384000, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x05C5),  value = 448000, flags = RESET_REQUIRED;
          endoneof;

          oneof varid  = CPU_SETUP.TdcLock[1],
              prompt   = STRING_TOKEN (0x05C6),
              help     = STRING_TOKEN (0x05C7),
              option text = STRING_TOKEN(0x0004),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
              option text = STRING_TOKEN(0x0003),  value = 1, flags = RESET_REQUIRED;
          endoneof;
        endif; 

      endif;
endform;

  form formid = 5048,
  title = STRING_TOKEN(0x02EC);

      subtitle text = STRING_TOKEN(0x02ED);
      subtitle text = STRING_TOKEN(0x0002);

        
        
        
        oneof varid = CPU_SETUP.VrConfigEnable[2],
          prompt  = STRING_TOKEN (0x0538),
          help    = STRING_TOKEN (0x0539),
          option text = STRING_TOKEN (0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

      suppressif ideqval CPU_SETUP.VrConfigEnable[2] == 0;

        text
          help  = STRING_TOKEN(0x0503),
          text  = STRING_TOKEN(0x0504),
          text  = STRING_TOKEN(0x0507),
          flags = 0,
          key   = 0;

        text
          help  = STRING_TOKEN(0x0508),
          text  = STRING_TOKEN(0x0509),
          text  = STRING_TOKEN(0x050C),
          flags = 0,
          key   = 0;

        text
          help  = STRING_TOKEN(0x050D),
          text  = STRING_TOKEN(0x050E),
          text  = STRING_TOKEN(0x0511),
          flags = 0,
          key   = 0;

        text
          help  = STRING_TOKEN(0x0512),
          text  = STRING_TOKEN(0x0513),
          text  = STRING_TOKEN(0x0516),
          flags = 0,
          key   = 0;

        text
          help  = STRING_TOKEN(0x0517),
          text  = STRING_TOKEN(0x0518),
          text  = STRING_TOKEN(0x051B),
          flags = 0,
          key   = 0;

        text
          help  = STRING_TOKEN(0x051C),
          text  = STRING_TOKEN(0x051D),
          text  = STRING_TOKEN(0x0520),
          flags = 0,
          key   = 0;

        text
          help  = STRING_TOKEN(0x0521),
          text  = STRING_TOKEN(0x0522),
          text  = STRING_TOKEN(0x0525),
          flags = 0,
          key   = 0;

        text
          help  = STRING_TOKEN(0x0526),
          text  = STRING_TOKEN(0x0527),
          text  = STRING_TOKEN(0x052A),
          flags = 0,
          key   = 0;

        text
          help  = STRING_TOKEN(0x0530),
          text  = STRING_TOKEN(0x0531),
          text  = STRING_TOKEN(0x0534),
          flags = 0,
          key   = 0;

        numeric varid   = CPU_SETUP.AcLoadline[2],
            prompt   = STRING_TOKEN (0x053A),
            help     = STRING_TOKEN (0x053B),
            flags    = 0 | RESET_REQUIRED,
            minimum  = 0,
            maximum  = 62500,
            step     = 0,        
                                 
            default  = 0, defaultstore = MyStandardDefault,
        endnumeric;

        numeric varid   = CPU_SETUP.DcLoadline[2],
            prompt   = STRING_TOKEN (0x053C),
            help     = STRING_TOKEN (0x053D),
            flags    = 0 | RESET_REQUIRED,
            minimum  = 0,
            maximum  = 62500,
            step     = 0,        
                                 
            default  = 0, defaultstore = MyStandardDefault,
        endnumeric;

        numeric varid = CPU_SETUP.Psi1Threshold[2],
          prompt  = STRING_TOKEN (0x054A),
          help    = STRING_TOKEN (0x054B),
          flags   = RESET_REQUIRED,
          minimum = 0,
          maximum = 512,
          step    = 1,
          default = 80,
        endnumeric;

        numeric varid = CPU_SETUP.Psi2Threshold[2],
          prompt  = STRING_TOKEN (0x054C),
          help    = STRING_TOKEN (0x054D),
          flags   = RESET_REQUIRED,
          minimum = 0,
          maximum = 512,
          step    = 1,
          default = 20,
        endnumeric;

        numeric varid = CPU_SETUP.Psi3Threshold[2],
          prompt  = STRING_TOKEN (0x054E),
          help    = STRING_TOKEN (0x054F),
          flags   = RESET_REQUIRED,
          minimum = 0,
          maximum = 512,
          step    = 1,
          default = 4,
        endnumeric;

        oneof varid = CPU_SETUP.Psi3Enable[2],
          prompt  = STRING_TOKEN (0x0550),
          help    = STRING_TOKEN (0x0551),
          option text = STRING_TOKEN (0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        oneof varid = CPU_SETUP.Psi4Enable[2],
          prompt  = STRING_TOKEN (0x0552),
          help    = STRING_TOKEN (0x0553),
          option text = STRING_TOKEN (0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        numeric varid   = CPU_SETUP.ImonSlope[2],
          prompt        = STRING_TOKEN (0x0556),
          help          = STRING_TOKEN (0x0557),
          flags         = RESET_REQUIRED,
          minimum       = 0,
          maximum       = 200,
          step          = 1,
          default       = 0,
        endnumeric;

        numeric varid   = CPU_SETUP.ImonOffset[2],
          prompt        = STRING_TOKEN (0x0558),
          help          = STRING_TOKEN (0x0559),
          flags         = RESET_REQUIRED,
          minimum       = 0,
          maximum       = 63999,
          step          = 1,
          default       = 0,
        endnumeric;

        oneof varid   = CPU_SETUP.ImonOffsetPrefix[2],
          prompt      = STRING_TOKEN (0x055A),
          help        = STRING_TOKEN (0x055B),
          option text = STRING_TOKEN (0x02F1),  value = 0, flags =  DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN (0x02F2),  value = 1, flags = RESET_REQUIRED;
        endoneof;

        numeric varid = CPU_SETUP.IccMax[2],
          prompt  = STRING_TOKEN (0x053E),
          help    = STRING_TOKEN (0x053F),
          flags   = RESET_REQUIRED,
          minimum = 0,
          maximum = 2048,
          step    = 1,
          default = 0,
        endnumeric;




        suppressif ideqval CPU_SETUP_VOLATILE_DATA.FastVmodeSupported == 0;
          oneof varid  = CPU_SETUP.EnableFastVmode[2],
            questionid  = 4293,
            prompt   = STRING_TOKEN (0x0544),
            help     = STRING_TOKEN (0x0545),
            flags    = INTERACTIVE,
            option text = STRING_TOKEN (0x0004),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN (0x0003),  value = 1, flags = RESET_REQUIRED;
          endoneof;

          suppressif ideqval CPU_SETUP.EnableFastVmode[2] == 0;
            numeric varid = CPU_SETUP.IccLimit[2],
              prompt  = STRING_TOKEN (0x0546),
              help    = STRING_TOKEN (0x0547),
              flags   = RESET_REQUIRED | INTERACTIVE, key = 4296,
              minimum = 0,
              maximum = 2040,
              step    = 1,
              default = 0,
            endnumeric;
          endif;
        endif;




        numeric varid = CPU_SETUP.VrVoltageLimit[2],
          prompt  = STRING_TOKEN (0x0554),
          help    = STRING_TOKEN (0x0555),
          flags   = RESET_REQUIRED,
          minimum = 0,
          maximum = 7999,
          step    = 1,
          default = 0,
        endnumeric;

        oneof varid  = CPU_SETUP.TdcEnable[2],
          prompt   = STRING_TOKEN (0x0592),
          help     = STRING_TOKEN (0x0593),
          option text = STRING_TOKEN (0x0004),  value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        suppressif ideqval CPU_SETUP.TdcEnable[2] == 0;
          oneof varid  = CPU_SETUP.TdcTimeWindow[2],
              prompt   = STRING_TOKEN (0x0596),
              help     = STRING_TOKEN (0x0598),
              option text = STRING_TOKEN (0x0599),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
              option text = STRING_TOKEN (0x059A),  value = 2, flags = RESET_REQUIRED;
              option text = STRING_TOKEN (0x059B),  value = 3, flags = RESET_REQUIRED;
              option text = STRING_TOKEN (0x059C),  value = 4, flags = RESET_REQUIRED;
              option text = STRING_TOKEN (0x059D),  value = 5, flags = RESET_REQUIRED;
              option text = STRING_TOKEN (0x059E),  value = 6, flags = RESET_REQUIRED;
              option text = STRING_TOKEN (0x059F),  value = 7, flags = RESET_REQUIRED;
              option text = STRING_TOKEN (0x05A0),  value = 8, flags = RESET_REQUIRED;
              option text = STRING_TOKEN (0x05A1),  value = 10, flags = RESET_REQUIRED;
          endoneof;

          oneof varid  = CPU_SETUP.TdcLock[2],
              prompt   = STRING_TOKEN (0x05C6),
              help     = STRING_TOKEN (0x05C7),
              option text = STRING_TOKEN(0x0004),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
              option text = STRING_TOKEN(0x0003),  value = 1, flags = RESET_REQUIRED;
          endoneof;
        endif; 
      endif;
endform;

  form formid = 5251,
    title = STRING_TOKEN (0x02EE);

      subtitle text = STRING_TOKEN (0x02EF);
      subtitle text = STRING_TOKEN(0x0002);
      suppressif ideqval SETUP_CPU_FEATURES.FivrSupported == 0;
        text
          help   = STRING_TOKEN (0x02FF),
          text   = STRING_TOKEN (0x0300),
          text   = STRING_TOKEN (0x02F0),
          flags  = 0, key = 0;

        numeric varid   = CPU_SETUP.FivrRfiFrequency,
          prompt   = STRING_TOKEN (0x0301),
          help     = STRING_TOKEN (0x0302),
          flags    = 0 | RESET_REQUIRED,
          minimum  = 0,
          maximum  = 1918,
          default  = 0, defaultstore = MyStandardDefault,
        endnumeric;

        oneof varid  = CPU_SETUP.FivrSpectrumEnable,
          prompt   = STRING_TOKEN (0x02F3),
          help     = STRING_TOKEN (0x02F4),
          option text = STRING_TOKEN (0x0004),  value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        suppressif ideqval CPU_SETUP.FivrSpectrumEnable == 0;
          oneof varid = CPU_SETUP.FivrSpreadSpectrum,
            prompt   = STRING_TOKEN (0x02F5),
            help     = STRING_TOKEN (0x02F6),
            option text = STRING_TOKEN (0x02F7),  value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN (0x02F8),  value = 3, flags = RESET_REQUIRED;
            option text = STRING_TOKEN (0x02F9),  value = 8, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN (0x02FA),  value = 18, flags = RESET_REQUIRED;
            option text = STRING_TOKEN (0x02FB),  value = 28, flags = RESET_REQUIRED;
            option text = STRING_TOKEN (0x02FC),  value = 34, flags = RESET_REQUIRED;
            option text = STRING_TOKEN (0x02FD),  value = 39, flags = RESET_REQUIRED;
            option text = STRING_TOKEN (0x02FE),  value = 44, flags = RESET_REQUIRED;
         endoneof;
       endif;
     endif;
  endform;

  form formid = 4369,
  title = STRING_TOKEN (0x04A0);

      oneof varid  = CPU_SETUP.PowerLimit3Override,
         prompt   = STRING_TOKEN (0x04A2),
         help     = STRING_TOKEN (0x04A3),
         default  = 0, defaultstore = MyStandardDefault,
         option text = STRING_TOKEN (0x0004),  value = 0, flags = RESET_REQUIRED;
         option text = STRING_TOKEN (0x0003),  value = 1, flags = RESET_REQUIRED;
      endoneof;

      suppressif ideqval CPU_SETUP.PowerLimit3Override == 0;
          numeric varid   = CPU_SETUP.PowerLimit3,
              prompt   = STRING_TOKEN (0x04A4),
              help     = STRING_TOKEN (0x04A5),
              flags    = 0 | RESET_REQUIRED,
              minimum  = 0,
              maximum  = 4095875,
              step     = 125,
              default  = 0, defaultstore = MyStandardDefault,
          endnumeric;
       endif;

      suppressif ideqval CPU_SETUP.PowerLimit3Override == 0;
          oneof varid   = CPU_SETUP.PowerLimit3Time,
              prompt   = STRING_TOKEN (0x04A6),
              help     = STRING_TOKEN (0x04A7),
              flags    = 0 | RESET_REQUIRED,
              default  = 0, defaultstore = MyStandardDefault,
              option text = STRING_TOKEN (0x03F4),  value = 0, flags = RESET_REQUIRED;
              option text = STRING_TOKEN (0x03F7),  value = 3, flags = RESET_REQUIRED;
              option text = STRING_TOKEN (0x03F8),  value = 4, flags = RESET_REQUIRED;
              option text = STRING_TOKEN (0x03F9),  value = 5, flags = RESET_REQUIRED;
              option text = STRING_TOKEN (0x03FA),  value = 6, flags = RESET_REQUIRED;
              option text = STRING_TOKEN (0x03FB),  value = 7, flags = RESET_REQUIRED;
              option text = STRING_TOKEN (0x03FC),  value = 8, flags = RESET_REQUIRED;
              option text = STRING_TOKEN (0x03FE),  value = 10, flags = RESET_REQUIRED;
              option text = STRING_TOKEN (0x0400),  value = 12, flags = RESET_REQUIRED;
              option text = STRING_TOKEN (0x0402),  value = 14, flags = RESET_REQUIRED;
              option text = STRING_TOKEN (0x0404),  value = 16, flags = RESET_REQUIRED;
              option text = STRING_TOKEN (0x09A5),  value = 20, flags = RESET_REQUIRED;
              option text = STRING_TOKEN (0x09A6),  value = 24, flags = RESET_REQUIRED;
              option text = STRING_TOKEN (0x09A7),  value = 28, flags = RESET_REQUIRED;
              option text = STRING_TOKEN (0x09A8),  value = 32, flags = RESET_REQUIRED;
              option text = STRING_TOKEN (0x09A9),  value = 40, flags = RESET_REQUIRED;
              option text = STRING_TOKEN (0x09AA),  value = 48, flags = RESET_REQUIRED;
              option text = STRING_TOKEN (0x09AB),  value = 56, flags = RESET_REQUIRED;
              option text = STRING_TOKEN (0x09AC),  value = 64, flags = RESET_REQUIRED;
          endoneof;
      endif;

      suppressif ideqval CPU_SETUP.PowerLimit3Override == 0;
          numeric varid   = CPU_SETUP.PowerLimit3DutyCycle,
              prompt   = STRING_TOKEN (0x04AE),
              help     = STRING_TOKEN (0x04AF),
              flags    = 0 | RESET_REQUIRED,
              minimum  = 0,
              maximum  = 100,
              default  = 0, defaultstore = MyStandardDefault,
          endnumeric;
      endif;

      
      
      
 
      suppressif ideqval CPU_SETUP.PowerLimit3Override == 0 OR
                 ideqval SETUP_DATA.IsAdlSNative == 0x1;
          oneof varid  = CPU_SETUP.StepDownMode,
             prompt   = STRING_TOKEN (0x04AA),
             help     = STRING_TOKEN (0x04AB),
             default  = 0, defaultstore = MyStandardDefault,
             option text = STRING_TOKEN (0x04A8),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
             option text = STRING_TOKEN (0x04A9),  value = 1, flags = RESET_REQUIRED;
          endoneof;
      endif;
 #line 4362 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\CpuSetup.hfr"
      
      
      

      suppressif ideqval CPU_SETUP.PowerLimit3Override == 0;
          oneof varid  = CPU_SETUP.PowerLimit3Lock,
             prompt   = STRING_TOKEN (0x04AC),
             help     = STRING_TOKEN (0x04AD),
             default  = 0, defaultstore = MyStandardDefault,
             option text = STRING_TOKEN (0x0004),  value = 0, flags = RESET_REQUIRED;
             option text = STRING_TOKEN (0x0003),  value = 1, flags = RESET_REQUIRED;
          endoneof;
      endif;

  endform; 

  form formid = 4329,
  title = STRING_TOKEN (0x043E);

      subtitle text = STRING_TOKEN (0x043F);
      subtitle text = STRING_TOKEN(0x0002);

      oneof varid   = CPU_SETUP.ApplyConfigTdp,
          prompt   = STRING_TOKEN (0x0424),
          help     = STRING_TOKEN (0x0425),
          option text = STRING_TOKEN (0x0426),  value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x0427),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      
      
      
      oneof varid   = CPU_SETUP.ConfigTdpLevel,
          prompt   = STRING_TOKEN (0x0428),
          help     = STRING_TOKEN (0x0429),
          option text = STRING_TOKEN (0x042A),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          suppressif ideqval SETUP_CPU_FEATURES.CtdpLevel1Supported == 0;
            option text = STRING_TOKEN (0x042B),  value = 1, flags = RESET_REQUIRED;
          endif
          suppressif ideqval SETUP_CPU_FEATURES.CtdpLevel2Supported == 0;
            option text = STRING_TOKEN (0x042C),  value = 2, flags = RESET_REQUIRED;
          endif
          option text = STRING_TOKEN (0x042D),  value = 0xFF, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = CPU_SETUP.ConfigTdpLock,
          prompt   = STRING_TOKEN (0x042E),
          help     = STRING_TOKEN (0x042F),
          option text = STRING_TOKEN (0x0003),  value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      suppressif ideqval CPU_SETUP.ConfigTdpLock == 1 OR ideqval SETUP_DATA.EnableDptf == 1;
      oneof varid   = CPU_SETUP.ConfigTdpBios,
          prompt   = STRING_TOKEN (0x0430),
          help     = STRING_TOKEN (0x0431),
          option text = STRING_TOKEN (0x0003),  value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;
      endif;

      text
        help   = STRING_TOKEN (0x0432),
        text   = STRING_TOKEN (0x0433),
        text   = STRING_TOKEN (0x0434),
        flags  = 0, key = 0;

      text
        help   = STRING_TOKEN (0x0441),
        text   = STRING_TOKEN (0x0442),
        text   = STRING_TOKEN (0x0443),
        flags  = 0, key = 0;

      text
        help   = STRING_TOKEN (0x0444),
        text   = STRING_TOKEN (0x0445),
        text   = STRING_TOKEN (0x0446),
        flags  = 0, key = 0;

      text
        help   = STRING_TOKEN (0x0447),
        text   = STRING_TOKEN (0x0448),
        text   = STRING_TOKEN (0x0449),
        flags  = 0, key = 0;

      subtitle text = STRING_TOKEN(0x0002);

    subtitle text = STRING_TOKEN (0x044A);

    text
      help   = STRING_TOKEN (0x0435),
      text   = STRING_TOKEN (0x0436),
      text   = STRING_TOKEN (0x0437),
      flags  = 0, key = 0;
    grayoutif ideqval CPU_SETUP.ConfigTdpLock == 1;

    numeric varid   = CPU_SETUP.Custom1PowerLimit1Power,
      prompt   = STRING_TOKEN (0x0490),
        help     = STRING_TOKEN (0x04FA),
        flags    = 0 | RESET_REQUIRED,
        minimum  = 0,
        maximum  = 4095875,
        step     = 125,        
                             
        default = 0,
    endnumeric;

    numeric varid   = CPU_SETUP.Custom1PowerLimit2Power,
      prompt   = STRING_TOKEN (0x049C),
        help     = STRING_TOKEN (0x04FD),
        flags    = 0 | RESET_REQUIRED,
        minimum  = 0,
        maximum  = 4095875,
        step     = 125,        
                                 
        default = 0,
    endnumeric;

    oneof varid   = CPU_SETUP.Custom1PowerLimit1Time,
      prompt   = STRING_TOKEN (0x0495),
        help     = STRING_TOKEN (0x0498),
        flags    = 0 | RESET_REQUIRED,
        default = 0,
        option text = STRING_TOKEN (0x03F4),  value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x03F5),  value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x03F6),  value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x03F7),  value = 3, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x03F8),  value = 4, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x03F9),  value = 5, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x03FA),  value = 6, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x03FB),  value = 7, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x03FC),  value = 8, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x03FE),  value = 10, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x0400),  value = 12, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x0402),  value = 14, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x0404),  value = 16, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x09A5),  value = 20, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x09A6),  value = 24, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x09A7),  value = 28, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x09A8),  value = 32, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x09A9),  value = 40, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x09AA),  value = 48, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x09AB),  value = 56, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x09AC),  value = 64, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x09AD),  value = 80, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x09AE),  value = 96, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x09AF),  value = 112, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x09B0),  value = 128, flags = RESET_REQUIRED;
    endoneof;

    numeric varid   = CPU_SETUP.Custom1TurboActivationRatio,
      prompt   = STRING_TOKEN (0x044D),
        help     = STRING_TOKEN (0x0450),
        flags    = 0 | RESET_REQUIRED,
        minimum  = 0,
        maximum  = 255,    
        step     = 1,        
                                 
        default = 0,
    endnumeric;
    endif;

suppressif ideqval SETUP_CPU_FEATURES.CtdpLevel1Supported == 0;
    subtitle text = STRING_TOKEN(0x0002);
    subtitle text = STRING_TOKEN (0x044B);
    text
      help   = STRING_TOKEN (0x0438),
      text   = STRING_TOKEN (0x0439),
      text   = STRING_TOKEN (0x043A),
      flags  = 0, key = 0;

    grayoutif ideqval CPU_SETUP.ConfigTdpLock == 1;

    numeric varid   = CPU_SETUP.Custom2PowerLimit1Power,
      prompt   = STRING_TOKEN (0x0491),
        help     = STRING_TOKEN (0x04FA),
        flags    = 0 | RESET_REQUIRED,
        minimum  = 0,
        maximum  = 4095875,
        step     = 125,        
                             
        default = 0,
    endnumeric;

    numeric varid   = CPU_SETUP.Custom2PowerLimit2Power,
      prompt   = STRING_TOKEN (0x049D),
        help     = STRING_TOKEN (0x04FD),
        flags    = 0 | RESET_REQUIRED,
        minimum  = 0,
        maximum  = 4095875,
        step     = 125,        
                             
        default = 0,
    endnumeric;

    oneof varid   = CPU_SETUP.Custom2PowerLimit1Time,
      prompt   = STRING_TOKEN (0x0496),
        help     = STRING_TOKEN (0x0498),
        flags    = 0 | RESET_REQUIRED,
        default = 0,
        option text = STRING_TOKEN (0x03F4),  value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x03F5),  value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x03F6),  value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x03F7),  value = 3, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x03F8),  value = 4, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x03F9),  value = 5, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x03FA),  value = 6, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x03FB),  value = 7, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x03FC),  value = 8, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x03FE),  value = 10, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x0400),  value = 12, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x0402),  value = 14, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x0404),  value = 16, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x09A5),  value = 20, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x09A6),  value = 24, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x09A7),  value = 28, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x09A8),  value = 32, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x09A9),  value = 40, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x09AA),  value = 48, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x09AB),  value = 56, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x09AC),  value = 64, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x09AD),  value = 80, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x09AE),  value = 96, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x09AF),  value = 112, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x09B0),  value = 128, flags = RESET_REQUIRED;
    endoneof;

    numeric varid   = CPU_SETUP.Custom2TurboActivationRatio,
      prompt   = STRING_TOKEN (0x044E),
        help     = STRING_TOKEN (0x0450),
        flags    = 0 | RESET_REQUIRED,
        minimum  = 0,
        maximum  = 255,    
        step     = 1,        
                                 
        default = 0,
    endnumeric;
    endif;
endif;

suppressif ideqval SETUP_CPU_FEATURES.CtdpLevel2Supported == 0;
    subtitle text = STRING_TOKEN(0x0002);
    subtitle text = STRING_TOKEN (0x044C);

    grayoutif ideqval CPU_SETUP.ConfigTdpLock == 1;

    text
      help   = STRING_TOKEN (0x043B),
      text   = STRING_TOKEN (0x043C),
      text   = STRING_TOKEN (0x043D),
      flags  = 0, key = 0;

    numeric varid   = CPU_SETUP.Custom3PowerLimit1Power,
      prompt   = STRING_TOKEN (0x0492),
        help     = STRING_TOKEN (0x04FA),
        flags    = 0 | RESET_REQUIRED,
        minimum  = 0,
        maximum  = 4095875,
        step     = 125,        
                             
        default = 0,
    endnumeric;

    numeric varid   = CPU_SETUP.Custom3PowerLimit2Power,
      prompt   = STRING_TOKEN (0x049E),
        help     = STRING_TOKEN (0x04FD),
        flags    = 0 | RESET_REQUIRED,
        minimum  = 0,
        maximum  = 4095875,
        step     = 125,        
                                 
        default = 0,
    endnumeric;

    oneof varid   = CPU_SETUP.Custom3PowerLimit1Time,
      prompt   = STRING_TOKEN (0x0497),
        help     = STRING_TOKEN (0x0498),
        flags    = 0 | RESET_REQUIRED,
        default = 0,
        option text = STRING_TOKEN (0x03F4),  value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x03F5),  value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x03F6),  value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x03F7),  value = 3, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x03F8),  value = 4, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x03F9),  value = 5, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x03FA),  value = 6, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x03FB),  value = 7, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x03FC),  value = 8, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x03FE),  value = 10, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x0400),  value = 12, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x0402),  value = 14, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x0404),  value = 16, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x09A5),  value = 20, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x09A6),  value = 24, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x09A7),  value = 28, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x09A8),  value = 32, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x09A9),  value = 40, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x09AA),  value = 48, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x09AB),  value = 56, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x09AC),  value = 64, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x09AD),  value = 80, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x09AE),  value = 96, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x09AF),  value = 112, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x09B0),  value = 128, flags = RESET_REQUIRED;
    endoneof;

    numeric varid   = CPU_SETUP.Custom3TurboActivationRatio,
      prompt   = STRING_TOKEN (0x044F),
        help     = STRING_TOKEN (0x0450),
        flags    = 0 | RESET_REQUIRED,
        minimum  = 0,
        maximum  = 255,    
        step     = 1,        
                                 
        default = 0,
    endnumeric;
    endif;
endif;
  endform; 

  form formid = 4114,
  title = STRING_TOKEN (0x02DB);

  oneof varid     = CPU_SETUP.PmgCstCfgCtrlLock,
    prompt      = STRING_TOKEN (0x0674),
    help        = STRING_TOKEN (0x0675),
    option text = STRING_TOKEN (0x0004), value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN (0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
  endoneof;

  oneof varid     = CPU_SETUP.OverclockingLock,
      prompt      = STRING_TOKEN (0x0670),
      help        = STRING_TOKEN (0x0671),
      option text = STRING_TOKEN (0x0004),  value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN (0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
  endoneof;

  endform; 
#line 471 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\Advanced.vfr"
  #line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\ConnectivitySetup.hfr"

































  
  form formid = 5074,
  title       = STRING_TOKEN(0x00FF);

    text
      help   = STRING_TOKEN(0x0102),
      text   = STRING_TOKEN(0x0101),
      text   = STRING_TOKEN(0x0103),
      flags  = 0, key = 0;

    text
      help   = STRING_TOKEN(0x0105),
      text   = STRING_TOKEN(0x0105),
      flags  = 0,
      key    = 0;

    oneof varid   = PCH_SETUP.CnviMode,
      prompt      = STRING_TOKEN(0x0106),
      help        = STRING_TOKEN(0x0107),
      option text = STRING_TOKEN(0x0109), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0108), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    suppressif ideqval PCH_SETUP.CnviMode == 0;
      grayoutif match (stringref (STRING_TOKEN (0x0104)), stringref (STRING_TOKEN (0x0103)));

        oneof varid   = PCH_SETUP.CnviWifiCore,
          prompt      = STRING_TOKEN(0x010A),
          help        = STRING_TOKEN(0x010B),
          option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        endoneof;

        oneof varid   = PCH_SETUP.CnviBtCore,
          prompt      = STRING_TOKEN(0x010C),
          help        = STRING_TOKEN(0x010D),
          option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        endoneof;

        grayoutif  ideqval PCH_SETUP.CnviBtCore == 0;
          oneof varid   = PCH_SETUP.CnviBtAudioOffload,
            questionid  = 5230,
            prompt      = STRING_TOKEN(0x010E),
            help        = STRING_TOKEN(0x010F),
            option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | RESET_REQUIRED | INTERACTIVE;
            option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED | INTERACTIVE;
          endoneof;

          numeric varid = SETUP_DATA.BtRfKillTime,
            prompt   = STRING_TOKEN(0x0112),
            help     = STRING_TOKEN(0x0113),
            minimum = 0,
            maximum = 1024,
            step    = 1,
            default = 0,
          endnumeric;
        endif;
      endif;
    endif;

    oneof varid   = PCH_SETUP.CnviDdrRfim,
      prompt      = STRING_TOKEN(0x0110),
      help        = STRING_TOKEN(0x0111),
      option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | RESET_REQUIRED | RESET_REQUIRED;
      option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
    endoneof;

    
    
    
    oneof varid   = SETUP_DATA.SkipVidDidCheck,
      prompt      = STRING_TOKEN(0x0114),
      help        = STRING_TOKEN(0x0115),
      option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003),  value = 1, flags = RESET_REQUIRED;
    endoneof;
    
    
    

    subtitle text = STRING_TOKEN(0x0002);

    grayoutif ideqval SETUP_DATA.WwanEnable == 0;
      oneof varid   = SETUP_DATA.CoExistenceManager,
        prompt      = STRING_TOKEN(0x028A),
        help        = STRING_TOKEN(0x028B),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = RESET_REQUIRED;
      endoneof;
    endif; 

    subtitle text = STRING_TOKEN(0x0002);



#line 131 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\ConnectivitySetup.hfr"
      oneof varid   = SETUP_DATA.PrebootBleEnable,
        prompt      = STRING_TOKEN(0x02D1),
        help        = STRING_TOKEN(0x02D2),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = RESET_REQUIRED;
      endoneof;


#line 140 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\ConnectivitySetup.hfr"

    subtitle text = STRING_TOKEN(0x0002);

    
    oneof varid  = SETUP_DATA.DiscreteBtModule,
      prompt   = STRING_TOKEN(0x0116),
      help     = STRING_TOKEN(0x0117),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0118), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        suppressif ideqval PCH_SETUP.PchSerialIoUart[0] == 0;
          option text = STRING_TOKEN(0x0119), value = 2, flags = RESET_REQUIRED;
        endif;
    endoneof;

    suppressif NOT ideqval SETUP_DATA.DiscreteBtModule == 2;
      oneof varid  = SETUP_DATA.DiscreteBtModuleIrqMode,
        prompt   = STRING_TOKEN(0x011A),
        help     = STRING_TOKEN(0x011B),
        option text = STRING_TOKEN(0x1186), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1185), value = 1, flags = RESET_REQUIRED;
      endoneof;
    endif;

    oneof varid  = SETUP_DATA.BtTileMode,
      prompt   = STRING_TOKEN(0x0291),
      help     = STRING_TOKEN(0x0292),
      option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003),  value = 1, flags = RESET_REQUIRED;
    endoneof;

    suppressif ideqval SETUP_DATA.BtTileMode == 0;
      numeric varid = SETUP_DATA.TileS0,
        prompt   = STRING_TOKEN(0x0293),
        help     = STRING_TOKEN(0x0294),
        minimum = 0,
        maximum = 7,
        step    = 1,
        default = 0,
      endnumeric;

      numeric varid = SETUP_DATA.TileS0ix,
        prompt   = STRING_TOKEN(0x0295),
        help     = STRING_TOKEN(0x0296),
        minimum = 0,
        maximum = 7,
        step    = 1,
        default = 0,
      endnumeric;
      numeric varid = SETUP_DATA.TileS4,
        prompt   = STRING_TOKEN(0x0297),
        help     = STRING_TOKEN(0x0298),
        minimum = 0,
        maximum = 7,
        step    = 1,
        default = 0,
      endnumeric;

      numeric varid = SETUP_DATA.TileS5,
        prompt   = STRING_TOKEN(0x0299),
        help     = STRING_TOKEN(0x029A),
        minimum = 0,
        maximum = 7,
        step    = 1,
        default = 0,
      endnumeric;





























#line 235 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\ConnectivitySetup.hfr"
      numeric varid = SETUP_DATA.SpecialLedConfig,
        prompt   = STRING_TOKEN(0x029B),
        help     = STRING_TOKEN(0x029C),
        minimum = 0,
        maximum = 3,
        step    = 1,
        default = 0,
      endnumeric;

      numeric varid = SETUP_DATA.LedDuration,
        prompt   = STRING_TOKEN(0x029D),
        help     = STRING_TOKEN(0x029E),
        minimum = 1,
        maximum = 1000,
        step    = 1,
        default = 100,
      endnumeric;

      oneof varid  = SETUP_DATA.AirplaneMode,
        prompt   = STRING_TOKEN(0x029F),
        help     = STRING_TOKEN(0x02A0),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = RESET_REQUIRED;
      endoneof;
#line 260 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\ConnectivitySetup.hfr"
    endif;

    subtitle text = STRING_TOKEN(0x0002);

    oneof varid  = SETUP_DATA.WifiEnable,
      prompt   = STRING_TOKEN(0x011C),
      help     = STRING_TOKEN(0x011D),
      option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
    endoneof;

    suppressif ideqval SETUP_DATA.WifiEnable == 0;
      oneof varid  = SETUP_DATA.AntennaDiversity,
        prompt   = STRING_TOKEN(0x02CA),
        help     = STRING_TOKEN(0x02CB),
        option text = STRING_TOKEN(0x02CC), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x02CD), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x02CE), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x02CF), value = 3, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x02D0), value = 4, flags = RESET_REQUIRED;
      endoneof;

      text
      help   = STRING_TOKEN(0x1487),
      text   = STRING_TOKEN(0x1487),
      flags  = 0,
      key    = 0;

      numeric varid = SETUP_DATA.WifiDomainType1,
        prompt   = STRING_TOKEN(0x148B),
        help     = STRING_TOKEN(0x148C),
        minimum = 0,
        maximum = 0x14,
        step    = 1,
        default = 0x7,
      endnumeric;

      numeric varid = SETUP_DATA.WifiPowerLimit1,
        prompt   = STRING_TOKEN(0x011E),
        help     = STRING_TOKEN(0x011F),
        flags    = RESET_REQUIRED | INTERACTIVE,
        key      = 5432,
        minimum  = 1,
        maximum  = 0xFFFF,
        step     = 1,
        default  = 0xFFFF,
      endnumeric;

      numeric varid = SETUP_DATA.WifiTimeWindow1,
        prompt   = STRING_TOKEN(0x0120),
        help     = STRING_TOKEN(0x0121),
        minimum = 1,
        maximum = 100000,
        step    = 1,
        default = 30000,
      endnumeric;

      text
      help   = STRING_TOKEN(0x0122),
      text   = STRING_TOKEN(0x0122),
      flags  = 0,
      key    = 0;

      numeric varid = SETUP_DATA.TRxDelay0,
        prompt   = STRING_TOKEN(0x0123),
        help     = STRING_TOKEN(0x0124),
        minimum = 1,
        maximum = 100,
        step    = 1,
        default = 50,
      endnumeric;

      numeric varid = SETUP_DATA.TRxCableLength0,
        prompt  = STRING_TOKEN(0x0125),
        help    = STRING_TOKEN(0x0126),
        minimum = 1,
        maximum = 100,
        step    = 1,
        default = 50,
      endnumeric;

      numeric varid = SETUP_DATA.TRxDelay1,
        prompt   = STRING_TOKEN(0x0127),
        help     = STRING_TOKEN(0x0128),
        minimum = 1,
        maximum = 100,
        step    = 1,
        default = 50,
      endnumeric;

      numeric varid = SETUP_DATA.TRxCableLength1,
        prompt  = STRING_TOKEN(0x0129),
        help    = STRING_TOKEN(0x012A),
        minimum = 1,
        maximum = 100,
        step    = 1,
        default = 50,
      endnumeric;

      text
      help   = STRING_TOKEN(0x012B),
      text   = STRING_TOKEN(0x012B),
      flags  = 0,
      key    = 0;

      numeric varid = SETUP_DATA.WrddDomainType1,
        prompt   = STRING_TOKEN(0x012C),
        help     = STRING_TOKEN(0x012D),
        minimum = 0,
        maximum = 100,
        step    = 1,
        default = 0x07,
      endnumeric;

      numeric varid = SETUP_DATA.WrddCountryIndentifier1,
        prompt   = STRING_TOKEN(0x012E),
        help     = STRING_TOKEN(0x012F),
        minimum = 1,
        maximum = 0xFFFF,
        step    = 1,
        default = 0x4150,  
      endnumeric;

      text
      help   = STRING_TOKEN(0x026B),
      text   = STRING_TOKEN(0x026B),
      flags  = 0,
      key    = 0;

      oneof varid  = SETUP_DATA.AxSettingUkraine,
        prompt   = STRING_TOKEN(0x026C),
        help     = STRING_TOKEN(0x026D),
        option text = STRING_TOKEN(0x0004),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = RESET_REQUIRED;
      endoneof;

      grayoutif ideqval SETUP_DATA.AxSettingUkraine == 0;
        oneof varid  = SETUP_DATA.AxModeUkraine,
          prompt   = STRING_TOKEN(0x026E),
          help     = STRING_TOKEN(0x026F),
          option text = STRING_TOKEN(0x0004),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003),  value = 1, flags = RESET_REQUIRED;
        endoneof;
      endif;

      oneof varid  = SETUP_DATA.AxSettingRussia,
        prompt   = STRING_TOKEN(0x0270),
        help     = STRING_TOKEN(0x0271),
        option text = STRING_TOKEN(0x0004),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = RESET_REQUIRED;
      endoneof;

      grayoutif ideqval SETUP_DATA.AxSettingRussia == 0;
        oneof varid  = SETUP_DATA.AxModeRussia,
          prompt   = STRING_TOKEN(0x0272),
          help     = STRING_TOKEN(0x0273),
          option text = STRING_TOKEN(0x0004),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003),  value = 1, flags = RESET_REQUIRED;
        endoneof;
      endif;

      text
      help   = STRING_TOKEN(0x0130),
      text   = STRING_TOKEN(0x0130),
      flags  = 0,
      key    = 0;

      oneof varid  = SETUP_DATA.WrdsWiFiSarEnable,
        prompt   = STRING_TOKEN(0x0131),
        help     = STRING_TOKEN(0x0132),
        default  = 0, defaultstore = MyStandardDefault,
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = RESET_REQUIRED;
      endoneof;

      suppressif ideqval SETUP_DATA.WrdsWiFiSarEnable == 0;
        numeric varid = SETUP_DATA.WrdsWiFiSarTxPowerSet1Limit1,
          prompt   = STRING_TOKEN(0x0142),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.WrdsWiFiSarTxPowerSet1Limit2,
          prompt   = STRING_TOKEN(0x0143),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.WrdsWiFiSarTxPowerSet1Limit3,
          prompt   = STRING_TOKEN(0x0144),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.WrdsWiFiSarTxPowerSet1Limit4,
          prompt   = STRING_TOKEN(0x0145),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.WrdsWiFiSarTxPowerSet1Limit5,
          prompt   = STRING_TOKEN(0x0146),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.WrdsWiFiSarTxPowerSet1Limit6,
          prompt   = STRING_TOKEN(0x0147),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.WrdsWiFiSarTxPowerSet1Limit7,
          prompt   = STRING_TOKEN(0x0148),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.WrdsWiFiSarTxPowerSet1Limit8,
          prompt   = STRING_TOKEN(0x0149),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.WrdsWiFiSarTxPowerSet1Limit9,
          prompt   = STRING_TOKEN(0x014A),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.WrdsWiFiSarTxPowerSet1Limit10,
          prompt   = STRING_TOKEN(0x014B),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.WrdsWiFiSarTxPowerSet1Limit11,
          prompt   = STRING_TOKEN(0x014C),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.WrdsWiFiSarTxPowerSet1Limit12,
          prompt   = STRING_TOKEN(0x014D),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.WrdsWiFiSarTxPowerSet1Limit13,
          prompt   = STRING_TOKEN(0x014E),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;
        numeric varid = SETUP_DATA.WrdsWiFiSarTxPowerSet1Limit14,
          prompt   = STRING_TOKEN(0x014F),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.WrdsWiFiSarTxPowerSet1Limit15,
          prompt   = STRING_TOKEN(0x0150),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.WrdsWiFiSarTxPowerSet1Limit16,
          prompt   = STRING_TOKEN(0x0151),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.WrdsWiFiSarTxPowerSet1Limit17,
          prompt   = STRING_TOKEN(0x0152),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.WrdsWiFiSarTxPowerSet1Limit18,
          prompt   = STRING_TOKEN(0x0153),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.WrdsWiFiSarTxPowerSet1Limit19,
          prompt   = STRING_TOKEN(0x0154),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.WrdsWiFiSarTxPowerSet1Limit20,
          prompt   = STRING_TOKEN(0x0155),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.WrdsWiFiSarTxPowerSet1Limit21,
          prompt   = STRING_TOKEN(0x0156),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.WrdsWiFiSarTxPowerSet1Limit22,
          prompt   = STRING_TOKEN(0x0157),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

       numeric varid = SETUP_DATA.WrdsCdbWiFiSarTxPowerSet1Limit1,
          prompt   = STRING_TOKEN(0x019B),
          help     = STRING_TOKEN(0x019A),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.WrdsCdbWiFiSarTxPowerSet1Limit2,
          prompt   = STRING_TOKEN(0x019C),
          help     = STRING_TOKEN(0x019A),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.WrdsCdbWiFiSarTxPowerSet1Limit3,
          prompt   = STRING_TOKEN(0x019D),
          help     = STRING_TOKEN(0x019A),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.WrdsCdbWiFiSarTxPowerSet1Limit4,
          prompt   = STRING_TOKEN(0x019E),
          help     = STRING_TOKEN(0x019A),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.WrdsCdbWiFiSarTxPowerSet1Limit5,
          prompt   = STRING_TOKEN(0x019F),
          help     = STRING_TOKEN(0x019A),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.WrdsCdbWiFiSarTxPowerSet1Limit6,
          prompt   = STRING_TOKEN(0x01A0),
          help     = STRING_TOKEN(0x019A),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.WrdsCdbWiFiSarTxPowerSet1Limit7,
          prompt   = STRING_TOKEN(0x01A1),
          help     = STRING_TOKEN(0x019A),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.WrdsCdbWiFiSarTxPowerSet1Limit8,
          prompt   = STRING_TOKEN(0x01A2),
          help     = STRING_TOKEN(0x019A),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.WrdsCdbWiFiSarTxPowerSet1Limit9,
          prompt   = STRING_TOKEN(0x01A3),
          help     = STRING_TOKEN(0x019A),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.WrdsCdbWiFiSarTxPowerSet1Limit10,
          prompt   = STRING_TOKEN(0x01A4),
          help     = STRING_TOKEN(0x019A),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.WrdsCdbWiFiSarTxPowerSet1Limit11,
          prompt   = STRING_TOKEN(0x01A5),
          help     = STRING_TOKEN(0x019A),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.WrdsCdbWiFiSarTxPowerSet1Limit12,
          prompt   = STRING_TOKEN(0x01A6),
          help     = STRING_TOKEN(0x019A),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.WrdsCdbWiFiSarTxPowerSet1Limit13,
          prompt   = STRING_TOKEN(0x01A7),
          help     = STRING_TOKEN(0x019A),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;
        numeric varid = SETUP_DATA.WrdsCdbWiFiSarTxPowerSet1Limit14,
          prompt   = STRING_TOKEN(0x01A8),
          help     = STRING_TOKEN(0x019A),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.WrdsCdbWiFiSarTxPowerSet1Limit15,
          prompt   = STRING_TOKEN(0x01A9),
          help     = STRING_TOKEN(0x019A),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.WrdsCdbWiFiSarTxPowerSet1Limit16,
          prompt   = STRING_TOKEN(0x01AA),
          help     = STRING_TOKEN(0x019A),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.WrdsCdbWiFiSarTxPowerSet1Limit17,
          prompt   = STRING_TOKEN(0x01AB),
          help     = STRING_TOKEN(0x019A),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.WrdsCdbWiFiSarTxPowerSet1Limit18,
          prompt   = STRING_TOKEN(0x01AC),
          help     = STRING_TOKEN(0x019A),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.WrdsCdbWiFiSarTxPowerSet1Limit19,
          prompt   = STRING_TOKEN(0x01AD),
          help     = STRING_TOKEN(0x019A),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.WrdsCdbWiFiSarTxPowerSet1Limit20,
          prompt   = STRING_TOKEN(0x01AE),
          help     = STRING_TOKEN(0x019A),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.WrdsCdbWiFiSarTxPowerSet1Limit21,
          prompt   = STRING_TOKEN(0x01AF),
          help     = STRING_TOKEN(0x019A),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.WrdsCdbWiFiSarTxPowerSet1Limit22,
          prompt   = STRING_TOKEN(0x01B0),
          help     = STRING_TOKEN(0x019A),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

      endif; 

      text
      help   = STRING_TOKEN(0x0133),
      text   = STRING_TOKEN(0x0133),
      flags  = 0,
      key    = 0;
      oneof varid  = SETUP_DATA.EwrdWiFiDynamicSarEnable,
        prompt   = STRING_TOKEN(0x0134),
        help     = STRING_TOKEN(0x0135),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = RESET_REQUIRED;
      endoneof;

      suppressif ideqval SETUP_DATA.EwrdWiFiDynamicSarEnable == 0;
        oneof varid  = SETUP_DATA.EwrdWiFiDynamicSarRangeSets,
          prompt   = STRING_TOKEN(0x0136),
          help     = STRING_TOKEN(0x0137),
          option text = STRING_TOKEN(0x0138), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x013A),   value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x013B),   value = 2, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x013C),   value = 3, flags = RESET_REQUIRED;
        endoneof;

        numeric varid = SETUP_DATA.EwrdWiFiSarTxPowerSet2Limit1,
          prompt   = STRING_TOKEN(0x0158),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdWiFiSarTxPowerSet2Limit2,
          prompt   = STRING_TOKEN(0x0159),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdWiFiSarTxPowerSet2Limit3,
          prompt   = STRING_TOKEN(0x015A),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdWiFiSarTxPowerSet2Limit4,
          prompt   = STRING_TOKEN(0x015B),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdWiFiSarTxPowerSet2Limit5,
          prompt   = STRING_TOKEN(0x015C),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdWiFiSarTxPowerSet2Limit6,
          prompt   = STRING_TOKEN(0x015D),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdWiFiSarTxPowerSet2Limit7,
          prompt   = STRING_TOKEN(0x015E),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdWiFiSarTxPowerSet2Limit8,
          prompt   = STRING_TOKEN(0x015F),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdWiFiSarTxPowerSet2Limit9,
          prompt   = STRING_TOKEN(0x0160),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdWiFiSarTxPowerSet2Limit10,
          prompt   = STRING_TOKEN(0x0161),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdWiFiSarTxPowerSet2Limit11,
          prompt   = STRING_TOKEN(0x0162),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdWiFiSarTxPowerSet2Limit12,
          prompt   = STRING_TOKEN(0x0163),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdWiFiSarTxPowerSet2Limit13,
          prompt   = STRING_TOKEN(0x0164),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdWiFiSarTxPowerSet2Limit14,
          prompt   = STRING_TOKEN(0x0165),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdWiFiSarTxPowerSet2Limit15,
          prompt   = STRING_TOKEN(0x0166),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdWiFiSarTxPowerSet2Limit16,
          prompt   = STRING_TOKEN(0x0167),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdWiFiSarTxPowerSet2Limit17,
          prompt   = STRING_TOKEN(0x0168),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdWiFiSarTxPowerSet2Limit18,
          prompt   = STRING_TOKEN(0x0169),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdWiFiSarTxPowerSet2Limit19,
          prompt   = STRING_TOKEN(0x016A),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdWiFiSarTxPowerSet2Limit20,
          prompt   = STRING_TOKEN(0x016B),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdWiFiSarTxPowerSet2Limit21,
          prompt   = STRING_TOKEN(0x016C),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdWiFiSarTxPowerSet2Limit22,
          prompt   = STRING_TOKEN(0x016D),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdWiFiSarTxPowerSet3Limit1,
          prompt   = STRING_TOKEN(0x016E),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdWiFiSarTxPowerSet3Limit2,
          prompt   = STRING_TOKEN(0x016F),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdWiFiSarTxPowerSet3Limit3,
          prompt   = STRING_TOKEN(0x0170),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdWiFiSarTxPowerSet3Limit4,
          prompt   = STRING_TOKEN(0x0171),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdWiFiSarTxPowerSet3Limit5,
          prompt   = STRING_TOKEN(0x0172),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdWiFiSarTxPowerSet3Limit6,
          prompt   = STRING_TOKEN(0x0173),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdWiFiSarTxPowerSet3Limit7,
          prompt   = STRING_TOKEN(0x0174),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdWiFiSarTxPowerSet3Limit8,
          prompt   = STRING_TOKEN(0x0175),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdWiFiSarTxPowerSet3Limit9,
          prompt   = STRING_TOKEN(0x0176),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdWiFiSarTxPowerSet3Limit10,
          prompt   = STRING_TOKEN(0x0177),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdWiFiSarTxPowerSet3Limit11,
          prompt   = STRING_TOKEN(0x0178),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdWiFiSarTxPowerSet3Limit12,
          prompt   = STRING_TOKEN(0x0179),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdWiFiSarTxPowerSet3Limit13,
          prompt   = STRING_TOKEN(0x017A),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdWiFiSarTxPowerSet3Limit14,
          prompt   = STRING_TOKEN(0x017B),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdWiFiSarTxPowerSet3Limit15,
          prompt   = STRING_TOKEN(0x017C),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdWiFiSarTxPowerSet3Limit16,
          prompt   = STRING_TOKEN(0x017D),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdWiFiSarTxPowerSet3Limit17,
          prompt   = STRING_TOKEN(0x017E),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdWiFiSarTxPowerSet3Limit18,
          prompt   = STRING_TOKEN(0x017F),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdWiFiSarTxPowerSet3Limit19,
          prompt   = STRING_TOKEN(0x0180),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdWiFiSarTxPowerSet3Limit20,
          prompt   = STRING_TOKEN(0x0181),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdWiFiSarTxPowerSet3Limit21,
          prompt   = STRING_TOKEN(0x0182),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdWiFiSarTxPowerSet3Limit22,
          prompt   = STRING_TOKEN(0x0183),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdWiFiSarTxPowerSet4Limit1,
          prompt   = STRING_TOKEN(0x0184),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdWiFiSarTxPowerSet4Limit2,
          prompt   = STRING_TOKEN(0x0185),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdWiFiSarTxPowerSet4Limit3,
          prompt   = STRING_TOKEN(0x0186),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdWiFiSarTxPowerSet4Limit4,
          prompt   = STRING_TOKEN(0x0187),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdWiFiSarTxPowerSet4Limit5,
          prompt   = STRING_TOKEN(0x0188),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdWiFiSarTxPowerSet4Limit6,
          prompt   = STRING_TOKEN(0x0189),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdWiFiSarTxPowerSet4Limit7,
          prompt   = STRING_TOKEN(0x018A),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdWiFiSarTxPowerSet4Limit8,
          prompt   = STRING_TOKEN(0x018B),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdWiFiSarTxPowerSet4Limit9,
          prompt   = STRING_TOKEN(0x018C),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdWiFiSarTxPowerSet4Limit10,
          prompt   = STRING_TOKEN(0x018D),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdWiFiSarTxPowerSet4Limit11,
          prompt   = STRING_TOKEN(0x018E),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdWiFiSarTxPowerSet4Limit12,
          prompt   = STRING_TOKEN(0x018F),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdWiFiSarTxPowerSet4Limit13,
          prompt   = STRING_TOKEN(0x0190),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdWiFiSarTxPowerSet4Limit14,
          prompt   = STRING_TOKEN(0x0191),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdWiFiSarTxPowerSet4Limit15,
          prompt   = STRING_TOKEN(0x0192),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdWiFiSarTxPowerSet4Limit16,
          prompt   = STRING_TOKEN(0x0193),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdWiFiSarTxPowerSet4Limit17,
          prompt   = STRING_TOKEN(0x0194),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdWiFiSarTxPowerSet4Limit18,
          prompt   = STRING_TOKEN(0x0195),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdWiFiSarTxPowerSet4Limit19,
          prompt   = STRING_TOKEN(0x0196),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdWiFiSarTxPowerSet4Limit20,
          prompt   = STRING_TOKEN(0x0197),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdWiFiSarTxPowerSet4Limit21,
          prompt   = STRING_TOKEN(0x0198),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdWiFiSarTxPowerSet4Limit22,
          prompt   = STRING_TOKEN(0x0199),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdCdbWiFiSarTxPowerSet2Limit1,
          prompt   = STRING_TOKEN(0x01B1),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdCdbWiFiSarTxPowerSet2Limit2,
          prompt   = STRING_TOKEN(0x01B2),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdCdbWiFiSarTxPowerSet2Limit3,
          prompt   = STRING_TOKEN(0x01B3),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdCdbWiFiSarTxPowerSet2Limit4,
          prompt   = STRING_TOKEN(0x01B4),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdCdbWiFiSarTxPowerSet2Limit5,
          prompt   = STRING_TOKEN(0x01B5),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdCdbWiFiSarTxPowerSet2Limit6,
          prompt   = STRING_TOKEN(0x01B6),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdCdbWiFiSarTxPowerSet2Limit7,
          prompt   = STRING_TOKEN(0x01B7),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdCdbWiFiSarTxPowerSet2Limit8,
          prompt   = STRING_TOKEN(0x01B8),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdCdbWiFiSarTxPowerSet2Limit9,
          prompt   = STRING_TOKEN(0x01B9),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdCdbWiFiSarTxPowerSet2Limit10,
          prompt   = STRING_TOKEN(0x01BA),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdCdbWiFiSarTxPowerSet2Limit11,
          prompt   = STRING_TOKEN(0x01BB),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdCdbWiFiSarTxPowerSet2Limit12,
          prompt   = STRING_TOKEN(0x01BC),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdCdbWiFiSarTxPowerSet2Limit13,
          prompt   = STRING_TOKEN(0x01BD),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdCdbWiFiSarTxPowerSet2Limit14,
          prompt   = STRING_TOKEN(0x01BE),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdCdbWiFiSarTxPowerSet2Limit15,
          prompt   = STRING_TOKEN(0x01BF),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdCdbWiFiSarTxPowerSet2Limit16,
          prompt   = STRING_TOKEN(0x01C0),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdCdbWiFiSarTxPowerSet2Limit17,
          prompt   = STRING_TOKEN(0x01C1),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdCdbWiFiSarTxPowerSet2Limit18,
          prompt   = STRING_TOKEN(0x01C2),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdCdbWiFiSarTxPowerSet2Limit19,
          prompt   = STRING_TOKEN(0x01C3),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdCdbWiFiSarTxPowerSet2Limit20,
          prompt   = STRING_TOKEN(0x01C4),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdCdbWiFiSarTxPowerSet2Limit21,
          prompt   = STRING_TOKEN(0x01C5),
          help     = STRING_TOKEN(0x019A),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdCdbWiFiSarTxPowerSet2Limit22,
          prompt   = STRING_TOKEN(0x01C6),
          help     = STRING_TOKEN(0x019A),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdCdbWiFiSarTxPowerSet3Limit1,
          prompt   = STRING_TOKEN(0x01C7),
          help     = STRING_TOKEN(0x019A),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdCdbWiFiSarTxPowerSet3Limit2,
          prompt   = STRING_TOKEN(0x01C8),
          help     = STRING_TOKEN(0x019A),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdCdbWiFiSarTxPowerSet3Limit3,
          prompt   = STRING_TOKEN(0x01C9),
          help     = STRING_TOKEN(0x019A),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdCdbWiFiSarTxPowerSet3Limit4,
          prompt   = STRING_TOKEN(0x01CA),
          help     = STRING_TOKEN(0x019A),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdCdbWiFiSarTxPowerSet3Limit5,
          prompt   = STRING_TOKEN(0x01CB),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdCdbWiFiSarTxPowerSet3Limit6,
          prompt   = STRING_TOKEN(0x01CC),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdCdbWiFiSarTxPowerSet3Limit7,
          prompt   = STRING_TOKEN(0x01CD),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdCdbWiFiSarTxPowerSet3Limit8,
          prompt   = STRING_TOKEN(0x01CE),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdCdbWiFiSarTxPowerSet3Limit9,
          prompt   = STRING_TOKEN(0x01CF),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdCdbWiFiSarTxPowerSet3Limit10,
          prompt   = STRING_TOKEN(0x01D0),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdCdbWiFiSarTxPowerSet3Limit11,
          prompt   = STRING_TOKEN(0x01D1),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdCdbWiFiSarTxPowerSet3Limit12,
          prompt   = STRING_TOKEN(0x01D2),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdCdbWiFiSarTxPowerSet3Limit13,
          prompt   = STRING_TOKEN(0x01D3),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdCdbWiFiSarTxPowerSet3Limit14,
          prompt   = STRING_TOKEN(0x01D4),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdCdbWiFiSarTxPowerSet3Limit15,
          prompt   = STRING_TOKEN(0x01D5),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdCdbWiFiSarTxPowerSet3Limit16,
          prompt   = STRING_TOKEN(0x01D6),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdCdbWiFiSarTxPowerSet3Limit17,
          prompt   = STRING_TOKEN(0x01D7),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdCdbWiFiSarTxPowerSet3Limit18,
          prompt   = STRING_TOKEN(0x01D8),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdCdbWiFiSarTxPowerSet3Limit19,
          prompt   = STRING_TOKEN(0x01D9),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdCdbWiFiSarTxPowerSet3Limit20,
          prompt   = STRING_TOKEN(0x01DA),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdCdbWiFiSarTxPowerSet3Limit21,
          prompt   = STRING_TOKEN(0x01DB),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdCdbWiFiSarTxPowerSet3Limit22,
          prompt   = STRING_TOKEN(0x01DC),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdCdbWiFiSarTxPowerSet4Limit1,
          prompt   = STRING_TOKEN(0x01DD),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdCdbWiFiSarTxPowerSet4Limit2,
          prompt   = STRING_TOKEN(0x01DE),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdCdbWiFiSarTxPowerSet4Limit3,
          prompt   = STRING_TOKEN(0x01DF),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdCdbWiFiSarTxPowerSet4Limit4,
          prompt   = STRING_TOKEN(0x01E0),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdCdbWiFiSarTxPowerSet4Limit5,
          prompt   = STRING_TOKEN(0x01E1),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdCdbWiFiSarTxPowerSet4Limit6,
          prompt   = STRING_TOKEN(0x01E2),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdCdbWiFiSarTxPowerSet4Limit7,
          prompt   = STRING_TOKEN(0x01E3),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdCdbWiFiSarTxPowerSet4Limit8,
          prompt   = STRING_TOKEN(0x01E4),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdCdbWiFiSarTxPowerSet4Limit9,
          prompt   = STRING_TOKEN(0x01E5),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdCdbWiFiSarTxPowerSet4Limit10,
          prompt   = STRING_TOKEN(0x01E6),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdCdbWiFiSarTxPowerSet4Limit11,
          prompt   = STRING_TOKEN(0x01E7),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdCdbWiFiSarTxPowerSet4Limit12,
          prompt   = STRING_TOKEN(0x01E8),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdCdbWiFiSarTxPowerSet4Limit13,
          prompt   = STRING_TOKEN(0x01E9),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdCdbWiFiSarTxPowerSet4Limit14,
          prompt   = STRING_TOKEN(0x01EA),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdCdbWiFiSarTxPowerSet4Limit15,
          prompt   = STRING_TOKEN(0x01EB),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdCdbWiFiSarTxPowerSet4Limit16,
          prompt   = STRING_TOKEN(0x01EC),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdCdbWiFiSarTxPowerSet4Limit17,
          prompt   = STRING_TOKEN(0x01ED),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdCdbWiFiSarTxPowerSet4Limit18,
          prompt   = STRING_TOKEN(0x01EE),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdCdbWiFiSarTxPowerSet4Limit19,
          prompt   = STRING_TOKEN(0x01EF),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdCdbWiFiSarTxPowerSet4Limit20,
          prompt   = STRING_TOKEN(0x01F0),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdCdbWiFiSarTxPowerSet4Limit21,
          prompt   = STRING_TOKEN(0x01F1),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.EwrdCdbWiFiSarTxPowerSet4Limit22,
          prompt   = STRING_TOKEN(0x01F2),
          help     = STRING_TOKEN(0x0141),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;
      endif;

      suppressif TRUE;
        oneof varid  = SETUP_DATA.WiFiDynamicSarAntennaACurrentSet,
          prompt   = STRING_TOKEN(0x013E),
          help     = STRING_TOKEN(0x0140),
          option text = STRING_TOKEN(0x013D), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0139),   value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x013A),   value = 2, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x013B),   value = 3, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x013C),   value = 4, flags = RESET_REQUIRED;
        endoneof;
      endif;

      suppressif TRUE;
        oneof varid  = SETUP_DATA.WiFiDynamicSarAntennaBCurrentSet,
          prompt   = STRING_TOKEN(0x013F),
          help     = STRING_TOKEN(0x0140),
          option text = STRING_TOKEN(0x013D), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0139),   value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x013A),   value = 2, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x013B),   value = 3, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x013C),   value = 4, flags = RESET_REQUIRED;
        endoneof;
      endif;

      text
      help   = STRING_TOKEN(0x0205),
      text   = STRING_TOKEN(0x0205),
      flags  = 0,
      key    = 0;










#line 2083 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\ConnectivitySetup.hfr"

      numeric varid = SETUP_DATA.WgdsWiFiSarDeltaGroup1PowerMax1,
        prompt   = STRING_TOKEN(0x0209),
        help     = STRING_TOKEN(0x0206),
        minimum = 0,
        maximum = 0xFF,
        step    = 1,
        default = 0xFF,
      endnumeric;

      numeric varid = SETUP_DATA.WgdsWiFiSarDeltaGroup1PowerChainA1,
        prompt   = STRING_TOKEN(0x020A),
        help     = STRING_TOKEN(0x0206),
        minimum = 0,
        maximum = 0xFF,
        step    = 1,
        default = 0,
      endnumeric;

      numeric varid = SETUP_DATA.WgdsWiFiSarDeltaGroup1PowerChainB1,
        prompt   = STRING_TOKEN(0x020B),
        help     = STRING_TOKEN(0x0206),
        minimum = 0,
        maximum = 0xFF,
        step    = 1,
        default = 0,
      endnumeric;

      numeric varid = SETUP_DATA.WgdsWiFiSarDeltaGroup1PowerMax2,
        prompt   = STRING_TOKEN(0x020C),
        help     = STRING_TOKEN(0x0206),
        minimum = 0,
        maximum = 0xFF,
        step    = 1,
        default = 0xFF,
      endnumeric;

      numeric varid = SETUP_DATA.WgdsWiFiSarDeltaGroup1PowerChainA2,
        prompt   = STRING_TOKEN(0x020D),
        help     = STRING_TOKEN(0x0206),
        minimum = 0,
        maximum = 0xFF,
        step    = 1,
        default = 0,
      endnumeric;

      numeric varid = SETUP_DATA.WgdsWiFiSarDeltaGroup1PowerChainB2,
        prompt   = STRING_TOKEN(0x020E),
        help     = STRING_TOKEN(0x0141),
        minimum = 0,
        maximum = 0xFF,
        step    = 1,
        default = 0,
      endnumeric;

      numeric varid = SETUP_DATA.WgdsWiFiSarDeltaGroup1PowerMax3,
        prompt   = STRING_TOKEN(0x020F),
        help     = STRING_TOKEN(0x0206),
        minimum = 0,
        maximum = 0xFF,
        step    = 1,
        default = 0xFF,
      endnumeric;

      numeric varid = SETUP_DATA.WgdsWiFiSarDeltaGroup1PowerChainA3,
        prompt   = STRING_TOKEN(0x0210),
        help     = STRING_TOKEN(0x0206),
        minimum = 0,
        maximum = 0xFF,
        step    = 1,
        default = 0,
      endnumeric;

      numeric varid = SETUP_DATA.WgdsWiFiSarDeltaGroup1PowerChainB3,
        prompt   = STRING_TOKEN(0x0211),
        help     = STRING_TOKEN(0x0141),
        minimum = 0,
        maximum = 0xFF,
        step    = 1,
        default = 0,
      endnumeric;

      numeric varid = SETUP_DATA.WgdsWiFiSarDeltaGroup2PowerMax1,
        prompt   = STRING_TOKEN(0x0212),
        help     = STRING_TOKEN(0x0206),
        minimum = 0,
        maximum = 0xFF,
        step    = 1,
        default = 0xFF,
      endnumeric;

      numeric varid = SETUP_DATA.WgdsWiFiSarDeltaGroup2PowerChainA1,
        prompt   = STRING_TOKEN(0x0213),
        help     = STRING_TOKEN(0x0206),
        minimum = 0,
        maximum = 0xFF,
        step    = 1,
        default = 0,
      endnumeric;

      numeric varid = SETUP_DATA.WgdsWiFiSarDeltaGroup2PowerChainB1,
        prompt   = STRING_TOKEN(0x0214),
        help     = STRING_TOKEN(0x0206),
        minimum = 0,
        maximum = 0xFF,
        step    = 1,
        default = 0,
      endnumeric;

      numeric varid = SETUP_DATA.WgdsWiFiSarDeltaGroup2PowerMax2,
        prompt   = STRING_TOKEN(0x0215),
        help     = STRING_TOKEN(0x0206),
        minimum = 0,
        maximum = 0xFF,
        step    = 1,
        default = 0xFF,
      endnumeric;

      numeric varid = SETUP_DATA.WgdsWiFiSarDeltaGroup2PowerChainA2,
        prompt   = STRING_TOKEN(0x0216),
        help     = STRING_TOKEN(0x0206),
        minimum = 0,
        maximum = 0xFF,
        step    = 1,
        default = 0,
      endnumeric;

      numeric varid = SETUP_DATA.WgdsWiFiSarDeltaGroup2PowerChainB2,
        prompt   = STRING_TOKEN(0x0217),
        help     = STRING_TOKEN(0x0206),
        minimum = 0,
        maximum = 0xFF,
        step    = 1,
        default = 0,
      endnumeric;

      numeric varid = SETUP_DATA.WgdsWiFiSarDeltaGroup2PowerMax3,
        prompt   = STRING_TOKEN(0x0218),
        help     = STRING_TOKEN(0x0206),
        minimum = 0,
        maximum = 0xFF,
        step    = 1,
        default = 0xFF,
      endnumeric;

      numeric varid = SETUP_DATA.WgdsWiFiSarDeltaGroup2PowerChainA3,
        prompt   = STRING_TOKEN(0x0219),
        help     = STRING_TOKEN(0x0206),
        minimum = 0,
        maximum = 0xFF,
        step    = 1,
        default = 0,
      endnumeric;

      numeric varid = SETUP_DATA.WgdsWiFiSarDeltaGroup2PowerChainB3,
        prompt   = STRING_TOKEN(0x021A),
        help     = STRING_TOKEN(0x0141),
        minimum = 0,
        maximum = 0xFF,
        step    = 1,
        default = 0,
      endnumeric;

      numeric varid = SETUP_DATA.WgdsWiFiSarDeltaGroup3PowerMax1,
        prompt   = STRING_TOKEN(0x021B),
        help     = STRING_TOKEN(0x0206),
        minimum = 0,
        maximum = 0xFF,
        step    = 1,
        default = 0xFF,
      endnumeric;

      numeric varid = SETUP_DATA.WgdsWiFiSarDeltaGroup3PowerChainA1,
        prompt   = STRING_TOKEN(0x021C),
        help     = STRING_TOKEN(0x0206),
        minimum = 0,
        maximum = 0xFF,
        step    = 1,
        default = 0,
      endnumeric;

      numeric varid = SETUP_DATA.WgdsWiFiSarDeltaGroup3PowerChainB1,
        prompt   = STRING_TOKEN(0x021D),
        help     = STRING_TOKEN(0x0206),
        minimum = 0,
        maximum = 0xFF,
        step    = 1,
        default = 0,
      endnumeric;

      numeric varid = SETUP_DATA.WgdsWiFiSarDeltaGroup3PowerMax2,
        prompt   = STRING_TOKEN(0x021E),
        help     = STRING_TOKEN(0x0206),
        minimum = 0,
        maximum = 0xFF,
        step    = 1,
        default = 0xFF,
      endnumeric;

      numeric varid = SETUP_DATA.WgdsWiFiSarDeltaGroup3PowerChainA2,
        prompt   = STRING_TOKEN(0x021F),
        help     = STRING_TOKEN(0x0206),
        minimum = 0,
        maximum = 0xFF,
        step    = 1,
        default = 0,
      endnumeric;

      numeric varid = SETUP_DATA.WgdsWiFiSarDeltaGroup3PowerChainB2,
        prompt   = STRING_TOKEN(0x0220),
        help     = STRING_TOKEN(0x0141),
        minimum = 0,
        maximum = 0xFF,
        step    = 1,
        default = 0,
      endnumeric;

      numeric varid = SETUP_DATA.WgdsWiFiSarDeltaGroup3PowerMax3,
        prompt   = STRING_TOKEN(0x0221),
        help     = STRING_TOKEN(0x0206),
        minimum = 0,
        maximum = 0xFF,
        step    = 1,
        default = 0xFF,
      endnumeric;

      numeric varid = SETUP_DATA.WgdsWiFiSarDeltaGroup3PowerChainA3,
        prompt   = STRING_TOKEN(0x0222),
        help     = STRING_TOKEN(0x0206),
        minimum = 0,
        maximum = 0xFF,
        step    = 1,
        default = 0,
      endnumeric;

      numeric varid = SETUP_DATA.WgdsWiFiSarDeltaGroup3PowerChainB3,
        prompt   = STRING_TOKEN(0x0223),
        help     = STRING_TOKEN(0x0141),
        minimum = 0,
        maximum = 0xFF,
        step    = 1,
        default = 0,
      endnumeric;






















































































































































































































































































































































































































#line 2733 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\ConnectivitySetup.hfr"

      oneof varid  = SETUP_DATA.CnvExtClock,
        prompt   = STRING_TOKEN(0x02D3),
        help     = STRING_TOKEN(0x02D4),
        option text = STRING_TOKEN(0x02D6), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x02D5),  value = 1, flags = RESET_REQUIRED;
      endoneof;

      text
      help   = STRING_TOKEN(0x0251),
      text   = STRING_TOKEN(0x0251),
      flags  = 0,
      key    = 0;

      oneof varid  = SETUP_DATA.WifiAntGainEnale,
        prompt   = STRING_TOKEN(0x0252),
        help     = STRING_TOKEN(0x0253),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = RESET_REQUIRED;
      endoneof;

      numeric varid = SETUP_DATA.WifiAntGain2400ChainA,
        prompt   = STRING_TOKEN(0x0254),
        help     = STRING_TOKEN(0x026A),
        minimum = 0,
        maximum = 0xFF,
        step    = 1,
        default = 0x18,
      endnumeric;

      numeric varid = SETUP_DATA.WifiAntGain5150ChainA,
        prompt   = STRING_TOKEN(0x0255),
        help     = STRING_TOKEN(0x026A),
        minimum = 0,
        maximum = 0xFF,
        step    = 1,
        default = 0x28,
      endnumeric;

      numeric varid = SETUP_DATA.WifiAntGain5350ChainA,
        prompt   = STRING_TOKEN(0x0256),
        help     = STRING_TOKEN(0x026A),
        minimum = 0,
        maximum = 0xFF,
        step    = 1,
        default = 0x28,
      endnumeric;

      numeric varid = SETUP_DATA.WifiAntGain5470ChainA,
        prompt   = STRING_TOKEN(0x0257),
        help     = STRING_TOKEN(0x026A),
        minimum = 0,
        maximum = 0xFF,
        step    = 1,
        default = 0x28,
      endnumeric;

      numeric varid = SETUP_DATA.WifiAntGain5725ChainA,
        prompt   = STRING_TOKEN(0x0258),
        help     = STRING_TOKEN(0x026A),
        minimum = 0,
        maximum = 0xFF,
        step    = 1,
        default = 0x28,
      endnumeric;

      numeric varid = SETUP_DATA.WifiAntGain5945ChainA,
        prompt   = STRING_TOKEN(0x0259),
        help     = STRING_TOKEN(0x026A),
        minimum = 0,
        maximum = 0xFF,
        step    = 1,
        default = 0x28,
      endnumeric;

      numeric varid = SETUP_DATA.WifiAntGain6165ChainA,
        prompt   = STRING_TOKEN(0x025A),
        help     = STRING_TOKEN(0x026A),
        minimum = 0,
        maximum = 0xFF,
        step    = 1,
        default = 0x28,
      endnumeric;

      numeric varid = SETUP_DATA.WifiAntGain6405ChainA,
        prompt   = STRING_TOKEN(0x025B),
        help     = STRING_TOKEN(0x026A),
        minimum = 0,
        maximum = 0xFF,
        step    = 1,
        default = 0x28,
      endnumeric;

      numeric varid = SETUP_DATA.WifiAntGain6525ChainA,
        prompt   = STRING_TOKEN(0x025C),
        help     = STRING_TOKEN(0x026A),
        minimum = 0,
        maximum = 0xFF,
        step    = 1,
        default = 0x28,
      endnumeric;

      numeric varid = SETUP_DATA.WifiAntGain6705ChainA,
        prompt   = STRING_TOKEN(0x025D),
        help     = STRING_TOKEN(0x026A),
        minimum = 0,
        maximum = 0xFF,
        step    = 1,
        default = 0x28,
      endnumeric;

      numeric varid = SETUP_DATA.WifiAntGain6865ChainA,
        prompt   = STRING_TOKEN(0x025E),
        help     = STRING_TOKEN(0x026A),
        minimum = 0,
        maximum = 0xFF,
        step    = 1,
        default = 0x28,
      endnumeric;

      numeric varid = SETUP_DATA.WifiAntGain2400ChainB,
        prompt   = STRING_TOKEN(0x025F),
        help     = STRING_TOKEN(0x026A),
        minimum = 0,
        maximum = 0xFF,
        step    = 1,
        default = 0x18,
      endnumeric;

      numeric varid = SETUP_DATA.WifiAntGain5150ChainB,
        prompt   = STRING_TOKEN(0x0260),
        help     = STRING_TOKEN(0x026A),
        minimum = 0,
        maximum = 0xFF,
        step    = 1,
        default = 0x28,
      endnumeric;

      numeric varid = SETUP_DATA.WifiAntGain5350ChainB,
        prompt   = STRING_TOKEN(0x0261),
        help     = STRING_TOKEN(0x026A),
        minimum = 0,
        maximum = 0xFF,
        step    = 1,
        default = 0x28,
      endnumeric;

      numeric varid = SETUP_DATA.WifiAntGain5470ChainB,
        prompt   = STRING_TOKEN(0x0262),
        help     = STRING_TOKEN(0x026A),
        minimum = 0,
        maximum = 0xFF,
        step    = 1,
        default = 0x28,
      endnumeric;

      numeric varid = SETUP_DATA.WifiAntGain5725ChainB,
        prompt   = STRING_TOKEN(0x0263),
        help     = STRING_TOKEN(0x026A),
        minimum = 0,
        maximum = 0xFF,
        step    = 1,
        default = 0x28,
      endnumeric;

      numeric varid = SETUP_DATA.WifiAntGain5945ChainB,
        prompt   = STRING_TOKEN(0x0264),
        help     = STRING_TOKEN(0x026A),
        minimum = 0,
        maximum = 0xFF,
        step    = 1,
        default = 0x28,
      endnumeric;

      numeric varid = SETUP_DATA.WifiAntGain6165ChainB,
        prompt   = STRING_TOKEN(0x0265),
        help     = STRING_TOKEN(0x026A),
        minimum = 0,
        maximum = 0xFF,
        step    = 1,
        default = 0x28,
      endnumeric;

      numeric varid = SETUP_DATA.WifiAntGain6405ChainB,
        prompt   = STRING_TOKEN(0x0266),
        help     = STRING_TOKEN(0x026A),
        minimum = 0,
        maximum = 0xFF,
        step    = 1,
        default = 0x28,
      endnumeric;

      numeric varid = SETUP_DATA.WifiAntGain6525ChainB,
        prompt   = STRING_TOKEN(0x0267),
        help     = STRING_TOKEN(0x026A),
        minimum = 0,
        maximum = 0xFF,
        step    = 1,
        default = 0x28,
      endnumeric;

      numeric varid = SETUP_DATA.WifiAntGain6705ChainB,
        prompt   = STRING_TOKEN(0x0268),
        help     = STRING_TOKEN(0x026A),
        minimum = 0,
        maximum = 0xFF,
        step    = 1,
        default = 0x28,
      endnumeric;

      numeric varid = SETUP_DATA.WifiAntGain6865ChainB,
        prompt   = STRING_TOKEN(0x0269),
        help     = STRING_TOKEN(0x026A),
        minimum = 0,
        maximum = 0xFF,
        step    = 1,
        default = 0x28,
      endnumeric;

    subtitle text = STRING_TOKEN(0x0002);

      oneof varid  = SETUP_DATA.CnvExtClock,
        prompt   = STRING_TOKEN(0x02D3),
        help     = STRING_TOKEN(0x02D4),
        option text = STRING_TOKEN(0x02D6), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x02D5),  value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid  = SETUP_DATA.BluetoothSar,
        prompt   = STRING_TOKEN(0x027C),
        help     = STRING_TOKEN(0x027D),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = RESET_REQUIRED;
      endoneof;

      suppressif ideqval SETUP_DATA.BluetoothSar == 0;
        numeric varid = SETUP_DATA.BluetoothSarBr,
          prompt   = STRING_TOKEN(0x027E),
          help     = STRING_TOKEN(0x027F),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.BluetoothSarEdr2,
          prompt   = STRING_TOKEN(0x0280),
          help     = STRING_TOKEN(0x0281),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.BluetoothSarEdr3,
          prompt   = STRING_TOKEN(0x0282),
          help     = STRING_TOKEN(0x0283),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.BluetoothSarLe,
          prompt   = STRING_TOKEN(0x0284),
          help     = STRING_TOKEN(0x0285),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.BluetoothSarLe2Mhz,
          prompt   = STRING_TOKEN(0x0286),
          help     = STRING_TOKEN(0x0287),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.BluetoothSarLeLr,
          prompt   = STRING_TOKEN(0x0288),
          help     = STRING_TOKEN(0x0289),
          minimum = 0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;
      endif;

      
      numeric varid  = SETUP_DATA.WifiActiveChannelSrd,
        prompt   = STRING_TOKEN(0x01F3),
        help     = STRING_TOKEN(0x01F4),
        minimum = 0,
        maximum = 2,
        step    = 1,
        default = 0,
      endnumeric;

      
      numeric varid  = SETUP_DATA.WifiIndonesia5GhzSupport,
        prompt   = STRING_TOKEN(0x01F5),
        help     = STRING_TOKEN(0x01F6),
        minimum = 0,
        maximum = 2,
        step    = 1,
        default = 0,
      endnumeric;



#line 3047 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\ConnectivitySetup.hfr"
        
        numeric varid = SETUP_DATA.WifiUltraHighBandSupport,
          prompt   = STRING_TOKEN(0x01F7),
          help     = STRING_TOKEN(0x01F8),
          flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
          minimum  = 0,
          maximum  = 0xFFFFFFFF,
          step     = 1,
          default  = 0,
        endnumeric;















#line 3073 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\ConnectivitySetup.hfr"

      
      oneof varid  = SETUP_DATA.WifiRegulatoryConfigurations,
        prompt   = STRING_TOKEN(0x01FA),
        help     = STRING_TOKEN(0x01FB),
        option text = STRING_TOKEN(0x01FC), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x01FD), value = 1, flags = RESET_REQUIRED;
      endoneof;

      
      oneof varid  = SETUP_DATA.WifiUartConfigurations,
        prompt   = STRING_TOKEN(0x01FE),
        help     = STRING_TOKEN(0x01FF),
        option text = STRING_TOKEN(0x0200), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      
      numeric varid = SETUP_DATA.WifiUnii4,
        prompt   = STRING_TOKEN(0x0201),
        help     = STRING_TOKEN(0x0202),
        flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
        minimum  = 0,
        maximum  = 0xFFFFFFFF,
        step     = 1,
        default  = 0,
      endnumeric;

      
      numeric varid = SETUP_DATA.WifiIndoorControl,
        prompt   = STRING_TOKEN(0x0203),
        help     = STRING_TOKEN(0x0204),
        flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
        minimum  = 0,
        maximum  = 0xFFFFFFFF,
        step     = 1,
        default  = 0,
      endnumeric;

      text
      help   = STRING_TOKEN(0x0274),
      text   = STRING_TOKEN(0x0274),
      flags  = 0,
      key    = 0;













#line 3130 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\ConnectivitySetup.hfr"
      oneof varid  = SETUP_DATA.WifiTASSelection,
        prompt   = STRING_TOKEN(0x0275),
        help     = STRING_TOKEN(0x0277),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      suppressif ideqval SETUP_DATA.WifiTASSelection == 0;
#line 3139 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\ConnectivitySetup.hfr"
        numeric varid  = SETUP_DATA.WifiTASListEntries,
          prompt   = STRING_TOKEN(0x0278),
          help     = STRING_TOKEN(0x0279),
          minimum = 0,
          maximum = 0xF,
          step    = 1,
          default = 0,
        endnumeric;
        numeric varid  = SETUP_DATA.WTASBlockedList[0],
          prompt   = STRING_TOKEN(0x027A),
          help     = STRING_TOKEN(0x027B),
          minimum = 0x00,
          maximum = 0xFFFF,
          step    = 1,
          default = 0x00,
        endnumeric;
        numeric varid  = SETUP_DATA.WTASBlockedList[1],
          prompt   = STRING_TOKEN(0x027A),
          help     = STRING_TOKEN(0x027B),
          minimum = 0x00,
          maximum = 0xFFFF,
          step    = 1,
          default = 0x00,
        endnumeric;
        numeric varid  = SETUP_DATA.WTASBlockedList[2],
          prompt   = STRING_TOKEN(0x027A),
          help     = STRING_TOKEN(0x027B),
          minimum = 0x00,
          maximum = 0xFFFF,
          step    = 1,
          default = 0x00,
        endnumeric;
        numeric varid  = SETUP_DATA.WTASBlockedList[3],
          prompt   = STRING_TOKEN(0x027A),
          help     = STRING_TOKEN(0x027B),
          minimum = 0x00,
          maximum = 0xFFFF,
          step    = 1,
          default = 0x00,
        endnumeric;
        numeric varid  = SETUP_DATA.WTASBlockedList[4],
          prompt   = STRING_TOKEN(0x027A),
          help     = STRING_TOKEN(0x027B),
          minimum = 0x00,
          maximum = 0xFFFF,
          step    = 1,
          default = 0x00,
        endnumeric;
        numeric varid  = SETUP_DATA.WTASBlockedList[5],
          prompt   = STRING_TOKEN(0x027A),
          help     = STRING_TOKEN(0x027B),
          minimum = 0x00,
          maximum = 0xFFFF,
          step    = 1,
          default = 0x00,
        endnumeric;
        numeric varid  = SETUP_DATA.WTASBlockedList[6],
          prompt   = STRING_TOKEN(0x027A),
          help     = STRING_TOKEN(0x027B),
          minimum = 0x00,
          maximum = 0xFFFF,
          step    = 1,
          default = 0x00,
        endnumeric;
        numeric varid  = SETUP_DATA.WTASBlockedList[7],
          prompt   = STRING_TOKEN(0x027A),
          help     = STRING_TOKEN(0x027B),
          minimum = 0x00,
          maximum = 0xFFFF,
          step    = 1,
          default = 0x00,
        endnumeric;
        numeric varid  = SETUP_DATA.WTASBlockedList[8],
          prompt   = STRING_TOKEN(0x027A),
          help     = STRING_TOKEN(0x027B),
          minimum = 0x00,
          maximum = 0xFFFF,
          step    = 1,
          default = 0x00,
        endnumeric;
        numeric varid  = SETUP_DATA.WTASBlockedList[9],
          prompt   = STRING_TOKEN(0x027A),
          help     = STRING_TOKEN(0x027B),
          minimum = 0x00,
          maximum = 0xFFFF,
          step    = 1,
          default = 0x00,
        endnumeric;
        numeric varid  = SETUP_DATA.WTASBlockedList[10],
          prompt   = STRING_TOKEN(0x027A),
          help     = STRING_TOKEN(0x027B),
          minimum = 0x00,
          maximum = 0xFFFF,
          step    = 1,
          default = 0x00,
        endnumeric;
        numeric varid  = SETUP_DATA.WTASBlockedList[11],
          prompt   = STRING_TOKEN(0x027A),
          help     = STRING_TOKEN(0x027B),
          minimum = 0x00,
          maximum = 0xFFFF,
          step    = 1,
          default = 0x00,
        endnumeric;
        numeric varid  = SETUP_DATA.WTASBlockedList[12],
          prompt   = STRING_TOKEN(0x027A),
          help     = STRING_TOKEN(0x027B),
          minimum = 0x00,
          maximum = 0xFFFF,
          step    = 1,
          default = 0x00,
        endnumeric;
        numeric varid  = SETUP_DATA.WTASBlockedList[13],
          prompt   = STRING_TOKEN(0x027A),
          help     = STRING_TOKEN(0x027B),
          minimum = 0x00,
          maximum = 0xFFFF,
          step    = 1,
          default = 0x00,
        endnumeric;
        numeric varid  = SETUP_DATA.WTASBlockedList[14],
          prompt   = STRING_TOKEN(0x027A),
          help     = STRING_TOKEN(0x027B),
          minimum = 0x00,
          maximum = 0xFFFF,
          step    = 1,
          default = 0x00,
        endnumeric;
        numeric varid  = SETUP_DATA.WTASBlockedList[15],
          prompt   = STRING_TOKEN(0x027A),
          help     = STRING_TOKEN(0x027B),
          minimum = 0x00,
          maximum = 0xFFFF,
          step    = 1,
          default = 0x00,
        endnumeric;
      endif; 
























#line 3301 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\ConnectivitySetup.hfr"
    endif; 

    subtitle text = STRING_TOKEN(0x0002);

    goto 5435,
      prompt = STRING_TOKEN(0x02A7),
      help   = STRING_TOKEN(0x02A8);
  endform;

  
    form formid = 5435,
    title       = STRING_TOKEN(0x02A7);

    oneof varid   = SETUP_DATA.WwanEnable,
      prompt      = STRING_TOKEN(0x02A9),
      help        = STRING_TOKEN(0x02AA),
      option text = STRING_TOKEN(0x0004),               value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x02AB),      value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x02AC),  value = 2, flags = RESET_REQUIRED;
    endoneof;

    suppressif ideqval SETUP_DATA.WwanEnable == 0; 
      oneof varid   = SETUP_DATA.WwanFwFlashDevice,
        prompt      = STRING_TOKEN(0x02C6),
        help        = STRING_TOKEN(0x02C7),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = RESET_REQUIRED;
      endoneof;
      oneof varid   = SETUP_DATA.WirelessCnvConfigDevice,
        prompt      = STRING_TOKEN(0x02C8),
        help        = STRING_TOKEN(0x02C9),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;
    endif; 

    suppressif ideqval SETUP_DATA.WwanEnable == 0;
      oneof varid   = SETUP_DATA.WwanResetWorkaround,
        prompt      = STRING_TOKEN(0x02BE),
        help        = STRING_TOKEN(0x02BF),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;
    endif; 

    
    
    
    suppressif ideqval SETUP_DATA.WwanEnable == 0;
      oneof varid   = SETUP_DATA.WwanFccLock,
        prompt      = STRING_TOKEN(0x02C4),
        help        = STRING_TOKEN(0x02C5),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = RESET_REQUIRED;
      endoneof;
    endif;
    
    
    

    suppressif NOT ideqval SETUP_DATA.WwanEnable == 2; 
      numeric varid = SETUP_DATA.WwanOemSvid,
        prompt   = STRING_TOKEN(0x02C0),
        help     = STRING_TOKEN(0x02C1),
        flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
        minimum  = 0,
        maximum  = 0xFFFF,
        step     = 1,
        default  = 0x1CF8,
      endnumeric;

      numeric varid = SETUP_DATA.WwanSvidTimeout,
        prompt   = STRING_TOKEN(0x02C2),
        help     = STRING_TOKEN(0x02C3),
        flags    = RESET_REQUIRED,
        minimum  = 0,
        maximum  = 0xFFFF,
        step     = 1,
        default  = 0,
      endnumeric;

      
      
      
      subtitle text = STRING_TOKEN(0x02AD);
        numeric varid = SETUP_DATA.WwanTOn2ResDelayMs,
          prompt   = STRING_TOKEN(0x02AE),
          help     = STRING_TOKEN(0x02AF),
          minimum = 0,
          maximum = 0xFFFF,
          step    = 1,
          default = 20,
        endnumeric;

        numeric varid = SETUP_DATA.WwanTOnRes2PerDelayMs,
          prompt   = STRING_TOKEN(0x02B0),
          help     = STRING_TOKEN(0x02B1),
          minimum = 0,
          maximum = 0xFFFF,
          step    = 1,
          default = 80,
        endnumeric;

        numeric varid = SETUP_DATA.WwanTOnPer2PdsDelayMs,
          prompt   = STRING_TOKEN(0x02B2),
          help     = STRING_TOKEN(0x02B3),
          minimum = 0,
          maximum = 0xFFFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SETUP_DATA.WwanTPer2ResDelayMs,
          prompt   = STRING_TOKEN(0x02B4),
          help     = STRING_TOKEN(0x02B5),
          minimum = 0,
          maximum = 0xFFFF,
          step    = 1,
          default = 20,
        endnumeric;

        numeric varid = SETUP_DATA.WwanTRes2OffDelayMs,
          prompt   = STRING_TOKEN(0x02B6),
          help     = STRING_TOKEN(0x02B7),
          minimum = 0,
          maximum = 0xFFFF,
          step    = 1,
          default = 10,
        endnumeric;

        numeric varid = SETUP_DATA.WwanTOffDisDelayMs,
          prompt   = STRING_TOKEN(0x02B8),
          help     = STRING_TOKEN(0x02B9),
          minimum = 0,
          maximum = 0xFFFF,
          step    = 1,
          default = 500,
        endnumeric;

        numeric varid = SETUP_DATA.WwanTResTogDelayMs,
          prompt   = STRING_TOKEN(0x02BA),
          help     = STRING_TOKEN(0x02BB),
          minimum = 0,
          maximum = 0xFFFF,
          step    = 1,
          default = 10,
        endnumeric;

        numeric varid = SETUP_DATA.WwanTRes2PdsDelayMs,
          prompt   = STRING_TOKEN(0x02BC),
          help     = STRING_TOKEN(0x02BD),
          minimum = 0,
          maximum = 0xFFFF,
          step    = 1,
          default = 10,
        endnumeric;
      
      
      
    endif; 

  endform;
#line 472 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\Advanced.vfr"
  #line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\OverClockSetup.hfr"

































  form formid = 4115,
  title     = STRING_TOKEN(0x0852);

  subtitle text = STRING_TOKEN(0x0852);
  subtitle text = STRING_TOKEN(0x0002);

  oneof varid   = CPU_SETUP.OverclockingSupport,
  questionid    = 5492,
    prompt      = STRING_TOKEN(0x0854),
    help        = STRING_TOKEN(0x0855),
    flags       = INTERACTIVE,
    option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    option text = STRING_TOKEN(0x0003), value = 1, flags =  RESET_REQUIRED;
  endoneof;

  suppressif ideqval CPU_SETUP.OverclockingSupport == 0 OR ideqval CPU_SETUP.OverclockingMsrStatus == 0;
    oneof varid   = CPU_SETUP.UnderVoltProtection,
      prompt      = STRING_TOKEN(0x09F6),
      help        = STRING_TOKEN(0x09F7),
      option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003) , value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;
  endif;

  suppressif ideqval SETUP_CPU_FEATURES.PerCoreHtDisableSupported == 0 OR ideqval CPU_SETUP.OverclockingSupport == 0;
    numeric varid = CPU_SETUP.PerCoreHtDisable,
      prompt  = STRING_TOKEN (0x0856),
      help    = STRING_TOKEN (0x0857),
      flags   = RESET_REQUIRED | INTERACTIVE | DISPLAY_UINT_HEX,
      minimum = 0,
      maximum = 0xFF,
      step    = 1,
      default = 0,
    endnumeric;
  endif;

  oneof varid   = PCH_SETUP.WdtEnable,
    prompt      = STRING_TOKEN(0x0858),
    help        = STRING_TOKEN(0x0859),
    option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    option text = STRING_TOKEN(0x0003), value = 1, flags =  RESET_REQUIRED;
  endoneof;

    text
      help  = STRING_TOKEN(0x0851),
      text  = STRING_TOKEN(0x09D4),
      text  = STRING_TOKEN(0x09D5),
      flags = 0,
      key   = 0;

  suppressif ideqval CPU_SETUP.OverclockingSupport == 0;
    suppressif ideqval SETUP_VOLATILE_DATA.MobileOcUnSupport == 1;
        grayoutif ideqval SETUP_DATA.DccClkCtrl == 1;
          numeric varid = CPU_SETUP.CpuBclkOcFrequency,
            prompt    = STRING_TOKEN(0x09D6),
            help      = STRING_TOKEN(0x09D7),
            flags   = RESET_REQUIRED,
            minimum   = 0,
            maximum   = 50000,
            step      = 1,
            default   = 0, 
          endnumeric;
        endif;

      oneof varid   = CPU_SETUP.BclkAdaptiveVoltageEnable,
        prompt      = STRING_TOKEN(0x0978),
        help        = STRING_TOKEN(0x0979),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags =  DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;
    endif;

    suppressif NOT ideqval SETUP_VOLATILE_DATA.PlatformType == 0x1;
      numeric varid = CPU_SETUP.PvdRatioThreshold,
        prompt  = STRING_TOKEN (0x09D8),
        help    = STRING_TOKEN (0x09D9),
        flags   = RESET_REQUIRED,
        minimum = 0,
        maximum = 40,
        step    = 1,
        default = 0,
      endnumeric;
    endif;

      oneof varid   = CPU_SETUP.FllOcModeEn,
        prompt      = STRING_TOKEN(0x09F0),
        help        = STRING_TOKEN(0x09F1),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      suppressif ideqval CPU_SETUP.FllOcModeEn == 0;
        numeric varid = CPU_SETUP.FllOverclockMode,
          prompt  = STRING_TOKEN (0x09F2),
          help    = STRING_TOKEN (0x09F3),
          flags   = RESET_REQUIRED,
          minimum = 0,
          maximum = 3,
          step    = 1,
          default = 0,
        endnumeric;
      endif;

    oneof varid   = CPU_SETUP.SaPllFreqOverride,
      prompt      = STRING_TOKEN(0x08AE),
      help        = STRING_TOKEN(0x08AF),
      option text = STRING_TOKEN(0x08B0), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x08B1), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = CPU_SETUP.TscDisableHwFixup,
      prompt      = STRING_TOKEN(0x08B2),
      help        = STRING_TOKEN(0x08B3),
      option text = STRING_TOKEN(0x0003), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x0004), value = 1, flags = RESET_REQUIRED;
    endoneof;

  endif;

suppressif ideqval CPU_SETUP.OverclockingSupport == 0;

  goto 4116,
  prompt  = STRING_TOKEN(0x085C),
  help    = STRING_TOKEN(0x085D);

  suppressif ideqval CPU_SETUP.AllSmallCoreCount == 0 OR
               ideqval CPU_SETUP.ActiveSmallCoreCount == 0;
    goto 4118,
    prompt  = STRING_TOKEN(0x085F),
    help    = STRING_TOKEN(0x0860);
  endif;

  goto 4353,
  prompt  = STRING_TOKEN(0x0861),
  help    = STRING_TOKEN(0x0862);

  goto 4123,
  prompt  = STRING_TOKEN(0x09B1),
  help    = STRING_TOKEN(0x09B2);

  goto 4354,
  prompt  = STRING_TOKEN(0x09CA),
  help    = STRING_TOKEN(0x09CB);

    goto 5414,
    prompt  = STRING_TOKEN(0x085A),
    help    = STRING_TOKEN(0x085B);

  suppressif ideqval SETUP_VOLATILE_DATA.MobileOcUnSupport == 1;
    goto 4355,
    prompt  = STRING_TOKEN(0x0995),
    help    = STRING_TOKEN(0x0996);
  endif;

  goto 4318,
  prompt  = STRING_TOKEN(0x0962),
  help    = STRING_TOKEN(0x0963);

  goto 4334,
  prompt  = STRING_TOKEN(0x0968),
  help    = STRING_TOKEN(0x0969);
endif;

endform;

   form formid = 4116,
   title = STRING_TOKEN(0x085C);

   subtitle text = STRING_TOKEN(0x085C);
   subtitle text = STRING_TOKEN(0x0002);

    oneof varid   = CPU_SETUP.PerCoreDisableConfiguration,
      questionid  = 5493,
      prompt      = STRING_TOKEN(0x0868),
      help        = STRING_TOKEN(0x0869),
      flags       = INTERACTIVE,
      option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags =  RESET_REQUIRED;
    endoneof;

    suppressif NOT ideqval CPU_SETUP.PerCoreDisableConfiguration == 1;
      goto      4289,
      prompt  = STRING_TOKEN(0x086A),
      help    = STRING_TOKEN(0x086B);
    endif;

    suppressif NOT ideqval SETUP_VOLATILE_DATA.PlatformType == 0x1;
       oneof varid   = CPU_SETUP.CoreRatioExtensionMode,
         prompt      = STRING_TOKEN(0x08AC),
         help        = STRING_TOKEN(0x08AD),
         option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
         option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
       endoneof;
     endif;

     suppressif ideqval CPU_SETUP.CoreRatioExtensionMode == 0x0;
       numeric varid = CPU_SETUP.CoreMaxOcRatio,
         prompt  = STRING_TOKEN (0x08B4),
         help    = STRING_TOKEN (0x08B6),
         flags   = RESET_REQUIRED,
         minimum = 0,
         maximum = 120,
         step    = 1,
         default = 0,
       endnumeric;
     endif;

     suppressif ideqval CPU_SETUP.CoreRatioExtensionMode == 0x1;
       numeric varid = CPU_SETUP.CoreMaxOcRatio,
         prompt  = STRING_TOKEN (0x08B4),
         help    = STRING_TOKEN (0x08B5),
         flags   = RESET_REQUIRED,
         minimum = 0,
         maximum = 85,
         step    = 1,
         default = 0,
       endnumeric;
     endif;

     oneof varid   = CPU_SETUP.PerCoreRatioOverride,
       prompt      = STRING_TOKEN(0x0866),
       help        = STRING_TOKEN(0x0867),
       option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
       option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
     endoneof;

     suppressif ideqval CPU_SETUP.PerCoreRatioOverride == 0x0;
       numeric varid = CPU_SETUP.PerCoreRatio[0],
         prompt  = STRING_TOKEN (0x08B7),
         help    = STRING_TOKEN (0x08B8),
         flags   = RESET_REQUIRED,
         minimum = 0,
         maximum = 120,
         step    = 1,
         default = 0,
       endnumeric;

       suppressif ideqval SETUP_CPU_FEATURES.NumCores < 2 OR
                    ((ideqval CPU_SETUP.ActiveCoreCount < 2) AND
                    (NOT ideqval CPU_SETUP.ActiveCoreCount == 0));
         numeric varid = CPU_SETUP.PerCoreRatio[1],
           prompt  = STRING_TOKEN (0x08B9),
           help    = STRING_TOKEN (0x08BA),
           flags   = RESET_REQUIRED,
           minimum = 0,
           maximum = 120,
           step    = 1,
           default = 0,
         endnumeric;
       endif;

       suppressif ideqval SETUP_CPU_FEATURES.NumCores < 3 OR
                    ((ideqval CPU_SETUP.ActiveCoreCount < 3) AND
                    (NOT ideqval CPU_SETUP.ActiveCoreCount == 0));
         numeric varid = CPU_SETUP.PerCoreRatio[2],
           prompt  = STRING_TOKEN (0x08BB),
           help    = STRING_TOKEN (0x08BC),
           flags   = RESET_REQUIRED,
           minimum = 0,
           maximum = 120,
           step    = 1,
           default = 0,
         endnumeric;
       endif;

       suppressif ideqval SETUP_CPU_FEATURES.NumCores < 4 OR
                    ((ideqval CPU_SETUP.ActiveCoreCount < 4) AND
                    (NOT ideqval CPU_SETUP.ActiveCoreCount == 0));
         numeric varid = CPU_SETUP.PerCoreRatio[3],
           prompt  = STRING_TOKEN (0x08BD),
           help    = STRING_TOKEN (0x08BE),
           flags   = RESET_REQUIRED,
           minimum = 0,
           maximum = 120,
           step    = 1,
           default = 0,
         endnumeric;
       endif;

       suppressif ideqval SETUP_CPU_FEATURES.NumCores < 5 OR
                    ((ideqval CPU_SETUP.ActiveCoreCount < 5) AND
                    (NOT ideqval CPU_SETUP.ActiveCoreCount == 0));
         numeric varid = CPU_SETUP.PerCoreRatio[4],
           prompt  = STRING_TOKEN (0x08BF),
           help    = STRING_TOKEN (0x08C0),
           flags   = RESET_REQUIRED,
           minimum = 0,
           maximum = 120,
           step    = 1,
           default = 0,
         endnumeric;
       endif;

       suppressif ideqval SETUP_CPU_FEATURES.NumCores < 6 OR
                    ((ideqval CPU_SETUP.ActiveCoreCount < 6) AND
                    (NOT ideqval CPU_SETUP.ActiveCoreCount == 0));
         numeric varid = CPU_SETUP.PerCoreRatio[5],
           prompt  = STRING_TOKEN (0x08C1),
           help    = STRING_TOKEN (0x08C2),
           flags   = RESET_REQUIRED,
           minimum = 0,
           maximum = 120,
           step    = 1,
           default = 0,
         endnumeric;
       endif;

       suppressif ideqval SETUP_CPU_FEATURES.NumCores < 7 OR
                    ((ideqval CPU_SETUP.ActiveCoreCount < 7) AND
                    (NOT ideqval CPU_SETUP.ActiveCoreCount == 0));
         numeric varid = CPU_SETUP.PerCoreRatio[6],
           prompt  = STRING_TOKEN (0x08C3),
           help    = STRING_TOKEN (0x08C4),
           flags   = RESET_REQUIRED,
           minimum = 0,
           maximum = 120,
           step    = 1,
           default = 0,
         endnumeric;
       endif;

       suppressif ideqval SETUP_CPU_FEATURES.NumCores < 8 OR
                    ((ideqval CPU_SETUP.ActiveCoreCount < 8) AND
                    (NOT ideqval CPU_SETUP.ActiveCoreCount == 0));
         numeric varid = CPU_SETUP.PerCoreRatio[7],
           prompt  = STRING_TOKEN (0x08C5),
           help    = STRING_TOKEN (0x08C6),
           flags   = RESET_REQUIRED,
           minimum = 0,
           maximum = 120,
           step    = 1,
           default = 0,
         endnumeric;
       endif;

       suppressif ideqval SETUP_CPU_FEATURES.NumSmallCoresCLuster < 1;
         numeric varid = CPU_SETUP.AtomClusterRatio[0],
           prompt  = STRING_TOKEN (0x08C7),
           help    = STRING_TOKEN (0x08C8),
           flags   = RESET_REQUIRED,
           minimum = 0,
           maximum = 120,
           step    = 1,
           default = 0,
         endnumeric;
       endif;

       suppressif ideqval SETUP_CPU_FEATURES.NumSmallCoresCLuster < 2;
         numeric varid = CPU_SETUP.AtomClusterRatio[1],
           prompt  = STRING_TOKEN (0x08C9),
           help    = STRING_TOKEN (0x08CA),
           flags   = RESET_REQUIRED,
           minimum = 0,
           maximum = 120,
           step    = 1,
           default = 0,
         endnumeric;
       endif;

       suppressif ideqval SETUP_CPU_FEATURES.NumSmallCoresCLuster < 3;
         numeric varid = CPU_SETUP.AtomClusterRatio[2],
           prompt  = STRING_TOKEN (0x08CB),
           help    = STRING_TOKEN (0x08CC),
           flags   = RESET_REQUIRED,
           minimum = 0,
           maximum = 120,
           step    = 1,
           default = 0,
         endnumeric;
       endif;

       suppressif ideqval SETUP_CPU_FEATURES.NumSmallCoresCLuster < 4;
         numeric varid = CPU_SETUP.AtomClusterRatio[3],
           prompt  = STRING_TOKEN (0x08CD),
           help    = STRING_TOKEN (0x08CE),
           flags   = RESET_REQUIRED,
           minimum = 0,
           maximum = 120,
           step    = 1,
           default = 0,
         endnumeric;
       endif;
     endif;

     grayoutif ideqval CPU_SETUP.CoreVfPointCount == 0x0;
       oneof varid   = CPU_SETUP.CoreVfPointOffsetMode,
         prompt      = STRING_TOKEN(0x0900),
         help        = STRING_TOKEN(0x0901),
         option text = STRING_TOKEN(0x097C), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
         option text = STRING_TOKEN(0x097D), value = 1, flags = RESET_REQUIRED;
       endoneof;
     endif;

     suppressif ideqval CPU_SETUP.CoreVfPointOffsetMode == 0x1;
       oneof varid   = CPU_SETUP.CoreVoltageMode,
         prompt      = STRING_TOKEN(0x08FE),
         help        = STRING_TOKEN(0x08FF),
         option text = STRING_TOKEN(0x097A), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
         option text = STRING_TOKEN(0x097B), value = 1, flags = RESET_REQUIRED;
       endoneof;

       suppressif ideqval CPU_SETUP.CoreVoltageMode == 0x0;
         numeric varid = CPU_SETUP.CoreVoltageOverride,
           prompt  = STRING_TOKEN (0x0904),
           help    = STRING_TOKEN (0x0905),
           flags   = RESET_REQUIRED,
           minimum = 0,
           maximum = 2000,
           step    = 1,
           default = 0,
         endnumeric;
       endif;

       suppressif ideqval CPU_SETUP.CoreVoltageMode == 0x1;
         numeric varid = CPU_SETUP.CoreExtraTurboVoltage,
           prompt  = STRING_TOKEN (0x0956),
           help    = STRING_TOKEN (0x0957),
           flags   = RESET_REQUIRED,
           minimum = 0,
           maximum = 2000,
           step    = 1,
           default = 0,
         endnumeric;
       endif;
     endif;

     suppressif ideqval CPU_SETUP.CoreVfPointOffsetMode == 0x1;
       oneof varid   = CPU_SETUP.CoreVfConfigScope,
         prompt      = STRING_TOKEN(0x0902),
         help        = STRING_TOKEN(0x0903),
         option text = STRING_TOKEN(0x097E), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
         option text = STRING_TOKEN(0x097F), value = 1, flags = RESET_REQUIRED;
       endoneof;

       suppressif ideqval CPU_SETUP.CoreVfConfigScope == 0x1;
         numeric varid = CPU_SETUP.CoreVoltageOffset,
           prompt  = STRING_TOKEN (0x0906),
           help    = STRING_TOKEN (0x0907),
           flags   = RESET_REQUIRED,
           minimum = 0,
           maximum = 1000,
           step    = 1,
           default = 0,
         endnumeric;

         oneof varid   = CPU_SETUP.CoreVoltageOffsetPrefix,
           prompt      = STRING_TOKEN(0x0980),
           help        = STRING_TOKEN(0x0994),
           option text = STRING_TOKEN(0x02F1),  value = 0, flags =  DEFAULT | MANUFACTURING | RESET_REQUIRED;
           option text = STRING_TOKEN(0x02F2),  value = 1, flags = RESET_REQUIRED;
         endoneof;
       endif;

       suppressif ideqval CPU_SETUP.CoreVfConfigScope == 0x0;
         suppressif ideqval SETUP_CPU_FEATURES.NumCores < 1;
           numeric varid = CPU_SETUP.PerCoreVoltageOffset[0],
             prompt  = STRING_TOKEN (0x0908),
             help    = STRING_TOKEN (0x0909),
             flags   = RESET_REQUIRED,
             minimum = 0,
             maximum = 1000,
             step    = 1,
             default = 0,
           endnumeric;

           oneof varid   = CPU_SETUP.PerCoreVoltageOffsetPrefix[0],
             prompt      = STRING_TOKEN(0x0980),
             help        = STRING_TOKEN(0x0994),
             option text = STRING_TOKEN(0x02F1),  value = 0, flags =  DEFAULT | MANUFACTURING | RESET_REQUIRED;
             option text = STRING_TOKEN(0x02F2),  value = 1, flags = RESET_REQUIRED;
           endoneof;
         endif;

         suppressif ideqval SETUP_CPU_FEATURES.NumCores < 2;
           numeric varid = CPU_SETUP.PerCoreVoltageOffset[1],
             prompt  = STRING_TOKEN (0x090A),
             help    = STRING_TOKEN (0x090B),
             flags   = RESET_REQUIRED,
             minimum = 0,
             maximum = 1000,
             step    = 1,
             default = 0,
           endnumeric;

           oneof varid   = CPU_SETUP.PerCoreVoltageOffsetPrefix[1],
             prompt      = STRING_TOKEN(0x0980),
             help        = STRING_TOKEN(0x0994),
             option text = STRING_TOKEN(0x02F1),  value = 0, flags =  DEFAULT | MANUFACTURING | RESET_REQUIRED;
             option text = STRING_TOKEN(0x02F2),  value = 1, flags = RESET_REQUIRED;
           endoneof;
         endif;

         suppressif ideqval SETUP_CPU_FEATURES.NumCores < 3;
           numeric varid = CPU_SETUP.PerCoreVoltageOffset[2],
             prompt  = STRING_TOKEN (0x090C),
             help    = STRING_TOKEN (0x090D),
             flags   = RESET_REQUIRED,
             minimum = 0,
             maximum = 1000,
             step    = 1,
             default = 0,
           endnumeric;

           oneof varid   = CPU_SETUP.PerCoreVoltageOffsetPrefix[2],
             prompt      = STRING_TOKEN(0x0980),
             help        = STRING_TOKEN(0x0994),
             option text = STRING_TOKEN(0x02F1),  value = 0, flags =  DEFAULT | MANUFACTURING | RESET_REQUIRED;
             option text = STRING_TOKEN(0x02F2),  value = 1, flags = RESET_REQUIRED;
           endoneof;
         endif;

         suppressif ideqval SETUP_CPU_FEATURES.NumCores < 4;
           numeric varid = CPU_SETUP.PerCoreVoltageOffset[3],
             prompt  = STRING_TOKEN (0x090E),
             help    = STRING_TOKEN (0x090F),
             flags   = RESET_REQUIRED,
             minimum = 0,
             maximum = 1000,
             step    = 1,
             default = 0,
           endnumeric;

           oneof varid   = CPU_SETUP.PerCoreVoltageOffsetPrefix[3],
             prompt      = STRING_TOKEN(0x0980),
             help        = STRING_TOKEN(0x0994),
             option text = STRING_TOKEN(0x02F1),  value = 0, flags =  DEFAULT | MANUFACTURING | RESET_REQUIRED;
             option text = STRING_TOKEN(0x02F2),  value = 1, flags = RESET_REQUIRED;
           endoneof;
         endif;

         suppressif ideqval SETUP_CPU_FEATURES.NumCores < 5;
           numeric varid = CPU_SETUP.PerCoreVoltageOffset[4],
             prompt  = STRING_TOKEN (0x0910),
             help    = STRING_TOKEN (0x0911),
             flags   = RESET_REQUIRED,
             minimum = 0,
             maximum = 1000,
             step    = 1,
             default = 0,
           endnumeric;

           oneof varid   = CPU_SETUP.PerCoreVoltageOffsetPrefix[4],
             prompt      = STRING_TOKEN(0x0980),
             help        = STRING_TOKEN(0x0994),
             option text = STRING_TOKEN(0x02F1),  value = 0, flags =  DEFAULT | MANUFACTURING | RESET_REQUIRED;
             option text = STRING_TOKEN(0x02F2),  value = 1, flags = RESET_REQUIRED;
           endoneof;
         endif;

         suppressif ideqval SETUP_CPU_FEATURES.NumCores < 6;
           numeric varid = CPU_SETUP.PerCoreVoltageOffset[5],
             prompt  = STRING_TOKEN (0x0912),
             help    = STRING_TOKEN (0x0913),
             flags   = RESET_REQUIRED,
             minimum = 0,
             maximum = 1000,
             step    = 1,
             default = 0,
           endnumeric;

           oneof varid   = CPU_SETUP.PerCoreVoltageOffsetPrefix[5],
             prompt      = STRING_TOKEN(0x0980),
             help        = STRING_TOKEN(0x0994),
             option text = STRING_TOKEN(0x02F1),  value = 0, flags =  DEFAULT | MANUFACTURING | RESET_REQUIRED;
             option text = STRING_TOKEN(0x02F2),  value = 1, flags = RESET_REQUIRED;
           endoneof;
         endif;

         suppressif ideqval SETUP_CPU_FEATURES.NumCores < 7;
           numeric varid = CPU_SETUP.PerCoreVoltageOffset[6],
             prompt  = STRING_TOKEN (0x0914),
             help    = STRING_TOKEN (0x0915),
             flags   = RESET_REQUIRED,
             minimum = 0,
             maximum = 1000,
             step    = 1,
             default = 0,
           endnumeric;

           oneof varid   = CPU_SETUP.PerCoreVoltageOffsetPrefix[6],
             prompt      = STRING_TOKEN(0x0980),
             help        = STRING_TOKEN(0x0994),
             option text = STRING_TOKEN(0x02F1),  value = 0, flags =  DEFAULT | MANUFACTURING | RESET_REQUIRED;
             option text = STRING_TOKEN(0x02F2),  value = 1, flags = RESET_REQUIRED;
           endoneof;
         endif;

         suppressif ideqval SETUP_CPU_FEATURES.NumCores < 8;
           numeric varid = CPU_SETUP.PerCoreVoltageOffset[7],
             prompt  = STRING_TOKEN (0x0916),
             help    = STRING_TOKEN (0x0917),
             flags   = RESET_REQUIRED,
             minimum = 0,
             maximum = 1000,
             step    = 1,
             default = 0,
           endnumeric;

           oneof varid   = CPU_SETUP.PerCoreVoltageOffsetPrefix[7],
             prompt      = STRING_TOKEN(0x0980),
             help        = STRING_TOKEN(0x0994),
             option text = STRING_TOKEN(0x02F1),  value = 0, flags =  DEFAULT | MANUFACTURING | RESET_REQUIRED;
             option text = STRING_TOKEN(0x02F2),  value = 1, flags = RESET_REQUIRED;
           endoneof;
         endif;

         suppressif ideqval SETUP_CPU_FEATURES.NumSmallCoresCLuster < 1;
           numeric varid = CPU_SETUP.PerAtomClusterVoltageOffset[0],
             prompt  = STRING_TOKEN (0x08D8),
             help    = STRING_TOKEN (0x08D9),
             flags   = RESET_REQUIRED,
             minimum = 0,
             maximum = 1000,
             step    = 1,
             default = 0,
           endnumeric;

           oneof varid   = CPU_SETUP.PerAtomClusterVoltageOffsetPrefix[0],
             prompt      = STRING_TOKEN(0x0980),
             help        = STRING_TOKEN(0x0994),
             option text = STRING_TOKEN(0x02F1),  value = 0, flags =  DEFAULT | MANUFACTURING | RESET_REQUIRED;
             option text = STRING_TOKEN(0x02F2),  value = 1, flags = RESET_REQUIRED;
           endoneof;
         endif;

         suppressif ideqval SETUP_CPU_FEATURES.NumSmallCoresCLuster < 2;
           numeric varid = CPU_SETUP.PerAtomClusterVoltageOffset[1],
             prompt  = STRING_TOKEN (0x08DA),
             help    = STRING_TOKEN (0x08DB),
             flags   = RESET_REQUIRED,
             minimum = 0,
             maximum = 1000,
             step    = 1,
             default = 0,
           endnumeric;

           oneof varid   = CPU_SETUP.PerAtomClusterVoltageOffsetPrefix[1],
             prompt      = STRING_TOKEN(0x0980),
             help        = STRING_TOKEN(0x0994),
             option text = STRING_TOKEN(0x02F1),  value = 0, flags =  DEFAULT | MANUFACTURING | RESET_REQUIRED;
             option text = STRING_TOKEN(0x02F2),  value = 1, flags = RESET_REQUIRED;
           endoneof;
         endif;

         suppressif ideqval SETUP_CPU_FEATURES.NumSmallCoresCLuster < 3;
           numeric varid = CPU_SETUP.PerAtomClusterVoltageOffset[2],
             prompt  = STRING_TOKEN (0x08DC),
             help    = STRING_TOKEN (0x08DD),
             flags   = RESET_REQUIRED,
             minimum = 0,
             maximum = 1000,
             step    = 1,
             default = 0,
           endnumeric;

           oneof varid   = CPU_SETUP.PerAtomClusterVoltageOffsetPrefix[2],
             prompt      = STRING_TOKEN(0x0980),
             help        = STRING_TOKEN(0x0994),
             option text = STRING_TOKEN(0x02F1),  value = 0, flags =  DEFAULT | MANUFACTURING | RESET_REQUIRED;
             option text = STRING_TOKEN(0x02F2),  value = 1, flags = RESET_REQUIRED;
           endoneof;
         endif;

         suppressif ideqval SETUP_CPU_FEATURES.NumSmallCoresCLuster < 4;
           numeric varid = CPU_SETUP.PerAtomClusterVoltageOffset[3],
             prompt  = STRING_TOKEN (0x08DE),
             help    = STRING_TOKEN (0x08DF),
             flags   = RESET_REQUIRED,
             minimum = 0,
             maximum = 1000,
             step    = 1,
             default = 0,
           endnumeric;

           oneof varid   = CPU_SETUP.PerAtomClusterVoltageOffsetPrefix[3],
             prompt      = STRING_TOKEN(0x0980),
             help        = STRING_TOKEN(0x0994),
             option text = STRING_TOKEN(0x02F1),  value = 0, flags =  DEFAULT | MANUFACTURING | RESET_REQUIRED;
             option text = STRING_TOKEN(0x02F2),  value = 1, flags = RESET_REQUIRED;
           endoneof;
         endif;
       endif;
     endif;

     suppressif ideqval CPU_SETUP.CoreVfPointOffsetMode == 0x0;
       suppressif ideqval CPU_SETUP.CoreVfPointCount < 0x1;
         numeric varid = CPU_SETUP.CoreVfPointOffset[0],
           prompt  = STRING_TOKEN (0x0918),
           help    = STRING_TOKEN (0x0919),
           flags   = RESET_REQUIRED,
           minimum = 0,
           maximum = 1000,
           step    = 1,
           default = 0,
         endnumeric;

         oneof varid   = CPU_SETUP.CoreVfPointOffsetPrefix[0],
           prompt      = STRING_TOKEN(0x0981),
           help        = STRING_TOKEN(0x0994),
           option text = STRING_TOKEN(0x02F1),  value = 0, flags =  DEFAULT | MANUFACTURING | RESET_REQUIRED;
           option text = STRING_TOKEN(0x02F2),  value = 1, flags = RESET_REQUIRED;
         endoneof;

         text
           help  = STRING_TOKEN(0x0851),
           text  = STRING_TOKEN(0x08E0),
           text  = STRING_TOKEN(0x08E1),
           flags = 0,
           key   = 0;
       endif;

       suppressif ideqval CPU_SETUP.CoreVfPointCount < 0x2;
         numeric varid = CPU_SETUP.CoreVfPointOffset[1],
           prompt  = STRING_TOKEN (0x091A),
           help    = STRING_TOKEN (0x091B),
           flags   = RESET_REQUIRED,
           minimum = 0,
           maximum = 1000,
           step    = 1,
           default = 0,
         endnumeric;

         oneof varid   = CPU_SETUP.CoreVfPointOffsetPrefix[1],
           prompt      = STRING_TOKEN(0x0982),
           help        = STRING_TOKEN(0x0994),
           option text = STRING_TOKEN(0x02F1),  value = 0, flags =  DEFAULT | MANUFACTURING | RESET_REQUIRED;
           option text = STRING_TOKEN(0x02F2),  value = 1, flags = RESET_REQUIRED;
         endoneof;

         text
           help  = STRING_TOKEN(0x0851),
           text  = STRING_TOKEN(0x08E2),
           text  = STRING_TOKEN(0x08E3),
           flags = 0,
           key   = 0;
       endif;

       suppressif ideqval CPU_SETUP.CoreVfPointCount < 0x3;
         numeric varid = CPU_SETUP.CoreVfPointOffset[2],
           prompt  = STRING_TOKEN (0x091C),
           help    = STRING_TOKEN (0x091D),
           flags   = RESET_REQUIRED,
           minimum = 0,
           maximum = 1000,
           step    = 1,
           default = 0,
         endnumeric;

         oneof varid   = CPU_SETUP.CoreVfPointOffsetPrefix[2],
           prompt      = STRING_TOKEN(0x0983),
           help        = STRING_TOKEN(0x0994),
           option text = STRING_TOKEN(0x02F1),  value = 0, flags =  DEFAULT | MANUFACTURING | RESET_REQUIRED;
           option text = STRING_TOKEN(0x02F2),  value = 1, flags = RESET_REQUIRED;
         endoneof;

         text
           help  = STRING_TOKEN(0x0851),
           text  = STRING_TOKEN(0x08E4),
           text  = STRING_TOKEN(0x08E5),
           flags = 0,
           key   = 0;
       endif;

       suppressif ideqval CPU_SETUP.CoreVfPointCount < 0x4;
         numeric varid = CPU_SETUP.CoreVfPointOffset[3],
           prompt  = STRING_TOKEN (0x091E),
           help    = STRING_TOKEN (0x091F),
           flags   = RESET_REQUIRED,
           minimum = 0,
           maximum = 1000,
           step    = 1,
           default = 0,
         endnumeric;

         oneof varid   = CPU_SETUP.CoreVfPointOffsetPrefix[3],
           prompt      = STRING_TOKEN(0x0984),
           help        = STRING_TOKEN(0x0994),
           option text = STRING_TOKEN(0x02F1),  value = 0, flags =  DEFAULT | MANUFACTURING | RESET_REQUIRED;
           option text = STRING_TOKEN(0x02F2),  value = 1, flags = RESET_REQUIRED;
         endoneof;

         text
           help  = STRING_TOKEN(0x0851),
           text  = STRING_TOKEN(0x08E6),
           text  = STRING_TOKEN(0x08E7),
           flags = 0,
           key   = 0;
       endif;

       suppressif ideqval CPU_SETUP.CoreVfPointCount < 0x5;
         numeric varid = CPU_SETUP.CoreVfPointOffset[4],
           prompt  = STRING_TOKEN (0x0920),
           help    = STRING_TOKEN (0x0921),
           flags   = RESET_REQUIRED,
           minimum = 0,
           maximum = 1000,
           step    = 1,
           default = 0,
         endnumeric;

         oneof varid   = CPU_SETUP.CoreVfPointOffsetPrefix[4],
           prompt      = STRING_TOKEN(0x0985),
           help        = STRING_TOKEN(0x0994),
           option text = STRING_TOKEN(0x02F1),  value = 0, flags =  DEFAULT | MANUFACTURING | RESET_REQUIRED;
           option text = STRING_TOKEN(0x02F2),  value = 1, flags = RESET_REQUIRED;
         endoneof;

         text
           help  = STRING_TOKEN(0x0851),
           text  = STRING_TOKEN(0x08E8),
           text  = STRING_TOKEN(0x08E9),
           flags = 0,
           key   = 0;
       endif;

       suppressif ideqval CPU_SETUP.CoreVfPointCount < 0x6;
         numeric varid = CPU_SETUP.CoreVfPointOffset[5],
           prompt  = STRING_TOKEN (0x0922),
           help    = STRING_TOKEN (0x0923),
           flags   = RESET_REQUIRED,
           minimum = 0,
           maximum = 1000,
           step    = 1,
           default = 0,
         endnumeric;

         oneof varid   = CPU_SETUP.CoreVfPointOffsetPrefix[5],
           prompt      = STRING_TOKEN(0x0986),
           help        = STRING_TOKEN(0x0994),
           option text = STRING_TOKEN(0x02F1),  value = 0, flags =  DEFAULT | MANUFACTURING | RESET_REQUIRED;
           option text = STRING_TOKEN(0x02F2),  value = 1, flags = RESET_REQUIRED;
         endoneof;

         text
           help  = STRING_TOKEN(0x0851),
           text  = STRING_TOKEN(0x08EA),
           text  = STRING_TOKEN(0x08EB),
           flags = 0,
           key   = 0;
       endif;

       suppressif ideqval CPU_SETUP.CoreVfPointCount < 0x7;
         numeric varid = CPU_SETUP.CoreVfPointOffset[6],
           prompt  = STRING_TOKEN (0x0924),
           help    = STRING_TOKEN (0x0925),
           flags   = RESET_REQUIRED,
           minimum = 0,
           maximum = 1000,
           step    = 1,
           default = 0,
         endnumeric;

         oneof varid   = CPU_SETUP.CoreVfPointOffsetPrefix[6],
           prompt      = STRING_TOKEN(0x0987),
           help        = STRING_TOKEN(0x0994),
           option text = STRING_TOKEN(0x02F1),  value = 0, flags =  DEFAULT | MANUFACTURING | RESET_REQUIRED;
           option text = STRING_TOKEN(0x02F2),  value = 1, flags = RESET_REQUIRED;
         endoneof;

         text
           help  = STRING_TOKEN(0x0851),
           text  = STRING_TOKEN(0x08EC),
           text  = STRING_TOKEN(0x08ED),
           flags = 0,
           key   = 0;
       endif;

       suppressif ideqval CPU_SETUP.CoreVfPointCount < 0x8;
         numeric varid = CPU_SETUP.CoreVfPointOffset[7],
           prompt  = STRING_TOKEN (0x0926),
           help    = STRING_TOKEN (0x0927),
           flags   = RESET_REQUIRED,
           minimum = 0,
           maximum = 1000,
           step    = 1,
           default = 0,
         endnumeric;

         oneof varid   = CPU_SETUP.CoreVfPointOffsetPrefix[7],
           prompt      = STRING_TOKEN(0x0988),
           help        = STRING_TOKEN(0x0994),
           option text = STRING_TOKEN(0x02F1),  value = 0, flags =  DEFAULT | MANUFACTURING | RESET_REQUIRED;
           option text = STRING_TOKEN(0x02F2),  value = 1, flags = RESET_REQUIRED;
         endoneof;

         text
           help  = STRING_TOKEN(0x0851),
           text  = STRING_TOKEN(0x08EE),
           text  = STRING_TOKEN(0x08EF),
           flags = 0,
           key   = 0;
       endif;

       suppressif ideqval CPU_SETUP.CoreVfPointCount < 0x9;
         numeric varid = CPU_SETUP.CoreVfPointOffset[8],
           prompt  = STRING_TOKEN (0x0928),
           help    = STRING_TOKEN (0x0929),
           flags   = RESET_REQUIRED,
           minimum = 0,
           maximum = 1000,
           step    = 1,
           default = 0,
         endnumeric;

         oneof varid   = CPU_SETUP.CoreVfPointOffsetPrefix[8],
           prompt      = STRING_TOKEN(0x0989),
           help        = STRING_TOKEN(0x0994),
           option text = STRING_TOKEN(0x02F1),  value = 0, flags =  DEFAULT | MANUFACTURING | RESET_REQUIRED;
           option text = STRING_TOKEN(0x02F2),  value = 1, flags = RESET_REQUIRED;
         endoneof;

         text
           help  = STRING_TOKEN(0x0851),
           text  = STRING_TOKEN(0x08F0),
           text  = STRING_TOKEN(0x08F1),
           flags = 0,
           key   = 0;
       endif;

       suppressif ideqval CPU_SETUP.CoreVfPointCount < 0xA;
         numeric varid = CPU_SETUP.CoreVfPointOffset[9],
           prompt  = STRING_TOKEN (0x092A),
           help    = STRING_TOKEN (0x092B),
           flags   = RESET_REQUIRED,
           minimum = 0,
           maximum = 1000,
           step    = 1,
           default = 0,
         endnumeric;

         oneof varid   = CPU_SETUP.CoreVfPointOffsetPrefix[9],
           prompt      = STRING_TOKEN(0x098A),
           help        = STRING_TOKEN(0x0994),
           option text = STRING_TOKEN(0x02F1),  value = 0, flags =  DEFAULT | MANUFACTURING | RESET_REQUIRED;
           option text = STRING_TOKEN(0x02F2),  value = 1, flags = RESET_REQUIRED;
         endoneof;

         text
           help  = STRING_TOKEN(0x0851),
           text  = STRING_TOKEN(0x08F2),
           text  = STRING_TOKEN(0x08F3),
           flags = 0,
           key   = 0;
       endif;

       suppressif ideqval CPU_SETUP.CoreVfPointCount < 0xB;
         numeric varid = CPU_SETUP.CoreVfPointOffset[10],
           prompt  = STRING_TOKEN (0x092C),
           help    = STRING_TOKEN (0x092D),
           flags   = RESET_REQUIRED,
           minimum = 0,
           maximum = 1000,
           step    = 1,
           default = 0,
         endnumeric;

         oneof varid   = CPU_SETUP.CoreVfPointOffsetPrefix[10],
           prompt      = STRING_TOKEN(0x098B),
           help        = STRING_TOKEN(0x0994),
           option text = STRING_TOKEN(0x02F1),  value = 0, flags =  DEFAULT | MANUFACTURING | RESET_REQUIRED;
           option text = STRING_TOKEN(0x02F2),  value = 1, flags = RESET_REQUIRED;
         endoneof;

         text
           help  = STRING_TOKEN(0x0851),
           text  = STRING_TOKEN(0x08F4),
           text  = STRING_TOKEN(0x08F5),
           flags = 0,
           key   = 0;
       endif;

       suppressif ideqval CPU_SETUP.CoreVfPointCount < 0xC;
         numeric varid = CPU_SETUP.CoreVfPointOffset[11],
           prompt  = STRING_TOKEN (0x092E),
           help    = STRING_TOKEN (0x092F),
           flags   = RESET_REQUIRED,
           minimum = 0,
           maximum = 1000,
           step    = 1,
           default = 0,
         endnumeric;

         oneof varid   = CPU_SETUP.CoreVfPointOffsetPrefix[11],
           prompt      = STRING_TOKEN(0x098C),
           help        = STRING_TOKEN(0x0994),
           option text = STRING_TOKEN(0x02F1),  value = 0, flags =  DEFAULT | MANUFACTURING | RESET_REQUIRED;
           option text = STRING_TOKEN(0x02F2),  value = 1, flags = RESET_REQUIRED;
         endoneof;

         text
           help  = STRING_TOKEN(0x0851),
           text  = STRING_TOKEN(0x08F6),
           text  = STRING_TOKEN(0x08F7),
           flags = 0,
           key   = 0;
       endif;

       suppressif ideqval CPU_SETUP.CoreVfPointCount < 0xD;
         numeric varid = CPU_SETUP.CoreVfPointOffset[12],
           prompt  = STRING_TOKEN (0x0930),
           help    = STRING_TOKEN (0x0931),
           flags   = RESET_REQUIRED,
           minimum = 0,
           maximum = 1000,
           step    = 1,
           default = 0,
         endnumeric;

         oneof varid   = CPU_SETUP.CoreVfPointOffsetPrefix[12],
           prompt      = STRING_TOKEN(0x098D),
           help        = STRING_TOKEN(0x0994),
           option text = STRING_TOKEN(0x02F1),  value = 0, flags =  DEFAULT | MANUFACTURING | RESET_REQUIRED;
           option text = STRING_TOKEN(0x02F2),  value = 1, flags = RESET_REQUIRED;
         endoneof;

         text
           help  = STRING_TOKEN(0x0851),
           text  = STRING_TOKEN(0x08F8),
           text  = STRING_TOKEN(0x08F9),
           flags = 0,
           key   = 0;
       endif;

       suppressif ideqval CPU_SETUP.CoreVfPointCount < 0xE;
         numeric varid = CPU_SETUP.CoreVfPointOffset[13],
           prompt  = STRING_TOKEN (0x0932),
           help    = STRING_TOKEN (0x0933),
           flags   = RESET_REQUIRED,
           minimum = 0,
           maximum = 1000,
           step    = 1,
           default = 0,
         endnumeric;

         oneof varid   = CPU_SETUP.CoreVfPointOffsetPrefix[13],
           prompt      = STRING_TOKEN(0x098E),
           help        = STRING_TOKEN(0x0994),
           option text = STRING_TOKEN(0x02F1),  value = 0, flags =  DEFAULT | MANUFACTURING | RESET_REQUIRED;
           option text = STRING_TOKEN(0x02F2),  value = 1, flags = RESET_REQUIRED;
         endoneof;

         text
           help  = STRING_TOKEN(0x0851),
           text  = STRING_TOKEN(0x08FA),
           text  = STRING_TOKEN(0x08FB),
           flags = 0,
           key   = 0;
       endif;

       suppressif ideqval CPU_SETUP.CoreVfPointCount < 0xF;
         numeric varid = CPU_SETUP.CoreVfPointOffset[14],
           prompt  = STRING_TOKEN (0x0934),
           help    = STRING_TOKEN (0x0935),
           flags   = RESET_REQUIRED,
           minimum = 0,
           maximum = 1000,
           step    = 1,
           default = 0,
         endnumeric;

         oneof varid   = CPU_SETUP.CoreVfPointOffsetPrefix[14],
           prompt      = STRING_TOKEN(0x098F),
           help        = STRING_TOKEN(0x0994),
           option text = STRING_TOKEN(0x02F1),  value = 0, flags =  DEFAULT | MANUFACTURING | RESET_REQUIRED;
           option text = STRING_TOKEN(0x02F2),  value = 1, flags = RESET_REQUIRED;
         endoneof;

         text
           help  = STRING_TOKEN(0x0851),
           text  = STRING_TOKEN(0x08FC),
           text  = STRING_TOKEN(0x08FD),
           flags = 0,
           key   = 0;
       endif;
     endif;

      subtitle text = STRING_TOKEN(0x0002);
        numeric varid = CPU_SETUP.Avx2RatioOffset,
          prompt  = STRING_TOKEN (0x0958),
          help    = STRING_TOKEN (0x0959),
          flags   = RESET_REQUIRED,
          minimum = 0,
          maximum = 31,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = CPU_SETUP.Avx2VoltageScaleFactor,
          prompt  = STRING_TOKEN (0x095A),
          help    = STRING_TOKEN (0x095B),
          flags   = RESET_REQUIRED,
          minimum = 0,
          maximum = 200,
          step    = 1,
          default = 100,
        endnumeric;

      subtitle text = STRING_TOKEN(0x0002);
        numeric varid = CPU_SETUP.TjMaxOffset,
          prompt  = STRING_TOKEN (0x095C),
          help    = STRING_TOKEN (0x095D),
          flags   = RESET_REQUIRED,
          key     = 5041, 
          minimum = 0,
          maximum = 63,
          step    = 1,
          default = 0,
        endnumeric;

   subtitle text = STRING_TOKEN(0x0002);
   subtitle text = STRING_TOKEN(0x085E);

     oneof varid   = CPU_SETUP.TvbRatioClipping,
       prompt      = STRING_TOKEN(0x095E),
       help        = STRING_TOKEN(0x095F),
       option text = STRING_TOKEN(0x0004),  value = 0, flags =  RESET_REQUIRED;
       option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING |RESET_REQUIRED;
     endoneof;

     suppressif ideqval CPU_SETUP.TvbRatioClipping == 0x0;
       numeric varid = CPU_SETUP.TvbDownBinsTempThreshold0,
          prompt  = STRING_TOKEN (0x09E8),
          help    = STRING_TOKEN (0x09E9),
          flags   = RESET_REQUIRED,
          minimum = 0,
          maximum = 10,
          step    = 1,
          default = 1,
       endnumeric;

       numeric varid = CPU_SETUP.TvbTempThreshold0,
          prompt  = STRING_TOKEN (0x09EC),
          help    = STRING_TOKEN (0x09ED),
          flags   = RESET_REQUIRED,
          minimum = 0,
          maximum = 100,
          step    = 1,
          default = 70,
       endnumeric;

       numeric varid = CPU_SETUP.TvbTempThreshold1,
          prompt  = STRING_TOKEN (0x09EE),
          help    = STRING_TOKEN (0x09EF),
          flags   = RESET_REQUIRED,
          minimum = 0,
          maximum = 100,
          step    = 1,
          default = 100,
       endnumeric;

       numeric varid = CPU_SETUP.TvbDownBinsTempThreshold1,
          prompt  = STRING_TOKEN (0x09EA),
          help    = STRING_TOKEN (0x09EB),
          flags   = RESET_REQUIRED,
          minimum = 0,
          maximum = 10,
          step    = 1,
          default = 2,
       endnumeric;
     endif;

     oneof varid   = CPU_SETUP.TvbVoltageOptimization,
       prompt      = STRING_TOKEN(0x0960),
       help        = STRING_TOKEN(0x0961),
       option text = STRING_TOKEN(0x0004),  value = 0, flags =  RESET_REQUIRED;
       option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
     endoneof;

     oneof varid   = CPU_SETUP.Etvb,
       prompt      = STRING_TOKEN(0x09F4),
       help        = STRING_TOKEN(0x09F5),
       option text = STRING_TOKEN(0x0004),  value = 0, flags =  RESET_REQUIRED;
       option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
     endoneof;

     suppressif ideqval CPU_SETUP.FlexOverrideEnable == 0x0 OR ideqval CPU_SETUP.BusSpeedEnable == 0x0;
         grayoutif TRUE; oneof varid = SETUP_DATA.InteractiveText, questionid = 4122, prompt = STRING_TOKEN(0x0863), help = STRING_TOKEN(0x0865), option text = STRING_TOKEN(0x0864), value = 0, flags = INTERACTIVE | DEFAULT; refresh interval = 1 endoneof; endif;
     endif;
   endform;

   form formid = 4118,
   title = STRING_TOKEN(0x085F);

   subtitle text = STRING_TOKEN(0x085F);
   subtitle text = STRING_TOKEN(0x0002);

     oneof varid   = CPU_SETUP.AtomL2VoltageMode,
       prompt      = STRING_TOKEN(0x08CF),
       help        = STRING_TOKEN(0x08D0),
       option text = STRING_TOKEN(0x097A), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
       option text = STRING_TOKEN(0x097B), value = 1, flags = RESET_REQUIRED;
     endoneof;

     suppressif ideqval CPU_SETUP.AtomL2VoltageMode == 0x0;
       numeric varid = CPU_SETUP.AtomL2VoltageOverride,
         prompt  = STRING_TOKEN (0x08D1),
         help    = STRING_TOKEN (0x08D2),
         flags   = RESET_REQUIRED,
         minimum = 0,
         maximum = 2000,
         step    = 1,
         default = 0,
       endnumeric;
     endif;

     suppressif ideqval CPU_SETUP.AtomL2VoltageMode == 0x1;
       numeric varid = CPU_SETUP.AtomL2ExtraTurboVoltage,
         prompt  = STRING_TOKEN (0x08D5),
         help    = STRING_TOKEN (0x08D6),
         flags   = RESET_REQUIRED,
         minimum = 0,
         maximum = 2000,
         step    = 1,
         default = 0,
       endnumeric;
     endif;

       numeric varid = CPU_SETUP.AtomL2VoltageOffset,
         prompt  = STRING_TOKEN (0x08D3),
         help    = STRING_TOKEN (0x08D4),
         flags   = RESET_REQUIRED,
         minimum = 0,
         maximum = 1000,
         step    = 1,
         default = 0,
       endnumeric;

       oneof varid   = CPU_SETUP.AtomL2VoltageOffsetPrefix,
         prompt      = STRING_TOKEN(0x08D7),
         help        = STRING_TOKEN(0x0994),
         option text = STRING_TOKEN(0x02F1),  value = 0, flags =  DEFAULT | MANUFACTURING | RESET_REQUIRED;
         option text = STRING_TOKEN(0x02F2),  value = 1, flags = RESET_REQUIRED;
       endoneof;

   endform;

   form formid = 4353,
   title = STRING_TOKEN(0x0861);
   
   
   

   subtitle text = STRING_TOKEN(0x0861);
   subtitle text = STRING_TOKEN(0x0002);

     numeric varid = CPU_SETUP.RingMaxOcRatio,
       prompt  = STRING_TOKEN (0x0945),
       help    = STRING_TOKEN (0x0946),
       flags   = RESET_REQUIRED | INTERACTIVE,
       key     = 4380,
       minimum = 0,
       maximum = 85,
       step    = 1,
       default = 0,
     endnumeric;

     grayoutif ideqval CPU_SETUP.RingVfPointCount == 0x0;
       oneof varid   = CPU_SETUP.RingVfPointOffsetMode,
         prompt      = STRING_TOKEN(0x0900),
         help        = STRING_TOKEN(0x0901),
         option text = STRING_TOKEN(0x097C), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
         option text = STRING_TOKEN(0x097D), value = 1, flags = RESET_REQUIRED;
       endoneof;
     endif;

     suppressif ideqval CPU_SETUP.RingVfPointOffsetMode == 0x1;
       oneof varid   = CPU_SETUP.RingVoltageMode,
         prompt      = STRING_TOKEN(0x0947),
         help        = STRING_TOKEN(0x0948),
         option text = STRING_TOKEN(0x097A), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
         option text = STRING_TOKEN(0x097B), value = 1, flags = RESET_REQUIRED;
       endoneof;

       suppressif ideqval CPU_SETUP.RingVoltageMode == 0x0;
         numeric varid = CPU_SETUP.RingVoltageOverride,
           prompt  = STRING_TOKEN (0x0949),
           help    = STRING_TOKEN (0x094A),
           flags   = RESET_REQUIRED,
           minimum = 0,
           maximum = 2000,
           step    = 1,
           default = 0,
         endnumeric;
       endif;

       suppressif ideqval CPU_SETUP.RingVoltageMode == 0x1;
         numeric varid = CPU_SETUP.RingExtraTurboVoltage,
           prompt  = STRING_TOKEN (0x094D),
           help    = STRING_TOKEN (0x094E),
           flags   = RESET_REQUIRED,
           minimum = 0,
           maximum = 2000,
           step    = 1,
           default = 0,
         endnumeric;
       endif;

       numeric varid = CPU_SETUP.RingVoltageOffset,
         prompt  = STRING_TOKEN (0x094B),
         help    = STRING_TOKEN (0x094C),
         flags   = RESET_REQUIRED,
         minimum = 0,
         maximum = 1000,
         step    = 1,
         default = 0,
       endnumeric;

       oneof varid   = CPU_SETUP.RingVoltageOffsetPrefix,
         prompt      = STRING_TOKEN(0x0990),
         help        = STRING_TOKEN(0x0994),
         option text = STRING_TOKEN(0x02F1),  value = 0, flags =  DEFAULT | MANUFACTURING | RESET_REQUIRED;
         option text = STRING_TOKEN(0x02F2),  value = 1, flags = RESET_REQUIRED;
       endoneof;
     endif;

     suppressif ideqval CPU_SETUP.RingVfPointOffsetMode == 0x0;
       suppressif ideqval CPU_SETUP.RingVfPointCount < 0x1;
         numeric varid = CPU_SETUP.RingVfPointOffset[0],
           prompt  = STRING_TOKEN (0x0918),
           help    = STRING_TOKEN (0x0919),
           flags   = RESET_REQUIRED,
           minimum = 0,
           maximum = 1000,
           step    = 1,
           default = 0,
         endnumeric;

         oneof varid   = CPU_SETUP.RingVfPointOffsetPrefix[0],
           prompt      = STRING_TOKEN(0x0981),
           help        = STRING_TOKEN(0x0994),
           option text = STRING_TOKEN(0x02F1),  value = 0, flags =  DEFAULT | MANUFACTURING | RESET_REQUIRED;
           option text = STRING_TOKEN(0x02F2),  value = 1, flags = RESET_REQUIRED;
         endoneof;

         text
           help  = STRING_TOKEN(0x0851),
           text  = STRING_TOKEN(0x08E0),
           text  = STRING_TOKEN(0x0936),
           flags = 0,
           key   = 0;
       endif;

       suppressif ideqval CPU_SETUP.RingVfPointCount < 0x2;
         numeric varid = CPU_SETUP.RingVfPointOffset[1],
           prompt  = STRING_TOKEN (0x091A),
           help    = STRING_TOKEN (0x091B),
           flags   = RESET_REQUIRED,
           minimum = 0,
           maximum = 1000,
           step    = 1,
           default = 0,
         endnumeric;

         oneof varid   = CPU_SETUP.RingVfPointOffsetPrefix[1],
           prompt      = STRING_TOKEN(0x0982),
           help        = STRING_TOKEN(0x0994),
           option text = STRING_TOKEN(0x02F1),  value = 0, flags =  DEFAULT | MANUFACTURING | RESET_REQUIRED;
           option text = STRING_TOKEN(0x02F2),  value = 1, flags = RESET_REQUIRED;
         endoneof;

         text
           help  = STRING_TOKEN(0x0851),
           text  = STRING_TOKEN(0x08E2),
           text  = STRING_TOKEN(0x0937),
           flags = 0,
           key   = 0;
       endif;

       suppressif ideqval CPU_SETUP.RingVfPointCount < 0x3;
         numeric varid = CPU_SETUP.RingVfPointOffset[2],
           prompt  = STRING_TOKEN (0x091C),
           help    = STRING_TOKEN (0x091D),
           flags   = RESET_REQUIRED,
           minimum = 0,
           maximum = 1000,
           step    = 1,
           default = 0,
         endnumeric;

         oneof varid   = CPU_SETUP.RingVfPointOffsetPrefix[2],
           prompt      = STRING_TOKEN(0x0983),
           help        = STRING_TOKEN(0x0994),
           option text = STRING_TOKEN(0x02F1),  value = 0, flags =  DEFAULT | MANUFACTURING | RESET_REQUIRED;
           option text = STRING_TOKEN(0x02F2),  value = 1, flags = RESET_REQUIRED;
         endoneof;

         text
           help  = STRING_TOKEN(0x0851),
           text  = STRING_TOKEN(0x08E4),
           text  = STRING_TOKEN(0x0938),
           flags = 0,
           key   = 0;
       endif;

       suppressif ideqval CPU_SETUP.RingVfPointCount < 0x4;
         numeric varid = CPU_SETUP.RingVfPointOffset[3],
           prompt  = STRING_TOKEN (0x091E),
           help    = STRING_TOKEN (0x091F),
           flags   = RESET_REQUIRED,
           minimum = 0,
           maximum = 1000,
           step    = 1,
           default = 0,
         endnumeric;

         oneof varid   = CPU_SETUP.RingVfPointOffsetPrefix[3],
           prompt      = STRING_TOKEN(0x0984),
           help        = STRING_TOKEN(0x0994),
           option text = STRING_TOKEN(0x02F1),  value = 0, flags =  DEFAULT | MANUFACTURING | RESET_REQUIRED;
           option text = STRING_TOKEN(0x02F2),  value = 1, flags = RESET_REQUIRED;
         endoneof;

         text
           help  = STRING_TOKEN(0x0851),
           text  = STRING_TOKEN(0x08E6),
           text  = STRING_TOKEN(0x0939),
           flags = 0,
           key   = 0;
       endif;

       suppressif ideqval CPU_SETUP.RingVfPointCount < 0x5;
         numeric varid = CPU_SETUP.RingVfPointOffset[4],
           prompt  = STRING_TOKEN (0x0920),
           help    = STRING_TOKEN (0x0921),
           flags   = RESET_REQUIRED,
           minimum = 0,
           maximum = 1000,
           step    = 1,
           default = 0,
         endnumeric;

         oneof varid   = CPU_SETUP.RingVfPointOffsetPrefix[4],
           prompt      = STRING_TOKEN(0x0985),
           help        = STRING_TOKEN(0x0994),
           option text = STRING_TOKEN(0x02F1),  value = 0, flags =  DEFAULT | MANUFACTURING | RESET_REQUIRED;
           option text = STRING_TOKEN(0x02F2),  value = 1, flags = RESET_REQUIRED;
         endoneof;

         text
           help  = STRING_TOKEN(0x0851),
           text  = STRING_TOKEN(0x08E8),
           text  = STRING_TOKEN(0x093A),
           flags = 0,
           key   = 0;
       endif;

       suppressif ideqval CPU_SETUP.RingVfPointCount < 0x6;
         numeric varid = CPU_SETUP.RingVfPointOffset[5],
           prompt  = STRING_TOKEN (0x0922),
           help    = STRING_TOKEN (0x0923),
           flags   = RESET_REQUIRED,
           minimum = 0,
           maximum = 1000,
           step    = 1,
           default = 0,
         endnumeric;

         oneof varid   = CPU_SETUP.RingVfPointOffsetPrefix[5],
           prompt      = STRING_TOKEN(0x0986),
           help        = STRING_TOKEN(0x0994),
           option text = STRING_TOKEN(0x02F1),  value = 0, flags =  DEFAULT | MANUFACTURING | RESET_REQUIRED;
           option text = STRING_TOKEN(0x02F2),  value = 1, flags = RESET_REQUIRED;
         endoneof;

         text
           help  = STRING_TOKEN(0x0851),
           text  = STRING_TOKEN(0x08EA),
           text  = STRING_TOKEN(0x093B),
           flags = 0,
           key   = 0;
       endif;

       suppressif ideqval CPU_SETUP.RingVfPointCount < 0x7;
         numeric varid = CPU_SETUP.RingVfPointOffset[6],
           prompt  = STRING_TOKEN (0x0924),
           help    = STRING_TOKEN (0x0925),
           flags   = RESET_REQUIRED,
           minimum = 0,
           maximum = 1000,
           step    = 1,
           default = 0,
         endnumeric;

         oneof varid   = CPU_SETUP.RingVfPointOffsetPrefix[6],
           prompt      = STRING_TOKEN(0x0987),
           help        = STRING_TOKEN(0x0994),
           option text = STRING_TOKEN(0x02F1),  value = 0, flags =  DEFAULT | MANUFACTURING | RESET_REQUIRED;
           option text = STRING_TOKEN(0x02F2),  value = 1, flags = RESET_REQUIRED;
         endoneof;

         text
           help  = STRING_TOKEN(0x0851),
           text  = STRING_TOKEN(0x08EC),
           text  = STRING_TOKEN(0x093C),
           flags = 0,
           key   = 0;
       endif;

       suppressif ideqval CPU_SETUP.RingVfPointCount < 0x8;
         numeric varid = CPU_SETUP.RingVfPointOffset[7],
           prompt  = STRING_TOKEN (0x0926),
           help    = STRING_TOKEN (0x0927),
           flags   = RESET_REQUIRED,
           minimum = 0,
           maximum = 1000,
           step    = 1,
           default = 0,
         endnumeric;

         oneof varid   = CPU_SETUP.RingVfPointOffsetPrefix[7],
           prompt      = STRING_TOKEN(0x0988),
           help        = STRING_TOKEN(0x0994),
           option text = STRING_TOKEN(0x02F1),  value = 0, flags =  DEFAULT | MANUFACTURING | RESET_REQUIRED;
           option text = STRING_TOKEN(0x02F2),  value = 1, flags = RESET_REQUIRED;
         endoneof;

         text
           help  = STRING_TOKEN(0x0851),
           text  = STRING_TOKEN(0x08EE),
           text  = STRING_TOKEN(0x093D),
           flags = 0,
           key   = 0;
       endif;

       suppressif ideqval CPU_SETUP.RingVfPointCount < 0x9;
         numeric varid = CPU_SETUP.RingVfPointOffset[8],
           prompt  = STRING_TOKEN (0x0928),
           help    = STRING_TOKEN (0x0929),
           flags   = RESET_REQUIRED,
           minimum = 0,
           maximum = 1000,
           step    = 1,
           default = 0,
         endnumeric;

         oneof varid   = CPU_SETUP.RingVfPointOffsetPrefix[8],
           prompt      = STRING_TOKEN(0x0989),
           help        = STRING_TOKEN(0x0994),
           option text = STRING_TOKEN(0x02F1),  value = 0, flags =  DEFAULT | MANUFACTURING | RESET_REQUIRED;
           option text = STRING_TOKEN(0x02F2),  value = 1, flags = RESET_REQUIRED;
         endoneof;

         text
           help  = STRING_TOKEN(0x0851),
           text  = STRING_TOKEN(0x08F0),
           text  = STRING_TOKEN(0x093E),
           flags = 0,
           key   = 0;
       endif;

       suppressif ideqval CPU_SETUP.RingVfPointCount < 0xA;
         numeric varid = CPU_SETUP.RingVfPointOffset[9],
           prompt  = STRING_TOKEN (0x092A),
           help    = STRING_TOKEN (0x092B),
           flags   = RESET_REQUIRED,
           minimum = 0,
           maximum = 1000,
           step    = 1,
           default = 0,
         endnumeric;

         oneof varid   = CPU_SETUP.RingVfPointOffsetPrefix[9],
           prompt      = STRING_TOKEN(0x098A),
           help        = STRING_TOKEN(0x0994),
           option text = STRING_TOKEN(0x02F1),  value = 0, flags =  DEFAULT | MANUFACTURING | RESET_REQUIRED;
           option text = STRING_TOKEN(0x02F2),  value = 1, flags = RESET_REQUIRED;
         endoneof;

         text
           help  = STRING_TOKEN(0x0851),
           text  = STRING_TOKEN(0x08F2),
           text  = STRING_TOKEN(0x093F),
           flags = 0,
           key   = 0;
       endif;

       suppressif ideqval CPU_SETUP.RingVfPointCount < 0xB;
         numeric varid = CPU_SETUP.RingVfPointOffset[10],
           prompt  = STRING_TOKEN (0x092C),
           help    = STRING_TOKEN (0x092D),
           flags   = RESET_REQUIRED,
           minimum = 0,
           maximum = 1000,
           step    = 1,
           default = 0,
         endnumeric;

         oneof varid   = CPU_SETUP.RingVfPointOffsetPrefix[10],
           prompt      = STRING_TOKEN(0x098B),
           help        = STRING_TOKEN(0x0994),
           option text = STRING_TOKEN(0x02F1),  value = 0, flags =  DEFAULT | MANUFACTURING | RESET_REQUIRED;
           option text = STRING_TOKEN(0x02F2),  value = 1, flags = RESET_REQUIRED;
         endoneof;

         text
           help  = STRING_TOKEN(0x0851),
           text  = STRING_TOKEN(0x08F4),
           text  = STRING_TOKEN(0x0940),
           flags = 0,
           key   = 0;
       endif;

       suppressif ideqval CPU_SETUP.RingVfPointCount < 0xC;
         numeric varid = CPU_SETUP.RingVfPointOffset[11],
           prompt  = STRING_TOKEN (0x092E),
           help    = STRING_TOKEN (0x092F),
           flags   = RESET_REQUIRED,
           minimum = 0,
           maximum = 1000,
           step    = 1,
           default = 0,
         endnumeric;

         oneof varid   = CPU_SETUP.RingVfPointOffsetPrefix[11],
           prompt      = STRING_TOKEN(0x098C),
           help        = STRING_TOKEN(0x0994),
           option text = STRING_TOKEN(0x02F1),  value = 0, flags =  DEFAULT | MANUFACTURING | RESET_REQUIRED;
           option text = STRING_TOKEN(0x02F2),  value = 1, flags = RESET_REQUIRED;
         endoneof;

         text
           help  = STRING_TOKEN(0x0851),
           text  = STRING_TOKEN(0x08F6),
           text  = STRING_TOKEN(0x0941),
           flags = 0,
           key   = 0;
       endif;

       suppressif ideqval CPU_SETUP.RingVfPointCount < 0xD;
         numeric varid = CPU_SETUP.RingVfPointOffset[12],
           prompt  = STRING_TOKEN (0x0930),
           help    = STRING_TOKEN (0x0931),
           flags   = RESET_REQUIRED,
           minimum = 0,
           maximum = 1000,
           step    = 1,
           default = 0,
         endnumeric;

         oneof varid   = CPU_SETUP.RingVfPointOffsetPrefix[12],
           prompt      = STRING_TOKEN(0x098D),
           help        = STRING_TOKEN(0x0994),
           option text = STRING_TOKEN(0x02F1),  value = 0, flags =  DEFAULT | MANUFACTURING | RESET_REQUIRED;
           option text = STRING_TOKEN(0x02F2),  value = 1, flags = RESET_REQUIRED;
         endoneof;

         text
           help  = STRING_TOKEN(0x0851),
           text  = STRING_TOKEN(0x08F8),
           text  = STRING_TOKEN(0x0942),
           flags = 0,
           key   = 0;
       endif;

       suppressif ideqval CPU_SETUP.RingVfPointCount < 0xE;
         numeric varid = CPU_SETUP.RingVfPointOffset[13],
           prompt  = STRING_TOKEN (0x0932),
           help    = STRING_TOKEN (0x0933),
           flags   = RESET_REQUIRED,
           minimum = 0,
           maximum = 1000,
           step    = 1,
           default = 0,
         endnumeric;

         oneof varid   = CPU_SETUP.RingVfPointOffsetPrefix[13],
           prompt      = STRING_TOKEN(0x098E),
           help        = STRING_TOKEN(0x0994),
           option text = STRING_TOKEN(0x02F1),  value = 0, flags =  DEFAULT | MANUFACTURING | RESET_REQUIRED;
           option text = STRING_TOKEN(0x02F2),  value = 1, flags = RESET_REQUIRED;
         endoneof;

         text
           help  = STRING_TOKEN(0x0851),
           text  = STRING_TOKEN(0x08FA),
           text  = STRING_TOKEN(0x0943),
           flags = 0,
           key   = 0;
       endif;

       suppressif ideqval CPU_SETUP.RingVfPointCount < 0xF;
         numeric varid = CPU_SETUP.RingVfPointOffset[14],
           prompt  = STRING_TOKEN (0x0934),
           help    = STRING_TOKEN (0x0935),
           flags   = RESET_REQUIRED,
           minimum = 0,
           maximum = 1000,
           step    = 1,
           default = 0,
         endnumeric;

         oneof varid   = CPU_SETUP.RingVfPointOffsetPrefix[14],
           prompt      = STRING_TOKEN(0x098F),
           help        = STRING_TOKEN(0x0994),
           option text = STRING_TOKEN(0x02F1),  value = 0, flags =  DEFAULT | MANUFACTURING | RESET_REQUIRED;
           option text = STRING_TOKEN(0x02F2),  value = 1, flags = RESET_REQUIRED;
         endoneof;

         text
           help  = STRING_TOKEN(0x0851),
           text  = STRING_TOKEN(0x08FC),
           text  = STRING_TOKEN(0x0944),
           flags = 0,
           key   = 0;
       endif;
     endif;


















      subtitle text = STRING_TOKEN(0x0002);
      oneof varid   = CPU_SETUP.RingDownBin,
        prompt      = STRING_TOKEN(0x09C4),
        help        = STRING_TOKEN(0x09C5),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      numeric varid = CPU_SETUP.MinRingRatioLimit,
        prompt  = STRING_TOKEN (0x09C6),
        help    = STRING_TOKEN (0x09C7),
        flags   = RESET_REQUIRED | INTERACTIVE,
        key     = 5416,
        minimum = 0,
        maximum = 85,
        step    = 1,
        default = 0,
      endnumeric;

      numeric varid = CPU_SETUP.MaxRingRatioLimit,
        prompt  = STRING_TOKEN (0x09C8),
        help    = STRING_TOKEN (0x09C9),
        flags   = RESET_REQUIRED | INTERACTIVE,
        key     = 5417,
        minimum = 0,
        maximum = 85,
        step    = 1,
        default = 0,
      endnumeric;
   endform;


   form formid = 4123,
    title = STRING_TOKEN(0x09B1);
   
   
   
   subtitle text = STRING_TOKEN(0x09B6);
        numeric varid = SA_SETUP.GtMaxOcRatio,
          prompt   = STRING_TOKEN(0x09B3),
          help     = STRING_TOKEN(0x09B5),
          flags   = RESET_REQUIRED,
          minimum     = 0,
          maximum     = 42,
          step        = 1,    
          default     = 0,
        endnumeric;

        oneof varid   = SA_SETUP.GtVoltageMode,
          prompt      = STRING_TOKEN(0x09B8),
          help        = STRING_TOKEN(0x09BA),
          option text = STRING_TOKEN(0x097A), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x097B), value = 1, flags = RESET_REQUIRED;
        endoneof;

        suppressif ideqval SA_SETUP.GtVoltageMode == 0;
          numeric varid = SA_SETUP.GtVoltageOverride,
            prompt  = STRING_TOKEN (0x09BB),
            help    = STRING_TOKEN (0x09BD),
            flags   = RESET_REQUIRED,
            minimum = 0,
            maximum = 2000,
           step    = 1,
           default = 0,
         endnumeric;
        endif;

        suppressif ideqval SA_SETUP.GtVoltageMode == 1;
          numeric varid = SA_SETUP.GtExtraTurboVoltage,
            prompt  = STRING_TOKEN (0x09C1),
            help    = STRING_TOKEN (0x09C3),
            flags   = RESET_REQUIRED,
            minimum = 0,
            maximum = 2000,
            step    = 1,
            default = 0,
          endnumeric;
        endif;

         numeric varid = SA_SETUP.GtVoltageOffset,
           prompt  = STRING_TOKEN (0x09BE),
           help    = STRING_TOKEN (0x09C0),
           flags   = RESET_REQUIRED,
           minimum = 0,
           maximum = 1000,
           step    = 1,
           default = 0,
         endnumeric;

         oneof varid   = SA_SETUP.GtVoltageOffsetPrefix,
           prompt      = STRING_TOKEN(0x0991),
           help        = STRING_TOKEN(0x0994),
           option text = STRING_TOKEN(0x02F1),  value = 0, flags =  DEFAULT | MANUFACTURING | RESET_REQUIRED;
           option text = STRING_TOKEN(0x02F2),  value = 1, flags = RESET_REQUIRED;
         endoneof;

     suppressif ideqval SETUP_CPU_FEATURES.GtUnsliceSupported == 0;
       
       
       
       subtitle text = STRING_TOKEN(0x09B7);
            numeric varid = SA_SETUP.GtusMaxOcRatio,
              prompt   = STRING_TOKEN(0x09B4),
              help     = STRING_TOKEN(0x09B5),
              flags    = RESET_REQUIRED,
              minimum     = 0,
              maximum     = 42,
              step        = 1,    
              default     = 0,
            endnumeric;

            oneof varid   = SA_SETUP.GtusVoltageMode,
              prompt      = STRING_TOKEN(0x09B9),
              help        = STRING_TOKEN(0x09BA),
              option text = STRING_TOKEN(0x097A), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
              option text = STRING_TOKEN(0x097B), value = 1, flags = RESET_REQUIRED;
            endoneof;

            suppressif ideqval SA_SETUP.GtusVoltageMode == 0;
              numeric varid = SA_SETUP.GtusVoltageOverride,
                prompt  = STRING_TOKEN (0x09BC),
                help    = STRING_TOKEN (0x09BD),
                flags   = RESET_REQUIRED,
                minimum = 0,
                maximum = 2000,
                step    = 1,
                default = 0,
              endnumeric;
           endif;

            suppressif ideqval SA_SETUP.GtusVoltageMode == 1;
              numeric varid = SA_SETUP.GtusExtraTurboVoltage,
                prompt  = STRING_TOKEN (0x09C2),
                help    = STRING_TOKEN (0x09C3),
                flags   = RESET_REQUIRED,
                minimum = 0,
                maximum = 2000,
                step    = 1,
                default = 0,
              endnumeric;
            endif;

             numeric varid = SA_SETUP.GtusVoltageOffset,
               prompt  = STRING_TOKEN (0x09BF),
               help    = STRING_TOKEN (0x09C0),
               flags   = RESET_REQUIRED,
               minimum = 0,
               maximum = 1000,
               step    = 1,
               default = 0,
             endnumeric;

             oneof varid   = SA_SETUP.GtusVoltageOffsetPrefix,
               prompt      = STRING_TOKEN(0x0992),
               help        = STRING_TOKEN(0x0994),
               option text = STRING_TOKEN(0x02F1),  value = 0, flags =  DEFAULT | MANUFACTURING | RESET_REQUIRED;
               option text = STRING_TOKEN(0x02F2),  value = 1, flags = RESET_REQUIRED;
             endoneof;
      endif;
    endform;

   form formid = 4354,
     title = STRING_TOKEN(0x09CA);

     subtitle text = STRING_TOKEN(0x09CA);
     subtitle text = STRING_TOKEN(0x0002);

      oneof varid   = CPU_SETUP.SaVoltageMode,
        prompt      = STRING_TOKEN(0x09CE),
        help        = STRING_TOKEN(0x09CF),
        option text = STRING_TOKEN(0x097A), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x097B), value = 1, flags = RESET_REQUIRED;
      endoneof;

      suppressif ideqval CPU_SETUP.SaVoltageMode == 0x0;
        numeric varid = CPU_SETUP.SaVoltageOverride,
          prompt  = STRING_TOKEN (0x09D0),
          help    = STRING_TOKEN (0x09D1),
          flags   = RESET_REQUIRED,
          minimum = 0,
          maximum = 2000,
          step    = 1,
          default = 0,
        endnumeric;
      endif;

      suppressif ideqval CPU_SETUP.SaVoltageMode == 0x1;
        numeric varid = CPU_SETUP.SaExtraTurboVoltage,
          prompt  = STRING_TOKEN (0x09D2),
          help    = STRING_TOKEN (0x09D3),
          flags   = RESET_REQUIRED,
          minimum = 0,
          maximum = 2000,
          step    = 1,
          default = 0,
        endnumeric;
      endif;

      numeric varid = SA_SETUP.UncoreVoltageOffset,
        prompt  = STRING_TOKEN (0x09CC),
        help    = STRING_TOKEN (0x09CD),
        flags   = RESET_REQUIRED,
        minimum = 0,
        maximum = 1000,
        step    = 1,
        default = 0,
      endnumeric;

      oneof varid   = SA_SETUP.UncoreVoltageOffsetPrefix,
        prompt      = STRING_TOKEN(0x0993),
        help        = STRING_TOKEN(0x0994),
        option text = STRING_TOKEN(0x02F1),  value = 0, flags =  DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x02F2),  value = 1, flags = RESET_REQUIRED;
      endoneof;

   endform;

  form formid = 4355,
    title = STRING_TOKEN(0x0995);

    subtitle text = STRING_TOKEN(0x0995);
    subtitle text = STRING_TOKEN(0x0002);

    
    
    
    oneof varid   = CPU_SETUP.Vcc1p8OverrideEnable,
      prompt      = STRING_TOKEN(0x0997),
      help        = STRING_TOKEN(0x0998),
      option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
    endoneof;

    suppressif ideqval CPU_SETUP.Vcc1p8OverrideEnable == 0;
      numeric varid = CPU_SETUP.Vcc1p8OverrideVoltage,
        prompt  = STRING_TOKEN (0x0999),
        help    = STRING_TOKEN (0x099A),
        flags   = RESET_REQUIRED,
        minimum = 800,
        maximum = 2550,
        step    = 10,
        default = 1800,
      endnumeric;
    endif;
    
    
    
    oneof varid   = CPU_SETUP.Vcc1p05OverrideEnable,
      prompt      = STRING_TOKEN(0x099B),
      help        = STRING_TOKEN(0x099C),
      option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
    endoneof;

    suppressif ideqval CPU_SETUP.Vcc1p05OverrideEnable == 0;
      numeric varid = CPU_SETUP.Vcc1p05OverrideVoltage,
        prompt  = STRING_TOKEN (0x099D),
        help    = STRING_TOKEN (0x099E),
        flags   = RESET_REQUIRED,
        minimum = 800,
        maximum = 2550,
        step    = 10,
        default = 1050,
      endnumeric;
    endif;

    
    
    
    oneof varid   = CPU_SETUP.VccDd2OverrideEnable,
      prompt      = STRING_TOKEN(0x099F),
      help        = STRING_TOKEN(0x09A0),
      option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
    endoneof;

    suppressif ideqval CPU_SETUP.VccDd2OverrideEnable == 0;
      numeric varid = CPU_SETUP.VccDd2OverrideVoltage,
        prompt  = STRING_TOKEN (0x09A1),
        help    = STRING_TOKEN (0x09A2),
        flags   = RESET_REQUIRED,
        minimum = 800,
        maximum = 2550,
        step    = 10,
        default = 1100,
      endnumeric;
    endif;

    subtitle text = STRING_TOKEN(0x0002);

    
    
    
    oneof varid   = CPU_SETUP.VccInAuxEnable,
      prompt      = STRING_TOKEN(0x09DA),
      help        = STRING_TOKEN(0x09DB),
      option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
    endoneof;

    suppressif ideqval CPU_SETUP.VccInAuxEnable == 0;
      numeric varid = CPU_SETUP.VccInAuxVoltage,
        prompt  = STRING_TOKEN (0x09DC),
        help    = STRING_TOKEN (0x09DD),
        flags   = RESET_REQUIRED,
        minimum = 1620,
        maximum = 1900,
        step    = 10,
        default = 1800,
      endnumeric;
    endif;

    subtitle text = STRING_TOKEN(0x0002);

    
    
    
    oneof varid   = CPU_SETUP.RichtekVccIaEnable,
      prompt      = STRING_TOKEN(0x09E0),
      help        = STRING_TOKEN(0x09E1),
      option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
    endoneof;

    suppressif ideqval CPU_SETUP.RichtekVccIaEnable == 0;
      oneof varid   = CPU_SETUP.RichtekVccIaFixedVidMode,
        prompt      = STRING_TOKEN(0x09DE),
        help        = STRING_TOKEN(0x09DF),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      suppressif ideqval CPU_SETUP.RichtekVccIaFixedVidMode == 0;
      numeric varid = CPU_SETUP.RichtekVccIaVoltage,
        prompt  = STRING_TOKEN (0x09E2),
        help    = STRING_TOKEN (0x09E3),
        flags   = RESET_REQUIRED,
        minimum = 250,
        maximum = 2170,
        step    = 10,
        default = 1200,
      endnumeric;
      endif;
    endif;

    
    
    
    oneof varid   = CPU_SETUP.RichtekVccGtEnable,
      prompt      = STRING_TOKEN(0x09E4),
      help        = STRING_TOKEN(0x09E5),
      option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
    endoneof;

    suppressif ideqval CPU_SETUP.RichtekVccGtEnable == 0;
      oneof varid   = CPU_SETUP.RichtekVccGtFixedVidMode,
        prompt      = STRING_TOKEN(0x09DE),
        help        = STRING_TOKEN(0x09DF),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      suppressif ideqval CPU_SETUP.RichtekVccGtFixedVidMode == 0;
      numeric varid = CPU_SETUP.RichtekVccGtVoltage,
        prompt  = STRING_TOKEN (0x09E6),
        help    = STRING_TOKEN (0x09E7),
        flags   = RESET_REQUIRED,
        minimum = 250,
        maximum = 2170,
        step    = 10,
        default = 1200,
      endnumeric;
      endif;
    endif;
  endform;

   
   
   
   form formid = 5414,
   title = STRING_TOKEN(0x085A);

   subtitle text = STRING_TOKEN(0x085A);
   subtitle text = STRING_TOKEN(0x0002);
     numeric varid = CPU_SETUP.CorePllVoltageOffset,
       prompt  = STRING_TOKEN (0x094F),
       help    = STRING_TOKEN (0x0955),
       flags   = RESET_REQUIRED,
       minimum = 0,
       maximum = 15,
       step    = 1,
       default = 0,
     endnumeric;

     numeric varid = CPU_SETUP.GtPllVoltageOffset,
       prompt  = STRING_TOKEN (0x0950),
       help    = STRING_TOKEN (0x0955),
       flags   = RESET_REQUIRED,
       minimum = 0,
       maximum = 15,
       step    = 1,
       default = 0,
     endnumeric;

     numeric varid = CPU_SETUP.RingPllVoltageOffset,
       prompt  = STRING_TOKEN (0x0951),
       help    = STRING_TOKEN (0x0955),
       flags   = RESET_REQUIRED,
       minimum = 0,
       maximum = 15,
       step    = 1,
       default = 0,
     endnumeric;

     numeric varid = CPU_SETUP.SaPllVoltageOffset,
       prompt  = STRING_TOKEN (0x0952),
       help    = STRING_TOKEN (0x0955),
       flags   = RESET_REQUIRED,
       minimum = 0,
       maximum = 15,
       step    = 1,
       default = 0,
     endnumeric;

     suppressif ideqval CPU_SETUP.AllSmallCoreCount == 0 OR
                  ideqval CPU_SETUP.ActiveSmallCoreCount == 0;
       numeric varid = CPU_SETUP.AtomPllVoltageOffset,
         prompt  = STRING_TOKEN (0x0953),
         help    = STRING_TOKEN (0x0955),
         flags   = RESET_REQUIRED,
         minimum = 0,
         maximum = 15,
         step    = 1,
         default = 0,
       endnumeric;
     endif;

     numeric varid = CPU_SETUP.McPllVoltageOffset,
       prompt  = STRING_TOKEN (0x0954),
       help    = STRING_TOKEN (0x0955),
       flags   = RESET_REQUIRED,
       minimum = 0,
       maximum = 15,
       step    = 1,
       default = 0,
     endnumeric;

   endform;

  form formid = 4318,
    title = STRING_TOKEN(0x0962);

    subtitle text = STRING_TOKEN(0x0962);
    subtitle text = STRING_TOKEN(0x0002);

    oneof varid   = CPU_SETUP.IaCepEnable,
      prompt      = STRING_TOKEN(0x0964),
      help        = STRING_TOKEN(0x0965),
      option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x0004), value = 0, flags =  RESET_REQUIRED;
    endoneof;

    oneof varid   = CPU_SETUP.GtCepEnable,
      prompt      = STRING_TOKEN(0x0966),
      help        = STRING_TOKEN(0x0967),
      option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x0004), value = 0, flags =  RESET_REQUIRED;
    endoneof;

  endform;

  form formid = 4334,
    title = STRING_TOKEN(0x0968);

    subtitle text = STRING_TOKEN(0x0968);
    subtitle text = STRING_TOKEN(0x0002);

    suppressif ideqval CPU_SETUP_VOLATILE_DATA.CoreVrLocked == 1;
      text
        help  = STRING_TOKEN(0x096A),
        text  = STRING_TOKEN(0x096B),
        text  = STRING_TOKEN(0x096C),
        flags = 0,
        key   = 0;
    endif;

    suppressif ideqval CPU_SETUP_VOLATILE_DATA.GtVrLocked == 1;
      text
        help  = STRING_TOKEN(0x096D),
        text  = STRING_TOKEN(0x096E),
        text  = STRING_TOKEN(0x096F),
        flags = 0,
        key   = 0;
    endif;

    subtitle text = STRING_TOKEN(0x0002);

    grayoutif ideqval CPU_SETUP_VOLATILE_DATA.CoreVrLocked == 1;
      grayoutif ideqval CPU_SETUP.IaIccUnlimitedMode == 1;
        numeric varid = CPU_SETUP.IaIccMax,
          prompt  = STRING_TOKEN (0x0970),
          help    = STRING_TOKEN (0x0971),
          flags   = RESET_REQUIRED,
          minimum = 4,
          maximum = 2047,
          step    = 1,
          default = 4,
        endnumeric;
      endif;

      oneof varid   = CPU_SETUP.IaIccUnlimitedMode,
        prompt      = STRING_TOKEN(0x0972),
        help        = STRING_TOKEN(0x0973),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags =  RESET_REQUIRED;
      endoneof;
    endif;

    subtitle text = STRING_TOKEN(0x0002);

    grayoutif ideqval CPU_SETUP_VOLATILE_DATA.GtVrLocked == 1;
      grayoutif ideqval CPU_SETUP.GtIccUnlimitedMode == 1;
        numeric varid = CPU_SETUP.GtIccMax,
          prompt  = STRING_TOKEN (0x0974),
          help    = STRING_TOKEN (0x0975),
          flags   = RESET_REQUIRED,
          minimum = 4,
          maximum = 2047,
          step    = 1,
          default = 4,
        endnumeric;
      endif;

      oneof varid   = CPU_SETUP.GtIccUnlimitedMode,
        prompt      = STRING_TOKEN(0x0976),
        help        = STRING_TOKEN(0x0977),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags =  RESET_REQUIRED;
      endoneof;
    endif;
  endform;

   
   
   
   form formid = 4289,
   title = STRING_TOKEN(0x086A);

   subtitle text = STRING_TOKEN(0x0002);
   suppressif  (get(CPU_SETUP.PerCoreDisableOriMask) & 0x00000001)  != 0;
     checkbox varid = CPU_SETUP.PerCoreDisable1[0],
       prompt   = STRING_TOKEN(0x086C),
       help     = STRING_TOKEN(0x088C),
       flags    = RESET_REQUIRED,
     endcheckbox;
   endif;

   suppressif  (get(CPU_SETUP.PerCoreDisableOriMask) & 0x00000002)  != 0;
     checkbox varid = CPU_SETUP.PerCoreDisable1[1],
       prompt   = STRING_TOKEN(0x086D),
       help     = STRING_TOKEN(0x088D),
       flags    = RESET_REQUIRED,
     endcheckbox;
   endif;

   suppressif  (get(CPU_SETUP.PerCoreDisableOriMask) & 0x00000004)  != 0;
     checkbox varid = CPU_SETUP.PerCoreDisable1[2],
       prompt   = STRING_TOKEN(0x086E),
       help     = STRING_TOKEN(0x088E),
       flags    = RESET_REQUIRED,
     endcheckbox;
   endif;

   suppressif  (get(CPU_SETUP.PerCoreDisableOriMask) & 0x00000008)  != 0;
     checkbox varid = CPU_SETUP.PerCoreDisable1[3],
       prompt   = STRING_TOKEN(0x086F),
       help     = STRING_TOKEN(0x088F),
       flags    = RESET_REQUIRED,
     endcheckbox;
   endif;

   suppressif  (get(CPU_SETUP.PerCoreDisableOriMask) & 0x00000010)  != 0;
     checkbox varid = CPU_SETUP.PerCoreDisable1[4],
       prompt   = STRING_TOKEN(0x0870),
       help     = STRING_TOKEN(0x0890),
       flags    = RESET_REQUIRED,
     endcheckbox;
   endif;

   suppressif  (get(CPU_SETUP.PerCoreDisableOriMask) & 0x00000020)  != 0;
     checkbox varid = CPU_SETUP.PerCoreDisable1[5],
       prompt   = STRING_TOKEN(0x0871),
       help     = STRING_TOKEN(0x0891),
       flags    = RESET_REQUIRED,
     endcheckbox;
   endif;

   suppressif  (get(CPU_SETUP.PerCoreDisableOriMask) & 0x00000040)  != 0;
     checkbox varid = CPU_SETUP.PerCoreDisable1[6],
       prompt   = STRING_TOKEN(0x0872),
       help     = STRING_TOKEN(0x0892),
       flags    = RESET_REQUIRED,
     endcheckbox;
   endif;

   suppressif  (get(CPU_SETUP.PerCoreDisableOriMask) & 0x00000080)  != 0;
     checkbox varid = CPU_SETUP.PerCoreDisable1[7],
       prompt   = STRING_TOKEN(0x0873),
       help     = STRING_TOKEN(0x0893),
       flags    = RESET_REQUIRED,
     endcheckbox;
   endif;

   suppressif  (get(CPU_SETUP.PerCoreDisableOriMask) & 0x00000100)  != 0;
     checkbox varid = CPU_SETUP.PerCoreDisable1[8],
       prompt   = STRING_TOKEN(0x0874),
       help     = STRING_TOKEN(0x0894),
       flags    = RESET_REQUIRED,
     endcheckbox;
   endif;

   suppressif  (get(CPU_SETUP.PerCoreDisableOriMask) & 0x00000200)  != 0;
     checkbox varid = CPU_SETUP.PerCoreDisable1[9],
       prompt   = STRING_TOKEN(0x0875),
       help     = STRING_TOKEN(0x0895),
       flags    = RESET_REQUIRED,
     endcheckbox;
   endif;

   suppressif  (get(CPU_SETUP.PerCoreDisableOriMask) & 0x00000400)  != 0;
     checkbox varid = CPU_SETUP.PerCoreDisable1[10],
       prompt   = STRING_TOKEN(0x0876),
       help     = STRING_TOKEN(0x0896),
       flags    = RESET_REQUIRED,
     endcheckbox;
   endif;

   suppressif  (get(CPU_SETUP.PerCoreDisableOriMask) & 0x00000800)  != 0;
     checkbox varid = CPU_SETUP.PerCoreDisable1[11],
       prompt   = STRING_TOKEN(0x0877),
       help     = STRING_TOKEN(0x0897),
       flags    = RESET_REQUIRED,
     endcheckbox;
   endif;

   suppressif  (get(CPU_SETUP.PerCoreDisableOriMask) & 0x00001000)  != 0;
     checkbox varid = CPU_SETUP.PerCoreDisable1[12],
       prompt   = STRING_TOKEN(0x0878),
       help     = STRING_TOKEN(0x0898),
       flags    = RESET_REQUIRED,
     endcheckbox;
   endif;

   suppressif  (get(CPU_SETUP.PerCoreDisableOriMask) & 0x00002000)  != 0;
     checkbox varid = CPU_SETUP.PerCoreDisable1[13],
       prompt   = STRING_TOKEN(0x0879),
       help     = STRING_TOKEN(0x0899),
       flags    = RESET_REQUIRED,
     endcheckbox;
   endif;

   suppressif  (get(CPU_SETUP.PerCoreDisableOriMask) & 0x00004000)  != 0;
     checkbox varid = CPU_SETUP.PerCoreDisable1[14],
       prompt   = STRING_TOKEN(0x087A),
       help     = STRING_TOKEN(0x089A),
       flags    = RESET_REQUIRED,
     endcheckbox;
   endif;

   suppressif  (get(CPU_SETUP.PerCoreDisableOriMask) & 0x00008000)  != 0;
     checkbox varid = CPU_SETUP.PerCoreDisable1[15],
       prompt   = STRING_TOKEN(0x087B),
       help     = STRING_TOKEN(0x089B),
       flags    = RESET_REQUIRED,
     endcheckbox;
   endif;

   suppressif  (get(CPU_SETUP.PerCoreDisableOriMask) & 0x00010000)  != 0;
     checkbox varid = CPU_SETUP.PerCoreDisable1[16],
       prompt   = STRING_TOKEN(0x087C),
       help     = STRING_TOKEN(0x089C),
       flags    = RESET_REQUIRED,
     endcheckbox;
   endif;

   suppressif  (get(CPU_SETUP.PerCoreDisableOriMask) & 0x00020000)  != 0;
     checkbox varid = CPU_SETUP.PerCoreDisable1[17],
       prompt   = STRING_TOKEN(0x087D),
       help     = STRING_TOKEN(0x089D),
       flags    = RESET_REQUIRED,
     endcheckbox;
   endif;

   suppressif  (get(CPU_SETUP.PerCoreDisableOriMask) & 0x00040000)  != 0;
     checkbox varid = CPU_SETUP.PerCoreDisable1[18],
       prompt   = STRING_TOKEN(0x087E),
       help     = STRING_TOKEN(0x089E),
       flags    = RESET_REQUIRED,
     endcheckbox;
   endif;

   suppressif  (get(CPU_SETUP.PerCoreDisableOriMask) & 0x00080000)  != 0;
     checkbox varid = CPU_SETUP.PerCoreDisable1[19],
       prompt   = STRING_TOKEN(0x087F),
       help     = STRING_TOKEN(0x089F),
       flags    = RESET_REQUIRED,
     endcheckbox;
   endif;

   suppressif  (get(CPU_SETUP.PerCoreDisableOriMask) & 0x00100000)  != 0;
     checkbox varid = CPU_SETUP.PerCoreDisable1[20],
       prompt   = STRING_TOKEN(0x0880),
       help     = STRING_TOKEN(0x08A0),
       flags    = RESET_REQUIRED,
     endcheckbox;
   endif;

   suppressif  (get(CPU_SETUP.PerCoreDisableOriMask) & 0x00200000)  != 0;
     checkbox varid = CPU_SETUP.PerCoreDisable1[21],
       prompt   = STRING_TOKEN(0x0881),
       help     = STRING_TOKEN(0x08A1),
       flags    = RESET_REQUIRED,
     endcheckbox;
   endif;

   suppressif  (get(CPU_SETUP.PerCoreDisableOriMask) & 0x00400000)  != 0;
     checkbox varid = CPU_SETUP.PerCoreDisable1[22],
       prompt   = STRING_TOKEN(0x0882),
       help     = STRING_TOKEN(0x08A2),
       flags    = RESET_REQUIRED,
     endcheckbox;
   endif;

   suppressif  (get(CPU_SETUP.PerCoreDisableOriMask) & 0x00800000)  != 0;
     checkbox varid = CPU_SETUP.PerCoreDisable1[23],
       prompt   = STRING_TOKEN(0x0883),
       help     = STRING_TOKEN(0x08A3),
       flags    = RESET_REQUIRED,
     endcheckbox;
   endif;

   suppressif  (get(CPU_SETUP.PerCoreDisableOriMask) & 0x01000000)  != 0;
     checkbox varid = CPU_SETUP.PerCoreDisable1[24],
       prompt   = STRING_TOKEN(0x0884),
       help     = STRING_TOKEN(0x08A4),
       flags    = RESET_REQUIRED,
     endcheckbox;
   endif;

   suppressif  (get(CPU_SETUP.PerCoreDisableOriMask) & 0x02000000)  != 0;
     checkbox varid = CPU_SETUP.PerCoreDisable1[25],
       prompt   = STRING_TOKEN(0x0885),
       help     = STRING_TOKEN(0x08A5),
       flags    = RESET_REQUIRED,
     endcheckbox;
   endif;

   suppressif  (get(CPU_SETUP.PerCoreDisableOriMask) & 0x04000000)  != 0;
     checkbox varid = CPU_SETUP.PerCoreDisable1[26],
       prompt   = STRING_TOKEN(0x0886),
       help     = STRING_TOKEN(0x08A6),
       flags    = RESET_REQUIRED,
     endcheckbox;
   endif;

   suppressif  (get(CPU_SETUP.PerCoreDisableOriMask) & 0x08000000)  != 0;
     checkbox varid = CPU_SETUP.PerCoreDisable1[27],
       prompt   = STRING_TOKEN(0x0887),
       help     = STRING_TOKEN(0x08A7),
       flags    = RESET_REQUIRED,
     endcheckbox;
   endif;

   suppressif  (get(CPU_SETUP.PerCoreDisableOriMask) & 0x10000000)  != 0;
     checkbox varid = CPU_SETUP.PerCoreDisable1[28],
       prompt   = STRING_TOKEN(0x0888),
       help     = STRING_TOKEN(0x08A8),
       flags    = RESET_REQUIRED,
     endcheckbox;
   endif;

   suppressif  (get(CPU_SETUP.PerCoreDisableOriMask) & 0x20000000)  != 0;
     checkbox varid = CPU_SETUP.PerCoreDisable1[29],
       prompt   = STRING_TOKEN(0x0889),
       help     = STRING_TOKEN(0x08A9),
       flags    = RESET_REQUIRED,
     endcheckbox;
   endif;

   suppressif  (get(CPU_SETUP.PerCoreDisableOriMask) & 0x40000000)  != 0;
     checkbox varid = CPU_SETUP.PerCoreDisable1[30],
       prompt   = STRING_TOKEN(0x088A),
       help     = STRING_TOKEN(0x08AA),
       flags    = RESET_REQUIRED,
     endcheckbox;
   endif;

   suppressif  (get(CPU_SETUP.PerCoreDisableOriMask) & 0x80000000)  != 0;
     checkbox varid = CPU_SETUP.PerCoreDisable1[31],
       prompt   = STRING_TOKEN(0x088B),
       help     = STRING_TOKEN(0x08AB),
       flags    = RESET_REQUIRED,
     endcheckbox;
   endif;

   endform;
#line 473 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\Advanced.vfr"
  #line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaSetup.hfr"

































#line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SetupPreProcTools.hfr"









































































#line 75 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SetupPreProcTools.hfr"
#line 35 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaSetup.hfr"

    

    
    #line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\ItbtPcieSetupSinglePort.hfr"

































  form formid = 5438,
    title     = STRING_TOKEN(0x1E71);

    oneof varid   = SA_SETUP.PtmEnabled[0],
      prompt      = STRING_TOKEN (0x1E76),
      help        = STRING_TOKEN(0x1E7A),
      option text = STRING_TOKEN(0x0003), value = 1, flags =  DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
    endoneof;

      subtitle text = STRING_TOKEN(0x0002);

      subtitle text = STRING_TOKEN(0x1E7B);
      oneof varid   = SA_SETUP.SaPcieItbtLtrEnable[0],
        prompt   = STRING_TOKEN (0x1E7C),
        help     = STRING_TOKEN (0x1E80),
        option text = STRING_TOKEN(0x0004),  value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      suppressif ideqval SA_SETUP.SaPcieItbtLtrEnable[0] == 0;
        oneof varid   = SA_SETUP.SaPcieItbtSnoopLatencyOverrideMode[0],
          prompt      = STRING_TOKEN(0x1E81),
          help        = STRING_TOKEN(0x1E87),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        suppressif NOT ideqval SA_SETUP.SaPcieItbtSnoopLatencyOverrideMode[0] == 1;
          numeric varid = SA_SETUP.SaPcieItbtSnoopLatencyOverrideValue[0],
            prompt      = STRING_TOKEN(0x1E83),
            help        = STRING_TOKEN(0x1E8A),
            flags       = RESET_REQUIRED,
            minimum     = 0,
            maximum     = 1023,
            step        = 1,
            default     = 200,
          endnumeric;

          oneof varid   = SA_SETUP.SaPcieItbtSnoopLatencyOverrideMultiplier[0],
            prompt      = STRING_TOKEN(0x1E84),
            help        = STRING_TOKEN(0x1E89),
            option text = STRING_TOKEN(0x0E74), value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E75), value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E76), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E77), value = 3, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E78), value = 4, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E79), value = 5, flags = RESET_REQUIRED;
          endoneof;
        endif;

        oneof varid   = SA_SETUP.SaPcieItbtNonSnoopLatencyOverrideMode[0],
          prompt      = STRING_TOKEN (0x1E82),
          help        = STRING_TOKEN (0x1E88),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        suppressif NOT ideqval SA_SETUP.SaPcieItbtNonSnoopLatencyOverrideMode[0] == 1;
          numeric varid = SA_SETUP.SaPcieItbtNonSnoopLatencyOverrideValue[0],
            prompt      = STRING_TOKEN(0x1E85),
            help        = STRING_TOKEN(0x1E8B),
            flags       = RESET_REQUIRED,
            minimum     = 0,
            maximum     = 1023,
            step        = 1,
            default     = 200,
          endnumeric;

          oneof varid   = SA_SETUP.SaPcieItbtNonSnoopLatencyOverrideMultiplier[0],
            prompt      = STRING_TOKEN(0x1E86),
            help        = STRING_TOKEN(0x1E8C),
            option text = STRING_TOKEN(0x0E74), value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E75), value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E76), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E77), value = 3, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E78), value = 4, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E79), value = 5, flags = RESET_REQUIRED;
          endoneof;
        endif;

      oneof varid  = SA_SETUP.SaPcieItbtForceLtrOverride[0],
        prompt      = STRING_TOKEN(0x1E9F),
        help        = STRING_TOKEN(0x1EA3),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.SaPcieItbtLtrConfigLock[0],
        prompt   = STRING_TOKEN(0x1EA4),
        help     = STRING_TOKEN(0x1EA8),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      endif;

      subtitle text = STRING_TOKEN(0x0002);

  endform; 
#line 40 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaSetup.hfr"
    
    
    #line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\ItbtPcieSetupSinglePort.hfr"

































  form formid = 5439,
    title     = STRING_TOKEN(0x1E72);

    oneof varid   = SA_SETUP.PtmEnabled[1],
      prompt      = STRING_TOKEN (0x1E77),
      help        = STRING_TOKEN(0x1E7A),
      option text = STRING_TOKEN(0x0003), value = 1, flags =  DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
    endoneof;

      subtitle text = STRING_TOKEN(0x0002);

      subtitle text = STRING_TOKEN(0x1E7B);
      oneof varid   = SA_SETUP.SaPcieItbtLtrEnable[1],
        prompt   = STRING_TOKEN (0x1E7D),
        help     = STRING_TOKEN (0x1E80),
        option text = STRING_TOKEN(0x0004),  value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      suppressif ideqval SA_SETUP.SaPcieItbtLtrEnable[1] == 0;
        oneof varid   = SA_SETUP.SaPcieItbtSnoopLatencyOverrideMode[1],
          prompt      = STRING_TOKEN(0x1E8D),
          help        = STRING_TOKEN(0x1E87),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        suppressif NOT ideqval SA_SETUP.SaPcieItbtSnoopLatencyOverrideMode[1] == 1;
          numeric varid = SA_SETUP.SaPcieItbtSnoopLatencyOverrideValue[1],
            prompt      = STRING_TOKEN(0x1E8F),
            help        = STRING_TOKEN(0x1E8A),
            flags       = RESET_REQUIRED,
            minimum     = 0,
            maximum     = 1023,
            step        = 1,
            default     = 200,
          endnumeric;

          oneof varid   = SA_SETUP.SaPcieItbtSnoopLatencyOverrideMultiplier[1],
            prompt      = STRING_TOKEN(0x1E90),
            help        = STRING_TOKEN(0x1E89),
            option text = STRING_TOKEN(0x0E74), value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E75), value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E76), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E77), value = 3, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E78), value = 4, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E79), value = 5, flags = RESET_REQUIRED;
          endoneof;
        endif;

        oneof varid   = SA_SETUP.SaPcieItbtNonSnoopLatencyOverrideMode[1],
          prompt      = STRING_TOKEN (0x1E8E),
          help        = STRING_TOKEN (0x1E88),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        suppressif NOT ideqval SA_SETUP.SaPcieItbtNonSnoopLatencyOverrideMode[1] == 1;
          numeric varid = SA_SETUP.SaPcieItbtNonSnoopLatencyOverrideValue[1],
            prompt      = STRING_TOKEN(0x1E91),
            help        = STRING_TOKEN(0x1E8B),
            flags       = RESET_REQUIRED,
            minimum     = 0,
            maximum     = 1023,
            step        = 1,
            default     = 200,
          endnumeric;

          oneof varid   = SA_SETUP.SaPcieItbtNonSnoopLatencyOverrideMultiplier[1],
            prompt      = STRING_TOKEN(0x1E92),
            help        = STRING_TOKEN(0x1E8C),
            option text = STRING_TOKEN(0x0E74), value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E75), value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E76), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E77), value = 3, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E78), value = 4, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E79), value = 5, flags = RESET_REQUIRED;
          endoneof;
        endif;

      oneof varid  = SA_SETUP.SaPcieItbtForceLtrOverride[1],
        prompt      = STRING_TOKEN(0x1EA0),
        help        = STRING_TOKEN(0x1EA3),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.SaPcieItbtLtrConfigLock[1],
        prompt   = STRING_TOKEN(0x1EA5),
        help     = STRING_TOKEN(0x1EA8),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      endif;

      subtitle text = STRING_TOKEN(0x0002);

  endform; 
#line 43 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaSetup.hfr"
    
    
    #line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\ItbtPcieSetupSinglePort.hfr"

































  form formid = 5440,
    title     = STRING_TOKEN(0x1E73);

    oneof varid   = SA_SETUP.PtmEnabled[2],
      prompt      = STRING_TOKEN (0x1E78),
      help        = STRING_TOKEN(0x1E7A),
      option text = STRING_TOKEN(0x0003), value = 1, flags =  DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
    endoneof;

      subtitle text = STRING_TOKEN(0x0002);

      subtitle text = STRING_TOKEN(0x1E7B);
      oneof varid   = SA_SETUP.SaPcieItbtLtrEnable[2],
        prompt   = STRING_TOKEN (0x1E7E),
        help     = STRING_TOKEN (0x1E80),
        option text = STRING_TOKEN(0x0004),  value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      suppressif ideqval SA_SETUP.SaPcieItbtLtrEnable[2] == 0;
        oneof varid   = SA_SETUP.SaPcieItbtSnoopLatencyOverrideMode[2],
          prompt      = STRING_TOKEN(0x1E93),
          help        = STRING_TOKEN(0x1E87),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        suppressif NOT ideqval SA_SETUP.SaPcieItbtSnoopLatencyOverrideMode[2] == 1;
          numeric varid = SA_SETUP.SaPcieItbtSnoopLatencyOverrideValue[2],
            prompt      = STRING_TOKEN(0x1E95),
            help        = STRING_TOKEN(0x1E8A),
            flags       = RESET_REQUIRED,
            minimum     = 0,
            maximum     = 1023,
            step        = 1,
            default     = 200,
          endnumeric;

          oneof varid   = SA_SETUP.SaPcieItbtSnoopLatencyOverrideMultiplier[2],
            prompt      = STRING_TOKEN(0x1E96),
            help        = STRING_TOKEN(0x1E89),
            option text = STRING_TOKEN(0x0E74), value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E75), value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E76), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E77), value = 3, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E78), value = 4, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E79), value = 5, flags = RESET_REQUIRED;
          endoneof;
        endif;

        oneof varid   = SA_SETUP.SaPcieItbtNonSnoopLatencyOverrideMode[2],
          prompt      = STRING_TOKEN (0x1E94),
          help        = STRING_TOKEN (0x1E88),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        suppressif NOT ideqval SA_SETUP.SaPcieItbtNonSnoopLatencyOverrideMode[2] == 1;
          numeric varid = SA_SETUP.SaPcieItbtNonSnoopLatencyOverrideValue[2],
            prompt      = STRING_TOKEN(0x1E97),
            help        = STRING_TOKEN(0x1E8B),
            flags       = RESET_REQUIRED,
            minimum     = 0,
            maximum     = 1023,
            step        = 1,
            default     = 200,
          endnumeric;

          oneof varid   = SA_SETUP.SaPcieItbtNonSnoopLatencyOverrideMultiplier[2],
            prompt      = STRING_TOKEN(0x1E98),
            help        = STRING_TOKEN(0x1E8C),
            option text = STRING_TOKEN(0x0E74), value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E75), value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E76), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E77), value = 3, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E78), value = 4, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E79), value = 5, flags = RESET_REQUIRED;
          endoneof;
        endif;

      oneof varid  = SA_SETUP.SaPcieItbtForceLtrOverride[2],
        prompt      = STRING_TOKEN(0x1EA1),
        help        = STRING_TOKEN(0x1EA3),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.SaPcieItbtLtrConfigLock[2],
        prompt   = STRING_TOKEN(0x1EA6),
        help     = STRING_TOKEN(0x1EA8),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      endif;

      subtitle text = STRING_TOKEN(0x0002);

  endform; 
#line 46 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaSetup.hfr"
    
    
    #line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\ItbtPcieSetupSinglePort.hfr"

































  form formid = 5442,
    title     = STRING_TOKEN(0x1E74);

    oneof varid   = SA_SETUP.PtmEnabled[3],
      prompt      = STRING_TOKEN (0x1E79),
      help        = STRING_TOKEN(0x1E7A),
      option text = STRING_TOKEN(0x0003), value = 1, flags =  DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
    endoneof;

      subtitle text = STRING_TOKEN(0x0002);

      subtitle text = STRING_TOKEN(0x1E7B);
      oneof varid   = SA_SETUP.SaPcieItbtLtrEnable[3],
        prompt   = STRING_TOKEN (0x1E7F),
        help     = STRING_TOKEN (0x1E80),
        option text = STRING_TOKEN(0x0004),  value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      suppressif ideqval SA_SETUP.SaPcieItbtLtrEnable[3] == 0;
        oneof varid   = SA_SETUP.SaPcieItbtSnoopLatencyOverrideMode[3],
          prompt      = STRING_TOKEN(0x1E99),
          help        = STRING_TOKEN(0x1E87),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        suppressif NOT ideqval SA_SETUP.SaPcieItbtSnoopLatencyOverrideMode[3] == 1;
          numeric varid = SA_SETUP.SaPcieItbtSnoopLatencyOverrideValue[3],
            prompt      = STRING_TOKEN(0x1E9B),
            help        = STRING_TOKEN(0x1E8A),
            flags       = RESET_REQUIRED,
            minimum     = 0,
            maximum     = 1023,
            step        = 1,
            default     = 200,
          endnumeric;

          oneof varid   = SA_SETUP.SaPcieItbtSnoopLatencyOverrideMultiplier[3],
            prompt      = STRING_TOKEN(0x1E9C),
            help        = STRING_TOKEN(0x1E89),
            option text = STRING_TOKEN(0x0E74), value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E75), value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E76), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E77), value = 3, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E78), value = 4, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E79), value = 5, flags = RESET_REQUIRED;
          endoneof;
        endif;

        oneof varid   = SA_SETUP.SaPcieItbtNonSnoopLatencyOverrideMode[3],
          prompt      = STRING_TOKEN (0x1E9A),
          help        = STRING_TOKEN (0x1E88),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        suppressif NOT ideqval SA_SETUP.SaPcieItbtNonSnoopLatencyOverrideMode[3] == 1;
          numeric varid = SA_SETUP.SaPcieItbtNonSnoopLatencyOverrideValue[3],
            prompt      = STRING_TOKEN(0x1E9D),
            help        = STRING_TOKEN(0x1E8B),
            flags       = RESET_REQUIRED,
            minimum     = 0,
            maximum     = 1023,
            step        = 1,
            default     = 200,
          endnumeric;

          oneof varid   = SA_SETUP.SaPcieItbtNonSnoopLatencyOverrideMultiplier[3],
            prompt      = STRING_TOKEN(0x1E9E),
            help        = STRING_TOKEN(0x1E8C),
            option text = STRING_TOKEN(0x0E74), value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E75), value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E76), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E77), value = 3, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E78), value = 4, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E79), value = 5, flags = RESET_REQUIRED;
          endoneof;
        endif;

      oneof varid  = SA_SETUP.SaPcieItbtForceLtrOverride[3],
        prompt      = STRING_TOKEN(0x1EA2),
        help        = STRING_TOKEN(0x1EA3),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.SaPcieItbtLtrConfigLock[3],
        prompt   = STRING_TOKEN(0x1EA7),
        help     = STRING_TOKEN(0x1EA8),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      endif;

      subtitle text = STRING_TOKEN(0x0002);

  endform; 
#line 49 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaSetup.hfr"
    

    form formid = 4136,
    title = STRING_TOKEN(0x1594);




      goto 4327,
        prompt  = STRING_TOKEN(0x1662),
        help    = STRING_TOKEN(0x1663);



      goto 4168,
        prompt = STRING_TOKEN(0x16DD),
        help = STRING_TOKEN(0x16DE);

      goto 4324,
        prompt  = STRING_TOKEN(0x17CC),
        help    = STRING_TOKEN(0x17CD);

      suppressif ideqval SETUP_VOLATILE_DATA.MobileOcUnSupport == 1;
        goto 4124,
          prompt  = STRING_TOKEN(0x09A3),
          help    = STRING_TOKEN(0x09A4);
      endif;




      suppressif ideqval SA_SETUP.MCREGOFFSET == 0x0;
        goto 5037,
          prompt  = STRING_TOKEN(0x177D),
          help    = STRING_TOKEN(0x177E);
      endif;




      subtitle text = STRING_TOKEN(0x1594);
      subtitle text = STRING_TOKEN(0x0002);

      text
        help   = STRING_TOKEN(0x1387),
        text   = STRING_TOKEN(0x1388),
        text   = STRING_TOKEN(0x1389),
        flags  = 0,
        key    = 0;

      text
        help   = STRING_TOKEN(0x1462),
        text   = STRING_TOKEN(0x1461),
        text   = STRING_TOKEN(0x1463),
        flags  = 0,
        key    = 0;

      text
        help   = STRING_TOKEN(0x15AD),
        text   = STRING_TOKEN(0x15AE),
        text   = STRING_TOKEN(0x15AF),
        flags  = 0,
        key    = 0;

      text
        help   = STRING_TOKEN(0x15B0),
        text   = STRING_TOKEN(0x15B1),
        text   = STRING_TOKEN(0x15C1),
        flags  = 0,
        key    = 0;

      suppressif ideqval SETUP_VOLATILE_DATA.DimmPresent[0x0] == 0x0;
        text
          help   = STRING_TOKEN(0x15D1),
          text   = STRING_TOKEN(0x15D2),
          text   = STRING_TOKEN(0x15D3),
          flags  = 0,
          key    = 0;
        text
          help   = STRING_TOKEN(0x15E3),
          text   = STRING_TOKEN(0x15E4),
          text   = STRING_TOKEN(0x15E5),
          flags  = 0,
          key    = 0;
        text
          help   = STRING_TOKEN(0x15F5),
          text   = STRING_TOKEN(0x15F6),
          text   = STRING_TOKEN(0x15F7),
          flags  = 0,
          key    = 0;
      endif;

      suppressif ideqvallist SETUP_VOLATILE_DATA.MemoryType == 2 3; 
        text
          help   = STRING_TOKEN(0x15B0),
          text   = STRING_TOKEN(0x15B2),
          text   = STRING_TOKEN(0x15C2),
          flags  = 0,
          key    = 0;

        suppressif ideqval SETUP_VOLATILE_DATA.DimmPresent[0x1] == 0x0;
          text
            help   = STRING_TOKEN(0x15D1),
            text   = STRING_TOKEN(0x15D2),
            text   = STRING_TOKEN(0x15D4),
            flags  = 0,
            key    = 0;
          text
            help   = STRING_TOKEN(0x15E3),
            text   = STRING_TOKEN(0x15E4),
            text   = STRING_TOKEN(0x15E6),
            flags  = 0,
            key    = 0;
          text
            help   = STRING_TOKEN(0x15F5),
            text   = STRING_TOKEN(0x15F6),
            text   = STRING_TOKEN(0x15F8),
            flags  = 0,
            key    = 0;
        endif;
      endif;

      suppressif ideqvallist SETUP_VOLATILE_DATA.MemoryType == 0 1; 
        text
          help   = STRING_TOKEN(0x15B0),
          text   = STRING_TOKEN(0x15B3),
          text   = STRING_TOKEN(0x15C3),
          flags  = 0,
          key    = 0;

        suppressif ideqval SETUP_VOLATILE_DATA.DimmPresent[0x2] == 0x0;
          text
            help   = STRING_TOKEN(0x15D1),
            text   = STRING_TOKEN(0x15D2),
            text   = STRING_TOKEN(0x15D5),
            flags  = 0,
            key    = 0;
          text
            help   = STRING_TOKEN(0x15E3),
            text   = STRING_TOKEN(0x15E4),
            text   = STRING_TOKEN(0x15E7),
            flags  = 0,
            key    = 0;
          text
            help   = STRING_TOKEN(0x15F5),
            text   = STRING_TOKEN(0x15F6),
            text   = STRING_TOKEN(0x15F9),
            flags  = 0,
            key    = 0;
        endif;

        suppressif ideqvallist SETUP_VOLATILE_DATA.MemoryType == 0 1 2 3; 
          text
            help   = STRING_TOKEN(0x15B0),
            text   = STRING_TOKEN(0x15B4),
            text   = STRING_TOKEN(0x15C4),
            flags  = 0,
            key    = 0;

          suppressif ideqval SETUP_VOLATILE_DATA.DimmPresent[0x3] == 0x0;
            text
              help   = STRING_TOKEN(0x15D1),
              text   = STRING_TOKEN(0x15D2),
              text   = STRING_TOKEN(0x15D6),
              flags  = 0,
              key    = 0;
            text
              help   = STRING_TOKEN(0x15E3),
              text   = STRING_TOKEN(0x15E4),
              text   = STRING_TOKEN(0x15E8),
              flags  = 0,
              key    = 0;
            text
              help   = STRING_TOKEN(0x15F5),
              text   = STRING_TOKEN(0x15F6),
              text   = STRING_TOKEN(0x15FA),
              flags  = 0,
              key    = 0;
          endif;
        endif;

        suppressif ideqvallist SETUP_VOLATILE_DATA.MemoryType == 0 1; 
          text
            help   = STRING_TOKEN(0x15B0),
            text   = STRING_TOKEN(0x15B5),
            text   = STRING_TOKEN(0x15C5),
            flags  = 0,
            key    = 0;

          suppressif ideqval SETUP_VOLATILE_DATA.DimmPresent[0x4] == 0x0;
            text
              help   = STRING_TOKEN(0x15D1),
              text   = STRING_TOKEN(0x15D2),
              text   = STRING_TOKEN(0x15D7),
              flags  = 0,
              key    = 0;
            text
              help   = STRING_TOKEN(0x15E3),
              text   = STRING_TOKEN(0x15E4),
              text   = STRING_TOKEN(0x15E9),
              flags  = 0,
              key    = 0;
            text
              help   = STRING_TOKEN(0x15F5),
              text   = STRING_TOKEN(0x15F6),
              text   = STRING_TOKEN(0x15FB),
              flags  = 0,
              key    = 0;
          endif;

          suppressif ideqvallist SETUP_VOLATILE_DATA.MemoryType == 0 1 2 3; 
            text
              help   = STRING_TOKEN(0x15B0),
              text   = STRING_TOKEN(0x15B6),
              text   = STRING_TOKEN(0x15C6),
              flags  = 0,
              key    = 0;

            suppressif ideqval SETUP_VOLATILE_DATA.DimmPresent[0x5] == 0x0;
              text
                help   = STRING_TOKEN(0x15D1),
                text   = STRING_TOKEN(0x15D2),
                text   = STRING_TOKEN(0x15D8),
                flags  = 0,
                key    = 0;
              text
                help   = STRING_TOKEN(0x15E3),
                text   = STRING_TOKEN(0x15E4),
                text   = STRING_TOKEN(0x15EA),
                flags  = 0,
                key    = 0;
              text
                help   = STRING_TOKEN(0x15F5),
                text   = STRING_TOKEN(0x15F6),
                text   = STRING_TOKEN(0x15FC),
                flags  = 0,
                key    = 0;
            endif;
          endif;

          text
            help   = STRING_TOKEN(0x15B0),
            text   = STRING_TOKEN(0x15B7),
            text   = STRING_TOKEN(0x15C7),
            flags  = 0,
            key    = 0;

          suppressif ideqval SETUP_VOLATILE_DATA.DimmPresent[0x6] == 0x0;
            text
              help   = STRING_TOKEN(0x15D1),
              text   = STRING_TOKEN(0x15D2),
              text   = STRING_TOKEN(0x15D9),
              flags  = 0,
              key    = 0;
            text
              help   = STRING_TOKEN(0x15E3),
              text   = STRING_TOKEN(0x15E4),
              text   = STRING_TOKEN(0x15EB),
              flags  = 0,
              key    = 0;
            text
              help   = STRING_TOKEN(0x15F5),
              text   = STRING_TOKEN(0x15F6),
              text   = STRING_TOKEN(0x15FD),
              flags  = 0,
              key    = 0;
          endif;

          suppressif ideqvallist SETUP_VOLATILE_DATA.MemoryType == 0 1 2 3; 
            text
              help   = STRING_TOKEN(0x15B0),
              text   = STRING_TOKEN(0x15B8),
              text   = STRING_TOKEN(0x15C8),
              flags  = 0,
              key    = 0;

            suppressif ideqval SETUP_VOLATILE_DATA.DimmPresent[0x7] == 0x0;
              text
                help   = STRING_TOKEN(0x15D1),
                text   = STRING_TOKEN(0x15D2),
                text   = STRING_TOKEN(0x15DA),
                flags  = 0,
                key    = 0;
              text
                help   = STRING_TOKEN(0x15E3),
                text   = STRING_TOKEN(0x15E4),
                text   = STRING_TOKEN(0x15EC),
                flags  = 0,
                key    = 0;
              text
                help   = STRING_TOKEN(0x15F5),
                text   = STRING_TOKEN(0x15F6),
                text   = STRING_TOKEN(0x15FE),
                flags  = 0,
                key    = 0;
            endif;
          endif;
        endif;
      endif;

      text
        help   = STRING_TOKEN(0x15B0),
        text   = STRING_TOKEN(0x15B9),
        text   = STRING_TOKEN(0x15C9),
        flags  = 0,
        key    = 0;

      suppressif ideqval SETUP_VOLATILE_DATA.DimmPresent[0x8] == 0x0;
        text
          help   = STRING_TOKEN(0x15D1),
          text   = STRING_TOKEN(0x15D2),
          text   = STRING_TOKEN(0x15DB),
          flags  = 0,
          key    = 0;
        text
          help   = STRING_TOKEN(0x15E3),
          text   = STRING_TOKEN(0x15E4),
          text   = STRING_TOKEN(0x15ED),
          flags  = 0,
          key    = 0;
        text
          help   = STRING_TOKEN(0x15F5),
          text   = STRING_TOKEN(0x15F6),
          text   = STRING_TOKEN(0x15FF),
          flags  = 0,
          key    = 0;
      endif;

      suppressif ideqvallist SETUP_VOLATILE_DATA.MemoryType == 2 3; 
        text
          help   = STRING_TOKEN(0x15B0),
          text   = STRING_TOKEN(0x15BA),
          text   = STRING_TOKEN(0x15CA),
          flags  = 0,
          key    = 0;

        suppressif ideqval SETUP_VOLATILE_DATA.DimmPresent[0x9] == 0x0;
          text
            help   = STRING_TOKEN(0x15D1),
            text   = STRING_TOKEN(0x15D2),
            text   = STRING_TOKEN(0x15DC),
            flags  = 0,
            key    = 0;
          text
            help   = STRING_TOKEN(0x15E3),
            text   = STRING_TOKEN(0x15E4),
            text   = STRING_TOKEN(0x15EE),
            flags  = 0,
            key    = 0;
          text
            help   = STRING_TOKEN(0x15F5),
            text   = STRING_TOKEN(0x15F6),
            text   = STRING_TOKEN(0x1600),
            flags  = 0,
            key    = 0;
        endif;
      endif;

      suppressif ideqvallist SETUP_VOLATILE_DATA.MemoryType == 0 1; 
        text
          help   = STRING_TOKEN(0x15B0),
          text   = STRING_TOKEN(0x15BB),
          text   = STRING_TOKEN(0x15CB),
          flags  = 0,
          key    = 0;

        suppressif ideqval SETUP_VOLATILE_DATA.DimmPresent[0xa] == 0x0;
          text
            help   = STRING_TOKEN(0x15D1),
            text   = STRING_TOKEN(0x15D2),
            text   = STRING_TOKEN(0x15DD),
            flags  = 0,
            key    = 0;
          text
            help   = STRING_TOKEN(0x15E3),
            text   = STRING_TOKEN(0x15E4),
            text   = STRING_TOKEN(0x15EF),
            flags  = 0,
            key    = 0;
          text
            help   = STRING_TOKEN(0x15F5),
            text   = STRING_TOKEN(0x15F6),
            text   = STRING_TOKEN(0x1601),
            flags  = 0,
            key    = 0;
        endif;

        suppressif ideqvallist SETUP_VOLATILE_DATA.MemoryType == 0 1 2 3; 
          text
            help   = STRING_TOKEN(0x15B0),
            text   = STRING_TOKEN(0x15BC),
            text   = STRING_TOKEN(0x15CC),
            flags  = 0,
            key    = 0;

          suppressif ideqval SETUP_VOLATILE_DATA.DimmPresent[0xb] == 0x0;
            text
              help   = STRING_TOKEN(0x15D1),
              text   = STRING_TOKEN(0x15D2),
              text   = STRING_TOKEN(0x15DE),
              flags  = 0,
              key    = 0;

              text
                help   = STRING_TOKEN(0x15E3),
                text   = STRING_TOKEN(0x15E4),
                text   = STRING_TOKEN(0x15F0),
                flags  = 0,
                key    = 0;
              text
                help   = STRING_TOKEN(0x15F5),
                text   = STRING_TOKEN(0x15F6),
                text   = STRING_TOKEN(0x1602),
                flags  = 0,
                key    = 0;
          endif;
        endif;

        suppressif ideqvallist SETUP_VOLATILE_DATA.MemoryType == 0 1; 
          text
            help   = STRING_TOKEN(0x15B0),
            text   = STRING_TOKEN(0x15BD),
            text   = STRING_TOKEN(0x15CD),
            flags  = 0,
            key    = 0;

          suppressif ideqval SETUP_VOLATILE_DATA.DimmPresent[0xc] == 0x0;
            text
              help   = STRING_TOKEN(0x15D1),
              text   = STRING_TOKEN(0x15D2),
              text   = STRING_TOKEN(0x15DF),
              flags  = 0,
              key    = 0;
            text
              help   = STRING_TOKEN(0x15E3),
              text   = STRING_TOKEN(0x15E4),
              text   = STRING_TOKEN(0x15F1),
              flags  = 0,
              key    = 0;
            text
              help   = STRING_TOKEN(0x15F5),
              text   = STRING_TOKEN(0x15F6),
              text   = STRING_TOKEN(0x1603),
              flags  = 0,
              key    = 0;
          endif;

          suppressif ideqvallist SETUP_VOLATILE_DATA.MemoryType == 0 1 2 3; 
            text
              help   = STRING_TOKEN(0x15B0),
              text   = STRING_TOKEN(0x15BE),
              text   = STRING_TOKEN(0x15CE),
              flags  = 0,
             key    = 0;

            suppressif ideqval SETUP_VOLATILE_DATA.DimmPresent[0xd] == 0x0;
              text
                help   = STRING_TOKEN(0x15D1),
                text   = STRING_TOKEN(0x15D2),
                text   = STRING_TOKEN(0x15E0),
                flags  = 0,
                key    = 0;

              text
                help   = STRING_TOKEN(0x15E3),
                text   = STRING_TOKEN(0x15E4),
                text   = STRING_TOKEN(0x15F2),
                flags  = 0,
                key    = 0;
              text
                help   = STRING_TOKEN(0x15F5),
                text   = STRING_TOKEN(0x15F6),
                text   = STRING_TOKEN(0x1604),
                flags  = 0,
                key    = 0;
            endif;
          endif;

          text
            help   = STRING_TOKEN(0x15B0),
            text   = STRING_TOKEN(0x15BF),
            text   = STRING_TOKEN(0x15CF),
            flags  = 0,
            key    = 0;

          suppressif ideqval SETUP_VOLATILE_DATA.DimmPresent[0xe] == 0x0;
            text
              help   = STRING_TOKEN(0x15D1),
              text   = STRING_TOKEN(0x15D2),
              text   = STRING_TOKEN(0x15E1),
              flags  = 0,
              key    = 0;
            text
              help   = STRING_TOKEN(0x15E3),
              text   = STRING_TOKEN(0x15E4),
              text   = STRING_TOKEN(0x15F3),
              flags  = 0,
              key    = 0;
            text
              help   = STRING_TOKEN(0x15F5),
              text   = STRING_TOKEN(0x15F6),
              text   = STRING_TOKEN(0x1605),
              flags  = 0,
              key    = 0;
          endif;

          suppressif ideqvallist SETUP_VOLATILE_DATA.MemoryType == 0 1 2 3; 
            text
              help   = STRING_TOKEN(0x15B0),
              text   = STRING_TOKEN(0x15C0),
              text   = STRING_TOKEN(0x15D0),
              flags  = 0,
              key    = 0;

            suppressif ideqval SETUP_VOLATILE_DATA.DimmPresent[0xf] == 0x0;
              text
                help   = STRING_TOKEN(0x15D1),
                text   = STRING_TOKEN(0x15D2),
                text   = STRING_TOKEN(0x15E2),
                flags  = 0,
                key    = 0;

              text
                help   = STRING_TOKEN(0x15E3),
                text   = STRING_TOKEN(0x15E4),
                text   = STRING_TOKEN(0x15F4),
                flags  = 0,
                key    = 0;
              text
                help   = STRING_TOKEN(0x15F5),
                text   = STRING_TOKEN(0x15F6),
                text   = STRING_TOKEN(0x1606),
                flags  = 0,
                key    = 0;
            endif;
          endif;
        endif;
      endif;

      subtitle text = STRING_TOKEN(0x0002);

      numeric varid  = SA_SETUP.DebugValue,
        prompt  = STRING_TOKEN (0x159B),
        help    = STRING_TOKEN (0x159C),
        flags   = RESET_REQUIRED,
        minimum = 0,
        maximum = 0xFFFFFFFF,
        step    = 1,
        default = 0,
      endnumeric;

      oneof varid  = SA_SETUP.MrcSafeConfig,
        prompt      = STRING_TOKEN (0x190F),
        help        = STRING_TOKEN (0x1910),
        option text = STRING_TOKEN (0x1591), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN (0x1590),  value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid  = SA_SETUP.LpDdrDqDqsReTraining,
        prompt      = STRING_TOKEN (0x1911),
        help        = STRING_TOKEN (0x1912),
        option text = STRING_TOKEN (0x1591), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x1590),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid  = SA_SETUP.SafeMode,
        prompt   = STRING_TOKEN (0x1650),
        help     = STRING_TOKEN (0x1651),
        option text = STRING_TOKEN (0x1591), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN (0x1590), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid  = SA_SETUP.MemTestOnWarmBoot,
        prompt   = STRING_TOKEN (0x1652),
        help     = STRING_TOKEN (0x1653),
        option text = STRING_TOKEN (0x1591), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x1590), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      
      
      
      oneof varid = SA_SETUP.DdrFreqLimit,
        prompt  = STRING_TOKEN(0x1921),
        help    = STRING_TOKEN(0x1922),
        default = 0, defaultstore = MyStandardDefault,
        option text = STRING_TOKEN(0x158F),            value = 0,     flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1923),  value = 1067,  flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1924),  value = 1333,  flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1925),  value = 1400,  flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1926),  value = 1600,  flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1927),  value = 1800,  flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1928),  value = 1867,  flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1929),  value = 2000,  flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x192A),  value = 2133,  flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x192B),  value = 2200,  flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x192C),  value = 2400,  flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x192D),  value = 2600,  flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x192E),  value = 2667,  flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x192F),  value = 2800,  flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1930),  value = 2933,  flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1931),  value = 3000,  flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1932),  value = 3200,  flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1933),  value = 3467,  flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1934),  value = 3600,  flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1935),  value = 3733,  flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1936),  value = 4000,  flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1937),  value = 4200,  flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1938),  value = 4267,  flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1939),  value = 4400,  flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x193A),  value = 4600,  flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x193B),  value = 4800,  flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x193C),  value = 5000,  flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x193D),  value = 5200,  flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x193E),  value = 5400,  flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x193F),  value = 5600,  flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1940),  value = 5800,  flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1941),  value = 6000,  flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1942),  value = 6200,  flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1943),  value = 6400,  flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1944), value = 10000, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1945), value = 12800, flags = RESET_REQUIRED;
      endoneof;

      oneof varid = SA_SETUP.Lp5BankMode,
        prompt  = STRING_TOKEN(0x1913),
        help    = STRING_TOKEN(0x1914),
        option text = STRING_TOKEN(0x158F),              value = 0,     flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1915),   value = 1,     flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1916),  value = 2,     flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1917),       value = 3,     flags = RESET_REQUIRED;
      endoneof;

















#line 699 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaSetup.hfr"



      numeric varid = SA_SETUP.FreqLimitMixedConfig,
        prompt  = STRING_TOKEN(0x1946),
        help    = STRING_TOKEN(0x1947),
        flags   = RESET_REQUIRED,
        minimum = 0,
        maximum = 0xFFFF,
        step    = 1,
        default = 0,
      endnumeric;

      numeric varid = SA_SETUP.FreqLimitMixedConfig_1R1R_8GB,
        prompt  = STRING_TOKEN(0x1948),
        help    = STRING_TOKEN(0x1949),
        flags   = RESET_REQUIRED,
        minimum = 0,
        maximum = 0xFFFF,
        step    = 1,
        default = 2000,
      endnumeric;

      numeric varid = SA_SETUP.FreqLimitMixedConfig_1R1R_16GB,
        prompt  = STRING_TOKEN(0x194A),
        help    = STRING_TOKEN(0x194B),
        flags   = RESET_REQUIRED,
        minimum = 0,
        maximum = 0xFFFF,
        step    = 1,
        default = 2000,
      endnumeric;

      numeric varid = SA_SETUP.FreqLimitMixedConfig_1R1R_8GB_16GB,
        prompt  = STRING_TOKEN(0x194C),
        help    = STRING_TOKEN(0x194D),
        flags   = RESET_REQUIRED,
        minimum = 0,
        maximum = 0xFFFF,
        step    = 1,
        default = 2000,
      endnumeric;

      numeric varid = SA_SETUP.FreqLimitMixedConfig_2R2R,
        prompt  = STRING_TOKEN(0x194E),
        help    = STRING_TOKEN(0x194F),
        flags   = RESET_REQUIRED,
        minimum = 0,
        maximum = 0xFFFF,
        step    = 1,
        default = 2000,
      endnumeric;

      numeric varid = SA_SETUP.LctCmdEyeWidth,
        prompt  = STRING_TOKEN(0x1950),
        help    = STRING_TOKEN(0x1951),
        flags   = RESET_REQUIRED,
        minimum = 0,
        maximum = 0xFFFF,
        step    = 1,
        default = 96,
      endnumeric;

      oneof varid    = SA_SETUP.HobBufferSize,
        prompt   = STRING_TOKEN(0x1596),
        help     = STRING_TOKEN(0x1597),
        option text = STRING_TOKEN(0x158F), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1598),          value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1599),         value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x159A),         value = 3, flags = RESET_REQUIRED;
      endoneof;

      suppressif NOT ideqval SETUP_VOLATILE_DATA.PlatformFlavor == 0x2 AND
                 NOT ideqval SETUP_VOLATILE_DATA.PlatformFlavor == 0x5 AND
                 NOT ideqval SETUP_VOLATILE_DATA.PlatformFlavor == 0x4 AND
                 NOT ideqval SETUP_VOLATILE_DATA.PlatformFlavor == 0x3;
        oneof varid  = SA_SETUP.EccSupport,
          prompt   = STRING_TOKEN (0x159D),
          help     = STRING_TOKEN (0x159E),
          option text = STRING_TOKEN (0x1591), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x1590),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        numeric varid = SA_SETUP.EccErrInjAddress,
          prompt      = STRING_TOKEN (0x18AF),
          help        = STRING_TOKEN (0x18B0),
          flags       = RESET_REQUIRED,
          minimum     = 0x0,
          maximum     = 0x1FFFFFFFF,
          step        = 0x40,
          default     = 0x0,
        endnumeric;

        numeric varid = SA_SETUP.EccErrInjMask,
          prompt      = STRING_TOKEN (0x18B1),
          help        = STRING_TOKEN (0x18B2),
          flags       = RESET_REQUIRED,
          minimum     = 0x0,
          maximum     = 0x1FFFFFFFF,
          step        = 0x0,
          default     = 0x0,
        endnumeric;

        numeric varid = SA_SETUP.EccErrInjCount,
          prompt      = STRING_TOKEN (0x18B3),
          help        = STRING_TOKEN (0x18B4),
          flags       = RESET_REQUIRED,
          minimum     = 0x0,
          maximum     = 0xFFFFFFFF,
          step        = 1,
          default     = 0xF,
        endnumeric;
      endif;

      
      
      
      oneof varid    = SA_SETUP.MaxTolud,
        prompt   = STRING_TOKEN(0x159F),
        help     = STRING_TOKEN(0x15A0),
        default  = 0, defaultstore = MyStandardDefault,
        option text = STRING_TOKEN(0x15A1), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x15AC),      value = 1,      flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x15AB),   value = 2,   flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x15AA),    value = 3,    flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x15A9),   value = 4,   flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x15A8),      value = 5,      flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x15A7),   value = 6,   flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x15A6),    value = 7,    flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x15A5),   value = 8,   flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x15A4),      value = 9,      flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x15A3),   value = 10,   flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x15A2),    value = 11,    flags = RESET_REQUIRED;
      endoneof;

       
        oneof varid  = SA_SETUP.SaGv,
          questionid = 32768,
          prompt     = STRING_TOKEN (0x17BA),
          help       = STRING_TOKEN (0x17BB),

          option text = STRING_TOKEN (0x1591),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN (0x1590),   value = 5, flags = RESET_REQUIRED;



#line 846 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaSetup.hfr"
          option text = STRING_TOKEN (0x17BC),    value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x17BD),    value = 2, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x17BE),    value = 3, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x17BF),    value = 4, flags = RESET_REQUIRED;
        endoneof;
       

      suppressif NOT ideqval SA_SETUP.SaGv == 0;
        numeric varid  = SA_SETUP.GearRatio,
          prompt  = STRING_TOKEN (0x17CA),
          help    = STRING_TOKEN (0x17CB),
          flags   = RESET_REQUIRED,
          minimum = 0,
          maximum = 4,
          step    = 1,
          default = 0,
        endnumeric;
      endif;

      suppressif ideqval SA_SETUP.SaGv == 0;
        numeric varid    = SA_SETUP.SaGvFreq[0],
          prompt  = STRING_TOKEN(0x17C0),
          help    = STRING_TOKEN(0x17C8),
          flags   = RESET_REQUIRED,
          minimum = 0,
          maximum = 0xFFFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid  = SA_SETUP.SaGvGear[0],
          prompt  = STRING_TOKEN (0x17C1),
          help    = STRING_TOKEN (0x17C9),
          flags   = RESET_REQUIRED,
          minimum = 0,
          maximum = 4,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid    = SA_SETUP.SaGvFreq[1],
          prompt  = STRING_TOKEN(0x17C2),
          help    = STRING_TOKEN(0x17C8),
          flags   = RESET_REQUIRED,
          minimum = 0,
          maximum = 0xFFFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid  = SA_SETUP.SaGvGear[1],
          prompt  = STRING_TOKEN (0x17C3),
          help    = STRING_TOKEN (0x17C9),
          flags   = RESET_REQUIRED,
          minimum = 0,
          maximum = 4,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid    = SA_SETUP.SaGvFreq[2],
          prompt  = STRING_TOKEN(0x17C4),
          help    = STRING_TOKEN(0x17C8),
          flags   = RESET_REQUIRED,
          minimum = 0,
          maximum = 0xFFFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid  = SA_SETUP.SaGvGear[2],
          prompt  = STRING_TOKEN (0x17C5),
          help    = STRING_TOKEN (0x17C9),
          flags   = RESET_REQUIRED,
          minimum = 0,
          maximum = 4,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid    = SA_SETUP.SaGvFreq[3],
          prompt  = STRING_TOKEN(0x17C6),
          help    = STRING_TOKEN(0x17C8),
          flags   = RESET_REQUIRED,
          minimum = 0,
          maximum = 0xFFFF,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid  = SA_SETUP.SaGvGear[3],
          prompt  = STRING_TOKEN (0x17C7),
          help    = STRING_TOKEN (0x17C9),
          flags   = RESET_REQUIRED,
          minimum = 0,
          maximum = 4,
          step    = 1,
          default = 0,
        endnumeric;
      endif;

      numeric varid  = SA_SETUP.SagvSwitchFactorIA,
        prompt       = STRING_TOKEN (0x1721),
        help         = STRING_TOKEN (0x1722),
        flags        = RESET_REQUIRED,
        minimum      = 1,
        maximum      = 50,
        step         = 1,
        default      = 30,
      endnumeric;

      numeric varid  = SA_SETUP.SagvSwitchFactorGT,
        prompt       = STRING_TOKEN (0x1723),
        help         = STRING_TOKEN (0x1724),
        flags        = RESET_REQUIRED,
        minimum      = 1,
        maximum      = 50,
        step         = 1,
        default      = 30,
      endnumeric;

      numeric varid  = SA_SETUP.SagvSwitchFactorIO,
        prompt       = STRING_TOKEN (0x1725),
        help         = STRING_TOKEN (0x1726),
        flags        = RESET_REQUIRED,
        minimum      = 1,
        maximum      = 50,
        step         = 1,
        default      = 30,
      endnumeric;

      numeric varid  = SA_SETUP.SagvSwitchFactorStall,
        prompt       = STRING_TOKEN (0x1727),
        help         = STRING_TOKEN (0x1728),
        flags        = RESET_REQUIRED,
        minimum      = 1,
        maximum      = 50,
        step         = 1,
        default      = 30,
      endnumeric;

      numeric varid = SA_SETUP.SagvHeuristicsUpControl,
        prompt  = STRING_TOKEN(0x172B),
        help    = STRING_TOKEN(0x172C),
        flags        = RESET_REQUIRED,
        minimum      = 1,
        maximum      = 50,
        step         = 1,
        default      = 1,
      endnumeric;

      numeric varid = SA_SETUP.SagvHeuristicsDownControl,
        prompt  = STRING_TOKEN(0x1729),
        help    = STRING_TOKEN(0x172A),
        flags        = RESET_REQUIRED,
        minimum      = 1,
        maximum      = 50,
        step         = 1,
        default      = 1,
      endnumeric;

      oneof varid   = SA_SETUP.RetrainOnFastFail,
        prompt      = STRING_TOKEN(0x1658),
        help        = STRING_TOKEN(0x1659),
        option text = STRING_TOKEN(0x1591), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1590),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.Ddr4OneDpc,
        prompt      = STRING_TOKEN(0x165A),
        help        = STRING_TOKEN(0x165B),
        option text = STRING_TOKEN(0x1591),      value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x165C), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x165D), value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1590),       value = 3, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;




      oneof varid   = SA_SETUP.ForceRetrainPath,
        prompt      = STRING_TOKEN(0x1665),
        help        = STRING_TOKEN(0x1666),
        option text = STRING_TOKEN(0x1591), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1590), value = 1, flags = RESET_REQUIRED;
      endoneof;

      suppressif ideqval SA_SETUP.NModeSupport == 2;
        oneof varid  = SA_SETUP.EnCmdRate,
          prompt   = STRING_TOKEN (0x166E),
          help     = STRING_TOKEN (0x166F),
          option text = STRING_TOKEN (0x0004),   value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x1670),     value = 5, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x1671),     value = 7, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN (0x1672),     value = 9, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x1673),     value = 11, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x1674),     value = 13, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x1675),     value = 15, flags = RESET_REQUIRED;
        endoneof;
      endif;

      oneof varid  = SA_SETUP.CmdTriStateDis,
        prompt   = STRING_TOKEN (0x1676),
        help     = STRING_TOKEN (0x1677),
        option text = STRING_TOKEN (0x1590), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN (0x1591), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid  = SA_SETUP.EnLA,
        prompt   = STRING_TOKEN (0x1678),
        help     = STRING_TOKEN (0x1679),
        option text = STRING_TOKEN (0x1591), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN (0x1590),  value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid    = SA_SETUP.EnhancedInterleave,
        prompt   = STRING_TOKEN(0x169F),
        help     = STRING_TOKEN(0x16A0),
        option text = STRING_TOKEN (0x1591), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x1590), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid    = SA_SETUP.RankInterleave,
        prompt   = STRING_TOKEN(0x169D),
        help     = STRING_TOKEN(0x169E),
        option text = STRING_TOKEN (0x1591), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x1590), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid  = SA_SETUP.WeaklockEn,
        prompt   = STRING_TOKEN (0x16A1),
        help     = STRING_TOKEN (0x16A2),
        option text = STRING_TOKEN (0x1591), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x1590), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid  = SA_SETUP.AsyncOdtDis,
        prompt   = STRING_TOKEN (0x16A3),
        help     = STRING_TOKEN (0x16A4),
        option text = STRING_TOKEN (0x1590), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN (0x1591), value = 1, flags = RESET_REQUIRED;
      endoneof;




      oneof varid = SA_SETUP.RhSelect,
        prompt    = STRING_TOKEN(0x161F),
        help      = STRING_TOKEN(0x1620),
        option text = STRING_TOKEN (0x1591),    value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x1621),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN (0x1622), value = 2, flags = RESET_REQUIRED;
      endoneof;

      suppressif ideqval SA_SETUP.RhSelect == 0;
        oneof varid    = SA_SETUP.Lfsr0Mask,
          prompt   = STRING_TOKEN(0x162D),
          help     = STRING_TOKEN(0x162E),
          option text = STRING_TOKEN (0x1643),  value = 1,  flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x1642),  value = 2,  flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x1641),  value = 3,  flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x1640),  value = 4,  flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x163F),  value = 5,  flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x163E),  value = 6,  flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x163D),  value = 7,  flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x163C),  value = 8,  flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x163B),  value = 9,  flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x163A), value = 10, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x1639), value = 11, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN (0x1638), value = 12, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x1637), value = 13, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x1636), value = 14, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x1635), value = 15, flags = RESET_REQUIRED;
        endoneof;
        oneof varid    = SA_SETUP.Lfsr1Mask,
          prompt   = STRING_TOKEN(0x162F),
          help     = STRING_TOKEN(0x1630),
          option text = STRING_TOKEN (0x1643),  value = 1,  flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x1642),  value = 2,  flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x1641),  value = 3,  flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x1640),  value = 4,  flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x163F),  value = 5,  flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x163E),  value = 6,  flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x163D),  value = 7,  flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x163C),  value = 8,  flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x163B),  value = 9,  flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x163A), value = 10, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x1639), value = 11, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN (0x1638), value = 12, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x1637), value = 13, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x1636), value = 14, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x1635), value = 15, flags = RESET_REQUIRED;
        endoneof;
      endif;

      oneof varid    = SA_SETUP.McRefreshRate,
        prompt  = STRING_TOKEN (0x1623),
        help    = STRING_TOKEN (0x1624),
        option text = STRING_TOKEN (0x1625), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        suppressif ideqvallist SETUP_VOLATILE_DATA.MemoryType == 0 1;
          option text = STRING_TOKEN (0x1626), value = 1, flags = RESET_REQUIRED;
        endif;
        option text = STRING_TOKEN (0x1627), value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x1628), value = 3, flags = RESET_REQUIRED;
      endoneof;

      oneof varid = SA_SETUP.RefreshWm,
        prompt      = STRING_TOKEN (0x1629),
        help        = STRING_TOKEN (0x162A),
        option text = STRING_TOKEN (0x162C),  value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x162B), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      numeric varid  = SA_SETUP.LpddrRttWr,
        prompt  = STRING_TOKEN (0x1631),
        help    = STRING_TOKEN (0x1632),
        flags   = RESET_REQUIRED,
        minimum = 0,
        maximum = 0xFF,
        step    = 1,
        default = 0,
      endnumeric;

      numeric varid  = SA_SETUP.LpddrRttCa,
        prompt  = STRING_TOKEN (0x1633),
        help    = STRING_TOKEN (0x1634),
        flags   = RESET_REQUIRED,
        minimum = 0,
        maximum = 0xFF,
        step    = 1,
        default = 0,
      endnumeric;

      oneof varid    = SA_SETUP.ExitOnFailure,
        prompt   = STRING_TOKEN(0x1644),
        help     = STRING_TOKEN(0x1645),
        option text = STRING_TOKEN (0x1591), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x1590), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid  = SA_SETUP.NewFeatureEnable1,
        prompt   = STRING_TOKEN (0x1646),
        help     = STRING_TOKEN (0x1647),
        option text = STRING_TOKEN (0x1591), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN (0x1590),  value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid  = SA_SETUP.NewFeatureEnable2,
        prompt   = STRING_TOKEN (0x1648),
        help     = STRING_TOKEN (0x1649),
        option text = STRING_TOKEN (0x1591), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN (0x1590),  value = 1, flags = RESET_REQUIRED;
      endoneof;

    suppressif ideqval SA_SETUP.MemStackMode == 1; 
        oneof varid  = SA_SETUP.ChHashOverride,
          prompt   = STRING_TOKEN (0x1607),
          help     = STRING_TOKEN (0x1608),
          option text = STRING_TOKEN (0x1591), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN (0x1590),  value = 1, flags = RESET_REQUIRED;
        endoneof;

        grayoutif ideqval SA_SETUP.ChHashOverride == 0;
          oneof varid  = SA_SETUP.ChHashEnable,
            prompt   = STRING_TOKEN (0x1609),
            help     = STRING_TOKEN (0x160A),
            option text = STRING_TOKEN (0x1591), value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN (0x1590),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          endoneof;

          numeric varid  = SA_SETUP.ChHashMask,
            prompt   = STRING_TOKEN (0x160B),
            help     = STRING_TOKEN (0x160C),
            flags   = RESET_REQUIRED,
            minimum = 0x0001,  
            maximum = 0x3FFF,  
            step    = 1,
            default = 0x830,
          endnumeric;

          oneof varid  = SA_SETUP.ChHashInterleaveBit,
            prompt   = STRING_TOKEN (0x1611),
            help     = STRING_TOKEN (0x1612),
            option text = STRING_TOKEN (0x1613),  value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN (0x1614),  value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN (0x1615),  value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN (0x1616),  value = 3, flags = RESET_REQUIRED;
            option text = STRING_TOKEN (0x1617), value = 4, flags = RESET_REQUIRED;
            option text = STRING_TOKEN (0x1618), value = 5, flags = RESET_REQUIRED;
            option text = STRING_TOKEN (0x1619), value = 6, flags = RESET_REQUIRED;
            option text = STRING_TOKEN (0x161A), value = 7, flags = RESET_REQUIRED;
          endoneof;
        endif;
      endif; 

      oneof varid   = SA_SETUP.ExtendedBankHashing,
        prompt      = STRING_TOKEN (0x160D),
        help        = STRING_TOKEN (0x160E),
        option text = STRING_TOKEN (0x1591), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x1590),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid  = SA_SETUP.PerBankRefresh,
        prompt    = STRING_TOKEN (0x160F),
        help      = STRING_TOKEN (0x1610),
        option text = STRING_TOKEN (0x1591), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x1590),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid  = SA_SETUP.Vc1ReadMeter,
        prompt   = STRING_TOKEN (0x161B),
        help     = STRING_TOKEN (0x161C),
        option text = STRING_TOKEN (0x1591), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x1590), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      numeric varid  = SA_SETUP.StrongWkLeaker,
        prompt   = STRING_TOKEN (0x161D),
        help     = STRING_TOKEN (0x161E),
        flags   = RESET_REQUIRED,
        minimum = 1,
        maximum = 7,
        step    = 1,
        default = 7,
      endnumeric;




      oneof varid  = SA_SETUP.OpportunisticRead,
        prompt   = STRING_TOKEN (0x16A5),
        help     = STRING_TOKEN (0x16A6),
        option text = STRING_TOKEN (0x1591), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x1590), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid  = SA_SETUP.MemStackMode,
        prompt   = STRING_TOKEN (0x16A7),
        help     = STRING_TOKEN (0x16A8),
        option text = STRING_TOKEN (0x1591), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN (0x1590), value = 1, flags = RESET_REQUIRED;
      endoneof;

      suppressif NOT ideqval SA_SETUP.MemStackMode == 1;
        oneof varid  = SA_SETUP.StackModeChBit,
          prompt   = STRING_TOKEN (0x16A9),
          help     = STRING_TOKEN (0x16AA),
          option text = STRING_TOKEN (0x16AB), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN (0x16AC), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x16AD), value = 2, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x16AE), value = 3, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x16AF), value = 4, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x16B0), value = 5, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x16B1), value = 6, flags = RESET_REQUIRED;
        endoneof;

        oneof varid  = SA_SETUP.LowMemChannel,
          prompt   = STRING_TOKEN (0x16B2),
          help     = STRING_TOKEN (0x16B3),
          option text = STRING_TOKEN (0x158F),   value = 0xFF, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN (0x16B4), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x16B5), value = 1, flags = RESET_REQUIRED;
        endoneof;
      endif;

      oneof varid  = SA_SETUP.Disable2CycleBypass,
        prompt   = STRING_TOKEN (0x16B6),
        help     = STRING_TOKEN (0x16B7),
        option text = STRING_TOKEN (0x1590),        value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN (0x1591),       value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.ExitMode,
        prompt   = STRING_TOKEN (0x16CB),
        help     = STRING_TOKEN (0x16CC),
        option text = STRING_TOKEN(0x158F),  value = 0xFF, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x16CD),  value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x16CE),  value = 1, flags = RESET_REQUIRED;
      endoneof;




       
        oneof varid    = SA_SETUP.PowerDownMode,
          questionid  = 5134,
          prompt   = STRING_TOKEN(0x16D4),
          help     = STRING_TOKEN(0x16D5),
          option text = STRING_TOKEN(0x158F),       value = 0xFF, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x16D6),      value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x16D7),        value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x16D8),value = 6, flags = RESET_REQUIRED;
        endoneof;
       

      numeric varid    = SA_SETUP.PwdwnIdleCounter,
        prompt   = STRING_TOKEN(0x16D9),
        help     = STRING_TOKEN(0x16DA),
        flags   = RESET_REQUIRED,
        minimum = 0,
        maximum = 255, 
        step    = 1,
        default = 0, 
      endnumeric;

       
        oneof varid = SA_SETUP.DisPgCloseIdleTimeout,
          questionid = 5133,
          prompt   = STRING_TOKEN (0x16DB),
          help     = STRING_TOKEN (0x16DC),
          option text = STRING_TOKEN (0x1590),        value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN (0x1591),       value = 1, flags = RESET_REQUIRED;
        endoneof;
       

      oneof varid  = SA_SETUP.ScramblerSupport,
        prompt   = STRING_TOKEN (0x1854),
        help     = STRING_TOKEN (0x1855),
        option text = STRING_TOKEN (0x1591), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x1590),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;




      suppressif ideqval SA_SETUP.ScramblerSupport == 0;

        oneof varid  = SA_SETUP.ScramClockGateAB,
          prompt   = STRING_TOKEN (0x1845),
          help     = STRING_TOKEN (0x0851),
          option text = STRING_TOKEN (0x1591), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x1848), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x1849), value = 2, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x184A), value = 3, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        oneof varid  = SA_SETUP.ScramClockGateC,
          prompt   = STRING_TOKEN (0x1846),
          help     = STRING_TOKEN (0x0851),
          option text = STRING_TOKEN (0x1591), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x1848), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x184A), value = 2, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x184B), value = 3, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        oneof varid  = SA_SETUP.ScramEnableDbiAB,
          prompt   = STRING_TOKEN (0x1847),
          help     = STRING_TOKEN (0x0851),
          option text = STRING_TOKEN (0x1591), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x1590),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

      endif;




      oneof varid  = SA_SETUP.ForceColdReset,
        prompt   = STRING_TOKEN (0x1856),
        help     = STRING_TOKEN (0x1857),
        option text = STRING_TOKEN (0x1590),  value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x1591), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid  = SA_SETUP.DisableMc0Ch0,
        prompt   = STRING_TOKEN (0x1858),
        help     = STRING_TOKEN (0x1859),
        option text = STRING_TOKEN(0x1590),      value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1591),     value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid  = SA_SETUP.DisableMc0Ch1,
        prompt   = STRING_TOKEN (0x185A),
        help     = STRING_TOKEN (0x185B),
        option text = STRING_TOKEN(0x1590),      value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1591),     value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid  = SA_SETUP.DisableMc0Ch2,
        prompt   = STRING_TOKEN (0x185C),
        help     = STRING_TOKEN (0x185D),
        option text = STRING_TOKEN(0x1590),      value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1591),     value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid  = SA_SETUP.DisableMc0Ch3,
        prompt   = STRING_TOKEN (0x185E),
        help     = STRING_TOKEN (0x185F),
        option text = STRING_TOKEN(0x1590),      value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1591),     value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid  = SA_SETUP.DisableMc1Ch0,
        prompt   = STRING_TOKEN (0x1860),
        help     = STRING_TOKEN (0x1861),
        option text = STRING_TOKEN(0x1590),      value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1591),     value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid  = SA_SETUP.DisableMc1Ch1,
        prompt   = STRING_TOKEN (0x1862),
        help     = STRING_TOKEN (0x1863),
        option text = STRING_TOKEN(0x1590),      value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1591),     value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid  = SA_SETUP.DisableMc1Ch2,
        prompt   = STRING_TOKEN (0x1864),
        help     = STRING_TOKEN (0x1865),
        option text = STRING_TOKEN(0x1590),      value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1591),     value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid  = SA_SETUP.DisableMc1Ch3,
        prompt   = STRING_TOKEN (0x1866),
        help     = STRING_TOKEN (0x1867),
        option text = STRING_TOKEN(0x1590),      value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1591),     value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid  = SA_SETUP.ForceSingleRank,
        prompt   = STRING_TOKEN (0x1868),
        help     = STRING_TOKEN (0x1869),
        option text = STRING_TOKEN (0x1591), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN (0x1590),  value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.Ibecc,
        prompt      = STRING_TOKEN (0x186A),
        help        = STRING_TOKEN (0x186B),
        option text = STRING_TOKEN (0x1591), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN (0x1590),  value = 1, flags = RESET_REQUIRED;
      endoneof;

      suppressif ideqval SA_SETUP.Ibecc == 0x0;
        oneof varid   = SA_SETUP.IbeccOperationMode,
          prompt      = STRING_TOKEN (0x186C),
          help        = STRING_TOKEN (0x186D),
          option text = STRING_TOKEN (0x186E), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x186F), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x1870), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        suppressif NOT ideqval SA_SETUP.IbeccOperationMode == 0x0;
          oneof varid   = SA_SETUP.IbeccProtectedRangeEnable[0x0],
            prompt      = STRING_TOKEN (0x1871),
            help        = STRING_TOKEN (0x1872),
            option text = STRING_TOKEN (0x1591), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN (0x1590),  value = 1, flags = RESET_REQUIRED;
          endoneof;

          suppressif ideqval SA_SETUP.IbeccProtectedRangeEnable[0x0] == 0x0;
            numeric varid = SA_SETUP.IbeccProtectedRangeBase[0x0],
              prompt      = STRING_TOKEN (0x1873),
              help        = STRING_TOKEN (0x1874),
              flags       = RESET_REQUIRED,
              minimum     = 0x00000000,
              maximum     = 0x03FFFFFF,
              step        = 1,
              default     = 0x00000000,
            endnumeric;

            numeric varid = SA_SETUP.IbeccProtectedRangeMask[0x0],
              prompt      = STRING_TOKEN (0x1875),
              help        = STRING_TOKEN (0x1876),
              flags       = RESET_REQUIRED,
              minimum     = 0x00000001,
              maximum     = 0x03FFFFFF,
              step        = 1,
              default     = 0x03FFFFE0,
            endnumeric;
          endif;

          oneof varid     = SA_SETUP.IbeccProtectedRangeEnable[0x1],
            prompt        = STRING_TOKEN (0x1877),
            help          = STRING_TOKEN (0x1878),
            option text   = STRING_TOKEN (0x1591), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text   = STRING_TOKEN (0x1590),  value = 1, flags = RESET_REQUIRED;
          endoneof;

          suppressif ideqval SA_SETUP.IbeccProtectedRangeEnable[0x1] == 0x0;
            numeric varid = SA_SETUP.IbeccProtectedRangeBase[0x1],
              prompt      = STRING_TOKEN (0x1879),
              help        = STRING_TOKEN (0x187A),
              flags       = RESET_REQUIRED,
              minimum     = 0x00000000,
              maximum     = 0x03FFFFFF,
              step        = 1,
              default     = 0x00000000,
            endnumeric;

            numeric varid = SA_SETUP.IbeccProtectedRangeMask[0x1],
              prompt      = STRING_TOKEN (0x187B),
              help        = STRING_TOKEN (0x187C),
              flags       = RESET_REQUIRED,
              minimum     = 0x00000001,
              maximum     = 0x03FFFFFF,
              step        = 1,
              default     = 0x03FFFFE0,
            endnumeric;
          endif;

          oneof varid     = SA_SETUP.IbeccProtectedRangeEnable[0x2],
            prompt        = STRING_TOKEN (0x187D),
            help          = STRING_TOKEN (0x187E),
            option text   = STRING_TOKEN (0x1591), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text   = STRING_TOKEN (0x1590),  value = 1, flags = RESET_REQUIRED;
          endoneof;

          suppressif ideqval SA_SETUP.IbeccProtectedRangeEnable[0x2] == 0x0;
            numeric varid = SA_SETUP.IbeccProtectedRangeBase[0x2],
              prompt      = STRING_TOKEN (0x187F),
              help        = STRING_TOKEN (0x1880),
              flags       = RESET_REQUIRED,
              minimum     = 0x00000000,
              maximum     = 0x03FFFFFF,
              step        = 1,
              default     = 0x00000000,
            endnumeric;

            numeric varid = SA_SETUP.IbeccProtectedRangeMask[0x2],
              prompt      = STRING_TOKEN (0x1881),
              help        = STRING_TOKEN (0x1882),
              flags       = RESET_REQUIRED,
              minimum     = 0x00000001,
              maximum     = 0x03FFFFFF,
              step        = 1,
              default     = 0x03FFFFE0,
            endnumeric;
          endif;

          oneof varid     = SA_SETUP.IbeccProtectedRangeEnable[0x3],
            prompt        = STRING_TOKEN (0x1883),
            help          = STRING_TOKEN (0x1884),
            option text   = STRING_TOKEN (0x1591), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text   = STRING_TOKEN (0x1590),  value = 1, flags = RESET_REQUIRED;
          endoneof;

          suppressif ideqval SA_SETUP.IbeccProtectedRangeEnable[0x3] == 0x0;
            numeric varid = SA_SETUP.IbeccProtectedRangeBase[0x3],
              prompt      = STRING_TOKEN (0x1885),
              help        = STRING_TOKEN (0x1886),
              flags       = RESET_REQUIRED,
              minimum     = 0x00000000,
              maximum     = 0x03FFFFFF,
              step        = 1,
              default     = 0x00000000,
            endnumeric;

            numeric varid = SA_SETUP.IbeccProtectedRangeMask[0x3],
              prompt      = STRING_TOKEN (0x1887),
              help        = STRING_TOKEN (0x1888),
              flags       = RESET_REQUIRED,
              minimum     = 0x00000001,
              maximum     = 0x03FFFFFF,
              step        = 1,
              default     = 0x03FFFFE0,
            endnumeric;
          endif;

          oneof varid     = SA_SETUP.IbeccProtectedRangeEnable[0x4],
            prompt        = STRING_TOKEN (0x1889),
            help          = STRING_TOKEN (0x188A),
            option text   = STRING_TOKEN (0x1591), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text   = STRING_TOKEN (0x1590),  value = 1, flags = RESET_REQUIRED;
          endoneof;

          suppressif ideqval SA_SETUP.IbeccProtectedRangeEnable[0x4] == 0x0;
            numeric varid = SA_SETUP.IbeccProtectedRangeBase[0x4],
              prompt      = STRING_TOKEN (0x188B),
              help        = STRING_TOKEN (0x188C),
              flags       = RESET_REQUIRED,
              minimum     = 0x00000000,
              maximum     = 0x03FFFFFF,
              step        = 1,
              default     = 0x00000000,
            endnumeric;

            numeric varid = SA_SETUP.IbeccProtectedRangeMask[0x4],
              prompt      = STRING_TOKEN (0x188D),
              help        = STRING_TOKEN (0x188E),
              flags       = RESET_REQUIRED,
              minimum     = 0x00000001,
              maximum     = 0x03FFFFFF,
              step        = 1,
              default     = 0x03FFFFE0,
            endnumeric;
          endif;

          oneof varid     = SA_SETUP.IbeccProtectedRangeEnable[0x5],
            prompt        = STRING_TOKEN (0x188F),
            help          = STRING_TOKEN (0x1890),
            option text   = STRING_TOKEN (0x1591), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text   = STRING_TOKEN (0x1590),  value = 1, flags = RESET_REQUIRED;
          endoneof;

          suppressif ideqval SA_SETUP.IbeccProtectedRangeEnable[0x5] == 0x0;
            numeric varid = SA_SETUP.IbeccProtectedRangeBase[0x5],
              prompt      = STRING_TOKEN (0x1891),
              help        = STRING_TOKEN (0x1892),
              flags       = RESET_REQUIRED,
              minimum     = 0x00000000,
              maximum     = 0x03FFFFFF,
              step        = 1,
              default     = 0x00000000,
            endnumeric;

            numeric varid = SA_SETUP.IbeccProtectedRangeMask[0x5],
              prompt      = STRING_TOKEN (0x1893),
              help        = STRING_TOKEN (0x1894),
              flags       = RESET_REQUIRED,
              minimum     = 0x00000001,
              maximum     = 0x03FFFFFF,
              step        = 1,
              default     = 0x03FFFFE0,
            endnumeric;
          endif;

          oneof varid     = SA_SETUP.IbeccProtectedRangeEnable[0x6],
            prompt        = STRING_TOKEN (0x1895),
            help          = STRING_TOKEN (0x1896),
            option text   = STRING_TOKEN (0x1591), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text   = STRING_TOKEN (0x1590),  value = 1, flags = RESET_REQUIRED;
          endoneof;

          suppressif ideqval SA_SETUP.IbeccProtectedRangeEnable[0x6] == 0x0;
            numeric varid = SA_SETUP.IbeccProtectedRangeBase[0x6],
              prompt      = STRING_TOKEN (0x1897),
              help        = STRING_TOKEN (0x1898),
              flags       = RESET_REQUIRED,
              minimum     = 0x00000000,
              maximum     = 0x03FFFFFF,
              step        = 1,
              default     = 0x00000000,
            endnumeric;

            numeric varid = SA_SETUP.IbeccProtectedRangeMask[0x6],
              prompt      = STRING_TOKEN (0x1899),
              help        = STRING_TOKEN (0x189A),
              flags       = RESET_REQUIRED,
              minimum     = 0x00000001,
              maximum     = 0x03FFFFFF,
              step        = 1,
              default     = 0x03FFFFE0,
            endnumeric;
          endif;

          oneof varid     = SA_SETUP.IbeccProtectedRangeEnable[0x7],
            prompt        = STRING_TOKEN (0x189B),
            help          = STRING_TOKEN (0x189C),
            option text   = STRING_TOKEN (0x1591), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text   = STRING_TOKEN (0x1590),  value = 1, flags = RESET_REQUIRED;
          endoneof;

          suppressif ideqval SA_SETUP.IbeccProtectedRangeEnable[0x7] == 0x0;
            numeric varid = SA_SETUP.IbeccProtectedRangeBase[0x7],
              prompt      = STRING_TOKEN (0x189D),
              help        = STRING_TOKEN (0x189E),
              flags       = RESET_REQUIRED,
              minimum     = 0x00000000,
              maximum     = 0x03FFFFFF,
              step        = 1,
              default     = 0x00000000,
            endnumeric;

            numeric varid = SA_SETUP.IbeccProtectedRangeMask[0x7],
              prompt      = STRING_TOKEN (0x189F),
              help        = STRING_TOKEN (0x18A0),
              flags       = RESET_REQUIRED,
              minimum     = 0x00000001,
              maximum     = 0x03FFFFFF,
              step        = 1,
              default     = 0x03FFFFE0,
            endnumeric;
          endif;
        endif;

        oneof varid   = SA_SETUP.IbeccErrInjControl,
          prompt      = STRING_TOKEN (0x18A1),
          help        = STRING_TOKEN (0x18A2),
          option text = STRING_TOKEN (0x18A4),       value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN (0x18A5),       value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x18A6),   value = 3, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x18A7),     value = 5, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x18A8), value = 7, flags = RESET_REQUIRED;
          warningif prompt = STRING_TOKEN (0x18A3),
              ideqval SA_SETUP.IbeccErrInjControl >= 1
          endif
        endoneof;

        suppressif (ideqval SA_SETUP.IbeccErrInjControl == 0x0) OR
                   (ideqval SA_SETUP.IbeccErrInjControl == 0x3) OR
                   (ideqval SA_SETUP.IbeccErrInjControl == 0x7);
          numeric varid = SA_SETUP.IbeccErrInjAddress,
            prompt      = STRING_TOKEN (0x18A9),
            help        = STRING_TOKEN (0x18AA),
            flags       = RESET_REQUIRED,
            minimum     = 0x0,
            maximum     = 0x3FFFFFFFFFC0,
            step        = 0x40,
            default     = 0x0,
          endnumeric;

          numeric varid = SA_SETUP.IbeccErrInjMask,
            prompt      = STRING_TOKEN (0x18AB),
            help        = STRING_TOKEN (0x18AC),
            flags       = RESET_REQUIRED,
            minimum     = 0x0,
            maximum     = 0x3FFFFFFFFFC0,
            step        = 0x40,
            default     = 0x0,
          endnumeric;
        endif;

        suppressif (ideqval SA_SETUP.IbeccErrInjControl == 0x0) OR
                   (ideqval SA_SETUP.IbeccErrInjControl == 0x1) OR
                   (ideqval SA_SETUP.IbeccErrInjControl == 0x5);
          numeric varid = SA_SETUP.IbeccErrInjCount,
            prompt      = STRING_TOKEN (0x18AD),
            help        = STRING_TOKEN (0x18AE),
            flags       = RESET_REQUIRED,
            minimum     = 0x0,
            maximum     = 0xFFFFFFFF,
            step        = 1,
            default     = 0x0,
          endnumeric;
        endif;
      endif;

      oneof varid  = SA_SETUP.RemapEnable,
        prompt   = STRING_TOKEN (0x18B5),
        help     = STRING_TOKEN (0x18B6),
        option text = STRING_TOKEN (0x1590),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN (0x1591), value = 0, flags = RESET_REQUIRED;
      endoneof;

      oneof varid  = SA_SETUP.MrcTimeMeasure,
        prompt   = STRING_TOKEN (0x18B7),
        help     = STRING_TOKEN (0x18B8),
        option text = STRING_TOKEN (0x1591), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN (0x1590),  value = 1, flags = RESET_REQUIRED;
      endoneof;




      oneof varid  = SA_SETUP.Interpreter,
        prompt   = STRING_TOKEN (0x16CF),
        help     = STRING_TOKEN (0x16D0),
        option text = STRING_TOKEN (0x16D1),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN (0x16D2), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x16D3), value = 2, flags = RESET_REQUIRED;
      endoneof;



    oneof varid  = SA_SETUP.MrcFastBoot,
        prompt   = STRING_TOKEN (0x18B9),
        help     = STRING_TOKEN (0x18BA),
        default  = 1, defaultstore = MyStandardDefault,
        option text = STRING_TOKEN (0x1591), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x1590),  value = 1, flags = RESET_REQUIRED;
      endoneof;

    oneof varid  = SA_SETUP.RmtPerTask,
      prompt   = STRING_TOKEN (0x1852),
      help     = STRING_TOKEN (0x1853),
      option text = STRING_TOKEN (0x1591), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN (0x1590),  value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid  = SA_SETUP.TrainTrace,
      prompt   = STRING_TOKEN (0x1850),
      help     = STRING_TOKEN (0x1851),
      option text = STRING_TOKEN (0x1591), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN (0x1590), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid  = SA_SETUP.LpddrMemWriteLatencySet,
      prompt   = STRING_TOKEN (0x184C),
      help     = STRING_TOKEN (0x184D),
      option text = STRING_TOKEN (0x184E), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN (0x184F), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    grayoutif ideqval SA_SETUP.BdatEnable == 0x0;
      oneof varid   = SA_SETUP.BdatTestType,
        prompt      = STRING_TOKEN(0x1D0C),
        help        = STRING_TOKEN(0x1D0D),
        option text = STRING_TOKEN(0x1D0E),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1D0F),   value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1D10), value = 2, flags = RESET_REQUIRED;
      endoneof;
    endif;

    numeric varid = SA_SETUP.RMTLoopCount,
      prompt      = STRING_TOKEN(0x1D11),
      help        = STRING_TOKEN(0x1D12),
      flags       = RESET_REQUIRED,
      minimum     = 0,
      maximum     = 32,
      step        = 1,
      default     = 0, 
    endnumeric;

    oneof varid  = SA_SETUP.EccDftEn,
      prompt   = STRING_TOKEN (0x18C6),
      help     = STRING_TOKEN (0x18C7),
      option text = STRING_TOKEN (0x1591), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN (0x1590),  value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = SA_SETUP.Write0,
      prompt      = STRING_TOKEN (0x18C8),
      help        = STRING_TOKEN (0x18C9),
      option text = STRING_TOKEN (0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN (0x0003),  value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = SA_SETUP.PeriodicDcc,
      prompt      = STRING_TOKEN (0x18CA),
      help        = STRING_TOKEN (0x18CB),
      option text = STRING_TOKEN (0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN (0x0003),  value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = SA_SETUP.LpMode,
      prompt      = STRING_TOKEN (0x18CC),
      help        = STRING_TOKEN (0x18CD),
      option text = STRING_TOKEN (0x0006),     value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN (0x0003),  value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN (0x0004), value = 2, flags = RESET_REQUIRED;
    endoneof;

    oneof varid     = SA_SETUP.PprEnable,
        prompt      = STRING_TOKEN(0x1EB2),
        help        = STRING_TOKEN(0x1EB3),
        option text = STRING_TOKEN(0x1591),    value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        
        
        option text = STRING_TOKEN(0x1EB4),           value = 1, flags = RESET_REQUIRED;
        
        option text = STRING_TOKEN(0x1EB5),           value = 2, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = SA_SETUP.OverloadSAM,
      questionid  = 5498,
      prompt      = STRING_TOKEN(0x1E4B),
      help        = STRING_TOKEN(0x1E4C),
      option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
    endoneof;




      numeric varid = SA_SETUP.VddqVoltageOverride,
        prompt      = STRING_TOKEN(0x164A),
        help        = STRING_TOKEN(0x164B),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 0xFFFF,
        step        = 1,
        default     = 0, 
      endnumeric;

      oneof varid  = SA_SETUP.VttTermination,
        prompt   = STRING_TOKEN (0x18BB),
        help     = STRING_TOKEN (0x18BC),
        option text = STRING_TOKEN (0x1591), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN (0x1590),  value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid  = SA_SETUP.VttCompForVsshi,
        prompt   = STRING_TOKEN (0x18BD),
        help     = STRING_TOKEN (0x18BE),
        option text = STRING_TOKEN (0x1591), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN (0x1590),  value = 1, flags = RESET_REQUIRED;
      endoneof;

      numeric varid  = SA_SETUP.BerEnable,
        prompt   = STRING_TOKEN (0x18BF),
        help     = STRING_TOKEN (0x18C0),
        flags   = RESET_REQUIRED,
        minimum = 0,   
        maximum = 8,   
        step    = 1,
        default = 0,
      endnumeric;

      suppressif NOT ideqval SA_SETUP.BerEnable > 0 OR
                 ideqval SA_SETUP.BerEnable > 4;
        numeric varid    = SA_SETUP.BerAddress[0],
          prompt   = STRING_TOKEN(0x18C2),
          help     = STRING_TOKEN(0x18C1),
          flags   = RESET_REQUIRED,
          minimum = 0,
          maximum = 0xFFFFFFFFFFFFFFFF,
          step    = 64,
          default = 0,
        endnumeric;
      endif;

      suppressif NOT ideqval SA_SETUP.BerEnable > 1 OR
                 ideqval SA_SETUP.BerEnable > 4;
        numeric varid    = SA_SETUP.BerAddress[1],
          prompt   = STRING_TOKEN(0x18C3),
          help     = STRING_TOKEN(0x18C1),
          flags   = RESET_REQUIRED,
          minimum = 0,
          maximum = 0xFFFFFFFFFFFFFFFF,
          step    = 64,
          default = 0,
        endnumeric;
      endif;

      suppressif NOT ideqval SA_SETUP.BerEnable > 2 OR
                 ideqval SA_SETUP.BerEnable > 4;
        numeric varid    = SA_SETUP.BerAddress[2],
          prompt   = STRING_TOKEN(0x18C4),
          help     = STRING_TOKEN(0x18C1),
          flags   = RESET_REQUIRED,
          minimum = 0,
          maximum = 0xFFFFFFFFFFFFFFFF,
          step    = 64,
          default = 0,
        endnumeric;
      endif;

      suppressif NOT ideqval SA_SETUP.BerEnable == 4;
        numeric varid    = SA_SETUP.BerAddress[3],
          prompt   = STRING_TOKEN(0x18C5),
          help     = STRING_TOKEN(0x18C1),
          flags   = RESET_REQUIRED,
          minimum = 0,
          maximum = 0xFFFFFFFFFFFFFFFF,
          step    = 64,
          default = 0,
        endnumeric;
      endif;

      suppressif NOT ideqval SETUP_VOLATILE_DATA.MobileOcUnSupport == 1;
        numeric varid  = SA_SETUP.MemoryVoltage,
          prompt       = STRING_TOKEN (0x175D),
          help         = STRING_TOKEN (0x175E),
          flags        = RESET_REQUIRED,
          minimum      = 0,
          maximum      = 1435,
          step         = 5,
          default      = 0,
        endnumeric;

        numeric varid  = SA_SETUP.MemoryVddqVoltage,
          prompt       = STRING_TOKEN (0x175F),
          help         = STRING_TOKEN (0x1760),
          flags        = RESET_REQUIRED,
          minimum      = 0,
          maximum      = 1435,
          step         = 5,
          default      = 0,
        endnumeric;

       numeric varid  = SA_SETUP.MemoryVppVoltage,
         prompt       = STRING_TOKEN (0x1761),
         help         = STRING_TOKEN (0x1762),
         flags        = RESET_REQUIRED,
         minimum      = 0,
         maximum      = 2135,
         step         = 5,
         default      = 0,
       endnumeric;
      endif;





    endform;

    form formid = 4137,
    title = STRING_TOKEN(0x1592);

      subtitle text = STRING_TOKEN(0x1592);
      subtitle text = STRING_TOKEN(0x0002);

      text
        help   = STRING_TOKEN(0x18E6),
        text   = STRING_TOKEN(0x1CDF),
        text   = STRING_TOKEN(0x1CE0),
        flags  = 0,
        key    = 0;

      subtitle text = STRING_TOKEN(0x0002);

      goto 4138,
        prompt  = STRING_TOKEN(0x18FA),
        help    = STRING_TOKEN(0x18FA);

      goto 4139,
        prompt = STRING_TOKEN(0x19CC),
        help = STRING_TOKEN(0x19CD);





#line 2053 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaSetup.hfr"

    suppressif  ideqval SA_SETUP.VmdSupported == 0;
      goto 5220,
        prompt  = STRING_TOKEN(0x1E4D),
        help    = STRING_TOKEN(0x1E4F);
    endif;

      goto 4333,
        prompt  = STRING_TOKEN(0x1EA9),
        help    = STRING_TOKEN(0x1EAB);

      goto 5530,
         prompt = STRING_TOKEN(0x0B34),
         help = STRING_TOKEN(0x0B35);

    
    
    
    suppressif ideqval SA_SETUP.DynamicBoostEnable == 0;
      goto 4119,
         prompt = STRING_TOKEN(0x1EB6),
         help = STRING_TOKEN(0x1EB6);
    endif;
    
    
    
      subtitle text = STRING_TOKEN(0x0002);

      oneof varid     = SA_SETUP.AutoNsg,
        prompt      = STRING_TOKEN(0x1C8A),
        help        = STRING_TOKEN(0x1C8B),
        option text = STRING_TOKEN(0x158F),     value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x09F8),   value = 0, flags = RESET_REQUIRED;
      endoneof;

      suppressif ideqval SA_SETUP.AutoNsg == 1;
        numeric varid   = SA_SETUP.NumStopGrant,
          prompt  = STRING_TOKEN (0x1C8C),
          help    = STRING_TOKEN (0x1C8D),
          flags   = RESET_REQUIRED,
          minimum = 1,
          maximum = 0x3f,
          step    = 0,
          default = 1,
        endnumeric;
      endif;

      
      
      
      suppressif  ideqval SETUP_VOLATILE_DATA.VTdAvailable == 0;
        grayoutif ideqval ME_SETUP_STORAGE.RemoteSessionActive == 1;
           
            oneof varid    = SA_SETUP.EnableVtd,
              questionid  = 5138,
              prompt      = STRING_TOKEN(0x18E5),
              help        = STRING_TOKEN(0x18E6),

              option text = STRING_TOKEN (0x1590),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
              option text = STRING_TOKEN (0x1591), value = 0, flags = RESET_REQUIRED;



#line 2117 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaSetup.hfr"
            endoneof;
           
        endif; 
      endif; 

      grayoutif ideqval SETUP_VOLATILE_DATA.VTdAvailable == 0
                  OR ideqval SA_SETUP.EnableVtd == 0;
        oneof varid   = SETUP_DATA.ControlIommu,
          prompt      = STRING_TOKEN(0x1548),
          help        = STRING_TOKEN(0x1549),
          flags       = INTERACTIVE,
          default     = 1, defaultstore = MyStandardDefault,
          option text = STRING_TOKEN(0x154A),      value = 0, flags = RESET_REQUIRED| INTERACTIVE;
          option text = STRING_TOKEN(0x154B),         value = 1, flags = RESET_REQUIRED| INTERACTIVE;
          
          
          
          option text = STRING_TOKEN(0x154C), value = 2, flags = RESET_REQUIRED| INTERACTIVE;
          
          
          
        endoneof;
      endif;

      
      
      
      grayoutif ideqval SETUP_VOLATILE_DATA.VTdAvailable == 0
                  OR ideqval SA_SETUP.EnableVtd == 0
                  OR ideqval SETUP_DATA.ControlIommu == 0;
        numeric varid   = SETUP_DATA.VTdReservedRtMemory,
          prompt      = STRING_TOKEN (0x154D),
          help        = STRING_TOKEN (0x154E),
          flags       = RESET_REQUIRED,
          minimum     = 0,
          maximum     = 4096,
          step        = 1,
          default     = 320,
        endnumeric;
      endif;
      
      
      

      grayoutif ideqval SETUP_VOLATILE_DATA.VTdAvailable == 0
                  OR ideqval SA_SETUP.EnableVtd == 0;
      suppressif  ideqval SETUP_CPU_FEATURES.LocalX2ApicAvailable == 0;
        oneof varid   =  SA_SETUP.X2ApicOptOut,
          prompt   = STRING_TOKEN(0x1C4E),
          help     = STRING_TOKEN(0x1C4F),
          option text = STRING_TOKEN (0x1590),  value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x1591), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
      endif;
        oneof varid   =  SA_SETUP.DmaControlGuarantee,
          prompt   = STRING_TOKEN(0x1C50),
          help     = STRING_TOKEN(0x1C51),
          option text = STRING_TOKEN (0x1590),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN (0x1591), value = 0, flags = RESET_REQUIRED;
        endoneof;
      endif;

      oneof varid    = SA_SETUP.SaDevice4,
        prompt   = STRING_TOKEN(0x19CE),
        help     = STRING_TOKEN(0x19CF),
        option text = STRING_TOKEN(0x1590),  value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1591), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid    = SA_SETUP.CpuCrashLogDevice,
        prompt   = STRING_TOKEN(0x19D0),
        help     = STRING_TOKEN(0x19D1),
        option text = STRING_TOKEN(0x1590),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1591), value = 0, flags = RESET_REQUIRED;
      endoneof;

      oneof varid    = SA_SETUP.GnaEnable,
        prompt   = STRING_TOKEN(0x19D2),
        help     = STRING_TOKEN(0x19D3),
        option text = STRING_TOKEN(0x1590),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1591), value = 0, flags = RESET_REQUIRED;
      endoneof;

      oneof varid    = SA_SETUP.CridEnable,
        prompt   = STRING_TOKEN(0x1C48),
        help     = STRING_TOKEN(0x1C49),
        option text = STRING_TOKEN(0x1590),  value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1591), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;


       
        oneof varid    = SA_SETUP.WrcFeatureEnable,
          questionid  = 5139,
          prompt   = STRING_TOKEN(0x1C4A),
          help     = STRING_TOKEN(0x1C4B),
          option text = STRING_TOKEN(0x1590),  value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1591), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
       

      suppressif ideqval SA_SETUP.ApertureSize == 15;
        oneof varid   =  SA_SETUP.EnableAbove4GBMmio,
          prompt   = STRING_TOKEN(0x1C4C),
          help     = STRING_TOKEN(0x1C4D),
          option text = STRING_TOKEN (0x1590),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN (0x1591), value = 0, flags = RESET_REQUIRED;
        endoneof;
      endif;

      
      
      
    suppressif  ideqval SETUP_VOLATILE_DATA.IpuSupport == 0;

      oneof varid   =  SA_SETUP.SaIpuEnable,
        prompt   = STRING_TOKEN(0x19D4),
        help     = STRING_TOKEN(0x19D5),
        option text = STRING_TOKEN (0x1590),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN (0x1591), value = 0, flags = RESET_REQUIRED;
      endoneof;

    endif; 

        goto 5042,
          prompt = STRING_TOKEN(0x19D6),
          help = STRING_TOKEN(0x19D6);

      suppressif NOT (ideqval CPU_SETUP_VOLATILE_DATA.EdramSupported == 1);
        oneof varid   = SA_SETUP.EdramTestMode,
          prompt      = STRING_TOKEN(0x1D07),
          help        = STRING_TOKEN(0x1D08),
          option text = STRING_TOKEN(0x1D09), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1D0A), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1D0B), value = 2, flags = DEFAULT | RESET_REQUIRED;
        endoneof;
      endif;
    endform;

    form formid = 4124,
    title = STRING_TOKEN(0x09A4);

   suppressif ideqval SETUP_VOLATILE_DATA.PlatformFlavor == 0x4;
     text
       help   = STRING_TOKEN(0x0851),
       text   = STRING_TOKEN(0x16DF),
       text   = STRING_TOKEN(0x16E0),
       flags  = 0,
       key    = 0;

     text
       help   = STRING_TOKEN(0x0851),
       text   = STRING_TOKEN(0x16E1),
       text   = STRING_TOKEN(0x16E2),
       flags  = 0,
       key    = 0;

     text
       help   = STRING_TOKEN(0x0851),
       text   = STRING_TOKEN(0x16E3),
       text   = STRING_TOKEN(0x16E4),
       flags  = 0,
       key    = 0;

     text
       help   = STRING_TOKEN(0x0851),
       text   = STRING_TOKEN(0x16E5),
       text   = STRING_TOKEN(0x16E6),
       flags  = 0,
       key    = 0;

     text
       help   = STRING_TOKEN(0x0851),
       text   = STRING_TOKEN(0x16E7),
       text   = STRING_TOKEN(0x16E8),
       flags  = 0,
       key    = 0;

     text
       help   = STRING_TOKEN(0x0851),
       text   = STRING_TOKEN(0x16E9),
       text   = STRING_TOKEN(0x16EA),
       flags  = 0,
       key    = 0;

     text
       help   = STRING_TOKEN(0x0851),
       text   = STRING_TOKEN(0x16EB),
       text   = STRING_TOKEN(0x16EC),
       flags  = 0,
       key    = 0;

     text
       help   = STRING_TOKEN(0x0851),
       text   = STRING_TOKEN(0x16ED),
       text   = STRING_TOKEN(0x16EE),
       flags  = 0,
       key    = 0;

     text
       help   = STRING_TOKEN(0x0851),
       text   = STRING_TOKEN(0x16EF),
       text   = STRING_TOKEN(0x16F0),
       flags  = 0,
       key    = 0;

     text
       help   = STRING_TOKEN(0x0851),
       text   = STRING_TOKEN(0x16F1),
       text   = STRING_TOKEN(0x16F2),
       flags  = 0,
       key    = 0;

     text
       help   = STRING_TOKEN(0x0851),
       text   = STRING_TOKEN(0x16F3),
       text   = STRING_TOKEN(0x16F4),
       flags  = 0,
       key    = 0;

     text
       help   = STRING_TOKEN(0x0851),
       text   = STRING_TOKEN(0x16F5),
       text   = STRING_TOKEN(0x16F6),
       flags  = 0,
       key    = 0;

     text
       help   = STRING_TOKEN(0x0851),
       text   = STRING_TOKEN(0x16F7),
       text   = STRING_TOKEN(0x16F8),
       flags  = 0,
       key    = 0;

     text
       help   = STRING_TOKEN(0x0851),
       text   = STRING_TOKEN(0x16F9),
       text   = STRING_TOKEN(0x16FA),
       flags  = 0,
       key    = 0;

     text
       help   = STRING_TOKEN(0x0851),
       text   = STRING_TOKEN(0x16FB),
       text   = STRING_TOKEN(0x16FC),
       flags  = 0,
       key    = 0;

     text
       help   = STRING_TOKEN(0x0851),
       text   = STRING_TOKEN(0x16FD),
       text   = STRING_TOKEN(0x16FE),
       flags  = 0,
       key    = 0;

     text
       help   = STRING_TOKEN(0x0851),
       text   = STRING_TOKEN(0x16FF),
       text   = STRING_TOKEN(0x1700),
       flags  = 0,
       key    = 0;

     text
       help   = STRING_TOKEN(0x0851),
       text   = STRING_TOKEN(0x1701),
       text   = STRING_TOKEN(0x1702),
       flags  = 0,
       key    = 0;

     text
       help   = STRING_TOKEN(0x0851),
       text   = STRING_TOKEN(0x1703),
       text   = STRING_TOKEN(0x1704),
       flags  = 0,
       key    = 0;

     text
       help   = STRING_TOKEN(0x0851),
       text   = STRING_TOKEN(0x1705),
       text   = STRING_TOKEN(0x1706),
       flags  = 0,
       key    = 0;

     text
       help   = STRING_TOKEN(0x0851),
       text   = STRING_TOKEN(0x1707),
       text   = STRING_TOKEN(0x1708),
       flags  = 0,
       key    = 0;

     text
       help   = STRING_TOKEN(0x0851),
       text   = STRING_TOKEN(0x1709),
       text   = STRING_TOKEN(0x170A),
       flags  = 0,
       key    = 0;

     text
       help   = STRING_TOKEN(0x0851),
       text   = STRING_TOKEN(0x170B),
       text   = STRING_TOKEN(0x170C),
       flags  = 0,
       key    = 0;

     text
       help   = STRING_TOKEN(0x0851),
       text   = STRING_TOKEN(0x170D),
       text   = STRING_TOKEN(0x170E),
       flags  = 0,
       key    = 0;

     text
       help   = STRING_TOKEN(0x0851),
       text   = STRING_TOKEN(0x170F),
       text   = STRING_TOKEN(0x1710),
       flags  = 0,
       key    = 0;

     subtitle text = STRING_TOKEN(0x0002);

     oneof varid = SA_SETUP.RealtimeMemoryTiming,
       prompt  = STRING_TOKEN(0x1711),
       help    = STRING_TOKEN(0x1712),
       option text = STRING_TOKEN(0x0004), value = 0,  flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
       option text = STRING_TOKEN(0x0003),  value = 1,  flags = RESET_REQUIRED;
     endoneof;

     oneof varid = SA_SETUP.SpdProfileSelected,
       questionid  = 4395,
       prompt      = STRING_TOKEN(0x1713),
       help        = STRING_TOKEN(0x1714),
       flags       = INTERACTIVE,
         option text = STRING_TOKEN (0x1715),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
         option text = STRING_TOKEN (0x1719),    value = 1, flags = RESET_REQUIRED;
         suppressif cond ((get(SA_SETUP.XmpProfileEnable) & 0x1) == 0 ? 0 : 1);
           option text = STRING_TOKEN (0x1716),   value = 2, flags = RESET_REQUIRED;
         endif;
         suppressif cond ((get(SA_SETUP.XmpProfileEnable) & 0x2) == 0 ? 0 : 1);
           option text = STRING_TOKEN (0x1717),   value = 3, flags = RESET_REQUIRED;
         endif;
         suppressif cond ((get(SA_SETUP.XmpProfileEnable) & 0x4) == 0 ? 0 : 1);
           option text = STRING_TOKEN (0x1718),   value = 4, flags = RESET_REQUIRED;
         endif;
         suppressif cond ((get(SA_SETUP.XmpProfileEnable) & 0x8) == 0 ? 0 : 1);
           option text = STRING_TOKEN (0x171A),  value = 5, flags = RESET_REQUIRED;
         endif;
         suppressif cond ((get(SA_SETUP.XmpProfileEnable) & 0x10) == 0 ? 0 : 1);
           option text = STRING_TOKEN (0x171B),  value = 6, flags = RESET_REQUIRED;
         endif;
     endoneof;

     suppressif ideqval SA_SETUP.DynamicMemoryBoostTrainingFailed == 0;
       text
         help   = STRING_TOKEN(0x0851),
         text   = STRING_TOKEN(0x171E),
         text   = STRING_TOKEN(0x0851),
         flags  = 0,
         key    = 0;
     endif;

     grayoutif ((ideqvallist SA_SETUP.SpdProfileSelected == 0 1 5 6) OR
                   (ideqval SA_SETUP.RealtimeMemoryFrequency == 1));        
       oneof varid = SA_SETUP.DynamicMemoryBoost,
         prompt  = STRING_TOKEN(0x171C),
         help    = STRING_TOKEN(0x171D),
         option text = STRING_TOKEN(0x0004), value = 0,  flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
         option text = STRING_TOKEN(0x0003),  value = 1,  flags = RESET_REQUIRED;
       endoneof;
     endif;

     grayoutif ((ideqvallist SA_SETUP.SpdProfileSelected == 0 1 5 6) OR
                   (ideqval SA_SETUP.DynamicMemoryBoost == 1));              
       oneof varid = SA_SETUP.RealtimeMemoryFrequency,
         prompt  = STRING_TOKEN(0x171F),
         help    = STRING_TOKEN(0x1720),
         option text = STRING_TOKEN(0x0004), value = 0,  flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
         option text = STRING_TOKEN(0x0003),  value = 1,  flags = RESET_REQUIRED;
       endoneof;
     endif;

   endif; 

   
   grayoutif ideqval SA_SETUP.SpdProfileSelected == 0;
     oneof varid = SA_SETUP.OCSafeMode,
       prompt  = STRING_TOKEN(0x172D),
       help    = STRING_TOKEN(0x172E),
       option text = STRING_TOKEN(0x0004), value = 0,  flags = RESET_REQUIRED;
       option text = STRING_TOKEN(0x0003),  value = 1,  flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
     endoneof;
   endif;

   
   grayoutif NOT ideqval SA_SETUP.SpdProfileSelected == 1;
     oneof varid = SA_SETUP.DdrRefClk,
       prompt  = STRING_TOKEN(0x172F),
       help    = STRING_TOKEN(0x1730),
       option text = STRING_TOKEN(0x1732), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
       option text = STRING_TOKEN(0x1731), value = 1, flags = RESET_REQUIRED;
     endoneof;

     
     
     numeric varid = SA_SETUP.DdrRatio,
       prompt  = STRING_TOKEN(0x1733),
       help    = STRING_TOKEN(0x1734),
       flags   = RESET_REQUIRED,
       minimum = 0,  
       maximum = 128, 
       step    = 1,
       default = 0,  
     endnumeric;

     numeric varid = SA_SETUP.tCL,
       prompt  = STRING_TOKEN (0x1735),
       help    = STRING_TOKEN (0x1736),
       flags   = 0 | RESET_REQUIRED | INTERACTIVE,
       key     = 4125,
       minimum = 0,
       maximum = 255,
       step    = 1,
       default = 0,
     endnumeric;

     numeric varid = SA_SETUP.tRCDtRP,
       prompt  = STRING_TOKEN (0x1737),
       help    = STRING_TOKEN (0x1738),
       flags   = 0 | RESET_REQUIRED | INTERACTIVE,
       key     = 4126,
       minimum = 0,
       maximum = 255,
       step    = 1,
       default = 0,
     endnumeric;

     numeric varid = SA_SETUP.tRAS,
       prompt  = STRING_TOKEN (0x1739),
       help    = STRING_TOKEN (0x173A),
       flags   = 0 | RESET_REQUIRED | INTERACTIVE,
       key     = 4128,
       minimum = 0,
       maximum = 65535,
       step    = 1,
       default = 0,
     endnumeric;

     numeric varid = SA_SETUP.tCWL,
       prompt  = STRING_TOKEN (0x173B),
       help    = STRING_TOKEN (0x173C),
       flags   = 0 | RESET_REQUIRED | INTERACTIVE,
       key     = 4364,
       minimum = 0,
       maximum = 255,
       step    = 1,
       default = 0,
     endnumeric;

     numeric varid = SA_SETUP.tFAW,
       prompt  = STRING_TOKEN (0x173D),
       help    = STRING_TOKEN (0x173E),
       flags   = 0 | RESET_REQUIRED | INTERACTIVE,
       key     = 4135,
       minimum = 0,
       maximum = 65535,
       step    = 1,
       default = 0,
     endnumeric;

     numeric varid = SA_SETUP.tREFI,
       prompt  = STRING_TOKEN (0x173F),
       help    = STRING_TOKEN (0x1740),
       flags   = 0 | RESET_REQUIRED | INTERACTIVE,
       key     = 4366,
       minimum = 0,
       maximum = 65535,
       step    = 1,
       default = 0,
     endnumeric;

     numeric varid = SA_SETUP.tRFC,
       prompt  = STRING_TOKEN (0x1741),
       help    = STRING_TOKEN (0x1742),
       flags   = 0 | RESET_REQUIRED | INTERACTIVE,
       key     = 4130,
       minimum = 0,
       maximum = 65535,
       step    = 1,
       default = 0,
     endnumeric;

     numeric varid = SA_SETUP.tRRD,
       prompt  = STRING_TOKEN (0x1743),
       help    = STRING_TOKEN (0x1744),
       flags   = 0 | RESET_REQUIRED | INTERACTIVE,
       key     = 4131,
       minimum = 0,
       maximum = 255,
       step    = 1,
       default = 0,
     endnumeric;

     numeric varid = SA_SETUP.tRTP,
       prompt  = STRING_TOKEN (0x1745),
       help    = STRING_TOKEN (0x1746),
       flags   = 0 | RESET_REQUIRED | INTERACTIVE,
       key     = 4133,
       minimum = 0,
       maximum = 255,
       step    = 1,
       default = 0,
     endnumeric;

     numeric varid = SA_SETUP.tWR,
       prompt  = STRING_TOKEN (0x1747),
       help    = STRING_TOKEN (0x1748),
       flags   = 0 | RESET_REQUIRED | INTERACTIVE,
       key     = 4127,
       minimum = 0,
       maximum = 255,
       step    = 1,
       default = 0,
     endnumeric;

     numeric varid = SA_SETUP.tWTR,
       prompt  = STRING_TOKEN (0x1749),
       help    = STRING_TOKEN (0x174A),
       flags   = 0 | RESET_REQUIRED | INTERACTIVE,
       key     = 4132,
       minimum = 0,
       maximum = 255,
       step    = 1,
       default = 0,
     endnumeric;

     numeric varid = SA_SETUP.tRFCpb,
       prompt  = STRING_TOKEN (0x174B),
       help    = STRING_TOKEN (0x174C),
       flags   = 0 | RESET_REQUIRED | INTERACTIVE,
       key     = 4500,
       minimum = 0,
       maximum = 15000,
       step    = 1,
       default = 0,
     endnumeric;

     numeric varid = SA_SETUP.tRFC2,
       prompt  = STRING_TOKEN (0x174D),
       help    = STRING_TOKEN (0x174E),
       flags   = 0 | RESET_REQUIRED | INTERACTIVE,
       key     = 4501,
       minimum = 0,
       maximum = 15000,
       step    = 1,
       default = 0,
     endnumeric;

     numeric varid = SA_SETUP.tRFC4,
       prompt  = STRING_TOKEN (0x174F),
       help    = STRING_TOKEN (0x1750),
       flags   = 0 | RESET_REQUIRED | INTERACTIVE,
       key     = 4502,
       minimum = 0,
       maximum = 15000,
       step    = 1,
       default = 0,
     endnumeric;

     numeric varid = SA_SETUP.tRRD_L,
       prompt  = STRING_TOKEN (0x1751),
       help    = STRING_TOKEN (0x1752),
       flags   = 0 | RESET_REQUIRED | INTERACTIVE,
       key     = 4503,
       minimum = 0,
       maximum = 255,
       step    = 1,
       default = 0,
     endnumeric;

     numeric varid = SA_SETUP.tRRD_S,
       prompt  = STRING_TOKEN (0x1753),
       help    = STRING_TOKEN (0x1754),
       flags   = 0 | RESET_REQUIRED | INTERACTIVE,
       key     = 4504,
       minimum = 0,
       maximum = 255,
       step    = 1,
       default = 0,
     endnumeric;

     numeric varid = SA_SETUP.tWTR_L,
       prompt  = STRING_TOKEN (0x1755),
       help    = STRING_TOKEN (0x1756),
       flags   = 0 | RESET_REQUIRED | INTERACTIVE,
       key     = 4505,
       minimum = 0,
       maximum = 255,
       step    = 1,
       default = 0,
     endnumeric;

     numeric varid = SA_SETUP.tCCD_L,
       prompt  = STRING_TOKEN (0x1757),
       help    = STRING_TOKEN (0x1758),
       flags   = 0 | RESET_REQUIRED | INTERACTIVE,
       key     = 4506,
       minimum = 0,
       maximum = 255,
       step    = 1,
       default = 0,
     endnumeric;

     numeric varid = SA_SETUP.tWTR_S,
       prompt  = STRING_TOKEN (0x1759),
       help    = STRING_TOKEN (0x175A),
       flags   = 0 | RESET_REQUIRED | INTERACTIVE,
       key     = 4507,
       minimum = 0,
       maximum = 255,
       step    = 1,
       default = 0,
     endnumeric;

     numeric varid = SA_SETUP.NModeSupport,
       prompt      = STRING_TOKEN (0x175B),
       help        = STRING_TOKEN (0x175C),
       flags       = 0 | RESET_REQUIRED | INTERACTIVE,
       key         = 4129,
       minimum     = 0,
       maximum     = 2,
       step        = 1,
       default     = 0,
     endnumeric;
   endif; 

   
   grayoutif ideqvallist SA_SETUP.SpdProfileSelected == 2 3 4 5 6;
     numeric varid  = SA_SETUP.MemoryVoltage,
       prompt       = STRING_TOKEN (0x175D),
       help         = STRING_TOKEN (0x175E),
       flags        = RESET_REQUIRED,
       minimum      = 0,
       maximum      = 2000,
       step         = 5,
       default      = 0,
     endnumeric;

     numeric varid  = SA_SETUP.MemoryVddqVoltage,
       prompt       = STRING_TOKEN (0x175F),
       help         = STRING_TOKEN (0x1760),
       flags        = RESET_REQUIRED,
       minimum      = 0,
       maximum      = 2000,
       step         = 5,
       default      = 0,
     endnumeric;

     numeric varid  = SA_SETUP.MemoryVppVoltage,
       prompt       = STRING_TOKEN (0x1761),
       help         = STRING_TOKEN (0x1762),
       flags        = RESET_REQUIRED,
       minimum      = 0,
       maximum      = 2300,
       step         = 5,
       default      = 0,
     endnumeric;
   endif; 

   text
     help   = STRING_TOKEN(0x0851),
     text   = STRING_TOKEN(0x1763),
     text   = STRING_TOKEN(0x1764),
     flags  = 0,
     key    = 0;

 endform;

    form formid = 4138,
    title     = STRING_TOKEN(0x18FA);

      subtitle text = STRING_TOKEN(0x18FA);
      subtitle text = STRING_TOKEN(0x0002);

    suppressif ideqval SETUP_VOLATILE_DATA.PlatformFlavor == 0x4;
        
        
        
        numeric varid = SA_SETUP.GfxTurboIMON,
          prompt      = STRING_TOKEN (0x18FB),
          help        = STRING_TOKEN (0x18FC),
          flags       = RESET_REQUIRED,
          minimum     = 14,
          maximum     = 31,
          step        = 1,
          default     = 31,  
        endnumeric;
    endif;

        oneof varid    = SA_SETUP.SkipExtGfxScan,
          prompt   = STRING_TOKEN(0x18FD),
          help     = STRING_TOKEN(0x18FE),
          option text = STRING_TOKEN(0x1591), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1590),  value = 1, flags = RESET_REQUIRED;
        endoneof;

      subtitle text = STRING_TOKEN(0x0002);

      
      
      
      suppressif ((NOT ideqval SETUP_VOLATILE_DATA.PlatformFlavor == 0x1) AND
                    (NOT ideqval SETUP_VOLATILE_DATA.PlatformFlavor == 0x5) AND
                    (NOT ideqval SETUP_VOLATILE_DATA.PlatformFlavor == 0x2) AND
                    (NOT ideqval SETUP_VOLATILE_DATA.PlatformFlavor == 0x6) AND
                    (NOT ideqval SETUP_VOLATILE_DATA.PlatformFlavor == 0x3));

        oneof varid    = SA_SETUP.PrimaryDisplay,
          prompt   = STRING_TOKEN(0x18F4),
          help     = STRING_TOKEN(0x18F5),
          option text = STRING_TOKEN(0x158F), value = 3, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x18F6), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x18F7),  value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x18F8),  value = 2, flags = RESET_REQUIRED;

          option text = STRING_TOKEN(0x18F9) ,  value = 4, flags = RESET_REQUIRED;
#line 2842 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaSetup.hfr"
        endoneof;
      endif;

      suppressif NOT ideqval SA_SETUP.PrimaryDisplay == 4;
        oneof varid    = SA_SETUP.HgSupport,
          prompt   = STRING_TOKEN(0x1903),
          help     = STRING_TOKEN(0x1904),
          option text = STRING_TOKEN(0x1905), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1906), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1907),  value = 2, flags = RESET_REQUIRED;
        endoneof;

        oneof varid    = SA_SETUP.PcieCardSelect,   
          prompt   = STRING_TOKEN(0x18FF),
          help     = STRING_TOKEN(0x1900),
          option text = STRING_TOKEN(0x158F),  value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1901), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1902),  value = 1, flags = RESET_REQUIRED;
        endoneof;

        numeric varid = SA_SETUP.DelayAfterPwrEn,
          prompt      = STRING_TOKEN (0x1908),
          help        = STRING_TOKEN (0x1909),
          minimum     = 0,
          maximum     = 1000,
          step        = 0,    
          default     = 300,
        endnumeric;

        numeric varid = SA_SETUP.DelayAfterHoldReset,
          prompt      = STRING_TOKEN (0x190A),
          help        = STRING_TOKEN (0x190B),
          minimum     = 0,
          maximum     = 1000,
          step        = 0,    
          default     = 100,
        endnumeric;
      endif;

      suppressif NOT ideqval SETUP_VOLATILE_DATA.PlatformFlavor == 0x4;
        oneof varid    = SA_SETUP.PrimaryDisplay,
          prompt   = STRING_TOKEN(0x18F4),
          help     = STRING_TOKEN(0x18F5),
          option text = STRING_TOKEN(0x158F), value = 3, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x18F6), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x18F7),  value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x18F8),  value = 2, flags = RESET_REQUIRED;
        endoneof;
      endif;

        oneof varid    = SA_SETUP.InternalGraphics,
          prompt   = STRING_TOKEN(0x190D),
          help     = STRING_TOKEN(0x190E),
          default  = 2, defaultstore = MyStandardDefault,
          option text = STRING_TOKEN(0x158F), value = 2, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1591), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1590),  value = 1, flags = RESET_REQUIRED;
        endoneof;

        oneof varid    = SA_SETUP.GTTSize,
          prompt   = STRING_TOKEN(0x1976),
          help     = STRING_TOKEN(0x1977),
          option text = STRING_TOKEN(0x1978), value = 1, flags =  RESET_REQUIRED;
          option text = STRING_TOKEN(0x1979), value = 2, flags =  RESET_REQUIRED;
          option text = STRING_TOKEN(0x197A), value = 3, flags =  DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        oneof varid    = SA_SETUP.ApertureSize,
          prompt   = STRING_TOKEN(0x197B),
          help     = STRING_TOKEN(0x197C),
          default value = 1, defaultstore = MyStandardDefault,
          option text = STRING_TOKEN(0x197D), value = 0, flags =  RESET_REQUIRED;
          option text = STRING_TOKEN(0x197E), value = 1, flags =  RESET_REQUIRED;
          option text = STRING_TOKEN(0x197F), value = 3, flags =  RESET_REQUIRED;
          option text = STRING_TOKEN(0x1980), value = 7, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1981), value = 15, flags = RESET_REQUIRED;  
        endoneof;





#line 2925 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaSetup.hfr"



        oneof varid  = SA_SETUP.GtPsmiSupport,
          prompt   = STRING_TOKEN (0x1982),
          help     = STRING_TOKEN (0x1983),
          option text = STRING_TOKEN (0x1591), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN (0x1590),  value = 1, flags = RESET_REQUIRED;
        endoneof;

        suppressif ideqval SA_SETUP.GtPsmiSupport == 0;
          oneof varid    = SA_SETUP.GtPsmiRegionSize,
            prompt   = STRING_TOKEN(0x1984),
            help     = STRING_TOKEN(0x1985),
            default value = 0, defaultstore = MyStandardDefault,
            option text = STRING_TOKEN(0x1986), value = 0, flags =  RESET_REQUIRED;
            option text = STRING_TOKEN(0x1987), value = 1, flags =  RESET_REQUIRED;
            option text = STRING_TOKEN(0x1988), value = 2, flags =  RESET_REQUIRED;
            option text = STRING_TOKEN(0x1989), value = 3, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x198A), value = 4, flags = RESET_REQUIRED;
          endoneof;
        endif;





#line 2953 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaSetup.hfr"



      
      
      

        oneof varid   = SA_SETUP.IgdDvmt50PreAlloc,
          prompt  = STRING_TOKEN(0x18CE),
          help    = STRING_TOKEN(0x18E4),
          default =254 , defaultstore = MyStandardDefault,
          option text = STRING_TOKEN(0x18CF), value=0, flags=RESET_REQUIRED;
          option text = STRING_TOKEN(0x18D0), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x18D1), value=2, flags=RESET_REQUIRED;
          option text = STRING_TOKEN(0x18D2),  value=3, flags=RESET_REQUIRED;
          option text = STRING_TOKEN(0x18D3), value=4, flags=RESET_REQUIRED;
          option text = STRING_TOKEN(0x18D4), value=5, flags=RESET_REQUIRED;
          option text = STRING_TOKEN(0x18D5), value=240, flags=RESET_REQUIRED;
          option text = STRING_TOKEN(0x18D6), value=241, flags=RESET_REQUIRED;
          option text = STRING_TOKEN(0x18D7), value=242, flags=RESET_REQUIRED;
          option text = STRING_TOKEN(0x18D8), value=243, flags=RESET_REQUIRED;
          option text = STRING_TOKEN(0x18D9), value=244, flags=RESET_REQUIRED;
          option text = STRING_TOKEN(0x18DA), value=245, flags=RESET_REQUIRED;
          option text = STRING_TOKEN(0x18DB), value=246, flags=RESET_REQUIRED;
          option text = STRING_TOKEN(0x18DC), value=247, flags=RESET_REQUIRED;
          option text = STRING_TOKEN(0x18DD), value=248, flags=RESET_REQUIRED;
          option text = STRING_TOKEN(0x18DE), value=249, flags=RESET_REQUIRED;
          option text = STRING_TOKEN(0x18DF), value=250, flags=RESET_REQUIRED;
          option text = STRING_TOKEN(0x18E0), value=251, flags=RESET_REQUIRED;
          option text = STRING_TOKEN(0x18E1), value=252, flags=RESET_REQUIRED;
          option text = STRING_TOKEN(0x18E2), value=253, flags=RESET_REQUIRED;
          option text = STRING_TOKEN(0x18E3), value=254, flags=RESET_REQUIRED;
        endoneof;

      suppressif ideqval SA_SETUP.ApertureSize == 15;  
        oneof   varid   = SA_SETUP.PeiGraphicsPeimInit,
          prompt  = STRING_TOKEN(0x19A7),
          help    = STRING_TOKEN(0x19A8),
          option text = STRING_TOKEN (0x1590), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN (0x1591), value = 0, flags = RESET_REQUIRED;
        endoneof;
      endif;                                           

      
      
      
      
      suppressif TRUE;
        oneof varid  = SA_SETUP.AlsEnable,
          prompt   = STRING_TOKEN (0x19C8),
          help     = STRING_TOKEN (0x19C9),
          option text = STRING_TOKEN (0x1590), value = 2, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x1591), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
      endif;

      suppressif ideqval SETUP_VOLATILE_DATA.PlatformFlavor == 0x4;
          oneof varid  = SA_SETUP.PanelPowerEnable,
            prompt   = STRING_TOKEN (0x19CA),
            help     = STRING_TOKEN (0x19CB),
            option text = STRING_TOKEN (0x1591), value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN (0x1590), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          endoneof;
      endif;  

       
        oneof   varid   = SA_SETUP.PmSupport,
          questionid  = 5136,
          prompt  = STRING_TOKEN(0x19A9),
          help    = STRING_TOKEN(0x19AA),
          option text = STRING_TOKEN(0x1590), value= 1, flags=  DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1591), value= 0, flags= RESET_REQUIRED;
        endoneof;
       

      suppressif ideqval SA_SETUP.PmSupport == 0;
        oneof   varid   = SA_SETUP.RC1pFreqEnable,
          prompt  = STRING_TOKEN(0x19AB),
          help    = STRING_TOKEN(0x19AC),
          option text = STRING_TOKEN(0x1590), value= 1, flags=  RESET_REQUIRED;
          option text = STRING_TOKEN(0x1591), value= 0, flags= DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
      endif;

      oneof   varid   = SA_SETUP.PavpEnable,
        prompt  = STRING_TOKEN(0x19AD),
        help    = STRING_TOKEN(0x19AE),
        option text = STRING_TOKEN(0x1590), value=1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1591), value=0, flags = RESET_REQUIRED;
      endoneof;

      oneof   varid   = SA_SETUP.CdynmaxClampEnable,
        prompt  = STRING_TOKEN(0x19AF),
        help    = STRING_TOKEN(0x19B0),
        option text = STRING_TOKEN(0x1590), value=1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1591), value=0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      
      suppressif (ideqval SETUP_VOLATILE_DATA.CdClockSelector == 1 OR ideqval SETUP_VOLATILE_DATA.CdClockSelector == 0);
        oneof   varid   = SA_SETUP.CdClock,
          prompt  = STRING_TOKEN(0x19BA),
          help    = STRING_TOKEN(0x19BB),
          option text = STRING_TOKEN(0x19BC), value=0, flags= RESET_REQUIRED;
          option text = STRING_TOKEN(0x19BE), value=2, flags= RESET_REQUIRED;
          option text = STRING_TOKEN(0x19BF), value=3, flags= RESET_REQUIRED;
          option text = STRING_TOKEN(0x19C1), value=5, flags= RESET_REQUIRED;
          option text = STRING_TOKEN(0x19C3), value=7, flags= RESET_REQUIRED;
          option text = STRING_TOKEN(0x19C5), value= 0xFF, flags= DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
      endif;

    
     suppressif ideqval SETUP_VOLATILE_DATA.CdClockSelector == 2;
       oneof   varid   = SA_SETUP.CdClock,
         prompt  = STRING_TOKEN(0x19BA),
         help    = STRING_TOKEN(0x19BB),
         option text = STRING_TOKEN(0x19BC),   value=0, flags= RESET_REQUIRED;
         option text = STRING_TOKEN(0x19BD), value=1, flags= RESET_REQUIRED;

         option text = STRING_TOKEN(0x19C0), value=4, flags= RESET_REQUIRED;
#line 3075 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaSetup.hfr"
         option text = STRING_TOKEN(0x19C2), value=6, flags= RESET_REQUIRED;
         option text = STRING_TOKEN(0x19C4), value=8, flags= RESET_REQUIRED;
         option text = STRING_TOKEN(0x19C5), value= 0xFF, flags= DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;
     endif;


      oneof varid     = SA_SETUP.SkipCdClockInit,
        prompt  = STRING_TOKEN(0x19C6),
        help    = STRING_TOKEN(0x19C7),
        option text = STRING_TOKEN(0x1590), value=1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1591), value=0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;
#line 3089 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaSetup.hfr"




      oneof varid   = SA_SETUP.SriovEnable,
        prompt  = STRING_TOKEN(0x19B1),
        help    = STRING_TOKEN(0x19B2),
        option text = STRING_TOKEN(0x1590),  value=1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1591), value=0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      suppressif ideqval SA_SETUP.SriovEnable == 0;
        oneof varid    = SA_SETUP.SriovMmioSizeAbove4Gb,
          prompt   = STRING_TOKEN(0x19B3),
          help     = STRING_TOKEN(0x19B4),
          default value = 0, defaultstore = MyStandardDefault,
          option text = STRING_TOKEN(0x19B5), value = 0, flags =  RESET_REQUIRED;
          option text = STRING_TOKEN(0x19B6), value = 1, flags =  RESET_REQUIRED;
          option text = STRING_TOKEN(0x19B7), value = 2, flags =  RESET_REQUIRED;
        endoneof;
      endif;

      oneof varid   = SA_SETUP.GtProchotEnable,
        prompt  = STRING_TOKEN(0x19B8),
        help    = STRING_TOKEN(0x19B9),
        option text = STRING_TOKEN(0x1590),  value=1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1591), value=0, flags = RESET_REQUIRED;
      endoneof;







      oneof varid   =  SA_SETUP.GopConfigEnable,
        prompt   = STRING_TOKEN(0x1D05),
        help     = STRING_TOKEN(0x1D06),
        option text = STRING_TOKEN (0x1590),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN (0x1591), value = 0, flags = RESET_REQUIRED;
      endoneof;

      suppressif ideqval SA_SETUP.GopConfigEnable == 0;
        text
          help  = STRING_TOKEN(0x1CE1),
          text  = STRING_TOKEN(0x1CE2),
          text  = STRING_TOKEN(0x1CE3),
          flags = 0,
          key   = 0;

        numeric varid = SA_SETUP.T3Timing,
          prompt      = STRING_TOKEN(0x1CE4),
          help        = STRING_TOKEN(0x1CE5),
          flags       = RESET_REQUIRED,
          minimum     = 0,
          maximum     = 250,
          step        = 1,
          default     = 200,
        endnumeric;













#line 3162 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaSetup.hfr"
      endif;

      oneof varid    = SA_SETUP.LidStatusPolling,
        prompt   = STRING_TOKEN(0x1CE8),
        help     = STRING_TOKEN(0x1CE9),
        option text = STRING_TOKEN(0x1591), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1590), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;



    oneof varid    = SA_SETUP.VbtSelect,
      prompt   = STRING_TOKEN(0x1CEA),
      help     = STRING_TOKEN(0x1CEB),
      option text = STRING_TOKEN(0x1CEC), value = 0x0, flags = DEFAULT | RESET_REQUIRED;
      option text = STRING_TOKEN(0x1CED), value = 0x1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid  = SA_SETUP.DisplayAudioLink,
      prompt   = STRING_TOKEN (0x1CEE),
      help     = STRING_TOKEN (0x1CEF),
      option text = STRING_TOKEN (0x1591), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN (0x1590),  value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid = SA_SETUP.IuerButtonEnable,
      prompt   = STRING_TOKEN(0x1D03),
      help     = STRING_TOKEN(0x1D04),
      default  = 0, defaultstore = MyStandardDefault,
      option text = STRING_TOKEN(0x1591), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x1590), value = 1, flags = RESET_REQUIRED;
    endoneof;

      suppressif ideqval SETUP_VOLATILE_DATA.PlatformFlavor == 0x4;
        goto 4141,
          prompt  = STRING_TOKEN(0x190C),
          help    = STRING_TOKEN(0x190C);
      endif;

      suppressif NOT ideqval SETUP_VOLATILE_DATA.PlatformFlavor == 0x1 AND
                 NOT ideqval SETUP_VOLATILE_DATA.PlatformFlavor == 0x6;
        goto 4370,
          prompt  = STRING_TOKEN(0x1CF0),
          help    = STRING_TOKEN(0x1CF0);
      endif;  

    endform;

    form formid = 4139,
    title     = STRING_TOKEN(0x19CC);

      subtitle text = STRING_TOKEN(0x19CC);
      subtitle text = STRING_TOKEN(0x0002);

      suppressif NOT ideqval SETUP_VOLATILE_DATA.PlatformType == 0x1;
        text
          help   = STRING_TOKEN(0x1C58),
          text   = STRING_TOKEN(0x1C59),
          text   = STRING_TOKEN(0x1C5A),
          flags  = 0,
          key    = 0;

        subtitle text = STRING_TOKEN(0x0002);

        oneof varid   = SA_SETUP.DmiMaxLinkSpeed,
          prompt      = STRING_TOKEN(0x1C61),
          help        = STRING_TOKEN(0x1C62),
          option text = STRING_TOKEN (0x0C60),        value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x0C61),        value = 2, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x0C62),        value = 3, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x0C63),        value = 4, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
      endif;

      oneof varid   = SA_SETUP.DmiCdrRelock,
        prompt      = STRING_TOKEN (0x1DA4),
        help        = STRING_TOKEN (0x1DA5),
        option text = STRING_TOKEN (0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN (0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      suppressif ideqval SETUP_VOLATILE_DATA.PlatformType == 0x1;
        oneof varid   = SA_SETUP.DmiGen3EqPh2Enable,
          prompt      = STRING_TOKEN(0x1C9C),
          help        = STRING_TOKEN(0x1C9D),
          option text = STRING_TOKEN(0x1591),       value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1590),        value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x158F),           value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          inconsistentif
            prompt    = STRING_TOKEN(0x1C9E),
            ideqval SA_SETUP.DmiGen3EqPh2Enable == 0 AND ideqval SA_SETUP.DmiGen3EqPh3Method == 1
          endif
        endoneof;

        oneof varid   = SA_SETUP.DmiGen3EqPh3Method,
          prompt      = STRING_TOKEN(0x1C97),
          help        = STRING_TOKEN(0x1C98),
          option text = STRING_TOKEN (0x158F),           value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN (0x1C99),    value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x1C9A),    value = 2, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x1C9B),  value = 3, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x1591),      value = 4, flags = RESET_REQUIRED;
          inconsistentif
            prompt    = STRING_TOKEN(0x1C9E),
            ideqval SA_SETUP.DmiGen3EqPh2Enable == 0 AND ideqval SA_SETUP.DmiGen3EqPh3Method == 1
          endif
        endoneof;

        suppressif NOT ideqval SETUP_VOLATILE_DATA.PlatformType == 0x1;
          oneof varid   = SA_SETUP.DmiGen3ProgramStaticEq,
            prompt      = STRING_TOKEN(0x1C95),
            help        = STRING_TOKEN(0x1C96),
            option text = STRING_TOKEN (0x1591), value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN (0x1590),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          endoneof;

          suppressif ideqval SA_SETUP.DmiGen3ProgramStaticEq == 0;

            goto 4390,
              prompt = STRING_TOKEN(0x1CA9),
              help   = STRING_TOKEN(0x1CAA);

            goto 4391,
              prompt = STRING_TOKEN(0x1CAB),
              help   = STRING_TOKEN(0x1CAC);

            goto 4392,
              prompt = STRING_TOKEN(0x1CAD),
              help   = STRING_TOKEN(0x1CAE);

          endif;

          goto 4393,
            prompt = STRING_TOKEN(0x1C9F),
            help   = STRING_TOKEN(0x1CA0);

          oneof varid = SA_SETUP.DmiDeEmphasis,
            prompt   = STRING_TOKEN(0x1C91),
            help     = STRING_TOKEN(0x1C92),
            option text  = STRING_TOKEN (0x1C93),  value = 0, flags = RESET_REQUIRED;
            option text  = STRING_TOKEN (0x1C94), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          endoneof;
        endif;

      
        oneof varid   = SA_SETUP.DmiAspm,
          prompt      = STRING_TOKEN(0x1C5B),
          help        = STRING_TOKEN(0x1C5C),
          option text = STRING_TOKEN(0x1591),        value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x158F),            value = 4, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C8E),   value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C90),    value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C8F), value = 3, flags = RESET_REQUIRED;
        endoneof;
      endif;

      oneof varid   = SA_SETUP.DmiAspmCtrl,
          prompt      = STRING_TOKEN(0x1C5D),
          help        = STRING_TOKEN(0x1C5E),
          option text = STRING_TOKEN(0x1591),        value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x158F),            value = 4, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C8E),   value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C90),    value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C8F), value = 3, flags = RESET_REQUIRED;
        endoneof;

      numeric varid = SA_SETUP.DmiAspmL1ExitLatency,
        prompt      = STRING_TOKEN(0x1C5F),
        help        = STRING_TOKEN(0x1C60),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 7,
        step        = 1,
        default     = 4,
      endnumeric;

      oneof varid   = SA_SETUP.DmiNewFom,
        prompt   = STRING_TOKEN (0x1DA1),
        help     = STRING_TOKEN (0x1DA2),
        option text = STRING_TOKEN (0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN (0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      goto 5684,
        prompt = STRING_TOKEN(0x1C67),
        help   = STRING_TOKEN(0x1C67);
    endform;

    form formid = 4390,
    title       = STRING_TOKEN(0x1CA9);

      subtitle text = STRING_TOKEN(0x1CA9);
      subtitle text = STRING_TOKEN(0x0002);

      numeric varid = SA_SETUP.DmiGen3RootPortPreset[0x0],
        prompt      = STRING_TOKEN(0x1CAF),
        help        = STRING_TOKEN(0x1CB0),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 9,
        step        = 1,
        default     = 4,
      endnumeric;
      numeric varid = SA_SETUP.DmiGen3RootPortPreset[0x1],
        prompt      = STRING_TOKEN(0x1CB1),
        help        = STRING_TOKEN(0x1CB2),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 9,
        step        = 1,
        default     = 4,
      endnumeric;
      numeric varid = SA_SETUP.DmiGen3RootPortPreset[0x2],
        prompt      = STRING_TOKEN(0x1CB3),
        help        = STRING_TOKEN(0x1CB4),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 9,
        step        = 1,
        default     = 4,
      endnumeric;
      numeric varid = SA_SETUP.DmiGen3RootPortPreset[0x3],
        prompt      = STRING_TOKEN(0x1CB5),
        help        = STRING_TOKEN(0x1CB6),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 9,
        step        = 1,
        default     = 4,
      endnumeric;
      numeric varid = SA_SETUP.DmiGen3RootPortPreset[0x4],
        prompt      = STRING_TOKEN(0x1CB7),
        help        = STRING_TOKEN(0x1CB8),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 9,
        step        = 1,
        default     = 4,
      endnumeric;
      numeric varid = SA_SETUP.DmiGen3RootPortPreset[0x5],
        prompt      = STRING_TOKEN(0x1CB9),
        help        = STRING_TOKEN(0x1CBA),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 9,
        step        = 1,
        default     = 4,
      endnumeric;
      numeric varid = SA_SETUP.DmiGen3RootPortPreset[0x6],
        prompt      = STRING_TOKEN(0x1CBB),
        help        = STRING_TOKEN(0x1CBC),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 9,
        step        = 1,
        default     = 4,
      endnumeric;
      numeric varid = SA_SETUP.DmiGen3RootPortPreset[0x7],
        prompt      = STRING_TOKEN(0x1CBD),
        help        = STRING_TOKEN(0x1CBE),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 9,
        step        = 1,
        default     = 4,
      endnumeric;
    endform;

    form formid = 4391,
    title       = STRING_TOKEN(0x1CAB);

      subtitle text = STRING_TOKEN(0x1CAB);
      subtitle text = STRING_TOKEN(0x0002);

      numeric varid = SA_SETUP.DmiGen3EndPointPreset[0x0],
        prompt      = STRING_TOKEN(0x1CBF),
        help        = STRING_TOKEN(0x1CC0),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 9,
        step        = 1,
        default     = 7,
      endnumeric;
      numeric varid = SA_SETUP.DmiGen3EndPointPreset[0x1],
        prompt      = STRING_TOKEN(0x1CC1),
        help        = STRING_TOKEN(0x1CC2),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 9,
        step        = 1,
        default     = 7,
      endnumeric;
      numeric varid = SA_SETUP.DmiGen3EndPointPreset[0x2],
        prompt      = STRING_TOKEN(0x1CC3),
        help        = STRING_TOKEN(0x1CC4),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 9,
        step        = 1,
        default     = 7,
      endnumeric;
      numeric varid = SA_SETUP.DmiGen3EndPointPreset[0x3],
        prompt      = STRING_TOKEN(0x1CC5),
        help        = STRING_TOKEN(0x1CC6),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 9,
        step        = 1,
        default     = 7,
      endnumeric;

      numeric varid = SA_SETUP.DmiGen3EndPointPreset[0x4],
        prompt      = STRING_TOKEN(0x1CC7),
        help        = STRING_TOKEN(0x1CC8),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 9,
        step        = 1,
        default     = 7,
      endnumeric;
      numeric varid = SA_SETUP.DmiGen3EndPointPreset[0x5],
        prompt      = STRING_TOKEN(0x1CC9),
        help        = STRING_TOKEN(0x1CCA),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 9,
        step        = 1,
        default     = 7,
      endnumeric;
      numeric varid = SA_SETUP.DmiGen3EndPointPreset[0x6],
        prompt      = STRING_TOKEN(0x1CCB),
        help        = STRING_TOKEN(0x1CCC),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 9,
        step        = 1,
        default     = 7,
      endnumeric;
      numeric varid = SA_SETUP.DmiGen3EndPointPreset[0x7],
        prompt      = STRING_TOKEN(0x1CCD),
        help        = STRING_TOKEN(0x1CCE),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 9,
        step        = 1,
        default     = 7,
      endnumeric;
    endform;

    form formid = 4392,
    title       = STRING_TOKEN(0x1CAD);

      subtitle text = STRING_TOKEN(0x1CAD);
      subtitle text = STRING_TOKEN(0x0002);

      numeric varid = SA_SETUP.DmiGen3EndPointHint[0x0],
        prompt      = STRING_TOKEN(0x1CCF),
        help        = STRING_TOKEN(0x1CD0),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 6,
        step        = 1,
        default     = 2,
      endnumeric;
      numeric varid = SA_SETUP.DmiGen3EndPointHint[0x1],
        prompt      = STRING_TOKEN(0x1CD1),
        help        = STRING_TOKEN(0x1CD2),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 6,
        step        = 1,
        default     = 2,
      endnumeric;
      numeric varid = SA_SETUP.DmiGen3EndPointHint[0x2],
        prompt      = STRING_TOKEN(0x1CD3),
        help        = STRING_TOKEN(0x1CD4),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 6,
        step        = 1,
        default     = 2,
      endnumeric;
      numeric varid = SA_SETUP.DmiGen3EndPointHint[0x3],
        prompt      = STRING_TOKEN(0x1CD5),
        help        = STRING_TOKEN(0x1CD6),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 6,
        step        = 1,
        default     = 2,
      endnumeric;

      numeric varid = SA_SETUP.DmiGen3EndPointHint[0x4],
        prompt      = STRING_TOKEN(0x1CD7),
        help        = STRING_TOKEN(0x1CD8),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 6,
        step        = 1,
        default     = 2,
      endnumeric;
      numeric varid = SA_SETUP.DmiGen3EndPointHint[0x5],
        prompt      = STRING_TOKEN(0x1CD9),
        help        = STRING_TOKEN(0x1CDA),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 6,
        step        = 1,
        default     = 2,
      endnumeric;
      numeric varid = SA_SETUP.DmiGen3EndPointHint[0x6],
        prompt      = STRING_TOKEN(0x1CDB),
        help        = STRING_TOKEN(0x1CDC),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 6,
        step        = 1,
        default     = 2,
      endnumeric;
      numeric varid = SA_SETUP.DmiGen3EndPointHint[0x7],
        prompt      = STRING_TOKEN(0x1CDD),
        help        = STRING_TOKEN(0x1CDE),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 6,
        step        = 1,
        default     = 2,
      endnumeric;
    endform;
    form formid = 4393,
    title       = STRING_TOKEN(0x1C9F);

      subtitle text = STRING_TOKEN(0x1C9F);
      subtitle text = STRING_TOKEN(0x0002);

      numeric varid = SA_SETUP.DmiGen3RxCtlePeaking[0x0],
        prompt      = STRING_TOKEN(0x1CA1),
        help        = STRING_TOKEN(0x1CA2),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 15,
        step        = 1,
        default     = 0,
      endnumeric;
      numeric varid = SA_SETUP.DmiGen3RxCtlePeaking[0x1],
        prompt      = STRING_TOKEN(0x1CA3),
        help        = STRING_TOKEN(0x1CA4),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 15,
        step        = 1,
        default     = 0,
      endnumeric;

      numeric varid = SA_SETUP.DmiGen3RxCtlePeaking[0x2],
        prompt      = STRING_TOKEN(0x1CA5),
        help        = STRING_TOKEN(0x1CA6),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 15,
        step        = 1,
        default     = 0,
      endnumeric;
      numeric varid = SA_SETUP.DmiGen3RxCtlePeaking[0x3],
        prompt      = STRING_TOKEN(0x1CA7),
        help        = STRING_TOKEN(0x1CA8),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 15,
        step        = 1,
        default     = 0,
      endnumeric;
    endform;

    form formid = 5684,
    title       = STRING_TOKEN(0x1C67);

      subtitle text = STRING_TOKEN(0x1C67);
      subtitle text = STRING_TOKEN(0x0002);

      oneof varid   = SETUP_DATA.DmiHweq,
        prompt      = STRING_TOKEN(0x1C63),
        help        = STRING_TOKEN(0x1C64),
        option text = STRING_TOKEN(0x1591),      value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1C65),    value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1C66),       value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      

      numeric varid = SETUP_DATA.DmiGen4RtcoCpre[0x0],
        prompt      = STRING_TOKEN(0x1C79),
        help        = STRING_TOKEN(0x1C89),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 63,
        step        = 1,
        default     = 0,
      endnumeric;

      numeric varid = SETUP_DATA.DmiGen4RtcoCpo[0x0],
        prompt      = STRING_TOKEN(0x1C7A),
        help        = STRING_TOKEN(0x1C89),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 63,
        step        = 1,
        default     = 0,
      endnumeric;

      numeric varid = SETUP_DATA.DmiGen4RtcoCpre[0x1],
        prompt      = STRING_TOKEN(0x1C7B),
        help        = STRING_TOKEN(0x1C89),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 63,
        step        = 1,
        default     = 14,
      endnumeric;

      numeric varid = SETUP_DATA.DmiGen4RtcoCpo[0x1],
        prompt      = STRING_TOKEN(0x1C7C),
        help        = STRING_TOKEN(0x1C89),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 63,
        step        = 1,
        default     = 7,
      endnumeric;

      numeric varid = SETUP_DATA.DmiGen4RtcoCpre[0x2],
        prompt      = STRING_TOKEN(0x1C7D),
        help        = STRING_TOKEN(0x1C89),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 63,
        step        = 1,
        default     = 10,
      endnumeric;

      numeric varid = SETUP_DATA.DmiGen4RtcoCpo[0x2],
        prompt      = STRING_TOKEN(0x1C7E),
        help        = STRING_TOKEN(0x1C89),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 63,
        step        = 1,
        default     = 6,
      endnumeric;

      numeric varid = SETUP_DATA.DmiGen4RtcoCpre[0x3],
        prompt      = STRING_TOKEN(0x1C7F),
        help        = STRING_TOKEN(0x1C89),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 63,
        step        = 1,
        default     = 7,
      endnumeric;

      numeric varid = SETUP_DATA.DmiGen4RtcoCpo[0x3],
        prompt      = STRING_TOKEN(0x1C80),
        help        = STRING_TOKEN(0x1C89),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 63,
        step        = 1,
        default     = 7,
      endnumeric;

      numeric varid = SETUP_DATA.DmiGen4RtcoCpre[0x4],
        prompt      = STRING_TOKEN(0x1C81),
        help        = STRING_TOKEN(0x1C89),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 63,
        step        = 1,
        default     = 7,
      endnumeric;

      numeric varid = SETUP_DATA.DmiGen4RtcoCpo[0x4],
        prompt      = STRING_TOKEN(0x1C82),
        help        = STRING_TOKEN(0x1C89),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 63,
        step        = 1,
        default     = 7,
      endnumeric;

      numeric varid = SETUP_DATA.DmiGen4RtcoCpre[0x5],
        prompt      = STRING_TOKEN(0x1C83),
        help        = STRING_TOKEN(0x1C89),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 63,
        step        = 1,
        default     = 7,
      endnumeric;

      numeric varid = SETUP_DATA.DmiGen4RtcoCpo[0x5],
        prompt      = STRING_TOKEN(0x1C84),
        help        = STRING_TOKEN(0x1C89),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 63,
        step        = 1,
        default     = 7,
      endnumeric;

      numeric varid = SETUP_DATA.DmiGen4RtcoCpre[0x6],
        prompt      = STRING_TOKEN(0x1C85),
        help        = STRING_TOKEN(0x1C89),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 63,
        step        = 1,
        default     = 7,
      endnumeric;

      numeric varid = SETUP_DATA.DmiGen4RtcoCpo[0x6],
        prompt      = STRING_TOKEN(0x1C86),
        help        = STRING_TOKEN(0x1C89),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 63,
        step        = 1,
        default     = 7,
      endnumeric;

      numeric varid = SETUP_DATA.DmiGen4RtcoCpre[0x7],
        prompt      = STRING_TOKEN(0x1C88),
        help        = STRING_TOKEN(0x1C89),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 63,
        step        = 1,
        default     = 7,
      endnumeric;

      numeric varid = SETUP_DATA.DmiGen4RtcoCpo[0x7],
        prompt      = STRING_TOKEN(0x1C87),
        help        = STRING_TOKEN(0x1C89),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 63,
        step        = 1,
        default     = 7,
      endnumeric;

      numeric varid = SETUP_DATA.PchDmiGen3RtcoCpre[0],
        prompt      = STRING_TOKEN(0x1C68),
        help        = STRING_TOKEN(0x1C78),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 63,
        step        = 1,
        default     = 0,
      endnumeric;

      numeric varid = SETUP_DATA.PchDmiGen3RtcoCpo[0],
        prompt      = STRING_TOKEN(0x1C69),
        help        = STRING_TOKEN(0x1C78),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 63,
        step        = 1,
        default     = 0,
      endnumeric;

      numeric varid = SETUP_DATA.PchDmiGen3RtcoCpre[1],
        prompt      = STRING_TOKEN(0x1C6A),
        help        = STRING_TOKEN(0x1C78),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 63,
        step        = 1,
        default     = 0,
      endnumeric;

      numeric varid = SETUP_DATA.PchDmiGen3RtcoCpo[1],
        prompt      = STRING_TOKEN(0x1C6B),
        help        = STRING_TOKEN(0x1C78),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 63,
        step        = 1,
        default     = 0,
      endnumeric;

      numeric varid = SETUP_DATA.PchDmiGen3RtcoCpre[2],
        prompt      = STRING_TOKEN(0x1C6C),
        help        = STRING_TOKEN(0x1C78),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 63,
        step        = 1,
        default     = 0,
      endnumeric;

      numeric varid = SETUP_DATA.PchDmiGen3RtcoCpo[2],
        prompt      = STRING_TOKEN(0x1C6D),
        help        = STRING_TOKEN(0x1C78),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 63,
        step        = 1,
        default     = 0,
      endnumeric;

      numeric varid = SETUP_DATA.PchDmiGen3RtcoCpre[3],
        prompt      = STRING_TOKEN(0x1C6E),
        help        = STRING_TOKEN(0x1C78),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 63,
        step        = 1,
        default     = 0,
      endnumeric;

      numeric varid = SETUP_DATA.PchDmiGen3RtcoCpo[3],
        prompt      = STRING_TOKEN(0x1C6F),
        help        = STRING_TOKEN(0x1C78),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 63,
        step        = 1,
        default     = 0,
      endnumeric;

      numeric varid = SETUP_DATA.PchDmiGen3RtcoCpre[4],
        prompt      = STRING_TOKEN(0x1C70),
        help        = STRING_TOKEN(0x1C78),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 63,
        step        = 1,
        default     = 0,
      endnumeric;

      numeric varid = SETUP_DATA.PchDmiGen3RtcoCpo[4],
        prompt      = STRING_TOKEN(0x1C71),
        help        = STRING_TOKEN(0x1C78),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 63,
        step        = 1,
        default     = 0,
      endnumeric;

      numeric varid = SETUP_DATA.PchDmiGen3RtcoCpre[5],
        prompt      = STRING_TOKEN(0x1C72),
        help        = STRING_TOKEN(0x1C78),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 63,
        step        = 1,
        default     = 0,
      endnumeric;

      numeric varid = SETUP_DATA.PchDmiGen3RtcoCpo[5],
        prompt      = STRING_TOKEN(0x1C73),
        help        = STRING_TOKEN(0x1C78),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 63,
        step        = 1,
        default     = 0,
      endnumeric;

      numeric varid = SETUP_DATA.PchDmiGen3RtcoCpre[6],
        prompt      = STRING_TOKEN(0x1C74),
        help        = STRING_TOKEN(0x1C78),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 63,
        step        = 1,
        default     = 0,
      endnumeric;

      numeric varid = SETUP_DATA.PchDmiGen3RtcoCpo[6],
        prompt      = STRING_TOKEN(0x1C75),
        help        = STRING_TOKEN(0x1C78),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 63,
        step        = 1,
        default     = 0,
      endnumeric;

      numeric varid = SETUP_DATA.PchDmiGen3RtcoCpre[7],
        prompt      = STRING_TOKEN(0x1C76),
        help        = STRING_TOKEN(0x1C78),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 63,
        step        = 1,
        default     = 0,
      endnumeric;

      numeric varid = SETUP_DATA.PchDmiGen3RtcoCpo[7],
        prompt      = STRING_TOKEN(0x1C77),
        help        = STRING_TOKEN(0x1C78),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 63,
        step        = 1,
        default     = 0,
      endnumeric;
      
    endform;

    form formid = 4141,
    title     = STRING_TOKEN(0x190C);

      subtitle text = STRING_TOKEN(0x190C);
      subtitle text = STRING_TOKEN(0x0002);

      oneof varid    = SA_SETUP.IgdBootType,
        prompt   = STRING_TOKEN(0x18E9),
        help     = STRING_TOKEN(0x18EA),
        option text = STRING_TOKEN(0x18EB),      value = 0, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
        option text = STRING_TOKEN(0x18ED),          value = 0x04, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x18EC),          value = 0x08, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x18EF),         value = 0x20, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x18EE),         value = 0x40, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x18F0),         value = 0x10, flags = RESET_REQUIRED;
      endoneof;

    suppressif ideqval SA_SETUP.IgdBootType == 0x0;
      oneof varid    = SA_SETUP.DisplayPipeB,
        prompt   = STRING_TOKEN(0x18F1),
        help     = STRING_TOKEN(0x18F2),
        option text = STRING_TOKEN(0x18F3),       value = 0, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
        option text = STRING_TOKEN(0x18ED),          value = 0x04, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x18EF),         value = 0x20, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x18EE),         value = 0x40, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x18F0),         value = 0x10, flags = RESET_REQUIRED;
      endoneof;
    endif;

      oneof varid     = SA_SETUP.LcdPanelType,
        prompt      = STRING_TOKEN(0x1952),
        help        = STRING_TOKEN(0x1953),
        option text = STRING_TOKEN(0x18EB),  value = 0, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
        option text = STRING_TOKEN(0x1954), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1955), value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1956), value = 3, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1957), value = 4, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1958), value = 5, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1959), value = 6, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x195A), value = 7, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x195B), value = 8, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x195C), value = 9, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x195D), value = 10, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x195E), value = 13, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x195F), value = 14, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1960), value = 15, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1961), value = 16, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1962), value = 17, flags = RESET_REQUIRED;
      endoneof;

      oneof varid     = SA_SETUP.LcdPanelScaling,
        prompt      = STRING_TOKEN(0x1963),
        help        = STRING_TOKEN(0x1964),
        option text = STRING_TOKEN(0x1965), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1967), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1966), value = 6, flags = RESET_REQUIRED;
      endoneof;

      oneof varid    = SA_SETUP.IgdLcdBlc,
        prompt   = STRING_TOKEN(0x1968),
        help     = STRING_TOKEN(0x1969),
        option text = STRING_TOKEN(0x196A), value = 0x00, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x196B), value = 0x02, flags =  DEFAULT | MANUFACTURING |RESET_REQUIRED;
      endoneof;

     oneof varid  = SA_SETUP.ActiveLFP,
        prompt   = STRING_TOKEN (0x1970),
        help     = STRING_TOKEN (0x1971),
        option text = STRING_TOKEN (0x1972), value = 0, flags =  RESET_REQUIRED;
        option text = STRING_TOKEN (0x1973), value = 3, flags = DEFAULT | MANUFACTURING |RESET_REQUIRED;
     endoneof;

     oneof varid  = SA_SETUP.LfpColorDepth,
        prompt   = STRING_TOKEN (0x196C),
        help     = STRING_TOKEN (0x196D),
        option text = STRING_TOKEN (0x196E), value = 0, flags = DEFAULT | MANUFACTURING |RESET_REQUIRED;
        option text = STRING_TOKEN (0x196F), value = 1, flags =  RESET_REQUIRED;
     endoneof;

      numeric varid = SA_SETUP.VbiosBrightness,
        prompt      = STRING_TOKEN (0x1974),
        help        = STRING_TOKEN (0x1975),
        minimum     = 0,
        maximum     = 255,
        step        = 0,
        default     = 255,
      endnumeric;

    endform;

    form formid = 4370,
    title     = STRING_TOKEN(0x1CF0);

      subtitle text = STRING_TOKEN(0x1CF0);
      subtitle text = STRING_TOKEN(0x0002);

    oneof varid = SA_SETUP.IuerConvertibleEnable,
      prompt   = STRING_TOKEN(0x1CFF),
      help     = STRING_TOKEN(0x1D00),
      default  = 0, defaultstore = MyStandardDefault,
      option text = STRING_TOKEN(0x1591), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x1590), value = 1, flags = RESET_REQUIRED;
    endoneof;

    suppressif ideqval SA_SETUP.IuerConvertibleEnable == 0;
      oneof varid = SA_SETUP.SlateIndicatorRT,
        prompt   = STRING_TOKEN(0x1CF1),
        help     = STRING_TOKEN(0x1CF2),
        option text = STRING_TOKEN(0x1CF9), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1CFA), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid = SA_SETUP.SlateIndicatorSx,
        prompt   = STRING_TOKEN(0x1CF5),
        help     = STRING_TOKEN(0x1CF6),
        option text = STRING_TOKEN(0x1CFD), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1CFE), value = 1, flags = RESET_REQUIRED;
      endoneof;
    endif;

    oneof varid = SA_SETUP.IuerDockEnable,
      prompt   = STRING_TOKEN(0x1D01),
      help     = STRING_TOKEN(0x1D02),
      default  = 0, defaultstore = MyStandardDefault,
      option text = STRING_TOKEN(0x1591), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x1590), value = 1, flags = RESET_REQUIRED;
    endoneof;

    suppressif ideqval SA_SETUP.IuerDockEnable == 0;
      oneof varid = SA_SETUP.DockIndicatorRT,
        prompt   = STRING_TOKEN(0x1CF3),
        help     = STRING_TOKEN(0x1CF4),
        option text = STRING_TOKEN(0x1CFC), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1CFB), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid = SA_SETUP.DockIndicatorSx,
        prompt   = STRING_TOKEN(0x1CF7),
        help     = STRING_TOKEN(0x1CF8),
        option text = STRING_TOKEN(0x1CFD), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1CFE), value = 1, flags = RESET_REQUIRED;
      endoneof;
    endif;

    endform;

    form formid = 4142,
    title     = STRING_TOKEN(0x03DB);

      subtitle text = STRING_TOKEN(0x03DB);
      subtitle text = STRING_TOKEN(0x0002);

      suppressif ideqval SA_SETUP.PmSupport == 0;
         
          oneof varid = SA_SETUP.EnableRenderStandby,
            questionid  = 5135,
            prompt   = STRING_TOKEN(0x18E7),
            help     = STRING_TOKEN(0x18E8),
            default  = 1, defaultstore = MyStandardDefault,
            option text = STRING_TOKEN(0x0004), value =0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
          endoneof;
         
      endif;

      
      
      
      oneof varid   = SA_SETUP.GtFreqMax,
        prompt  = STRING_TOKEN(0x198B),
        help    = STRING_TOKEN(0x198C),
        option text = STRING_TOKEN(0x19A4), value= 0xFF, flags=RESET_REQUIRED;
        option text = STRING_TOKEN(0x198D), value= 2, flags=RESET_REQUIRED;
        option text = STRING_TOKEN(0x198E), value= 3, flags=RESET_REQUIRED;
        option text = STRING_TOKEN(0x198F), value= 4, flags=RESET_REQUIRED;
        option text = STRING_TOKEN(0x1990), value= 5, flags=RESET_REQUIRED;
        option text = STRING_TOKEN(0x1991), value= 6, flags=RESET_REQUIRED;
        option text = STRING_TOKEN(0x1992), value= 7, flags=RESET_REQUIRED;
        option text = STRING_TOKEN(0x1993), value= 8, flags=RESET_REQUIRED;
        option text = STRING_TOKEN(0x1994), value= 9, flags=RESET_REQUIRED;
        option text = STRING_TOKEN(0x1995), value= 10, flags=RESET_REQUIRED;
        option text = STRING_TOKEN(0x1996), value= 11, flags=RESET_REQUIRED;
        option text = STRING_TOKEN(0x1997), value= 12, flags=RESET_REQUIRED;
        option text = STRING_TOKEN(0x1998), value= 13, flags=RESET_REQUIRED;
        option text = STRING_TOKEN(0x1999), value= 14, flags=RESET_REQUIRED;
        option text = STRING_TOKEN(0x199A), value= 15, flags=RESET_REQUIRED;
        option text = STRING_TOKEN(0x199B), value= 16, flags=RESET_REQUIRED;
        option text = STRING_TOKEN(0x199C), value= 17, flags=RESET_REQUIRED;
        option text = STRING_TOKEN(0x199D), value= 18, flags=RESET_REQUIRED;
        option text = STRING_TOKEN(0x199E), value= 19, flags=RESET_REQUIRED;
        option text = STRING_TOKEN(0x199F), value= 20, flags=RESET_REQUIRED;
        option text = STRING_TOKEN(0x19A0), value= 21, flags=RESET_REQUIRED;
        option text = STRING_TOKEN(0x19A1), value= 22, flags=RESET_REQUIRED;
        option text = STRING_TOKEN(0x19A2), value= 23, flags=RESET_REQUIRED;
        option text = STRING_TOKEN(0x19A3), value= 24, flags=RESET_REQUIRED;
      endoneof;

      grayoutif NOT ideqval SA_SETUP.GtFreqMax == 0xFF;
        oneof   varid   = SA_SETUP.DisableTurboGt,
          prompt  = STRING_TOKEN(0x19A5),
          help    = STRING_TOKEN(0x19A6),
          option text = STRING_TOKEN (0x1590), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x1591), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
      endif;

    endform;

    form formid = 4324,
    title = STRING_TOKEN(0x17CC);

      oneof varid   = SA_SETUP.ECT,
        prompt      = STRING_TOKEN(0x17CE),
        help        = STRING_TOKEN(0x17CF),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.SOT,
        prompt      = STRING_TOKEN(0x17D0),
        help        = STRING_TOKEN(0x17D1),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.ERDMPRTC2D,
        prompt      = STRING_TOKEN(0x17D2),
        help        = STRING_TOKEN(0x0851),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.RDMPRT,
        prompt      = STRING_TOKEN(0x17D3),
        help        = STRING_TOKEN(0x17D4),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.RCVET,
        prompt      = STRING_TOKEN(0x17D5),
        help        = STRING_TOKEN(0x17D6),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.JWRL,
        prompt      = STRING_TOKEN(0x17D7),
        help        = STRING_TOKEN(0x17D8),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.EWRTC2D,
        prompt      = STRING_TOKEN(0x17D9),
        help        = STRING_TOKEN(0x17DA),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.ERDTC2D,
        prompt      = STRING_TOKEN(0x17DB),
        help        = STRING_TOKEN(0x0851),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.WRTC1D,
        prompt      = STRING_TOKEN(0x17DC),
        help        = STRING_TOKEN(0x17DD),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.WRVC1D,
        prompt      = STRING_TOKEN(0x17DE),
        help        = STRING_TOKEN(0x0851),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.RDTC1D,
        prompt      = STRING_TOKEN(0x17DF),
        help        = STRING_TOKEN(0x17E0),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.DIMMODTT,
        prompt      = STRING_TOKEN(0x17E1),
        help        = STRING_TOKEN(0x17E2),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      grayoutif ideqval SA_SETUP.DIMMODTT == 0;
        oneof varid    = SA_SETUP.MaxRttWr,
          prompt   = STRING_TOKEN(0x164C),
          help     = STRING_TOKEN(0x164D),
          option text = STRING_TOKEN (0x164E), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN (0x164F), value = 1, flags = RESET_REQUIRED;
        endoneof;
      endif;

      oneof varid   = SA_SETUP.DIMMRONT,
        prompt      = STRING_TOKEN(0x17E3),
        help        = STRING_TOKEN(0x17E4),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.WRDSEQT,
        prompt      = STRING_TOKEN(0x17E5),
        help        = STRING_TOKEN(0x0851),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.WRSRT,
        prompt      = STRING_TOKEN(0x17E6),
        help        = STRING_TOKEN(0x17E7),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.RDODTT,
        prompt      = STRING_TOKEN(0x17E8),
        help        = STRING_TOKEN(0x17E9),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.RDEQT,
        prompt      = STRING_TOKEN(0x17EA),
        help        = STRING_TOKEN(0x17EB),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.RDAPT,
        prompt      = STRING_TOKEN(0x17EC),
        help        = STRING_TOKEN(0x17ED),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.WRTC2D,
        prompt      = STRING_TOKEN(0x17EE),
        help        = STRING_TOKEN(0x17EF),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.RDTC2D,
        prompt      = STRING_TOKEN(0x17F0),
        help        = STRING_TOKEN(0x17F1),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.CMDVC,
        prompt      = STRING_TOKEN(0x17F2),
        help        = STRING_TOKEN(0x17F3),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.WRVC2D,
        prompt      = STRING_TOKEN(0x17F4),
        help        = STRING_TOKEN(0x17F5),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.RDVC2D,
        prompt      = STRING_TOKEN(0x17F6),
        help        = STRING_TOKEN(0x17F7),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.LCT,
        prompt      = STRING_TOKEN(0x17F8),
        help        = STRING_TOKEN(0x17F9),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.RTL,
        prompt      = STRING_TOKEN(0x17FA),
        help        = STRING_TOKEN(0x17FB),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.TAT,
        prompt      = STRING_TOKEN(0x17FC),
        help        = STRING_TOKEN(0x17FD),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.CMDSR,
        prompt      = STRING_TOKEN(0x180D),
        help        = STRING_TOKEN(0x180D),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.CMDDSEQ,
        prompt      = STRING_TOKEN(0x180B),
        help        = STRING_TOKEN(0x180C),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.RDVC1D,
        prompt      = STRING_TOKEN(0x1806),
        help        = STRING_TOKEN(0x1806),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.TXTCO,
        prompt      = STRING_TOKEN(0x1807),
        help        = STRING_TOKEN(0x1807),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.CLKTCO,
        prompt      = STRING_TOKEN(0x180A),
        help        = STRING_TOKEN(0x180A),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.TXTCODQS,
        prompt      = STRING_TOKEN(0x1808),
        help        = STRING_TOKEN(0x1808),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.VCCDLLBP,
        prompt      = STRING_TOKEN(0x1809),
        help        = STRING_TOKEN(0x1809),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.CMDDRUD,
        prompt      = STRING_TOKEN(0x180E),
        help        = STRING_TOKEN(0x180E),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.DIMMODTCA,
        prompt      = STRING_TOKEN(0x180F),
        help        = STRING_TOKEN(0x180F),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.PVTTDNLP,
        prompt      = STRING_TOKEN(0x1810),
        help        = STRING_TOKEN(0x1810),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.RDVREFDC,
        prompt      = STRING_TOKEN(0x1811),
        help        = STRING_TOKEN(0x1811),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.VDDQT,
        prompt      = STRING_TOKEN(0x1812),
        help        = STRING_TOKEN(0x1812),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.DCC,
        prompt      = STRING_TOKEN(0x1813),
        help        = STRING_TOKEN(0x1813),
        option text = STRING_TOKEN(0x0004), value = 0, flags =  RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.RMTBIT,
        prompt      = STRING_TOKEN(0x1814),
        help        = STRING_TOKEN(0x1814),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.DIMMDFE,
        prompt      = STRING_TOKEN(0x1816),
        help        = STRING_TOKEN(0x1816),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.EARLYDIMMDFE,
        questionid  = 5495,
        prompt      = STRING_TOKEN(0x1817),
        help        = STRING_TOKEN(0x1817),
        option text = STRING_TOKEN(0x0004), value = 0, flags = MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.TXDQSDCC,
        prompt      = STRING_TOKEN(0x1818),
        help        = STRING_TOKEN(0x1819),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.DRAMDCA,
        prompt      = STRING_TOKEN(0x181A),
        help        = STRING_TOKEN(0x181A),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.WRDS,
        prompt      = STRING_TOKEN(0x181D),
        help        = STRING_TOKEN(0x181D),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.RMT,
        prompt      = STRING_TOKEN(0x17FE),
        help        = STRING_TOKEN(0x17FF),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.MEMTST,
        prompt      = STRING_TOKEN(0x1800),
        help        = STRING_TOKEN(0x1801),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.DQSOFFSETADJUST,
        prompt      = STRING_TOKEN(0x181B),
        help        = STRING_TOKEN(0x181C),
        option text = STRING_TOKEN(0x0004), value = 0, flags = MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | RESET_REQUIRED;
      endoneof;




      suppressif ideqval SA_SETUP.MEMTST == 0;
        goto 4331,
          prompt  = STRING_TOKEN(0x1828),
          help    = STRING_TOKEN(0x1829);
      endif;




      oneof varid   = SA_SETUP.ALIASCHK,
        prompt      = STRING_TOKEN(0x1802),
        help        = STRING_TOKEN(0x1803),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.RCVENC1D,
        prompt      = STRING_TOKEN(0x1804),
        help        = STRING_TOKEN(0x1804),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.RMC,
        prompt      = STRING_TOKEN(0x1805),
        help        = STRING_TOKEN(0x1805),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.WRDSUDT,
        prompt      = STRING_TOKEN(0x1815),
        help        = STRING_TOKEN(0x1815),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.MarginLimitCheck,
        prompt      = STRING_TOKEN(0x181E),
        help        = STRING_TOKEN(0x181F),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1820),  value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1821),  value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1822),  value = 3, flags = RESET_REQUIRED;
      endoneof;

      grayoutif (ideqval SA_SETUP.MarginLimitCheck == 0 OR ideqval SA_SETUP.MarginLimitCheck == 1);
        numeric varid   = SA_SETUP.MarginLimitL2,
          prompt      = STRING_TOKEN(0x1823),
          help        = STRING_TOKEN(0x1824),
          flags       = RESET_REQUIRED,
          minimum     = 1,
          maximum     = 300,
          step        = 1,
          default     = 100,
        endnumeric;
      endif;

      
      
      
      oneof varid   = SA_SETUP.MCREGOFFSET,
        prompt      = STRING_TOKEN(0x1825),
        help        = STRING_TOKEN(0x1826),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = RESET_REQUIRED;
      endoneof;
      
      
      
    endform;




    form formid = 4331,
    title = STRING_TOKEN(0x1827);

      oneof varid   = SA_SETUP.DcttTest,
        prompt      = STRING_TOKEN(0x182A),
        help        = STRING_TOKEN(0x182B),
        option text = STRING_TOKEN(0x182C), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x182D),   value = 1, flags = RESET_REQUIRED;
      endoneof;

      suppressif NOT ideqval SA_SETUP.DcttTest == 1;
        oneof varid   = SA_SETUP.DcttDataBase,
          prompt      = STRING_TOKEN(0x182E),
          help        = STRING_TOKEN(0x182F),
          option text = STRING_TOKEN(0x1830), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1831),  value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1832),  value = 2, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1833),     value = 3, flags = RESET_REQUIRED;
        endoneof;

        oneof varid   = SA_SETUP.DcttRowSwizzleType,
          prompt      = STRING_TOKEN(0x1834),
          help        = STRING_TOKEN(0x1835),
          option text = STRING_TOKEN(0x1836), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1837), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1838), value = 2, flags = RESET_REQUIRED;
        endoneof;

        oneof varid   = SA_SETUP.DcttRhRefreshEnable,
          prompt      = STRING_TOKEN(0x1839),
          help        = STRING_TOKEN(0x183A),
          option text = STRING_TOKEN(0x1591), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1590), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        numeric varid = SA_SETUP.DcttRhHammerCount,
          prompt      = STRING_TOKEN(0x183B),
          help        = STRING_TOKEN(0x183C),
          flags       = RESET_REQUIRED,
          minimum     = 1,
          maximum     = 4294967295,
          step        = 1,
          default     = 100000,
        endnumeric;

        numeric varid = SA_SETUP.DcttRhIterationOnRow,
          prompt      = STRING_TOKEN(0x183D),
          help        = STRING_TOKEN(0x183E),
          flags       = RESET_REQUIRED,
          minimum     = 1,
          maximum     = 255,
          step        = 1,
          default     = 1,
        endnumeric;

        numeric varid = SA_SETUP.DcttBankDisableMask,
          prompt      = STRING_TOKEN(0x183F),
          help        = STRING_TOKEN(0x1840),
          flags       = RESET_REQUIRED,
          minimum     = 0,
          maximum     = 0xFF,
          step        = 0x1,
          default     = 0,
        endnumeric;

        numeric varid = SA_SETUP.DcttRhPageCloseDelay,
          prompt      = STRING_TOKEN(0x1841),
          help        = STRING_TOKEN(0x1842),
          flags       = RESET_REQUIRED,
          minimum     = 1,
          maximum     = 255,
          step        = 1,
          default     = 27,
        endnumeric;

        numeric varid = SA_SETUP.DcttRefreshMultiplier,
          prompt      = STRING_TOKEN(0x1843),
          help        = STRING_TOKEN(0x1844),
          flags       = RESET_REQUIRED,
          minimum     = 1,
          maximum     = 100,
          step        = 1,
          default     = 1,
        endnumeric;
      endif; 
    endform; 




    form formid = 5441,
    title = STRING_TOKEN(0x1DFB);
      
      oneof varid   = SA_SETUP.UsbOverride,
        prompt      = STRING_TOKEN(0x1E10),
        help        = STRING_TOKEN(0x1E11),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.TcssXdciEn,
        prompt      = STRING_TOKEN(0x1D18),
        help        = STRING_TOKEN(0x1D19),
        


#line 4716 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaSetup.hfr"
          option text = STRING_TOKEN(0x0004), value = 0, flags =  DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags =  RESET_REQUIRED;
        #line 4719 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaSetup.hfr"
      endoneof;

      oneof varid   = SA_SETUP.CpuUsbPdoProgramming,
        prompt      = STRING_TOKEN(0x1DFE),
        help        = STRING_TOKEN(0x1DFF),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      subtitle text = STRING_TOKEN(0x0002);

      
      
      
      suppressif ideqval SA_SETUP.CpuUsbPdoProgramming == 0x0;
        oneof varid  = SA_SETUP.CpuUsbPortDisable,
          prompt   = STRING_TOKEN(0x1E00),
          help     = STRING_TOKEN(0x1E01),
          default     = 0, defaultstore = MyStandardDefault,
          option text = STRING_TOKEN(0x1474), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1E02), value = 1, flags = RESET_REQUIRED;
        endoneof;

        subtitle text = STRING_TOKEN(0x0002);

        
        
        
        suppressif ideqval SA_SETUP.CpuUsbPortDisable == 0x0;

          
          
          
          
          #line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\CpuUsbSingleSsPort.hfr"


































suppressif ideqval TBT_SETUP_VOLATILE_DATA.TcssCpuXhciPortSupport[0] == 0;
  oneof varid   = SA_SETUP.CpuUsbSsPort[0],
    prompt      = STRING_TOKEN(0x1E03),
    help        = STRING_TOKEN(0x1000),
    option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
  endoneof;
endif;
#line 4754 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaSetup.hfr"
          
          
          #line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\CpuUsbSingleSsPort.hfr"


































suppressif ideqval TBT_SETUP_VOLATILE_DATA.TcssCpuXhciPortSupport[1] == 0;
  oneof varid   = SA_SETUP.CpuUsbSsPort[1],
    prompt      = STRING_TOKEN(0x1E04),
    help        = STRING_TOKEN(0x1000),
    option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
  endoneof;
endif;
#line 4757 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaSetup.hfr"
          
          
          #line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\CpuUsbSingleSsPort.hfr"


































suppressif ideqval TBT_SETUP_VOLATILE_DATA.TcssCpuXhciPortSupport[2] == 0;
  oneof varid   = SA_SETUP.CpuUsbSsPort[2],
    prompt      = STRING_TOKEN(0x1E05),
    help        = STRING_TOKEN(0x1000),
    option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
  endoneof;
endif;
#line 4760 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaSetup.hfr"
          
          
          #line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\CpuUsbSingleSsPort.hfr"


































suppressif ideqval TBT_SETUP_VOLATILE_DATA.TcssCpuXhciPortSupport[3] == 0;
  oneof varid   = SA_SETUP.CpuUsbSsPort[3],
    prompt      = STRING_TOKEN(0x1E06),
    help        = STRING_TOKEN(0x1000),
    option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
  endoneof;
endif;
#line 4763 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaSetup.hfr"
          

        endif; 
      endif; 

    endform;




    form formid = 4327,
    title = STRING_TOKEN(0x1664);

      goto 4325,
        prompt  = STRING_TOKEN(0x167A),
        help    = STRING_TOKEN(0x167B);

      goto 4326,
        prompt  = STRING_TOKEN(0x16B8),
        help    = STRING_TOKEN(0x16B9);

      oneof varid   = SA_SETUP.PcuDdrVoltage,
        prompt      = STRING_TOKEN(0x1667),
        help        = STRING_TOKEN(0x1668),
        option text = STRING_TOKEN(0x158F),         value = 0xFF, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1669),            value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x166A),           value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x166B), value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x166C),   value = 3, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x166D),            value = 7, flags = RESET_REQUIRED;
      endoneof;

    endform;

    form formid = 4325,
    title = STRING_TOKEN(0x167A);

      text
        help   = STRING_TOKEN(0x167D),
        text   = STRING_TOKEN(0x167C),
        text   = STRING_TOKEN(0x167E),
        flags  = 0,
        key    = 0;
      text
        help   = STRING_TOKEN(0x1680),
        text   = STRING_TOKEN(0x167F),
        text   = STRING_TOKEN(0x1681),
        flags  = 0,
        key    = 0;
      text
        help   = STRING_TOKEN(0x1683),
        text   = STRING_TOKEN(0x1682),
        text   = STRING_TOKEN(0x1684),
        flags  = 0,
        key    = 0;
      text
        help   = STRING_TOKEN(0x1686),
        text   = STRING_TOKEN(0x1685),
        text   = STRING_TOKEN(0x1687),
        flags  = 0,
        key    = 0;
      text
        help   = STRING_TOKEN(0x1689),
        text   = STRING_TOKEN(0x1688),
        text   = STRING_TOKEN(0x168A),
        flags  = 0,
        key    = 0;
      text
        help   = STRING_TOKEN(0x168C),
        text   = STRING_TOKEN(0x168B),
        text   = STRING_TOKEN(0x168D),
        flags  = 0,
        key    = 0;
      text
        help   = STRING_TOKEN(0x168F),
        text   = STRING_TOKEN(0x168E),
        text   = STRING_TOKEN(0x1690),
        flags  = 0,
        key    = 0;
      text
        help   = STRING_TOKEN(0x1692),
        text   = STRING_TOKEN(0x1691),
        text   = STRING_TOKEN(0x1693),
        flags  = 0,
        key    = 0;
      text
        help   = STRING_TOKEN(0x1695),
        text   = STRING_TOKEN(0x1694),
        text   = STRING_TOKEN(0x1696),
        flags  = 0,
        key    = 0;
      text
        help   = STRING_TOKEN(0x1698),
        text   = STRING_TOKEN(0x1697),
        text   = STRING_TOKEN(0x1699),
        flags  = 0,
        key    = 0;
      text
        help   = STRING_TOKEN(0x169B),
        text   = STRING_TOKEN(0x169A),
        text   = STRING_TOKEN(0x169C),
        flags  = 0,
        key    = 0;
    endform;

    form formid = 4326,
    title       = STRING_TOKEN(0x16B8);

      numeric varid = SA_SETUP.tRRSG,
        prompt      = STRING_TOKEN(0x16BB),
        help        = STRING_TOKEN(0x16BA),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 0xFF,
        step        = 1,
        default     = 0, 
      endnumeric;

      numeric varid = SA_SETUP.tRRDG,
        prompt      = STRING_TOKEN(0x16BC),
        help        = STRING_TOKEN(0x16BA),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 0xFF,
        step        = 1,
        default     = 0, 
      endnumeric;

      numeric varid = SA_SETUP.tRRDR,
        prompt      = STRING_TOKEN(0x16BD),
        help        = STRING_TOKEN(0x16BA),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 0xFF,
        step        = 1,
        default     = 0, 
      endnumeric;

      numeric varid = SA_SETUP.tRRDD,
        prompt      = STRING_TOKEN(0x16BE),
        help        = STRING_TOKEN(0x16BA),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 0xFF,
        step        = 1,
        default     = 0, 
      endnumeric;

      numeric varid = SA_SETUP.tWRSG,
        prompt      = STRING_TOKEN(0x16BF),
        help        = STRING_TOKEN(0x16BA),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 0xFF,
        step        = 1,
        default     = 0, 
      endnumeric;

      numeric varid = SA_SETUP.tWRDG,
        prompt      = STRING_TOKEN(0x16C0),
        help        = STRING_TOKEN(0x16BA),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 0xFF,
        step        = 1,
        default     = 0, 
      endnumeric;

      numeric varid = SA_SETUP.tWRDR,
        prompt      = STRING_TOKEN(0x16C1),
        help        = STRING_TOKEN(0x16BA),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 0xFF,
        step        = 1,
        default     = 0, 
      endnumeric;

      numeric varid = SA_SETUP.tWRDD,
        prompt      = STRING_TOKEN(0x16C2),
        help        = STRING_TOKEN(0x16BA),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 0xFF,
        step        = 1,
        default     = 0, 
      endnumeric;

      numeric varid = SA_SETUP.tWWSG,
        prompt      = STRING_TOKEN(0x16C3),
        help        = STRING_TOKEN(0x16BA),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 0xFF,
        step        = 1,
        default     = 0, 
      endnumeric;

      numeric varid = SA_SETUP.tWWDG,
        prompt      = STRING_TOKEN(0x16C4),
        help        = STRING_TOKEN(0x16BA),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 0xFF,
        step        = 1,
        default     = 0, 
      endnumeric;

      numeric varid = SA_SETUP.tWWDR,
        prompt      = STRING_TOKEN(0x16C5),
        help        = STRING_TOKEN(0x16BA),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 0xFF,
        step        = 1,
        default     = 0, 
      endnumeric;

      numeric varid = SA_SETUP.tWWDD,
        prompt      = STRING_TOKEN(0x16C6),
        help        = STRING_TOKEN(0x16BA),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 0xFF,
        step        = 1,
        default     = 0, 
      endnumeric;

      numeric varid = SA_SETUP.tRWSG,
        prompt      = STRING_TOKEN(0x16C7),
        help        = STRING_TOKEN(0x16BA),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 0xFF,
        step        = 1,
        default     = 0,
      endnumeric;

      numeric varid = SA_SETUP.tRWDG,
        prompt      = STRING_TOKEN(0x16C8),
        help        = STRING_TOKEN(0x16BA),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 0xFF,
        step        = 1,
        default     = 0,
      endnumeric;

      numeric varid = SA_SETUP.tRWDR,
        prompt      = STRING_TOKEN(0x16C9),
        help        = STRING_TOKEN(0x16BA),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 0xFF,
        step        = 1,
        default     = 0,
      endnumeric;

      numeric varid = SA_SETUP.tRWDD,
        prompt      = STRING_TOKEN(0x16CA),
        help        = STRING_TOKEN(0x16BA),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 0xFF,
        step        = 1,
        default     = 0, 
      endnumeric;

    endform;




    form formid = 4168,
    title = STRING_TOKEN(0x17AF);

      subtitle text = STRING_TOKEN(0x17AF);
      subtitle text = STRING_TOKEN(0x0002);

      goto 4328,
        prompt  = STRING_TOKEN(0x1765),
        help    = STRING_TOKEN(0x1766);

      oneof varid    = SA_SETUP.MemoryThermalManagement,
        prompt      = STRING_TOKEN(0x17B0),
        help        = STRING_TOKEN(0x17B1),
        option text = STRING_TOKEN(0x0004),  value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT |MANUFACTURING |  RESET_REQUIRED;
      endoneof;

      suppressif ideqval SA_SETUP.MemoryThermalManagement == 0x0;
        oneof varid    = SA_SETUP.PeciInjectedTemp,
          prompt      = STRING_TOKEN(0x17B2),
          help        = STRING_TOKEN(0x17B3),
          option text = STRING_TOKEN(0x0004),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003),  value = 1, flags = RESET_REQUIRED;
        endoneof;

        oneof varid    = SA_SETUP.ExttsViaTsOnBoard,
          prompt      = STRING_TOKEN(0x17B4),
          help        = STRING_TOKEN(0x17B5),
          option text = STRING_TOKEN(0x0004),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003),  value = 1, flags = RESET_REQUIRED;
        endoneof;

        oneof varid    = SA_SETUP.ExttsViaTsOnDimm,
          prompt      = STRING_TOKEN(0x17B6),
          help        = STRING_TOKEN(0x17B7),
          option text = STRING_TOKEN(0x0004),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003),  value = 1, flags = RESET_REQUIRED;
        endoneof;

        oneof varid    = SA_SETUP.VirtualTempSensor,
          prompt      = STRING_TOKEN(0x17B8),
          help        = STRING_TOKEN(0x17B9),
          option text = STRING_TOKEN(0x0004),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003),  value = 1, flags = RESET_REQUIRED;
        endoneof;
      endif;

    endform;

    form formid = 4328,
    title       = STRING_TOKEN(0x1765);

      subtitle text = STRING_TOKEN(0x1765);
      subtitle text = STRING_TOKEN(0x0002);

      oneof varid   = SA_SETUP.EnablePwrDn,
        prompt   = STRING_TOKEN (0x1767),
        help     = STRING_TOKEN (0x1768),
        option text = STRING_TOKEN(0x176C), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x176B),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.EnablePwrDnLpddr,
        prompt   = STRING_TOKEN (0x1769),
        help     = STRING_TOKEN (0x176A),
        option text = STRING_TOKEN(0x176C), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x176B),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.Refresh2X,
        prompt   = STRING_TOKEN (0x176D),
        help     = STRING_TOKEN (0x176E),
        option text = STRING_TOKEN(0x0004),            value = 0x00, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x176F), value = 0x01, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1770),      value = 0x02, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.SrefCfgEna,
        prompt      = STRING_TOKEN(0x1771),
        help        = STRING_TOKEN(0x1772),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      numeric varid = SA_SETUP.SrefCfgIdleTmr,
        prompt  = STRING_TOKEN (0x1773),
        help    = STRING_TOKEN (0x1774),
        flags   = 0 | RESET_REQUIRED,
        minimum = 512,
        maximum = 65535,
        step    = 1,
        default = 512,
      endnumeric;

      oneof varid   = SA_SETUP.ThrtCkeMinDefeat,
        prompt      = STRING_TOKEN(0x1775),
        help        = STRING_TOKEN(0x1776),
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
      endoneof;

      numeric varid = SA_SETUP.ThrtCkeMinTmr,
        prompt  = STRING_TOKEN (0x1777),
        help    = STRING_TOKEN (0x1778),
        flags   = 0 | RESET_REQUIRED,
        minimum = 0x0,
        maximum = 0xFF,
        step    = 1,
        default = 0,
      endnumeric;

      oneof varid  = SA_SETUP.AllowOppRefBelowWriteThrehold,
        prompt   = STRING_TOKEN (0x1654),
        help     = STRING_TOKEN (0x1655),
        option text = STRING_TOKEN (0x1591), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN (0x1590), value = 1, flags = RESET_REQUIRED;
      endoneof;

      numeric varid = SA_SETUP.WriteThreshold,
        prompt  = STRING_TOKEN(0x1656),
        help    = STRING_TOKEN(0x1657),
        flags   = RESET_REQUIRED,
        minimum = 0,
        maximum = 0x3F,
        step    = 1,
        default = 0,
      endnumeric;

      suppressif NOT ideqval SETUP_VOLATILE_DATA.PlatformType == 0x2;
        oneof varid   = SA_SETUP.ThrtCkeMinDefeatLpddr,
          prompt      = STRING_TOKEN(0x1779),
          help        = STRING_TOKEN(0x177A),
          option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING |RESET_REQUIRED;
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        endoneof;

        numeric varid = SA_SETUP.ThrtCkeMinTmrLpddr,
          prompt  = STRING_TOKEN (0x177B),
          help    = STRING_TOKEN (0x177C),
          flags   = 0 | RESET_REQUIRED,
          minimum = 0x0,
          maximum = 0xFF,
          step    = 1,
          default = 0,
        endnumeric;
      endif;
    endform;

    
    
    
    form formid = 5037,
    title       = STRING_TOKEN(0x177D);

      subtitle text = STRING_TOKEN(0x177F);
      oneof varid   = SA_SETUP.CAVrefCtlOffset,
        prompt      = STRING_TOKEN(0x1780),
        help        = STRING_TOKEN(0x1781),
        option text = STRING_TOKEN(0x1796)  , value = 0,    flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1797) , value = 1,    flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1798) , value = 0xFF, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1799) , value = 2,    flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x179A) , value = 0xFE, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x179B) , value = 3,    flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x179C) , value = 0xFD, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x179D) , value = 4,    flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x179E) , value = 0xFC, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x179F) , value = 5,    flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x17A0) , value = 0xFB, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x17A1) , value = 6,    flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x17A2) , value = 0xFA, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x17A3) , value = 7,    flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x17A4) , value = 0xF9, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x17A5) , value = 8,    flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x17A6) , value = 0xF8, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x17A7) , value = 9,    flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x17A8) , value = 0xF7, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x17A9), value = 10,   flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x17AA), value = 0xF6, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x17AB), value = 11,   flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x17AC), value = 0xF5, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x17AD), value = 12,   flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x17AE), value = 0xF4, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.VrefCtlOffset,
        prompt      = STRING_TOKEN(0x1782),
        help        = STRING_TOKEN(0x1783),
        option text = STRING_TOKEN(0x1796)  , value = 0,    flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1797) , value = 1,    flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1798) , value = 0xFF, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1799) , value = 2,    flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x179A) , value = 0xFE, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x179B) , value = 3,    flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x179C) , value = 0xFD, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x179D) , value = 4,    flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x179E) , value = 0xFC, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x179F) , value = 5,    flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x17A0) , value = 0xFB, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x17A1) , value = 6,    flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x17A2) , value = 0xFA, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x17A3) , value = 7,    flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x17A4) , value = 0xF9, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x17A5) , value = 8,    flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x17A6) , value = 0xF8, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x17A7) , value = 9,    flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x17A8) , value = 0xF7, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x17A9), value = 10,   flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x17AA), value = 0xF6, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x17AB), value = 11,   flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x17AC), value = 0xF5, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x17AD), value = 12,   flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x17AE), value = 0xF4, flags = RESET_REQUIRED;
      endoneof;

      subtitle text = STRING_TOKEN(0x0002);
      subtitle text = STRING_TOKEN(0x1784);
      oneof varid   = SA_SETUP.ClkPiCodeOffset,
        prompt      = STRING_TOKEN(0x1785),
        help        = STRING_TOKEN(0x1786),
        option text = STRING_TOKEN(0x1796)  , value = 0,    flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1797) , value = 1,    flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1798) , value = 0xFF, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1799) , value = 2,    flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x179A) , value = 0xFE, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x179B) , value = 3,    flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x179C) , value = 0xFD, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x179D) , value = 4,    flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x179E) , value = 0xFC, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x179F) , value = 5,    flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x17A0) , value = 0xFB, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x17A1) , value = 6,    flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x17A2) , value = 0xFA, flags = RESET_REQUIRED;
      endoneof;

      subtitle text = STRING_TOKEN(0x0002);
      subtitle text = STRING_TOKEN(0x1787);
      oneof varid   = SA_SETUP.RcvEnOffset,
        prompt      = STRING_TOKEN(0x1788),
        help        = STRING_TOKEN(0x1789),
        option text = STRING_TOKEN(0x1796)  , value = 0,    flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1797) , value = 1,    flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1798) , value = 0xFF, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1799) , value = 2,    flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x179A) , value = 0xFE, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x179B) , value = 3,    flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x179C) , value = 0xFD, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.RxDqsOffset,
        prompt      = STRING_TOKEN(0x178A),
        help        = STRING_TOKEN(0x178B),
        option text = STRING_TOKEN(0x1796)  , value = 0,    flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1797) , value = 1,    flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1798) , value = 0xFF, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1799) , value = 2,    flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x179A) , value = 0xFE, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x179B) , value = 3,    flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x179C) , value = 0xFD, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.TxDqOffset,
        prompt      = STRING_TOKEN(0x178C),
        help        = STRING_TOKEN(0x178D),
        option text = STRING_TOKEN(0x1796)  , value = 0,    flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1797) , value = 1,    flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1798) , value = 0xFF, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1799) , value = 2,    flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x179A) , value = 0xFE, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x179B) , value = 3,    flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x179C) , value = 0xFD, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.TxDqsOffset,
        prompt      = STRING_TOKEN(0x178E),
        help        = STRING_TOKEN(0x178F),
        option text = STRING_TOKEN(0x1796)  , value = 0,    flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1797) , value = 1,    flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1798) , value = 0xFF, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1799) , value = 2,    flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x179A) , value = 0xFE, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x179B) , value = 3,    flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x179C) , value = 0xFD, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.VrefOffset,
        prompt      = STRING_TOKEN(0x1790),
        help        = STRING_TOKEN(0x1791),
        option text = STRING_TOKEN(0x1796)  , value = 0,    flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1797) , value = 1,    flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1798) , value = 0xFF, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1799) , value = 2,    flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x179A) , value = 0xFE, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x179B) , value = 3,    flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x179C) , value = 0xFD, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x179D) , value = 4,    flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x179E) , value = 0xFC, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x179F) , value = 5,    flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x17A0) , value = 0xFB, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x17A1) , value = 6,    flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x17A2) , value = 0xFA, flags = RESET_REQUIRED;
      endoneof;

      numeric varid = SA_SETUP.CntrlrMask,
        prompt      = STRING_TOKEN(0x1792),
        help        = STRING_TOKEN(0x1793),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 255,
        step        = 1,
        default     = 3,
      endnumeric;

      numeric varid = SA_SETUP.ChMask,
        prompt      = STRING_TOKEN(0x1794),
        help        = STRING_TOKEN(0x1795),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 255,
        step        = 1,
        default     = 3,
      endnumeric;

    endform;
    
    
    






#line 5370 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaSetup.hfr"
  



    form formid = 5042,
      title = STRING_TOKEN(0x19D6);

      oneof varid   = SETUP_DATA.CvfSupport,
        prompt      = STRING_TOKEN(0x19D7),
        help        = STRING_TOKEN(0x19D8),
        option text = STRING_TOKEN(0x19D9),  value = 1, flags = RESET_REQUIRED;

        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x19DA),  value = 2, flags = RESET_REQUIRED;




#line 5389 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaSetup.hfr"
      endoneof;

      
      
      
      suppressif NOT ideqval SETUP_DATA.CvfSupport == 1;
        oneof varid   = SETUP_DATA.CvfSpiSpeed,
          prompt      = STRING_TOKEN(0x19DB),
          help        = STRING_TOKEN(0x19DC),
          option text = STRING_TOKEN(0x19DD),  value = 0, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x19DE),  value = 1, flags = RESET_REQUIRED;
        endoneof;
      endif;

      suppressif NOT ideqval SETUP_DATA.CvfSupport == 2;
        oneof varid   = SETUP_DATA.CvfTestDevice,
          prompt      = STRING_TOKEN(0x19DF),
          help        = STRING_TOKEN(0x19DF),
          option text = STRING_TOKEN(0x19E0),  value = 0, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x19E1),  value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x19E2),  value = 2, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x19E3),  value = 3, flags = RESET_REQUIRED;
        endoneof;
      endif;
      
      
      

      oneof varid   = SETUP_DATA.MipiCam_ControlLogic0,
        prompt      = STRING_TOKEN(0x1BBD),
        help        = STRING_TOKEN(0x1BBD),
        default  = 1, defaultstore = MyStandardDefault,
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = RESET_REQUIRED;
      endoneof;

      suppressif ideqval SETUP_DATA.MipiCam_ControlLogic0 == 0;
        goto 147,  
          prompt   = STRING_TOKEN(0x1BBC),
          help     = STRING_TOKEN(0x1BBC),
          flags   = 0,
          key     = 0;
      endif;

      oneof varid   = SETUP_DATA.MipiCam_ControlLogic1,
        prompt      = STRING_TOKEN(0x1BBE),
        help        = STRING_TOKEN(0x1BBE),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags =  DEFAULT | RESET_REQUIRED;
      endoneof;

      suppressif ideqval SETUP_DATA.MipiCam_ControlLogic1 == 0;
        goto 148,  
          prompt   = STRING_TOKEN(0x1BBC),
          help     = STRING_TOKEN(0x1BBC),
          flags   = 0,
          key     = 0;
      endif;

      oneof varid   = SETUP_DATA.MipiCam_ControlLogic2,
        prompt      = STRING_TOKEN(0x1BBF),
        help        = STRING_TOKEN(0x1BBF),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags =  RESET_REQUIRED;
      endoneof;

      suppressif ideqval SETUP_DATA.MipiCam_ControlLogic2 == 0;
        goto 149,  
          prompt   = STRING_TOKEN(0x1BBC),
          help     = STRING_TOKEN(0x1BBC),
          flags   = 0,
          key     = 0;
      endif;

      oneof varid   = SETUP_DATA.MipiCam_ControlLogic3,
        prompt      = STRING_TOKEN(0x1BC0),
        help        = STRING_TOKEN(0x1BC0),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags =  RESET_REQUIRED;
      endoneof;

      suppressif ideqval SETUP_DATA.MipiCam_ControlLogic3 == 0;
        goto 150,  
          prompt   = STRING_TOKEN(0x1BBC),
          help     = STRING_TOKEN(0x1BBC),
          flags    = 0,
          key      = 0;
      endif;

      suppressif  NOT ideqval SETUP_DATA.MipiCam4Enable == 1;
        oneof varid   = SETUP_DATA.MipiCam_ControlLogic4,
          prompt      = STRING_TOKEN(0x1BC1),
          help        = STRING_TOKEN(0x1BC1),
          option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003),  value = 1, flags =  RESET_REQUIRED;
        endoneof;
      endif;

      suppressif ideqval SETUP_DATA.MipiCam_ControlLogic4 == 0;
        goto 151,  
          prompt   = STRING_TOKEN(0x1BBC),
          help     = STRING_TOKEN(0x1BBC),
          flags    = 0,
          key      = 0;
      endif;

      suppressif NOT ideqval SETUP_DATA.MipiCam5Enable == 1;
        oneof varid   = SETUP_DATA.MipiCam_ControlLogic5,
          prompt      = STRING_TOKEN(0x1BC2),
          help        = STRING_TOKEN(0x1BC2),
          option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003),  value = 1, flags =  RESET_REQUIRED;
        endoneof;
      endif;

      suppressif ideqval SETUP_DATA.MipiCam_ControlLogic5 == 0;
        goto 152,  
          prompt   = STRING_TOKEN(0x1BBC),
          help     = STRING_TOKEN(0x1BBC),
          flags    = 0,
          key      = 0;
      endif;

      oneof varid   = SETUP_DATA.MipiCam_Link0,
        prompt      = STRING_TOKEN(0x19E4),
        help        = STRING_TOKEN(0x19E4),
        default     = 1, defaultstore = MyStandardDefault,
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;

        option text = STRING_TOKEN(0x0003),  value = 1, flags = RESET_REQUIRED;


#line 5522 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaSetup.hfr"
      endoneof;

      suppressif ideqval SETUP_DATA.MipiCam_Link0 == 0;
        goto 141,  
          prompt   = STRING_TOKEN(0x19F5),
          help     = STRING_TOKEN(0x19F5),
          flags    = 0,
          key      = 0;

        suppressif ideqval SETUP_DATA.MipiCam_Link0_FlashDriverSelection == 0;
          goto 5450,   
            prompt   = STRING_TOKEN(0x1C3B),
            help     = STRING_TOKEN(0x1C3B),
            flags    = 0,
            key      = 0;
        endif;

      endif;

      oneof varid   = SETUP_DATA.MipiCam_Link1,
        prompt      = STRING_TOKEN(0x19E5),
        help        = STRING_TOKEN(0x19E5),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags =  DEFAULT | RESET_REQUIRED;
      endoneof;

      suppressif ideqval SETUP_DATA.MipiCam_Link1 == 0;
        goto 142,   
          prompt   = STRING_TOKEN(0x19F5),
          help     = STRING_TOKEN(0x19F5),
          flags    = 0,
          key      = 0;

        suppressif ideqval SETUP_DATA.MipiCam_Link1_FlashDriverSelection == 0;
          goto 5451,   
            prompt   = STRING_TOKEN(0x1C3B),
            help     = STRING_TOKEN(0x1C3B),
            flags    = 0,
            key      = 0;
        endif;

      endif;

      oneof varid   = SETUP_DATA.MipiCam_Link2,
        prompt      = STRING_TOKEN(0x19E6),
        help        = STRING_TOKEN(0x19E6),

        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags =  DEFAULT | RESET_REQUIRED;



#line 5575 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaSetup.hfr"
      endoneof;

      suppressif ideqval SETUP_DATA.MipiCam_Link2 == 0;
        goto 143,   
          prompt   = STRING_TOKEN(0x19F5),
          help     = STRING_TOKEN(0x19F5),
          flags    = 0,
          key      = 0;

        suppressif ideqval SETUP_DATA.MipiCam_Link2_FlashDriverSelection == 0;
          goto 5452,   
            prompt   = STRING_TOKEN(0x1C3B),
            help     = STRING_TOKEN(0x1C3B),
            flags    = 0,
            key      = 0;
        endif;

      endif;

      oneof varid   = SETUP_DATA.MipiCam_Link3,
        prompt      = STRING_TOKEN(0x19E7),
        help        = STRING_TOKEN(0x19E7),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags =  RESET_REQUIRED;
      endoneof;

      suppressif ideqval SETUP_DATA.MipiCam_Link3 == 0;
        goto 144,   
          prompt   = STRING_TOKEN(0x19F5),
          help     = STRING_TOKEN(0x19F5),
          flags    = 0,
          key      = 0;

        suppressif ideqval SETUP_DATA.MipiCam_Link3_FlashDriverSelection == 0;
          goto 5453,   
            prompt   = STRING_TOKEN(0x1C3B),
            help     = STRING_TOKEN(0x1C3B),
            flags    = 0,
            key      = 0;
        endif;

      endif;

      suppressif  NOT ideqval SETUP_DATA.MipiCam4Enable == 1;
        oneof varid   = SETUP_DATA.MipiCam_Link4,
          prompt      = STRING_TOKEN(0x19E8),
          help        = STRING_TOKEN(0x19E8),
          option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003),  value = 1, flags =  RESET_REQUIRED;
        endoneof;
      endif;

      suppressif ideqval SETUP_DATA.MipiCam_Link4 == 0;
        goto 145,   
          prompt   = STRING_TOKEN(0x19F5),
          help     = STRING_TOKEN(0x19F5),
          flags    = 0,
          key      = 0;

        suppressif ideqval SETUP_DATA.MipiCam_Link4_FlashDriverSelection == 0;
          goto 5454,   
            prompt   = STRING_TOKEN(0x1C3B),
            help     = STRING_TOKEN(0x1C3B),
            flags    = 0,
            key      = 0;
        endif;

      endif;

      suppressif  NOT ideqval SETUP_DATA.MipiCam5Enable == 1;
        oneof varid   = SETUP_DATA.MipiCam_Link5,
          prompt      = STRING_TOKEN(0x19E9),
          help        = STRING_TOKEN(0x19E9),
          option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003),  value = 1, flags =  RESET_REQUIRED;
        endoneof;
      endif;

      suppressif ideqval SETUP_DATA.MipiCam_Link5 == 0;
        goto 146,   
          prompt   = STRING_TOKEN(0x19F5),
          help     = STRING_TOKEN(0x19F5),
          flags    = 0,
          key      = 0;

        suppressif ideqval SETUP_DATA.MipiCam_Link5_FlashDriverSelection == 0;
          goto 5455,   
            prompt   = STRING_TOKEN(0x1C3B),
            help     = STRING_TOKEN(0x1C3B),
            flags    = 0,
            key      = 0;
        endif;

      endif;

    endform; 

    
    form formid = 141,
      title    = STRING_TOKEN(0x19F6);
      subtitle text = STRING_TOKEN(0x19E4);

      oneof varid   = SETUP_DATA.MipiCam_Link0_SensorModel,
        prompt      = STRING_TOKEN(0x19FD),
        help        = STRING_TOKEN(0x19FC),
        option text = STRING_TOKEN(0x1B9A), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B9B), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B9C), value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B9D), value = 3, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B9E), value = 4, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B9F), value = 5, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BA0), value = 6, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BA1), value = 7, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BA2), value = 8, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BA3), value = 9, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BA4), value = 10, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BA5), value = 11, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BA6), value = 12, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BA7), value = 13, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BA8), value = 14, flags = RESET_REQUIRED;

        option text = STRING_TOKEN(0x1BA9), value = 15, flags = DEFAULT | RESET_REQUIRED;



#line 5701 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaSetup.hfr"
        option text = STRING_TOKEN(0x1BAA), value = 16, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BAC), value = 17, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BAD), value = 18, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BAE), value = 19, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BAF), value = 20, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BB1), value = 21, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BB2), value = 255, flags = RESET_REQUIRED;
      endoneof;

      
      suppressif NOT ideqval SETUP_DATA.MipiCam_Link0_SensorModel == 255;
        string varid = SETUP_DATA.MipiCam_Link0_UserHid,
          prompt   = STRING_TOKEN(0x1BB3),
          help     = STRING_TOKEN(0x1BB3),
          minsize  = 6,
          maxsize  = 20,
        endstring;
      endif;

      oneof varid     = SETUP_DATA.MipiCam_Link0_LanesClkDiv,
        prompt      = STRING_TOKEN(0x1A0E),
        help        = STRING_TOKEN(0x1A0D),
        option text = STRING_TOKEN(0x1A14), value = 0x00, flags = DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1A15), value = 0x02, flags =  RESET_REQUIRED;
        option text = STRING_TOKEN(0x1A16), value = 0x03, flags =  RESET_REQUIRED;
        option text = STRING_TOKEN(0x1A17), value = 0x04, flags =  RESET_REQUIRED;
        option text = STRING_TOKEN(0x1A18), value = 0x06, flags =  RESET_REQUIRED;
        option text = STRING_TOKEN(0x1A19), value = 0x07, flags =  RESET_REQUIRED;
      endoneof;

      
      oneof varid = SETUP_DATA.MipiCam_Link0_DriverData_CrdVersion,
        prompt   = STRING_TOKEN(0x1B45),
        help     = STRING_TOKEN(0x1B44),
        option text = STRING_TOKEN(0x1B4D), value = 0x10, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B4F), value = 0x30, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B50), value = 0x40, flags = RESET_REQUIRED;

        option text = STRING_TOKEN(0x1B4E), value = 0x20, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B51), value = 0x50, flags = DEFAULT | RESET_REQUIRED;



#line 5745 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaSetup.hfr"
      endoneof;

      
      oneof varid = SETUP_DATA.MipiCam_Link0_DriverData_ControlLogic,
        prompt   = STRING_TOKEN(0x1C1A),
        help     = STRING_TOKEN(0x1C19),

        default  = 0x0, defaultstore = MyStandardDefault,


#line 5756 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaSetup.hfr"
        option text = STRING_TOKEN(0x1BC3), value = 0xFF, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BBD), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BBE), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BBF), value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BC0), value = 3, flags = RESET_REQUIRED;
        suppressif NOT ideqval SETUP_DATA.MipiCam4Enable == 1;
          option text = STRING_TOKEN(0x1BC1), value = 3, flags = RESET_REQUIRED;
        endif
        suppressif NOT ideqval SETUP_DATA.MipiCam5Enable == 1;
          option text = STRING_TOKEN(0x1BC2), value = 3, flags = RESET_REQUIRED;
        endif
      endoneof;

      
      oneof varid     = SETUP_DATA.MipiCam_Link0_CameraPhysicalLocation,
        prompt      = STRING_TOKEN(0x1AF7),
        help        = STRING_TOKEN(0x1AF6),
        option text = STRING_TOKEN(0x1B03), value = 0x61, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B04), value = 0x69, flags = DEFAULT | RESET_REQUIRED;
      endoneof;

      
      oneof varid     = SETUP_DATA.MipiCam_Link0_DriverData_FlashSupport,
        prompt      = STRING_TOKEN(0x1B09),
        help        = STRING_TOKEN(0x1B08),
        option text = STRING_TOKEN(0x1B0F), value = 0, flags = RESET_REQUIRED;

        option text = STRING_TOKEN(0x0004), value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 3, flags = DEFAULT | RESET_REQUIRED;



#line 5789 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaSetup.hfr"
      endoneof;

      
      oneof varid   = SETUP_DATA.MipiCam_Link0_DriverData_PrivacyLed,
        prompt      = STRING_TOKEN(0x1B11),
        help        = STRING_TOKEN(0x1B10),
        option text = STRING_TOKEN(0x1B17), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B18), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B19), value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B1A), value = 3, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B1B), value = 4, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B1C), value = 5, flags = RESET_REQUIRED;
      endoneof;

      
      oneof varid     = SETUP_DATA.MipiCam_Link0_DriverData_Degree,
        prompt      = STRING_TOKEN(0x1B1E),
        help        = STRING_TOKEN(0x1B1D),
        option text = STRING_TOKEN(0x1B24), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        
        option text = STRING_TOKEN(0x1B26), value = 2, flags = RESET_REQUIRED;
        
        option text = STRING_TOKEN(0x1B28), value = 4, flags = RESET_REQUIRED;
        
        option text = STRING_TOKEN(0x1B2A), value = 6, flags = RESET_REQUIRED;
        
      endoneof;

      
      suppressif NOT ideqval SETUP_DATA.MipiCam_Link0_DriverData_CrdVersion == 0x50;
        oneof varid   = SETUP_DATA.MipiCam_Link0_DriverData_PmicPosition,
          prompt      = STRING_TOKEN(0x1B2D),
          help        = STRING_TOKEN(0x1B2C),
          option text = STRING_TOKEN(0x1B32), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1B33), value = 1, flags = RESET_REQUIRED;
        endoneof;
      endif;

      
      suppressif NOT ideqval SETUP_DATA.MipiCam_Link0_DriverData_PmicPosition == 1;
        oneof varid   = SETUP_DATA.MipiCam_Link0_DriverData_VoltageRail,
          prompt      = STRING_TOKEN(0x1B35),
          help        = STRING_TOKEN(0x1B34),
          option text = STRING_TOKEN(0x1B3B), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1B3C), value = 1, flags = RESET_REQUIRED;
        endoneof;
      endif;

      
      string varid    = SETUP_DATA.MipiCam_Link0_ModuleName,
        prompt   = STRING_TOKEN(0x1AFD),
        help     = STRING_TOKEN(0x1AFD),
        minsize  = 1,
        maxsize  = 15,

        default  = STRING_TOKEN(0x1AFE),


#line 5848 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaSetup.hfr"
      endstring;

      
      numeric varid     = SETUP_DATA.MipiCam_Link0_DriverData_LinkUsed,
        prompt      = STRING_TOKEN(0x1B53),
        help        = STRING_TOKEN(0x1B52),
        flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
        minimum  = 0,
        maximum  = 10,
        step     = 1,

        default  = 1,


#line 5863 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaSetup.hfr"
      endnumeric;

      
      oneof varid     = SETUP_DATA.MipiCam_Link0_DriverData_LaneUsed,
        prompt      = STRING_TOKEN(0x1B5A),
        help        = STRING_TOKEN(0x1B59),
        option text = STRING_TOKEN(0x1B8E), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B8F), value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B90), value = 3, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B91), value = 4, flags = DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B92), value = 8, flags = RESET_REQUIRED;
      endoneof;

      
      oneof varid     = SETUP_DATA.MipiCam_Link0_DriverData_CsiSpeed,
        prompt      = STRING_TOKEN(0x1B60),
        help        = STRING_TOKEN(0x1B61),
        option text = STRING_TOKEN(0x1B93), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B94),        value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B95),        value = 2, flags = DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B96),          value = 3, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B97),        value = 4, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B98),          value = 5, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B99),    value = 6, flags = RESET_REQUIRED;
      endoneof;

      
      numeric varid     = SETUP_DATA.MipiCam_Link0_DriverData_Mclk,
        prompt      = STRING_TOKEN(0x1B63),
        help        = STRING_TOKEN(0x1B62),
        flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
        minimum  = 6000000,
        maximum  = 27000000,
        step     = 100000,
        default  = 19200000,
      endnumeric;

      
      oneof varid     = SETUP_DATA.MipiCam_Link0_DriverData_EepromType,
        prompt      = STRING_TOKEN(0x1B65),
        help        = STRING_TOKEN(0x1B64),
        option text = STRING_TOKEN(0x1B73), value = 0x01, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B74), value = 0x02, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B75), value = 0x03, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B76), value = 0x04, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B77), value = 0x05, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B78), value = 0x06, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B79), value = 0x07, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B7B), value = 0x09, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B7C), value = 0x0A, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B7D), value = 0x10, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B7E), value = 0x11, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B7F), value = 0x12, flags = RESET_REQUIRED;

        option text = STRING_TOKEN(0x1B72), value = 0x00, flags = DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B7A), value = 0x08, flags = RESET_REQUIRED;



#line 5923 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaSetup.hfr"
      endoneof;

      
      oneof varid     = SETUP_DATA.MipiCam_Link0_DriverData_VcmType,
        prompt      = STRING_TOKEN(0x1B6C),
        help        = STRING_TOKEN(0x1B6B),
        option text = STRING_TOKEN(0x1B80),        value = 0x00, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B81),      value = 0x01, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B83),      value = 0x03, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B85),      value = 0x04, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B84),      value = 0x05, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B86),     value = 0x06, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B87),      value = 0x07, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B88),  value = 0x08, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B89), value = 0x09, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B8A),   value = 0x0A, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B8B),   value = 0x0B, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B8D),  value = 0x10, flags = RESET_REQUIRED;

        option text = STRING_TOKEN(0x1B82),      value = 0x02, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B8C),      value = 0x0F, flags = DEFAULT | RESET_REQUIRED;



#line 5948 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaSetup.hfr"
      endoneof;

      
      numeric varid     = SETUP_DATA.MipiCam_Link0_I2cDevicesEnabled,
        prompt      = STRING_TOKEN(0x1A04),
        help        = STRING_TOKEN(0x1A03),
        flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
        minimum  = 0,
        maximum  = 12,
        step     = 1,

        default  = 2,


#line 5963 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaSetup.hfr"
      endnumeric;

      suppressif ideqval SETUP_DATA.MipiCam_Link0_I2cDevicesEnabled == 0;
        
        oneof varid = SETUP_DATA.MipiCam_Link0_I2cChannel,
          prompt   = STRING_TOKEN(0x1A27),
          help        = STRING_TOKEN(0x1A26),
          option text = STRING_TOKEN(0x1BB4), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1BB5), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1BB6), value = 2, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1BB8), value = 4, flags = RESET_REQUIRED;

          option text = STRING_TOKEN(0x1BB7), value = 3, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1BB9), value = 5, flags = RESET_REQUIRED;





#line 5983 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaSetup.hfr"
        endoneof;

        
        subtitle text = STRING_TOKEN(0x1A1A);

        
        numeric varid = SETUP_DATA.MipiCam_Link0_I2cAddress[0],
          prompt   = STRING_TOKEN(0x1A32),
          help     = STRING_TOKEN(0x1A2F),
          flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
          minimum  = 0,
          maximum  = 0x7F,
          step     = 1,

          default  = 0x1A,


#line 6001 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaSetup.hfr"
        endnumeric;

        
        oneof varid = SETUP_DATA.MipiCam_Link0_I2cDeviceType[0],
          prompt   = STRING_TOKEN(0x1BC5),
          help        = STRING_TOKEN(0x1BC4),
          option text = STRING_TOKEN(0x1C0D), value = 0x00, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0E), value = 0x01, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0F), value = 0x02, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C10), value = 0x03, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C11), value = 0x04, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C12), value = 0x05, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C13), value = 0x06, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C14), value = 0x07, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C15), value = 0x08, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C16), value = 0x09, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C17), value = 0x0A, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C18), value = 0x0C, flags = RESET_REQUIRED;
        endoneof;
      endif ;

      
      suppressif ideqvallist SETUP_DATA.MipiCam_Link0_I2cDevicesEnabled == 0 1;
        subtitle text = STRING_TOKEN(0x1A1B);
        
        numeric varid = SETUP_DATA.MipiCam_Link0_I2cAddress[1],
          prompt   = STRING_TOKEN(0x1A33),
          help     = STRING_TOKEN(0x1A2F),
          flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
          minimum  = 0,
          maximum  = 0x7F,
          step     = 1,
          default  = 0x0C,
        endnumeric;

        
        oneof varid = SETUP_DATA.MipiCam_Link0_I2cDeviceType[1],
          prompt   = STRING_TOKEN(0x1BC6),
          help        = STRING_TOKEN(0x1BC4),
          option text = STRING_TOKEN(0x1C0D), value = 0x00, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0E), value = 0x01, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0F), value = 0x02, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C10), value = 0x03, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C11), value = 0x04, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C12), value = 0x05, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C13), value = 0x06, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C14), value = 0x07, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C15), value = 0x08, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C16), value = 0x09, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C17), value = 0x0A, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C18), value = 0x0C, flags = RESET_REQUIRED;
        endoneof;
      endif;

      
      suppressif ideqvallist SETUP_DATA.MipiCam_Link0_I2cDevicesEnabled == 0 1 2;
        subtitle text = STRING_TOKEN(0x1A1C);
        
        numeric varid = SETUP_DATA.MipiCam_Link0_I2cAddress[2],
          prompt   = STRING_TOKEN(0x1A34),
          help     = STRING_TOKEN(0x1A2F),
          flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
          minimum  = 0,
          maximum  = 0x7F,
          step     = 1,
          default  = 0x50,
        endnumeric;

        
        oneof varid = SETUP_DATA.MipiCam_Link0_I2cDeviceType[2],
          prompt   = STRING_TOKEN(0x1BC7),
          help        = STRING_TOKEN(0x1BC4),
          option text = STRING_TOKEN(0x1C0D), value = 0x00, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0E), value = 0x01, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0F), value = 0x02, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C10), value = 0x03, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C11), value = 0x04, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C12), value = 0x05, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C13), value = 0x06, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C14), value = 0x07, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C15), value = 0x08, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C16), value = 0x09, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C17), value = 0x0A, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C18), value = 0x0C, flags = RESET_REQUIRED;
        endoneof;
      endif;

      
      suppressif ideqvallist SETUP_DATA.MipiCam_Link0_I2cDevicesEnabled == 0 1 2 3;
        subtitle text = STRING_TOKEN(0x1A1D);
        
        numeric varid = SETUP_DATA.MipiCam_Link0_I2cAddress[3],
          prompt   = STRING_TOKEN(0x1A35),
          help     = STRING_TOKEN(0x1A2F),
          flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
          minimum  = 0,
          maximum  = 0x7F,
          step     = 1,
          default  = 0x51,
        endnumeric;

        
        oneof varid = SETUP_DATA.MipiCam_Link0_I2cDeviceType[3],
          prompt   = STRING_TOKEN(0x1BC8),
          help        = STRING_TOKEN(0x1BC4),
          option text = STRING_TOKEN(0x1C0D), value = 0x00, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0E), value = 0x01, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0F), value = 0x02, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C10), value = 0x03, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C11), value = 0x04, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C12), value = 0x05, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C13), value = 0x06, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C14), value = 0x07, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C15), value = 0x08, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C16), value = 0x09, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C17), value = 0x0A, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C18), value = 0x0C, flags = RESET_REQUIRED;
        endoneof;
      endif;

      
      suppressif ideqvallist SETUP_DATA.MipiCam_Link0_I2cDevicesEnabled == 0 1 2 3 4;
        subtitle text = STRING_TOKEN(0x1A1E);
        
        numeric varid = SETUP_DATA.MipiCam_Link0_I2cAddress[4],
          prompt   = STRING_TOKEN(0x1A36),
          help     = STRING_TOKEN(0x1A2F),
          flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
          minimum  = 0,
          maximum  = 0x7F,
          step     = 1,
          default  = 0x52,
        endnumeric;

        
        oneof varid = SETUP_DATA.MipiCam_Link0_I2cDeviceType[4],
          prompt   = STRING_TOKEN(0x1BC9),
          help        = STRING_TOKEN(0x1BC4),
          option text = STRING_TOKEN(0x1C0D), value = 0x00, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0E), value = 0x01, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0F), value = 0x02, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C10), value = 0x03, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C11), value = 0x04, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C12), value = 0x05, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C13), value = 0x06, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C14), value = 0x07, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C15), value = 0x08, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C16), value = 0x09, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C17), value = 0x0A, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C18), value = 0x0C, flags = RESET_REQUIRED;
        endoneof;
      endif;

      
      suppressif ideqvallist SETUP_DATA.MipiCam_Link0_I2cDevicesEnabled == 0 1 2 3 4 5;
        subtitle text = STRING_TOKEN(0x1A1F);
        
        numeric varid = SETUP_DATA.MipiCam_Link0_I2cAddress[5],
          prompt   = STRING_TOKEN(0x1A37),
          help     = STRING_TOKEN(0x1A2F),
          flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
          minimum  = 0,
          maximum  = 0x7F,
          step     = 1,
          default  = 0x53,
        endnumeric;

        
        oneof varid = SETUP_DATA.MipiCam_Link0_I2cDeviceType[5],
          prompt   = STRING_TOKEN(0x1BCA),
          help        = STRING_TOKEN(0x1BC4),
          option text = STRING_TOKEN(0x1C0D), value = 0x00, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0E), value = 0x01, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0F), value = 0x02, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C10), value = 0x03, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C11), value = 0x04, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C12), value = 0x05, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C13), value = 0x06, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C14), value = 0x07, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C15), value = 0x08, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C16), value = 0x09, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C17), value = 0x0A, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C18), value = 0x0C, flags = RESET_REQUIRED;
        endoneof;
      endif;

      
      suppressif ideqvallist SETUP_DATA.MipiCam_Link0_I2cDevicesEnabled == 0 1 2 3 4 5 6;
        subtitle text = STRING_TOKEN(0x1A20);
        
        numeric varid = SETUP_DATA.MipiCam_Link0_I2cAddress[6],
          prompt   = STRING_TOKEN(0x1A38),
          help     = STRING_TOKEN(0x1A2F),
          flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
          minimum  = 0,
          maximum  = 0x7F,
          step     = 1,
          default  = 0x54,
        endnumeric;

        
        oneof varid = SETUP_DATA.MipiCam_Link0_I2cDeviceType[6],
          prompt   = STRING_TOKEN(0x1BCB),
          help        = STRING_TOKEN(0x1BC4),
          option text = STRING_TOKEN(0x1C0D), value = 0x00, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0E), value = 0x01, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0F), value = 0x02, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C10), value = 0x03, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C11), value = 0x04, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C12), value = 0x05, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C13), value = 0x06, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C14), value = 0x07, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C15), value = 0x08, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C16), value = 0x09, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C17), value = 0x0A, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C18), value = 0x0C, flags = RESET_REQUIRED;
        endoneof;
      endif;

      
      suppressif ideqvallist SETUP_DATA.MipiCam_Link0_I2cDevicesEnabled == 0 1 2 3 4 5 6 7;
        subtitle text = STRING_TOKEN(0x1A21);
        
        numeric varid = SETUP_DATA.MipiCam_Link0_I2cAddress[7],
          prompt   = STRING_TOKEN(0x1A39),
          help     = STRING_TOKEN(0x1A2F),
          flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
          minimum  = 0,
          maximum  = 0x7F,
          step     = 1,
          default  = 0x55,
        endnumeric;

        
        oneof varid = SETUP_DATA.MipiCam_Link0_I2cDeviceType[7],
          prompt   = STRING_TOKEN(0x1BCC),
          help        = STRING_TOKEN(0x1BC4),
          option text = STRING_TOKEN(0x1C0D), value = 0x00, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0E), value = 0x01, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0F), value = 0x02, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C10), value = 0x03, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C11), value = 0x04, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C12), value = 0x05, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C13), value = 0x06, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C14), value = 0x07, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C15), value = 0x08, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C16), value = 0x09, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C17), value = 0x0A, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C18), value = 0x0C, flags = RESET_REQUIRED;
        endoneof;
      endif;

      
      suppressif ideqvallist SETUP_DATA.MipiCam_Link0_I2cDevicesEnabled == 0 1 2 3 4 5 6 7 8;
        subtitle text = STRING_TOKEN(0x1A22);
        
        numeric varid = SETUP_DATA.MipiCam_Link0_I2cAddress[8],
          prompt   = STRING_TOKEN(0x1A3A),
          help     = STRING_TOKEN(0x1A2F),
          flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
          minimum  = 0,
          maximum  = 0x7F,
          step     = 1,
          default  = 0x56,
        endnumeric;

        
        oneof varid = SETUP_DATA.MipiCam_Link0_I2cDeviceType[8],
          prompt   = STRING_TOKEN(0x1BCD),
          help        = STRING_TOKEN(0x1BC4),
          option text = STRING_TOKEN(0x1C0D), value = 0x00, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0E), value = 0x01, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0F), value = 0x02, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C10), value = 0x03, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C11), value = 0x04, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C12), value = 0x05, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C13), value = 0x06, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C14), value = 0x07, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C15), value = 0x08, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C16), value = 0x09, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C17), value = 0x0A, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C18), value = 0x0C, flags = RESET_REQUIRED;
        endoneof;
      endif;

      
      suppressif ideqvallist SETUP_DATA.MipiCam_Link0_I2cDevicesEnabled == 0 1 2 3 4 5 6 7 8 9;
        subtitle text = STRING_TOKEN(0x1A23);
        
        numeric varid = SETUP_DATA.MipiCam_Link0_I2cAddress[9],
          prompt   = STRING_TOKEN(0x1A3B),
          help     = STRING_TOKEN(0x1A2F),
          flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
          minimum  = 0,
          maximum  = 0x7F,
          step     = 1,
          default  = 0x57,
        endnumeric;

        
        oneof varid = SETUP_DATA.MipiCam_Link0_I2cDeviceType[9],
          prompt   = STRING_TOKEN(0x1BCE),
          help        = STRING_TOKEN(0x1BC4),
          option text = STRING_TOKEN(0x1C0D), value = 0x00, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0E), value = 0x01, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0F), value = 0x02, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C10), value = 0x03, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C11), value = 0x04, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C12), value = 0x05, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C13), value = 0x06, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C14), value = 0x07, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C15), value = 0x08, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C16), value = 0x09, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C17), value = 0x0A, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C18), value = 0x0C, flags = RESET_REQUIRED;
        endoneof;
      endif;

      
      suppressif ideqvallist SETUP_DATA.MipiCam_Link0_I2cDevicesEnabled == 0 1 2 3 4 5 6 7 8 9 10;
        subtitle text = STRING_TOKEN(0x1A24);
        
        numeric varid = SETUP_DATA.MipiCam_Link0_I2cAddress[10],
          prompt   = STRING_TOKEN(0x1A3C),
          help     = STRING_TOKEN(0x1A2F),
          flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
          minimum  = 0,
          maximum  = 0x7F,
          step     = 1,
          default  = 0x58,
        endnumeric;

        
        oneof varid = SETUP_DATA.MipiCam_Link0_I2cDeviceType[10],
          prompt   = STRING_TOKEN(0x1BCF),
          help        = STRING_TOKEN(0x1BC4),
          option text = STRING_TOKEN(0x1C0D), value = 0x00, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0E), value = 0x01, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0F), value = 0x02, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C10), value = 0x03, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C11), value = 0x04, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C12), value = 0x05, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C13), value = 0x06, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C14), value = 0x07, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C15), value = 0x08, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C16), value = 0x09, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C17), value = 0x0A, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C18), value = 0x0C, flags = RESET_REQUIRED;
        endoneof;
      endif;

      
      suppressif ideqvallist SETUP_DATA.MipiCam_Link0_I2cDevicesEnabled == 0 1 2 3 4 5 6 7 8 9 10 11;
        subtitle text = STRING_TOKEN(0x1A25);
        
        numeric varid = SETUP_DATA.MipiCam_Link0_I2cAddress[11],
          prompt   = STRING_TOKEN(0x1A3D),
          help     = STRING_TOKEN(0x1A2F),
          flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
          minimum  = 0,
          maximum  = 0x7F,
          step     = 1,
          default  = 0x59,
        endnumeric;

        
        oneof varid = SETUP_DATA.MipiCam_Link0_I2cDeviceType[11],
          prompt   = STRING_TOKEN(0x1BD0),
          help        = STRING_TOKEN(0x1BC4),
          option text = STRING_TOKEN(0x1C0D), value = 0x00, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0E), value = 0x01, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0F), value = 0x02, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C10), value = 0x03, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C11), value = 0x04, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C12), value = 0x05, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C13), value = 0x06, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C14), value = 0x07, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C15), value = 0x08, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C16), value = 0x09, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C17), value = 0x0A, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C18), value = 0x0C, flags = RESET_REQUIRED;
        endoneof;
      endif;

      
      oneof varid     = SETUP_DATA.MipiCam_Link0_FlashDriverSelection,
        prompt      = STRING_TOKEN(0x1B3E),
        help        = STRING_TOKEN(0x1B3D),

        option text = STRING_TOKEN(0x1B3F), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B40), value = 1, flags = RESET_REQUIRED;



#line 6396 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaSetup.hfr"
        option text = STRING_TOKEN(0x1B41), value = 2, flags = RESET_REQUIRED;
      endoneof;

      
      suppressif NOT ideqval SETUP_DATA.MipiCam_Link0_FlashDriverSelection == 1;
      oneof varid     = SETUP_DATA.MipiCam_Link0_DriverData_FlashID,
        prompt      = STRING_TOKEN(0x1B43),
        help        = STRING_TOKEN(0x1B42),
        option text = STRING_TOKEN(0x1C35),      value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1C36),      value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1C37),      value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1C38),      value = 3, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1C39),      value = 4, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1C3A),      value = 5, flags = RESET_REQUIRED;
      endoneof;
      endif;
    endform;

    
    form formid = 142,
      title    = STRING_TOKEN(0x19F7);
      subtitle text = STRING_TOKEN(0x19E5);

      oneof varid   = SETUP_DATA.MipiCam_Link1_SensorModel,
        prompt      = STRING_TOKEN(0x19FE),
        help        = STRING_TOKEN(0x19FC),
        option text = STRING_TOKEN(0x1B9A), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B9B), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B9C), value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B9D), value = 3, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B9E), value = 4, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B9F), value = 5, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BA0), value = 6, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BA1), value = 7, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BA2), value = 8, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BA3), value = 9, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BA4), value = 10, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BA5), value = 11, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BA6), value = 12, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BA7), value = 13, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BA8), value = 14, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BA9), value = 15, flags = RESET_REQUIRED;

        option text = STRING_TOKEN(0x1BAA), value = 16, flags = DEFAULT | RESET_REQUIRED;



#line 6444 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaSetup.hfr"
        option text = STRING_TOKEN(0x1BAC), value = 17, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BAD), value = 18, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BAE), value = 19, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BAF), value = 20, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BB1), value = 21, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BB0), value = 22, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BB2), value = 255, flags = RESET_REQUIRED;
      endoneof;

      
      suppressif NOT ideqval SETUP_DATA.MipiCam_Link1_SensorModel == 255;
         string varid = SETUP_DATA.MipiCam_Link1_UserHid,
          prompt   = STRING_TOKEN(0x1BB3),
          help     = STRING_TOKEN(0x1BB3),
          minsize  = 6,
          maxsize  = 20,
        endstring;
      endif;

      oneof varid     = SETUP_DATA.MipiCam_Link1_LanesClkDiv,
        prompt      = STRING_TOKEN(0x1A0F),
        help        = STRING_TOKEN(0x1A0D),
        option text = STRING_TOKEN(0x1A14), value = 0x00, flags = DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1A15), value = 0x02, flags =  RESET_REQUIRED;
        option text = STRING_TOKEN(0x1A16), value = 0x03, flags =  RESET_REQUIRED;
        option text = STRING_TOKEN(0x1A17), value = 0x04, flags =  RESET_REQUIRED;
        option text = STRING_TOKEN(0x1A18), value = 0x06, flags =  RESET_REQUIRED;
        option text = STRING_TOKEN(0x1A19), value = 0x07, flags =  RESET_REQUIRED;
      endoneof;

      
      oneof varid = SETUP_DATA.MipiCam_Link1_DriverData_CrdVersion,
        prompt   = STRING_TOKEN(0x1B46),
        help     = STRING_TOKEN(0x1B44),
        option text = STRING_TOKEN(0x1B4D), value = 0x10, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B4F), value = 0x30, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B50), value = 0x40, flags = RESET_REQUIRED;

        option text = STRING_TOKEN(0x1B4E), value = 0x20, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B51), value = 0x50, flags = DEFAULT | RESET_REQUIRED;



#line 6488 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaSetup.hfr"
      endoneof;

      
      oneof varid = SETUP_DATA.MipiCam_Link1_DriverData_ControlLogic,
        prompt   = STRING_TOKEN(0x1C1B),
        help     = STRING_TOKEN(0x1C19),
        option text = STRING_TOKEN(0x1BC3), value = 0xFF, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BBD), value = 0, flags = DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BBE), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BBF), value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BC0), value = 3, flags = RESET_REQUIRED;
        suppressif NOT ideqval SETUP_DATA.MipiCam4Enable == 1;
          option text = STRING_TOKEN(0x1BC1), value = 3, flags = RESET_REQUIRED;
        endif
        suppressif NOT ideqval SETUP_DATA.MipiCam5Enable == 1;
          option text = STRING_TOKEN(0x1BC2), value = 3, flags = RESET_REQUIRED;
        endif
      endoneof;

      
      oneof varid     = SETUP_DATA.MipiCam_Link1_CameraPhysicalLocation,
        prompt      = STRING_TOKEN(0x1AF8),
        help        = STRING_TOKEN(0x1AF6),
        option text = STRING_TOKEN(0x1B03), value = 0x61, flags = DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B04), value = 0x69, flags = RESET_REQUIRED;
      endoneof;

      
      oneof varid     = SETUP_DATA.MipiCam_Link1_DriverData_FlashSupport,
        prompt      = STRING_TOKEN(0x1B0A),
        help        = STRING_TOKEN(0x1B08),
        option text = STRING_TOKEN(0x1B0F), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0004), value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 3, flags = DEFAULT | RESET_REQUIRED;
      endoneof;

      
      oneof varid   = SETUP_DATA.MipiCam_Link1_DriverData_PrivacyLed,
        prompt      = STRING_TOKEN(0x1B12),
        help        = STRING_TOKEN(0x1B10),
        option text = STRING_TOKEN(0x1B17), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B18), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B19), value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B1A), value = 3, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B1B), value = 4, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B1C), value = 5, flags = RESET_REQUIRED;
      endoneof;

      
      oneof varid     = SETUP_DATA.MipiCam_Link1_DriverData_Degree,
        prompt      = STRING_TOKEN(0x1B1F),
        help        = STRING_TOKEN(0x1B1D),
        option text = STRING_TOKEN(0x1B24), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        
        option text = STRING_TOKEN(0x1B26), value = 2, flags = RESET_REQUIRED;
        
        option text = STRING_TOKEN(0x1B28), value = 4, flags = RESET_REQUIRED;
        
        option text = STRING_TOKEN(0x1B2A), value = 6, flags = RESET_REQUIRED;
        
      endoneof;

      
      suppressif NOT ideqval SETUP_DATA.MipiCam_Link1_DriverData_CrdVersion == 0x50;
        oneof varid   = SETUP_DATA.MipiCam_Link1_DriverData_PmicPosition,
          prompt      = STRING_TOKEN(0x1B2E),
          help        = STRING_TOKEN(0x1B2C),
          option text = STRING_TOKEN(0x1B32), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1B33), value = 1, flags = RESET_REQUIRED;
        endoneof;
      endif;

      
      suppressif NOT ideqval SETUP_DATA.MipiCam_Link1_DriverData_PmicPosition == 1;
        oneof varid   = SETUP_DATA.MipiCam_Link1_DriverData_VoltageRail,
          prompt      = STRING_TOKEN(0x1B36),
          help        = STRING_TOKEN(0x1B34),
          option text = STRING_TOKEN(0x1B3B), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1B3C), value = 1, flags = RESET_REQUIRED;
        endoneof;
      endif;

      
      string varid    = SETUP_DATA.MipiCam_Link1_ModuleName,
        prompt   = STRING_TOKEN(0x1AFD),
        help     = STRING_TOKEN(0x1AFD),
        minsize  = 1,
        maxsize  = 15,

        default  = STRING_TOKEN(0x1B00),


#line 6581 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaSetup.hfr"
      endstring;

      
      numeric varid     = SETUP_DATA.MipiCam_Link1_DriverData_LinkUsed,
        prompt      = STRING_TOKEN(0x1B54),
        help        = STRING_TOKEN(0x1B52),
        flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
        minimum  = 0,
        maximum  = 10,
        step     = 1,

        default  = 5,


#line 6596 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaSetup.hfr"
      endnumeric;

      
      oneof varid     = SETUP_DATA.MipiCam_Link1_DriverData_LaneUsed,
        prompt      = STRING_TOKEN(0x1B5B),
        help        = STRING_TOKEN(0x1B59),
        option text = STRING_TOKEN(0x1B8E), value = 1, flags = DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B8F), value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B90), value = 3, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B91), value = 4, flags = RESET_REQUIRED;
      endoneof;

      
      oneof varid     = SETUP_DATA.MipiCam_Link1_DriverData_CsiSpeed,
        prompt      = STRING_TOKEN(0x1B60),
        help        = STRING_TOKEN(0x1B61),
        option text = STRING_TOKEN(0x1B93), value = 0, flags = RESET_REQUIRED;

        option text = STRING_TOKEN(0x1B94),        value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B95),        value = 2, flags = DEFAULT | RESET_REQUIRED;



#line 6620 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaSetup.hfr"
        option text = STRING_TOKEN(0x1B96),          value = 3, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B97),        value = 4, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B98),          value = 5, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B99),    value = 6, flags = RESET_REQUIRED;
      endoneof;

      
      numeric varid     = SETUP_DATA.MipiCam_Link1_DriverData_Mclk,
        prompt      = STRING_TOKEN(0x1B63),
        help        = STRING_TOKEN(0x1B62),
        flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
        minimum  = 6000000,
        maximum  = 27000000,
        step     = 100000,
        default  = 19200000,
      endnumeric;

      
      oneof varid     = SETUP_DATA.MipiCam_Link1_DriverData_EepromType,
        prompt      = STRING_TOKEN(0x1B66),
        help        = STRING_TOKEN(0x1B64),
        option text = STRING_TOKEN(0x1B72), value = 0x00, flags = DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B73), value = 0x01, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B74), value = 0x02, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B75), value = 0x03, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B76), value = 0x04, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B77), value = 0x05, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B78), value = 0x06, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B79), value = 0x07, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B7A), value = 0x08, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B7B), value = 0x09, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B7C), value = 0x0A, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B7D), value = 0x10, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B7E), value = 0x11, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B7F), value = 0x12, flags = RESET_REQUIRED;
      endoneof;

      
      oneof varid     = SETUP_DATA.MipiCam_Link1_DriverData_VcmType,
        prompt      = STRING_TOKEN(0x1B6D),
        help        = STRING_TOKEN(0x1B6B),
        option text = STRING_TOKEN(0x1B80),        value = 0x00, flags = DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B81),      value = 0x01, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B82),      value = 0x02, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B83),      value = 0x03, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B85),      value = 0x04, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B84),      value = 0x05, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B86),     value = 0x06, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B87),      value = 0x07, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B88),  value = 0x08, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B89), value = 0x09, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B8A),   value = 0x0A, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B8B),   value = 0x0B, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B8C),      value = 0x0F, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B8D),  value = 0x10, flags = RESET_REQUIRED;
      endoneof;


      
      numeric varid     = SETUP_DATA.MipiCam_Link1_I2cDevicesEnabled,
        prompt      = STRING_TOKEN(0x1A05),
        help        = STRING_TOKEN(0x1A03),
        flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
        minimum  = 0,
        maximum  = 12,
        step     = 1,
        default  = 1,
      endnumeric;

      suppressif ideqval SETUP_DATA.MipiCam_Link1_I2cDevicesEnabled == 0;
        
        oneof varid = SETUP_DATA.MipiCam_Link1_I2cChannel,
          prompt   = STRING_TOKEN(0x1A28),
          help        = STRING_TOKEN(0x1A26),
          option text = STRING_TOKEN(0x1BB4), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1BB6), value = 2, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1BB8), value = 4, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1BB9), value = 5, flags = RESET_REQUIRED;

          option text = STRING_TOKEN(0x1BB5), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1BB7), value = 3, flags = DEFAULT | RESET_REQUIRED;





#line 6707 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaSetup.hfr"
        endoneof;

        
        subtitle text = STRING_TOKEN(0x1A1A);

        
        numeric varid = SETUP_DATA.MipiCam_Link1_I2cAddress[0],
          prompt   = STRING_TOKEN(0x1A3E),
          help     = STRING_TOKEN(0x1A2F),
          flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
          minimum  = 0,
          maximum  = 0x7F,
          step     = 1,

          default  = 0x37,


#line 6725 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaSetup.hfr"
        endnumeric;
        
        oneof varid = SETUP_DATA.MipiCam_Link1_I2cDeviceType[0],
          prompt   = STRING_TOKEN(0x1BD1),
          help        = STRING_TOKEN(0x1BC4),
          option text = STRING_TOKEN(0x1C0D), value = 0x00, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0E), value = 0x01, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0F), value = 0x02, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C10), value = 0x03, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C11), value = 0x04, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C12), value = 0x05, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C13), value = 0x06, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C14), value = 0x07, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C15), value = 0x08, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C16), value = 0x09, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C17), value = 0x0A, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C18), value = 0x0C, flags = RESET_REQUIRED;
        endoneof;
      endif ;

      
      suppressif ideqvallist SETUP_DATA.MipiCam_Link1_I2cDevicesEnabled == 0 1;
        subtitle text = STRING_TOKEN(0x1A1B);
        
        numeric varid = SETUP_DATA.MipiCam_Link1_I2cAddress[1],
          prompt   = STRING_TOKEN(0x1A3F),
          help     = STRING_TOKEN(0x1A2F),
          flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
          minimum  = 0,
          maximum  = 0x7F,
          step     = 1,
          default  = 0x0C,
        endnumeric;

        
        oneof varid = SETUP_DATA.MipiCam_Link1_I2cDeviceType[1],
          prompt   = STRING_TOKEN(0x1BD2),
          help        = STRING_TOKEN(0x1BC4),
          option text = STRING_TOKEN(0x1C0D), value = 0x00, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0E), value = 0x01, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0F), value = 0x02, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C10), value = 0x03, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C11), value = 0x04, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C12), value = 0x05, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C13), value = 0x06, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C14), value = 0x07, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C15), value = 0x08, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C16), value = 0x09, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C17), value = 0x0A, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C18), value = 0x0C, flags = RESET_REQUIRED;
        endoneof;
      endif;

      
      suppressif ideqvallist SETUP_DATA.MipiCam_Link1_I2cDevicesEnabled == 0 1 2;
        subtitle text = STRING_TOKEN(0x1A1C);
        
        numeric varid = SETUP_DATA.MipiCam_Link1_I2cAddress[2],
          prompt   = STRING_TOKEN(0x1A40),
          help     = STRING_TOKEN(0x1A2F),
          flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
          minimum  = 0,
          maximum  = 0x7F,
          step     = 1,
          default  = 0x50,
        endnumeric;

        
        oneof varid = SETUP_DATA.MipiCam_Link1_I2cDeviceType[2],
          prompt   = STRING_TOKEN(0x1BD3),
          help        = STRING_TOKEN(0x1BC4),
          option text = STRING_TOKEN(0x1C0D), value = 0x00, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0E), value = 0x01, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0F), value = 0x02, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C10), value = 0x03, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C11), value = 0x04, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C12), value = 0x05, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C13), value = 0x06, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C14), value = 0x07, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C15), value = 0x08, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C16), value = 0x09, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C17), value = 0x0A, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C18), value = 0x0C, flags = RESET_REQUIRED;
        endoneof;
      endif;

      
      suppressif ideqvallist SETUP_DATA.MipiCam_Link1_I2cDevicesEnabled == 0 1 2 3;
        subtitle text = STRING_TOKEN(0x1A1D);
        
        numeric varid = SETUP_DATA.MipiCam_Link1_I2cAddress[3],
          prompt   = STRING_TOKEN(0x1A41),
          help     = STRING_TOKEN(0x1A2F),
          flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
          minimum  = 0,
          maximum  = 0x7F,
          step     = 1,
          default  = 0x51,
        endnumeric;

        
        oneof varid = SETUP_DATA.MipiCam_Link1_I2cDeviceType[3],
          prompt   = STRING_TOKEN(0x1BD4),
          help        = STRING_TOKEN(0x1BC4),
          option text = STRING_TOKEN(0x1C0D), value = 0x00, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0E), value = 0x01, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0F), value = 0x02, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C10), value = 0x03, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C11), value = 0x04, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C12), value = 0x05, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C13), value = 0x06, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C14), value = 0x07, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C15), value = 0x08, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C16), value = 0x09, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C17), value = 0x0A, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C18), value = 0x0C, flags = RESET_REQUIRED;
        endoneof;
      endif;

      
      suppressif ideqvallist SETUP_DATA.MipiCam_Link1_I2cDevicesEnabled == 0 1 2 3 4;
        subtitle text = STRING_TOKEN(0x1A1E);
        
        numeric varid = SETUP_DATA.MipiCam_Link1_I2cAddress[4],
          prompt   = STRING_TOKEN(0x1A42),
          help     = STRING_TOKEN(0x1A2F),
          flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
          minimum  = 0,
          maximum  = 0x7F,
          step     = 1,
          default  = 0x52,
        endnumeric;

        
        oneof varid = SETUP_DATA.MipiCam_Link1_I2cDeviceType[4],
          prompt   = STRING_TOKEN(0x1BD5),
          help        = STRING_TOKEN(0x1BC4),
          option text = STRING_TOKEN(0x1C0D), value = 0x00, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0E), value = 0x01, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0F), value = 0x02, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C10), value = 0x03, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C11), value = 0x04, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C12), value = 0x05, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C13), value = 0x06, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C14), value = 0x07, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C15), value = 0x08, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C16), value = 0x09, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C17), value = 0x0A, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C18), value = 0x0C, flags = RESET_REQUIRED;
        endoneof;
      endif;

      
      suppressif ideqvallist SETUP_DATA.MipiCam_Link1_I2cDevicesEnabled == 0 1 2 3 4 5;
        subtitle text = STRING_TOKEN(0x1A1F);
        
        numeric varid = SETUP_DATA.MipiCam_Link1_I2cAddress[5],
          prompt   = STRING_TOKEN(0x1A43),
          help     = STRING_TOKEN(0x1A2F),
          flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
          minimum  = 0,
          maximum  = 0x7F,
          step     = 1,
          default  = 0x53,
        endnumeric;

        
        oneof varid = SETUP_DATA.MipiCam_Link1_I2cDeviceType[5],
          prompt   = STRING_TOKEN(0x1BD6),
          help        = STRING_TOKEN(0x1BC4),
          option text = STRING_TOKEN(0x1C0D), value = 0x00, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0E), value = 0x01, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0F), value = 0x02, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C10), value = 0x03, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C11), value = 0x04, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C12), value = 0x05, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C13), value = 0x06, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C14), value = 0x07, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C15), value = 0x08, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C16), value = 0x09, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C17), value = 0x0A, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C18), value = 0x0C, flags = RESET_REQUIRED;
        endoneof;
      endif;

      
      suppressif ideqvallist SETUP_DATA.MipiCam_Link1_I2cDevicesEnabled == 0 1 2 3 4 5 6;
        subtitle text = STRING_TOKEN(0x1A20);
        
        numeric varid = SETUP_DATA.MipiCam_Link1_I2cAddress[6],
          prompt   = STRING_TOKEN(0x1A44),
          help     = STRING_TOKEN(0x1A2F),
          flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
          minimum  = 0,
          maximum  = 0x7F,
          step     = 1,
          default  = 0x54,
        endnumeric;

        
        oneof varid = SETUP_DATA.MipiCam_Link1_I2cDeviceType[6],
          prompt   = STRING_TOKEN(0x1BD7),
          help        = STRING_TOKEN(0x1BC4),
          option text = STRING_TOKEN(0x1C0D), value = 0x00, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0E), value = 0x01, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0F), value = 0x02, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C10), value = 0x03, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C11), value = 0x04, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C12), value = 0x05, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C13), value = 0x06, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C14), value = 0x07, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C15), value = 0x08, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C16), value = 0x09, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C17), value = 0x0A, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C18), value = 0x0C, flags = RESET_REQUIRED;
        endoneof;
      endif;

      
      suppressif ideqvallist SETUP_DATA.MipiCam_Link1_I2cDevicesEnabled == 0 1 2 3 4 5 6 7;
        subtitle text = STRING_TOKEN(0x1A21);
        
        numeric varid = SETUP_DATA.MipiCam_Link1_I2cAddress[7],
          prompt   = STRING_TOKEN(0x1A45),
          help     = STRING_TOKEN(0x1A2F),
          flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
          minimum  = 0,
          maximum  = 0x7F,
          step     = 1,
          default  = 0x55,
        endnumeric;

        
        oneof varid = SETUP_DATA.MipiCam_Link1_I2cDeviceType[7],
          prompt   = STRING_TOKEN(0x1BD8),
          help        = STRING_TOKEN(0x1BC4),
          option text = STRING_TOKEN(0x1C0D), value = 0x00, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0E), value = 0x01, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0F), value = 0x02, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C10), value = 0x03, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C11), value = 0x04, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C12), value = 0x05, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C13), value = 0x06, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C14), value = 0x07, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C15), value = 0x08, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C16), value = 0x09, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C17), value = 0x0A, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C18), value = 0x0C, flags = RESET_REQUIRED;
        endoneof;
      endif;

      
      suppressif ideqvallist SETUP_DATA.MipiCam_Link1_I2cDevicesEnabled == 0 1 2 3 4 5 6 7 8;
        subtitle text = STRING_TOKEN(0x1A22);
        
        numeric varid = SETUP_DATA.MipiCam_Link1_I2cAddress[8],
          prompt   = STRING_TOKEN(0x1A46),
          help     = STRING_TOKEN(0x1A2F),
          flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
          minimum  = 0,
          maximum  = 0x7F,
          step     = 1,
          default  = 0x56,
        endnumeric;

        
        oneof varid = SETUP_DATA.MipiCam_Link1_I2cDeviceType[8],
          prompt   = STRING_TOKEN(0x1BD9),
          help        = STRING_TOKEN(0x1BC4),
          option text = STRING_TOKEN(0x1C0D), value = 0x00, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0E), value = 0x01, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0F), value = 0x02, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C10), value = 0x03, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C11), value = 0x04, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C12), value = 0x05, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C13), value = 0x06, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C14), value = 0x07, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C15), value = 0x08, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C16), value = 0x09, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C17), value = 0x0A, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C18), value = 0x0C, flags = RESET_REQUIRED;
        endoneof;
      endif;

      
      suppressif ideqvallist SETUP_DATA.MipiCam_Link1_I2cDevicesEnabled == 0 1 2 3 4 5 6 7 8 9;
        subtitle text = STRING_TOKEN(0x1A23);
        
        numeric varid = SETUP_DATA.MipiCam_Link1_I2cAddress[9],
          prompt   = STRING_TOKEN(0x1A47),
          help     = STRING_TOKEN(0x1A2F),
          flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
          minimum  = 0,
          maximum  = 0x7F,
          step     = 1,
          default  = 0x57,
        endnumeric;

        
        oneof varid = SETUP_DATA.MipiCam_Link1_I2cDeviceType[9],
          prompt   = STRING_TOKEN(0x1BDA),
          help        = STRING_TOKEN(0x1BC4),
          option text = STRING_TOKEN(0x1C0D), value = 0x00, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0E), value = 0x01, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0F), value = 0x02, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C10), value = 0x03, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C11), value = 0x04, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C12), value = 0x05, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C13), value = 0x06, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C14), value = 0x07, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C15), value = 0x08, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C16), value = 0x09, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C17), value = 0x0A, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C18), value = 0x0C, flags = RESET_REQUIRED;
        endoneof;
      endif;

      
      suppressif ideqvallist SETUP_DATA.MipiCam_Link1_I2cDevicesEnabled == 0 1 2 3 4 5 6 7 8 9 10;
        subtitle text = STRING_TOKEN(0x1A24);
        
        numeric varid = SETUP_DATA.MipiCam_Link1_I2cAddress[10],
          prompt   = STRING_TOKEN(0x1A48),
          help     = STRING_TOKEN(0x1A2F),
          flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
          minimum  = 0,
          maximum  = 0x7F,
          step     = 1,
          default  = 0x58,
        endnumeric;

        
        oneof varid = SETUP_DATA.MipiCam_Link1_I2cDeviceType[10],
          prompt   = STRING_TOKEN(0x1BDB),
          help        = STRING_TOKEN(0x1BC4),
          option text = STRING_TOKEN(0x1C0D), value = 0x00, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0E), value = 0x01, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0F), value = 0x02, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C10), value = 0x03, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C11), value = 0x04, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C12), value = 0x05, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C13), value = 0x06, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C14), value = 0x07, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C15), value = 0x08, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C16), value = 0x09, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C17), value = 0x0A, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C18), value = 0x0C, flags = RESET_REQUIRED;
        endoneof;
      endif;

      
      suppressif ideqvallist SETUP_DATA.MipiCam_Link1_I2cDevicesEnabled == 0 1 2 3 4 5 6 7 8 9 10 11;
        subtitle text = STRING_TOKEN(0x1A25);
        
        numeric varid = SETUP_DATA.MipiCam_Link1_I2cAddress[11],
          prompt   = STRING_TOKEN(0x1A49),
          help     = STRING_TOKEN(0x1A2F),
          flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
          minimum  = 0,
          maximum  = 0x7F,
          step     = 1,
          default  = 0x59,
        endnumeric;

        
        oneof varid = SETUP_DATA.MipiCam_Link1_I2cDeviceType[11],
          prompt   = STRING_TOKEN(0x1BDC),
          help        = STRING_TOKEN(0x1BC4),
          option text = STRING_TOKEN(0x1C0D), value = 0x00, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0E), value = 0x01, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0F), value = 0x02, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C10), value = 0x03, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C11), value = 0x04, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C12), value = 0x05, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C13), value = 0x06, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C14), value = 0x07, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C15), value = 0x08, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C16), value = 0x09, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C17), value = 0x0A, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C18), value = 0x0C, flags = DEFAULT | RESET_REQUIRED;
        endoneof;
      endif;

      
      oneof varid     = SETUP_DATA.MipiCam_Link1_FlashDriverSelection,
        prompt      = STRING_TOKEN(0x1B3E),
        help        = STRING_TOKEN(0x1B3D),

        option text = STRING_TOKEN(0x1B3F),      value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B40),      value = 1, flags = RESET_REQUIRED;



#line 7119 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaSetup.hfr"
        option text = STRING_TOKEN(0x1B41), value = 2, flags = RESET_REQUIRED;
      endoneof;

      
      suppressif NOT ideqval SETUP_DATA.MipiCam_Link1_FlashDriverSelection == 1;
      oneof varid     = SETUP_DATA.MipiCam_Link1_DriverData_FlashID,
        prompt      = STRING_TOKEN(0x1B43),
        help        = STRING_TOKEN(0x1B42),
        option text = STRING_TOKEN(0x1C35),      value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1C36),      value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1C37),      value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1C38),      value = 3, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1C39),      value = 4, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1C3A),      value = 5, flags = RESET_REQUIRED;
      endoneof;
      endif;
    endform;

    
    form formid = 143,
      title    = STRING_TOKEN(0x19F8);
      subtitle text = STRING_TOKEN(0x19E6);

      oneof varid   = SETUP_DATA.MipiCam_Link2_SensorModel,
        prompt      = STRING_TOKEN(0x19FF),
        help        = STRING_TOKEN(0x19FC),
        option text = STRING_TOKEN(0x1B9A), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B9B), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B9C), value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B9D), value = 3, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B9E), value = 4, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B9F), value = 5, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BA0), value = 6, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BA1), value = 7, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BA2), value = 8, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BA3), value = 9, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BA4), value = 10, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BA5), value = 11, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BA6), value = 12, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BA7), value = 13, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BA8), value = 14, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BA9), value = 15, flags =  RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BAA), value = 16, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BAC), value = 17, flags = DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BAD), value = 18, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BAE), value = 19, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BAF), value = 20, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BB1), value = 21, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BB0), value = 22, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BB2), value = 255, flags = RESET_REQUIRED;
      endoneof;

      
      suppressif NOT ideqval SETUP_DATA.MipiCam_Link2_SensorModel == 255;
         string varid = SETUP_DATA.MipiCam_Link2_UserHid,
          prompt   = STRING_TOKEN(0x1BB3),
          help     = STRING_TOKEN(0x1BB3),
          minsize  = 6,
          maxsize  = 20,
        endstring;
      endif;

      oneof varid     = SETUP_DATA.MipiCam_Link2_LanesClkDiv,
        prompt      = STRING_TOKEN(0x1A10),
        help        = STRING_TOKEN(0x1A0D),
        option text = STRING_TOKEN(0x1A14), value = 0x00, flags = DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1A15), value = 0x02, flags =  RESET_REQUIRED;
        option text = STRING_TOKEN(0x1A16), value = 0x03, flags =  RESET_REQUIRED;
        option text = STRING_TOKEN(0x1A17), value = 0x04, flags =  RESET_REQUIRED;
        option text = STRING_TOKEN(0x1A18), value = 0x06, flags =  RESET_REQUIRED;
        option text = STRING_TOKEN(0x1A19), value = 0x07, flags =  RESET_REQUIRED;
      endoneof;

      
      oneof varid = SETUP_DATA.MipiCam_Link2_DriverData_CrdVersion,
        prompt   = STRING_TOKEN(0x1B47),
        help     = STRING_TOKEN(0x1B44),
        option text = STRING_TOKEN(0x1B4D), value = 0x10, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B4E), value = 0x20, flags = DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B4F), value = 0x30, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B50), value = 0x40, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B51), value = 0x50, flags = RESET_REQUIRED;
      endoneof;

      
      oneof varid = SETUP_DATA.MipiCam_Link2_DriverData_ControlLogic,
        prompt   = STRING_TOKEN(0x1C1C),
        help     = STRING_TOKEN(0x1C19),
        option text = STRING_TOKEN(0x1BC3), value = 0xFF, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BBD), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BBE), value = 1, flags = DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BBF), value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BC0), value = 3, flags = RESET_REQUIRED;
        suppressif NOT ideqval SETUP_DATA.MipiCam4Enable == 1;
          option text = STRING_TOKEN(0x1BC1), value = 3, flags = RESET_REQUIRED;
        endif
        suppressif NOT ideqval SETUP_DATA.MipiCam5Enable == 1;
          option text = STRING_TOKEN(0x1BC2), value = 3, flags = RESET_REQUIRED;
        endif
      endoneof;

      
      oneof varid     = SETUP_DATA.MipiCam_Link2_CameraPhysicalLocation,
        prompt      = STRING_TOKEN(0x1AF9),
        help        = STRING_TOKEN(0x1AF6),
        option text = STRING_TOKEN(0x1B03), value = 0x61, flags = DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B04), value = 0x69, flags = RESET_REQUIRED;
      endoneof;

      
      oneof varid     = SETUP_DATA.MipiCam_Link2_DriverData_FlashSupport,
        prompt      = STRING_TOKEN(0x1B0B),
        help        = STRING_TOKEN(0x1B08),
        option text = STRING_TOKEN(0x1B0F), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0004), value = 2, flags =  DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 3, flags =  RESET_REQUIRED;
      endoneof;

      
      oneof varid   = SETUP_DATA.MipiCam_Link2_DriverData_PrivacyLed,
        prompt      = STRING_TOKEN(0x1B13),
        help        = STRING_TOKEN(0x1B10),
        option text = STRING_TOKEN(0x1B17), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B18), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B19), value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B1A), value = 3, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B1B), value = 4, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B1C), value = 5, flags = RESET_REQUIRED;
      endoneof;

      
      oneof varid     = SETUP_DATA.MipiCam_Link2_DriverData_Degree,
        prompt      = STRING_TOKEN(0x1B20),
        help        = STRING_TOKEN(0x1B1D),
        option text = STRING_TOKEN(0x1B24), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        
        option text = STRING_TOKEN(0x1B26), value = 2, flags = RESET_REQUIRED;
        
        option text = STRING_TOKEN(0x1B28), value = 4, flags = RESET_REQUIRED;
        
        option text = STRING_TOKEN(0x1B2A), value = 6, flags = RESET_REQUIRED;
        
      endoneof;

      
      suppressif NOT ideqval SETUP_DATA.MipiCam_Link2_DriverData_CrdVersion == 0x50;
        oneof varid   = SETUP_DATA.MipiCam_Link2_DriverData_PmicPosition,
          prompt      = STRING_TOKEN(0x1B2F),
          help        = STRING_TOKEN(0x1B2C),
          option text = STRING_TOKEN(0x1B32), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1B33), value = 1, flags = RESET_REQUIRED;
        endoneof;
      endif;

      
      suppressif NOT ideqval SETUP_DATA.MipiCam_Link2_DriverData_PmicPosition == 1;
        oneof varid   = SETUP_DATA.MipiCam_Link2_DriverData_VoltageRail,
          prompt      = STRING_TOKEN(0x1B37),
          help        = STRING_TOKEN(0x1B34),
          option text = STRING_TOKEN(0x1B3B), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1B3C), value = 1, flags = RESET_REQUIRED;
        endoneof;
      endif;

      
      string varid    = SETUP_DATA.MipiCam_Link2_ModuleName,
        prompt   = STRING_TOKEN(0x1AFD),
        help     = STRING_TOKEN(0x1AFD),
        minsize  = 1,
        maxsize  = 15,
        default  = STRING_TOKEN(0x1AFF),
      endstring;

      
      numeric varid     = SETUP_DATA.MipiCam_Link2_DriverData_LinkUsed,
        prompt      = STRING_TOKEN(0x1B55),
        help        = STRING_TOKEN(0x1B52),
        flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
        minimum  = 0,
        maximum  = 10,
        step     = 1,
        default  = 4,
      endnumeric;

      
      oneof varid     = SETUP_DATA.MipiCam_Link2_DriverData_LaneUsed,
        prompt      = STRING_TOKEN(0x1B5C),
        help        = STRING_TOKEN(0x1B59),
        option text = STRING_TOKEN(0x1B8E), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B8F), value = 2, flags = DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B90), value = 3, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B91), value = 4, flags = RESET_REQUIRED;
      endoneof;

      
      oneof varid     = SETUP_DATA.MipiCam_Link2_DriverData_CsiSpeed,
        prompt      = STRING_TOKEN(0x1B60),
        help        = STRING_TOKEN(0x1B61),
        option text = STRING_TOKEN(0x1B93), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B94),        value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B95),        value = 2, flags = DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B96),          value = 3, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B97),        value = 4, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B98),          value = 5, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B99),    value = 6, flags = RESET_REQUIRED;
      endoneof;

      
      numeric varid     = SETUP_DATA.MipiCam_Link2_DriverData_Mclk,
        prompt      = STRING_TOKEN(0x1B63),
        help        = STRING_TOKEN(0x1B62),
        flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
        minimum  = 6000000,
        maximum  = 27000000,
        step     = 100000,
        default  = 19200000,
      endnumeric;

      
      oneof varid     = SETUP_DATA.MipiCam_Link2_DriverData_EepromType,
        prompt      = STRING_TOKEN(0x1B67),
        help        = STRING_TOKEN(0x1B64),
        option text = STRING_TOKEN(0x1B72), value = 0x00, flags = DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B73), value = 0x01, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B74), value = 0x02, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B75), value = 0x03, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B76), value = 0x04, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B77), value = 0x05, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B78), value = 0x06, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B79), value = 0x07, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B7A), value = 0x08, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B7B), value = 0x09, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B7C), value = 0x0A, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B7D), value = 0x10, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B7E), value = 0x11, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B7F), value = 0x12, flags = RESET_REQUIRED;
      endoneof;

      
      oneof varid     = SETUP_DATA.MipiCam_Link2_DriverData_VcmType,
        prompt      = STRING_TOKEN(0x1B6E),
        help        = STRING_TOKEN(0x1B6B),
        option text = STRING_TOKEN(0x1B80),        value = 0x00, flags = DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B81),      value = 0x01, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B82),      value = 0x02, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B83),      value = 0x03, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B85),      value = 0x04, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B84),      value = 0x05, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B86),     value = 0x06, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B87),      value = 0x07, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B88),  value = 0x08, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B89), value = 0x09, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B8A),   value = 0x0A, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B8B),   value = 0x0B, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B8C),      value = 0x0F, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B8D),  value = 0x10, flags = RESET_REQUIRED;
      endoneof;

      
      numeric varid     = SETUP_DATA.MipiCam_Link2_I2cDevicesEnabled,
        prompt      = STRING_TOKEN(0x1A06),
        help        = STRING_TOKEN(0x1A03),
        flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
        minimum  = 0,
        maximum  = 12,
        step     = 1,
        default  = 1,
      endnumeric;

      suppressif ideqval SETUP_DATA.MipiCam_Link2_I2cDevicesEnabled == 0;
        
        oneof varid = SETUP_DATA.MipiCam_Link2_I2cChannel,
          prompt   = STRING_TOKEN(0x1A29),
          help        = STRING_TOKEN(0x1A26),
          option text = STRING_TOKEN(0x1BB4), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1BB5), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1BB6), value = 2, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1BB7), value = 3, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1BB8), value = 4, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1BB9), value = 5, flags = RESET_REQUIRED;



#line 7403 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaSetup.hfr"
        endoneof;

        
        subtitle text = STRING_TOKEN(0x1A1A);

        
        numeric varid = SETUP_DATA.MipiCam_Link2_I2cAddress[0],
          prompt   = STRING_TOKEN(0x1A4A),
          help     = STRING_TOKEN(0x1A2F),
          flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
          minimum  = 0,
          maximum  = 0x7F,
          step     = 1,
          default  = 0x1A,
        endnumeric;

        
        oneof varid = SETUP_DATA.MipiCam_Link2_I2cDeviceType[0],
          prompt   = STRING_TOKEN(0x1BDD),
          help        = STRING_TOKEN(0x1BC4),
          option text = STRING_TOKEN(0x1C0D), value = 0x00, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0E), value = 0x01, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0F), value = 0x02, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C10), value = 0x03, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C11), value = 0x04, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C12), value = 0x05, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C13), value = 0x06, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C14), value = 0x07, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C15), value = 0x08, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C16), value = 0x09, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C17), value = 0x0A, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C18), value = 0x0C, flags = RESET_REQUIRED;
        endoneof;
      endif ;

      
      suppressif ideqvallist SETUP_DATA.MipiCam_Link2_I2cDevicesEnabled == 0 1;
        subtitle text = STRING_TOKEN(0x1A1B);
        
        numeric varid = SETUP_DATA.MipiCam_Link2_I2cAddress[1],
          prompt   = STRING_TOKEN(0x1A4B),
          help     = STRING_TOKEN(0x1A2F),
          flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
          minimum  = 0,
          maximum  = 0x7F,
          step     = 1,
          default  = 0x0E,
        endnumeric;

        
        oneof varid = SETUP_DATA.MipiCam_Link2_I2cDeviceType[1],
          prompt   = STRING_TOKEN(0x1BDE),
          help        = STRING_TOKEN(0x1BC4),
          option text = STRING_TOKEN(0x1C0D), value = 0x00, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0E), value = 0x01, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0F), value = 0x02, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C10), value = 0x03, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C11), value = 0x04, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C12), value = 0x05, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C13), value = 0x06, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C14), value = 0x07, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C15), value = 0x08, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C16), value = 0x09, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C17), value = 0x0A, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C18), value = 0x0C, flags = RESET_REQUIRED;
        endoneof;
      endif;

      
      suppressif ideqvallist SETUP_DATA.MipiCam_Link2_I2cDevicesEnabled == 0 1 2;
        subtitle text = STRING_TOKEN(0x1A1C);
        
        numeric varid = SETUP_DATA.MipiCam_Link2_I2cAddress[2],
          prompt   = STRING_TOKEN(0x1A4C),
          help     = STRING_TOKEN(0x1A2F),
          flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
          minimum  = 0,
          maximum  = 0x7F,
          step     = 1,
          default  = 0x50,
        endnumeric;

        
        oneof varid = SETUP_DATA.MipiCam_Link2_I2cDeviceType[2],
          prompt   = STRING_TOKEN(0x1BDF),
          help        = STRING_TOKEN(0x1BC4),
          option text = STRING_TOKEN(0x1C0D), value = 0x00, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0E), value = 0x01, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0F), value = 0x02, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C10), value = 0x03, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C11), value = 0x04, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C12), value = 0x05, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C13), value = 0x06, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C14), value = 0x07, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C15), value = 0x08, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C16), value = 0x09, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C17), value = 0x0A, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C18), value = 0x0C, flags = RESET_REQUIRED;
        endoneof;
      endif;

      
      suppressif ideqvallist SETUP_DATA.MipiCam_Link2_I2cDevicesEnabled == 0 1 2 3;
        subtitle text = STRING_TOKEN(0x1A1D);
        
        numeric varid = SETUP_DATA.MipiCam_Link2_I2cAddress[3],
          prompt   = STRING_TOKEN(0x1A4D),
          help     = STRING_TOKEN(0x1A2F),
          flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
          minimum  = 0,
          maximum  = 0x7F,
          step     = 1,
          default  = 0x51,
        endnumeric;

        
        oneof varid = SETUP_DATA.MipiCam_Link2_I2cDeviceType[3],
          prompt   = STRING_TOKEN(0x1BE0),
          help        = STRING_TOKEN(0x1BC4),
          option text = STRING_TOKEN(0x1C0D), value = 0x00, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0E), value = 0x01, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0F), value = 0x02, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C10), value = 0x03, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C11), value = 0x04, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C12), value = 0x05, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C13), value = 0x06, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C14), value = 0x07, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C15), value = 0x08, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C16), value = 0x09, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C17), value = 0x0A, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C18), value = 0x0C, flags = RESET_REQUIRED;
        endoneof;
      endif;

      
      suppressif ideqvallist SETUP_DATA.MipiCam_Link2_I2cDevicesEnabled == 0 1 2 3 4;
        subtitle text = STRING_TOKEN(0x1A1E);
        
        numeric varid = SETUP_DATA.MipiCam_Link2_I2cAddress[4],
          prompt   = STRING_TOKEN(0x1A4E),
          help     = STRING_TOKEN(0x1A2F),
          flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
          minimum  = 0,
          maximum  = 0x7F,
          step     = 1,
          default  = 0x52,
        endnumeric;

        
        oneof varid = SETUP_DATA.MipiCam_Link2_I2cDeviceType[4],
          prompt   = STRING_TOKEN(0x1BE1),
          help        = STRING_TOKEN(0x1BC4),
          option text = STRING_TOKEN(0x1C0D), value = 0x00, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0E), value = 0x01, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0F), value = 0x02, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C10), value = 0x03, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C11), value = 0x04, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C12), value = 0x05, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C13), value = 0x06, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C14), value = 0x07, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C15), value = 0x08, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C16), value = 0x09, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C17), value = 0x0A, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C18), value = 0x0C, flags = RESET_REQUIRED;
        endoneof;
      endif;

      
      suppressif ideqvallist SETUP_DATA.MipiCam_Link2_I2cDevicesEnabled == 0 1 2 3 4 5;
        subtitle text = STRING_TOKEN(0x1A1F);
        
        numeric varid = SETUP_DATA.MipiCam_Link2_I2cAddress[5],
          prompt   = STRING_TOKEN(0x1A4F),
          help     = STRING_TOKEN(0x1A2F),
          flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
          minimum  = 0,
          maximum  = 0x7F,
          step     = 1,
          default  = 0x53,
        endnumeric;

        
        oneof varid = SETUP_DATA.MipiCam_Link2_I2cDeviceType[5],
          prompt   = STRING_TOKEN(0x1BE2),
          help        = STRING_TOKEN(0x1BC4),
          option text = STRING_TOKEN(0x1C0D), value = 0x00, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0E), value = 0x01, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0F), value = 0x02, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C10), value = 0x03, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C11), value = 0x04, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C12), value = 0x05, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C13), value = 0x06, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C14), value = 0x07, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C15), value = 0x08, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C16), value = 0x09, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C17), value = 0x0A, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C18), value = 0x0C, flags = RESET_REQUIRED;
        endoneof;
      endif;

      
      suppressif ideqvallist SETUP_DATA.MipiCam_Link2_I2cDevicesEnabled == 0 1 2 3 4 5 6;
        subtitle text = STRING_TOKEN(0x1A20);
        
        numeric varid = SETUP_DATA.MipiCam_Link2_I2cAddress[6],
          prompt   = STRING_TOKEN(0x1A50),
          help     = STRING_TOKEN(0x1A2F),
          flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
          minimum  = 0,
          maximum  = 0x7F,
          step     = 1,
          default  = 0x54,
        endnumeric;

        
        oneof varid = SETUP_DATA.MipiCam_Link2_I2cDeviceType[6],
          prompt   = STRING_TOKEN(0x1BE3),
          help        = STRING_TOKEN(0x1BC4),
          option text = STRING_TOKEN(0x1C0D), value = 0x00, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0E), value = 0x01, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0F), value = 0x02, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C10), value = 0x03, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C11), value = 0x04, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C12), value = 0x05, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C13), value = 0x06, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C14), value = 0x07, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C15), value = 0x08, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C16), value = 0x09, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C17), value = 0x0A, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C18), value = 0x0C, flags = RESET_REQUIRED;
        endoneof;
      endif;

      
      suppressif ideqvallist SETUP_DATA.MipiCam_Link2_I2cDevicesEnabled == 0 1 2 3 4 5 6 7;
        subtitle text = STRING_TOKEN(0x1A21);
        
        numeric varid = SETUP_DATA.MipiCam_Link2_I2cAddress[7],
          prompt   = STRING_TOKEN(0x1A51),
          help     = STRING_TOKEN(0x1A2F),
          flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
          minimum  = 0,
          maximum  = 0x7F,
          step     = 1,
          default  = 0x55,
        endnumeric;

        
        oneof varid = SETUP_DATA.MipiCam_Link2_I2cDeviceType[7],
          prompt   = STRING_TOKEN(0x1BE4),
          help        = STRING_TOKEN(0x1BC4),
          option text = STRING_TOKEN(0x1C0D), value = 0x00, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0E), value = 0x01, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0F), value = 0x02, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C10), value = 0x03, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C11), value = 0x04, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C12), value = 0x05, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C13), value = 0x06, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C14), value = 0x07, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C15), value = 0x08, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C16), value = 0x09, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C17), value = 0x0A, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C18), value = 0x0C, flags = RESET_REQUIRED;
        endoneof;
      endif;

      
      suppressif ideqvallist SETUP_DATA.MipiCam_Link2_I2cDevicesEnabled == 0 1 2 3 4 5 6 7 8;
        subtitle text = STRING_TOKEN(0x1A22);
        
        numeric varid = SETUP_DATA.MipiCam_Link2_I2cAddress[8],
          prompt   = STRING_TOKEN(0x1A52),
          help     = STRING_TOKEN(0x1A2F),
          flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
          minimum  = 0,
          maximum  = 0x7F,
          step     = 1,
          default  = 0x56,
        endnumeric;

        
        oneof varid = SETUP_DATA.MipiCam_Link2_I2cDeviceType[8],
          prompt   = STRING_TOKEN(0x1BE5),
          help        = STRING_TOKEN(0x1BC4),
          option text = STRING_TOKEN(0x1C0D), value = 0x00, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0E), value = 0x01, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0F), value = 0x02, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C10), value = 0x03, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C11), value = 0x04, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C12), value = 0x05, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C13), value = 0x06, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C14), value = 0x07, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C15), value = 0x08, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C16), value = 0x09, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C17), value = 0x0A, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C18), value = 0x0C, flags = RESET_REQUIRED;
        endoneof;
      endif;

      
      suppressif ideqvallist SETUP_DATA.MipiCam_Link2_I2cDevicesEnabled == 0 1 2 3 4 5 6 7 8 9;
        subtitle text = STRING_TOKEN(0x1A23);
        
        numeric varid = SETUP_DATA.MipiCam_Link2_I2cAddress[9],
          prompt   = STRING_TOKEN(0x1A53),
          help     = STRING_TOKEN(0x1A2F),
          flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
          minimum  = 0,
          maximum  = 0x7F,
          step     = 1,
          default  = 0x57,
        endnumeric;

        
        oneof varid = SETUP_DATA.MipiCam_Link2_I2cDeviceType[9],
          prompt   = STRING_TOKEN(0x1BE6),
          help        = STRING_TOKEN(0x1BC4),
          option text = STRING_TOKEN(0x1C0D), value = 0x00, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0E), value = 0x01, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0F), value = 0x02, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C10), value = 0x03, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C11), value = 0x04, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C12), value = 0x05, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C13), value = 0x06, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C14), value = 0x07, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C15), value = 0x08, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C16), value = 0x09, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C17), value = 0x0A, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C18), value = 0x0C, flags = RESET_REQUIRED;
        endoneof;
      endif;

      
      suppressif ideqvallist SETUP_DATA.MipiCam_Link2_I2cDevicesEnabled == 0 1 2 3 4 5 6 7 8 9 10;
        subtitle text = STRING_TOKEN(0x1A24);
        
        numeric varid = SETUP_DATA.MipiCam_Link2_I2cAddress[10],
          prompt   = STRING_TOKEN(0x1A54),
          help     = STRING_TOKEN(0x1A2F),
          flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
          minimum  = 0,
          maximum  = 0x7F,
          step     = 1,
          default  = 0x58,
        endnumeric;

        
        oneof varid = SETUP_DATA.MipiCam_Link2_I2cDeviceType[10],
          prompt   = STRING_TOKEN(0x1BE7),
          help        = STRING_TOKEN(0x1BC4),
          option text = STRING_TOKEN(0x1C0D), value = 0x00, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0E), value = 0x01, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0F), value = 0x02, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C10), value = 0x03, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C11), value = 0x04, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C12), value = 0x05, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C13), value = 0x06, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C14), value = 0x07, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C15), value = 0x08, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C16), value = 0x09, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C17), value = 0x0A, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C18), value = 0x0C, flags = RESET_REQUIRED;
        endoneof;
      endif;

      
      suppressif ideqvallist SETUP_DATA.MipiCam_Link2_I2cDevicesEnabled == 0 1 2 3 4 5 6 7 8 9 10 11;
        subtitle text = STRING_TOKEN(0x1A25);
        
        numeric varid = SETUP_DATA.MipiCam_Link2_I2cAddress[11],
          prompt   = STRING_TOKEN(0x1A55),
          help     = STRING_TOKEN(0x1A2F),
          flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
          minimum  = 0,
          maximum  = 0x7F,
          step     = 1,
          default  = 0x59,
        endnumeric;

        
        oneof varid = SETUP_DATA.MipiCam_Link2_I2cDeviceType[11],
          prompt   = STRING_TOKEN(0x1BE8),
          help        = STRING_TOKEN(0x1BC4),
          option text = STRING_TOKEN(0x1C0D), value = 0x00, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0E), value = 0x01, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0F), value = 0x02, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C10), value = 0x03, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C11), value = 0x04, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C12), value = 0x05, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C13), value = 0x06, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C14), value = 0x07, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C15), value = 0x08, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C16), value = 0x09, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C17), value = 0x0A, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C18), value = 0x0C, flags = RESET_REQUIRED;
        endoneof;
      endif;

      
      oneof varid     = SETUP_DATA.MipiCam_Link2_FlashDriverSelection,
        prompt      = STRING_TOKEN(0x1B3E),
        help        = STRING_TOKEN(0x1B3D),
        default     = 0, defaultstore = MyStandardDefault,
        option text = STRING_TOKEN(0x1B3F),      value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B40),      value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B41), value = 2, flags = RESET_REQUIRED;
      endoneof;

      
      suppressif NOT ideqval SETUP_DATA.MipiCam_Link2_FlashDriverSelection == 1;
      oneof varid     = SETUP_DATA.MipiCam_Link2_DriverData_FlashID,
        prompt      = STRING_TOKEN(0x1B43),
        help        = STRING_TOKEN(0x1B42),
        option text = STRING_TOKEN(0x1C35),      value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1C36),      value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1C37),      value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1C38),      value = 3, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1C39),      value = 4, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1C3A),      value = 5, flags = RESET_REQUIRED;
      endoneof;
      endif;
    endform;

    
    form formid = 144,
      title    = STRING_TOKEN(0x19F9);
      subtitle text = STRING_TOKEN(0x19E7);

      oneof varid   = SETUP_DATA.MipiCam_Link3_SensorModel,
        prompt      = STRING_TOKEN(0x1A00),
        help        = STRING_TOKEN(0x19FC),
        option text = STRING_TOKEN(0x1B9A), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B9B), value = 1, flags = DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B9C), value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B9D), value = 3, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B9E), value = 4, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B9F), value = 5, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BA0), value = 6, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BA1), value = 7, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BA2), value = 8, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BA3), value = 9, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BA4), value = 10, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BA5), value = 11, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BA6), value = 12, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BA7), value = 13, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BA8), value = 14, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BA9), value = 15, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BAA), value = 16, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BAC), value = 17, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BAD), value = 18, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BAE), value = 19, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BAF), value = 20, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BB1), value = 21, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BB0), value = 22, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BB2), value = 255, flags = RESET_REQUIRED;
      endoneof;

      
      suppressif NOT ideqval SETUP_DATA.MipiCam_Link3_SensorModel == 255;
         string varid = SETUP_DATA.MipiCam_Link3_UserHid,
          prompt   = STRING_TOKEN(0x1BB3),
          help     = STRING_TOKEN(0x1BB3),
          minsize  = 6,
          maxsize  = 20,
        endstring;
      endif;

      oneof varid     = SETUP_DATA.MipiCam_Link3_LanesClkDiv,
        prompt      = STRING_TOKEN(0x1A11),
        help        = STRING_TOKEN(0x1A0D),
        option text = STRING_TOKEN(0x1A14), value = 0x00, flags = DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1A15), value = 0x02, flags =  RESET_REQUIRED;
        option text = STRING_TOKEN(0x1A16), value = 0x03, flags =  RESET_REQUIRED;
        option text = STRING_TOKEN(0x1A17), value = 0x04, flags =  RESET_REQUIRED;
        option text = STRING_TOKEN(0x1A18), value = 0x06, flags =  RESET_REQUIRED;
        option text = STRING_TOKEN(0x1A19), value = 0x07, flags =  RESET_REQUIRED;
      endoneof;

      
      oneof varid = SETUP_DATA.MipiCam_Link3_DriverData_CrdVersion,
        prompt   = STRING_TOKEN(0x1B48),
        help     = STRING_TOKEN(0x1B44),
        option text = STRING_TOKEN(0x1B4D), value = 0x10, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B4E), value = 0x20, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B4F), value = 0x30, flags = DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B50), value = 0x40, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B51), value = 0x50, flags = RESET_REQUIRED;
      endoneof;

      
      oneof varid = SETUP_DATA.MipiCam_Link3_DriverData_ControlLogic,
        prompt   = STRING_TOKEN(0x1C1D),
        help     = STRING_TOKEN(0x1C19),
        option text = STRING_TOKEN(0x1BC3), value = 0xFF, flags = DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BBD), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BBE), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BBF), value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BC0), value = 3, flags = RESET_REQUIRED;
        suppressif NOT ideqval SETUP_DATA.MipiCam4Enable == 1;
          option text = STRING_TOKEN(0x1BC1), value = 3, flags = RESET_REQUIRED;
        endif
        suppressif NOT ideqval SETUP_DATA.MipiCam5Enable == 1;
          option text = STRING_TOKEN(0x1BC2), value = 3, flags = RESET_REQUIRED;
        endif
      endoneof;

      
      oneof varid     = SETUP_DATA.MipiCam_Link3_CameraPhysicalLocation,
        prompt      = STRING_TOKEN(0x1AFA),
        help        = STRING_TOKEN(0x1AF6),
        option text = STRING_TOKEN(0x1B03), value = 0x61, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B04), value = 0x69, flags = DEFAULT | RESET_REQUIRED;
      endoneof;

      
      oneof varid     = SETUP_DATA.MipiCam_Link3_DriverData_FlashSupport,
        prompt      = STRING_TOKEN(0x1B0C),
        help        = STRING_TOKEN(0x1B08),
        option text = STRING_TOKEN(0x1B0F), value = 0, flags = DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0004), value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 3, flags = RESET_REQUIRED;
      endoneof;

      
      oneof varid   = SETUP_DATA.MipiCam_Link3_DriverData_PrivacyLed,
        prompt      = STRING_TOKEN(0x1B14),
        help        = STRING_TOKEN(0x1B10),
        option text = STRING_TOKEN(0x1B17), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B18), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B19), value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B1A), value = 3, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B1B), value = 4, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B1C), value = 5, flags = RESET_REQUIRED;
      endoneof;

      
      oneof varid     = SETUP_DATA.MipiCam_Link3_DriverData_Degree,
        prompt      = STRING_TOKEN(0x1B21),
        help        = STRING_TOKEN(0x1B1D),
        option text = STRING_TOKEN(0x1B24), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        
        option text = STRING_TOKEN(0x1B26), value = 2, flags = RESET_REQUIRED;
        
        option text = STRING_TOKEN(0x1B28), value = 4, flags = RESET_REQUIRED;
        
        option text = STRING_TOKEN(0x1B2A), value = 6, flags = RESET_REQUIRED;
        
      endoneof;

      
      suppressif NOT ideqval SETUP_DATA.MipiCam_Link3_DriverData_CrdVersion == 0x50;
        oneof varid   = SETUP_DATA.MipiCam_Link3_DriverData_PmicPosition,
          prompt      = STRING_TOKEN(0x1B30),
          help        = STRING_TOKEN(0x1B2C),
          option text = STRING_TOKEN(0x1B32), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1B33), value = 1, flags = RESET_REQUIRED;
        endoneof;
      endif;

      
      suppressif NOT ideqval SETUP_DATA.MipiCam_Link3_DriverData_PmicPosition == 1;
        oneof varid   = SETUP_DATA.MipiCam_Link3_DriverData_VoltageRail,
          prompt      = STRING_TOKEN(0x1B38),
          help        = STRING_TOKEN(0x1B34),
          option text = STRING_TOKEN(0x1B3B), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1B3C), value = 1, flags = RESET_REQUIRED;
        endoneof;
      endif;

      
      string varid    = SETUP_DATA.MipiCam_Link3_ModuleName,
        prompt   = STRING_TOKEN(0x1AFD),
        help     = STRING_TOKEN(0x1AFD),
        minsize  = 1,
        maxsize  = 15,
      endstring;

      
      numeric varid     = SETUP_DATA.MipiCam_Link3_DriverData_LinkUsed,
        prompt      = STRING_TOKEN(0x1B56),
        help        = STRING_TOKEN(0x1B52),
        flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
        minimum  = 0,
        maximum  = 10,
        step     = 1,
        default  = 7,
      endnumeric;

      
      oneof varid     = SETUP_DATA.MipiCam_Link3_DriverData_LaneUsed,
        prompt      = STRING_TOKEN(0x1B5D),
        help        = STRING_TOKEN(0x1B59),
        option text = STRING_TOKEN(0x1B8E), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B8F), value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B90), value = 3, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B91), value = 4, flags = DEFAULT | RESET_REQUIRED;
      endoneof;

      
      oneof varid     = SETUP_DATA.MipiCam_Link3_DriverData_CsiSpeed,
        prompt      = STRING_TOKEN(0x1B60),
        help        = STRING_TOKEN(0x1B61),
        option text = STRING_TOKEN(0x1B93), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B94),        value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B95),        value = 2, flags = DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B96),          value = 3, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B97),        value = 4, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B98),          value = 5, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B99),    value = 6, flags = RESET_REQUIRED;
      endoneof;

      
      numeric varid     = SETUP_DATA.MipiCam_Link3_DriverData_Mclk,
        prompt      = STRING_TOKEN(0x1B63),
        help        = STRING_TOKEN(0x1B62),
        flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
        minimum  = 6000000,
        maximum  = 27000000,
        step     = 100000,
        default  = 19200000,
      endnumeric;

      
      oneof varid     = SETUP_DATA.MipiCam_Link3_DriverData_EepromType,
        prompt      = STRING_TOKEN(0x1B68),
        help        = STRING_TOKEN(0x1B64),
        option text = STRING_TOKEN(0x1B72), value = 0x00, flags = DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B73), value = 0x01, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B74), value = 0x02, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B75), value = 0x03, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B76), value = 0x04, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B77), value = 0x05, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B78), value = 0x06, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B79), value = 0x07, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B7A), value = 0x08, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B7B), value = 0x09, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B7C), value = 0x0A, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B7D), value = 0x10, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B7E), value = 0x11, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B7F), value = 0x12, flags = RESET_REQUIRED;
      endoneof;

      
      oneof varid     = SETUP_DATA.MipiCam_Link3_DriverData_VcmType,
        prompt      = STRING_TOKEN(0x1B6F),
        help        = STRING_TOKEN(0x1B6B),
        option text = STRING_TOKEN(0x1B80),        value = 0x00, flags = DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B81),      value = 0x01, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B82),      value = 0x02, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B83),      value = 0x03, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B85),      value = 0x04, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B84),      value = 0x05, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B86),     value = 0x06, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B87),      value = 0x07, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B88),  value = 0x08, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B89), value = 0x09, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B8A),   value = 0x0A, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B8B),   value = 0x0B, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B8C),      value = 0x0F, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B8D),  value = 0x10, flags = RESET_REQUIRED;
      endoneof;

      
      numeric varid     = SETUP_DATA.MipiCam_Link3_I2cDevicesEnabled,
        prompt      = STRING_TOKEN(0x1A07),
        help        = STRING_TOKEN(0x1A03),
        flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
        minimum  = 0,
        maximum  = 12,
        step     = 1,
        default  = 6,
      endnumeric;

      suppressif ideqval SETUP_DATA.MipiCam_Link3_I2cDevicesEnabled == 0;
        
        oneof varid = SETUP_DATA.MipiCam_Link3_I2cChannel,
          prompt   = STRING_TOKEN(0x1A2A),
          help        = STRING_TOKEN(0x1A26),
          option text = STRING_TOKEN(0x1BB4), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1BB5), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1BB6), value = 2, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1BB7), value = 3, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1BB8), value = 4, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1BB9), value = 5, flags = RESET_REQUIRED;



#line 8091 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaSetup.hfr"
        endoneof;

        
        subtitle text = STRING_TOKEN(0x1A1A);

        
        numeric varid = SETUP_DATA.MipiCam_Link3_I2cAddress[0],
          prompt   = STRING_TOKEN(0x1A56),
          help     = STRING_TOKEN(0x1A2F),
          flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
          minimum  = 0,
          maximum  = 0x7F,
          step     = 1,
          default  = 0x10,
        endnumeric;

        
        oneof varid = SETUP_DATA.MipiCam_Link3_I2cDeviceType[0],
          prompt   = STRING_TOKEN(0x1BE9),
          help        = STRING_TOKEN(0x1BC4),
          option text = STRING_TOKEN(0x1C0D), value = 0x00, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0E), value = 0x01, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0F), value = 0x02, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C10), value = 0x03, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C11), value = 0x04, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C12), value = 0x05, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C13), value = 0x06, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C14), value = 0x07, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C15), value = 0x08, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C16), value = 0x09, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C17), value = 0x0A, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C18), value = 0x0C, flags = RESET_REQUIRED;
        endoneof;
      endif ;

      
      suppressif ideqvallist SETUP_DATA.MipiCam_Link3_I2cDevicesEnabled == 0 1;
        subtitle text = STRING_TOKEN(0x1A1B);
        
        numeric varid = SETUP_DATA.MipiCam_Link3_I2cAddress[1],
          prompt   = STRING_TOKEN(0x1A57),
          help     = STRING_TOKEN(0x1A2F),
          flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
          minimum  = 0,
          maximum  = 0x7F,
          step     = 1,
          default  = 0x0C,
        endnumeric;
        
        oneof varid = SETUP_DATA.MipiCam_Link3_I2cDeviceType[1],
          prompt   = STRING_TOKEN(0x1BEA),
          help        = STRING_TOKEN(0x1BC4),
          option text = STRING_TOKEN(0x1C0D), value = 0x00, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0E), value = 0x01, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0F), value = 0x02, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C10), value = 0x03, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C11), value = 0x04, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C12), value = 0x05, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C13), value = 0x06, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C14), value = 0x07, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C15), value = 0x08, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C16), value = 0x09, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C17), value = 0x0A, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C18), value = 0x0C, flags = RESET_REQUIRED;
        endoneof;
      endif;

      
      suppressif ideqvallist SETUP_DATA.MipiCam_Link3_I2cDevicesEnabled == 0 1 2;
        subtitle text = STRING_TOKEN(0x1A1C);
        
        numeric varid = SETUP_DATA.MipiCam_Link3_I2cAddress[2],
          prompt   = STRING_TOKEN(0x1A58),
          help     = STRING_TOKEN(0x1A2F),
          flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
          minimum  = 0,
          maximum  = 0x7F,
          step     = 1,
          default  = 0x50,
        endnumeric;
        
        oneof varid = SETUP_DATA.MipiCam_Link3_I2cDeviceType[2],
          prompt   = STRING_TOKEN(0x1BEB),
          help        = STRING_TOKEN(0x1BC4),
          option text = STRING_TOKEN(0x1C0D), value = 0x00, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0E), value = 0x01, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0F), value = 0x02, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C10), value = 0x03, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C11), value = 0x04, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C12), value = 0x05, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C13), value = 0x06, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C14), value = 0x07, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C15), value = 0x08, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C16), value = 0x09, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C17), value = 0x0A, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C18), value = 0x0C, flags = RESET_REQUIRED;
        endoneof;
      endif;

      
      suppressif ideqvallist SETUP_DATA.MipiCam_Link3_I2cDevicesEnabled == 0 1 2 3;
        subtitle text = STRING_TOKEN(0x1A1D);
        
        numeric varid = SETUP_DATA.MipiCam_Link3_I2cAddress[3],
          prompt   = STRING_TOKEN(0x1A59),
          help     = STRING_TOKEN(0x1A2F),
          flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
          minimum  = 0,
          maximum  = 0x7F,
          step     = 1,
          default  = 0x51,
        endnumeric;
        
        oneof varid = SETUP_DATA.MipiCam_Link3_I2cDeviceType[3],
          prompt   = STRING_TOKEN(0x1BEC),
          help        = STRING_TOKEN(0x1BC4),
          option text = STRING_TOKEN(0x1C0D), value = 0x00, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0E), value = 0x01, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0F), value = 0x02, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C10), value = 0x03, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C11), value = 0x04, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C12), value = 0x05, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C13), value = 0x06, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C14), value = 0x07, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C15), value = 0x08, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C16), value = 0x09, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C17), value = 0x0A, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C18), value = 0x0C, flags = RESET_REQUIRED;
        endoneof;
      endif;

      
      suppressif ideqvallist SETUP_DATA.MipiCam_Link3_I2cDevicesEnabled == 0 1 2 3 4;
        subtitle text = STRING_TOKEN(0x1A1E);
        
        numeric varid = SETUP_DATA.MipiCam_Link3_I2cAddress[4],
          prompt   = STRING_TOKEN(0x1A5A),
          help     = STRING_TOKEN(0x1A2F),
          flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
          minimum  = 0,
          maximum  = 0x7F,
          step     = 1,
          default  = 0x52,
        endnumeric;
        
        oneof varid = SETUP_DATA.MipiCam_Link3_I2cDeviceType[4],
          prompt   = STRING_TOKEN(0x1BED),
          help        = STRING_TOKEN(0x1BC4),
          option text = STRING_TOKEN(0x1C0D), value = 0x00, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0E), value = 0x01, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0F), value = 0x02, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C10), value = 0x03, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C11), value = 0x04, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C12), value = 0x05, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C13), value = 0x06, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C14), value = 0x07, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C15), value = 0x08, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C16), value = 0x09, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C17), value = 0x0A, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C18), value = 0x0C, flags = RESET_REQUIRED;
        endoneof;
      endif;

      
      suppressif ideqvallist SETUP_DATA.MipiCam_Link3_I2cDevicesEnabled == 0 1 2 3 4 5;
        subtitle text = STRING_TOKEN(0x1A1F);
        
        numeric varid = SETUP_DATA.MipiCam_Link3_I2cAddress[5],
          prompt   = STRING_TOKEN(0x1A5B),
          help     = STRING_TOKEN(0x1A2F),
          flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
          minimum  = 0,
          maximum  = 0x7F,
          step     = 1,
          default  = 0x53,
        endnumeric;
        
        oneof varid = SETUP_DATA.MipiCam_Link3_I2cDeviceType[5],
          prompt   = STRING_TOKEN(0x1BEE),
          help        = STRING_TOKEN(0x1BC4),
          option text = STRING_TOKEN(0x1C0D), value = 0x00, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0E), value = 0x01, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0F), value = 0x02, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C10), value = 0x03, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C11), value = 0x04, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C12), value = 0x05, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C13), value = 0x06, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C14), value = 0x07, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C15), value = 0x08, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C16), value = 0x09, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C17), value = 0x0A, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C18), value = 0x0C, flags = RESET_REQUIRED;
        endoneof;
      endif;

      
      suppressif ideqvallist SETUP_DATA.MipiCam_Link3_I2cDevicesEnabled == 0 1 2 3 4 5 6;
        subtitle text = STRING_TOKEN(0x1A20);
        
        numeric varid = SETUP_DATA.MipiCam_Link3_I2cAddress[6],
          prompt   = STRING_TOKEN(0x1A5C),
          help     = STRING_TOKEN(0x1A2F),
          flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
          minimum  = 0,
          maximum  = 0x7F,
          step     = 1,
          default  = 0x54,
        endnumeric;
        
        oneof varid = SETUP_DATA.MipiCam_Link3_I2cDeviceType[6],
          prompt   = STRING_TOKEN(0x1BEF),
          help        = STRING_TOKEN(0x1BC4),
          option text = STRING_TOKEN(0x1C0D), value = 0x00, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0E), value = 0x01, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0F), value = 0x02, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C10), value = 0x03, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C11), value = 0x04, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C12), value = 0x05, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C13), value = 0x06, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C14), value = 0x07, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C15), value = 0x08, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C16), value = 0x09, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C17), value = 0x0A, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C18), value = 0x0C, flags = RESET_REQUIRED;
        endoneof;
      endif;

      
      suppressif ideqvallist SETUP_DATA.MipiCam_Link3_I2cDevicesEnabled == 0 1 2 3 4 5 6 7;
        subtitle text = STRING_TOKEN(0x1A21);
        
        numeric varid = SETUP_DATA.MipiCam_Link3_I2cAddress[7],
          prompt   = STRING_TOKEN(0x1A5D),
          help     = STRING_TOKEN(0x1A2F),
          flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
          minimum  = 0,
          maximum  = 0x7F,
          step     = 1,
          default  = 0x55,
        endnumeric;
        
        oneof varid = SETUP_DATA.MipiCam_Link3_I2cDeviceType[7],
          prompt   = STRING_TOKEN(0x1BF0),
          help        = STRING_TOKEN(0x1BC4),
          option text = STRING_TOKEN(0x1C0D), value = 0x00, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0E), value = 0x01, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0F), value = 0x02, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C10), value = 0x03, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C11), value = 0x04, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C12), value = 0x05, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C13), value = 0x06, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C14), value = 0x07, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C15), value = 0x08, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C16), value = 0x09, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C17), value = 0x0A, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C18), value = 0x0C, flags = RESET_REQUIRED;
        endoneof;
      endif;

      
      suppressif ideqvallist SETUP_DATA.MipiCam_Link3_I2cDevicesEnabled == 0 1 2 3 4 5 6 7 8;
        subtitle text = STRING_TOKEN(0x1A22);
        
        numeric varid = SETUP_DATA.MipiCam_Link3_I2cAddress[8],
          prompt   = STRING_TOKEN(0x1A5E),
          help     = STRING_TOKEN(0x1A2F),
          flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
          minimum  = 0,
          maximum  = 0x7F,
          step     = 1,
          default  = 0x56,
        endnumeric;
        
        oneof varid = SETUP_DATA.MipiCam_Link3_I2cDeviceType[8],
          prompt   = STRING_TOKEN(0x1BF1),
          help        = STRING_TOKEN(0x1BC4),
          option text = STRING_TOKEN(0x1C0D), value = 0x00, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0E), value = 0x01, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0F), value = 0x02, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C10), value = 0x03, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C11), value = 0x04, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C12), value = 0x05, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C13), value = 0x06, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C14), value = 0x07, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C15), value = 0x08, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C16), value = 0x09, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C17), value = 0x0A, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C18), value = 0x0C, flags = RESET_REQUIRED;
        endoneof;
      endif;

      
      suppressif ideqvallist SETUP_DATA.MipiCam_Link3_I2cDevicesEnabled == 0 1 2 3 4 5 6 7 8 9;
        subtitle text = STRING_TOKEN(0x1A23);
        
        numeric varid = SETUP_DATA.MipiCam_Link3_I2cAddress[9],
          prompt   = STRING_TOKEN(0x1A5F),
          help     = STRING_TOKEN(0x1A2F),
          flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
          minimum  = 0,
          maximum  = 0x7F,
          step     = 1,
          default  = 0x57,
        endnumeric;
        
        oneof varid = SETUP_DATA.MipiCam_Link3_I2cDeviceType[9],
          prompt   = STRING_TOKEN(0x1BF2),
          help        = STRING_TOKEN(0x1BC4),
          option text = STRING_TOKEN(0x1C0D), value = 0x00, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0E), value = 0x01, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0F), value = 0x02, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C10), value = 0x03, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C11), value = 0x04, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C12), value = 0x05, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C13), value = 0x06, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C14), value = 0x07, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C15), value = 0x08, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C16), value = 0x09, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C17), value = 0x0A, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C18), value = 0x0C, flags = RESET_REQUIRED;
        endoneof;
      endif;

      
      suppressif ideqvallist SETUP_DATA.MipiCam_Link3_I2cDevicesEnabled == 0 1 2 3 4 5 6 7 8 9 10;
        subtitle text = STRING_TOKEN(0x1A24);
        
        numeric varid = SETUP_DATA.MipiCam_Link3_I2cAddress[10],
          prompt   = STRING_TOKEN(0x1A60),
          help     = STRING_TOKEN(0x1A2F),
          flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
          minimum  = 0,
          maximum  = 0x7F,
          step     = 1,
          default  = 0x58,
        endnumeric;
        
        oneof varid = SETUP_DATA.MipiCam_Link3_I2cDeviceType[10],
          prompt   = STRING_TOKEN(0x1BF3),
          help        = STRING_TOKEN(0x1BC4),
          option text = STRING_TOKEN(0x1C0D), value = 0x00, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0E), value = 0x01, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0F), value = 0x02, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C10), value = 0x03, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C11), value = 0x04, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C12), value = 0x05, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C13), value = 0x06, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C14), value = 0x07, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C15), value = 0x08, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C16), value = 0x09, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C17), value = 0x0A, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C18), value = 0x0C, flags = RESET_REQUIRED;
        endoneof;
      endif;

      
      suppressif ideqvallist SETUP_DATA.MipiCam_Link3_I2cDevicesEnabled == 0 1 2 3 4 5 6 7 8 9 10 11;
        subtitle text = STRING_TOKEN(0x1A25);
        
        numeric varid = SETUP_DATA.MipiCam_Link3_I2cAddress[11],
          prompt   = STRING_TOKEN(0x1A61),
          help     = STRING_TOKEN(0x1A2F),
          flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
          minimum  = 0,
          maximum  = 0x7F,
          step     = 1,
          default  = 0x59,
        endnumeric;
        
        oneof varid = SETUP_DATA.MipiCam_Link3_I2cDeviceType[11],
          prompt   = STRING_TOKEN(0x1BF4),
          help        = STRING_TOKEN(0x1BC4),
          option text = STRING_TOKEN(0x1C0D), value = 0x00, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0E), value = 0x01, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0F), value = 0x02, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C10), value = 0x03, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C11), value = 0x04, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C12), value = 0x05, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C13), value = 0x06, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C14), value = 0x07, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C15), value = 0x08, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C16), value = 0x09, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C17), value = 0x0A, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C18), value = 0x0C, flags = DEFAULT | RESET_REQUIRED;
        endoneof;
      endif;

      
      oneof varid     = SETUP_DATA.MipiCam_Link3_FlashDriverSelection,
        prompt      = STRING_TOKEN(0x1B3E),
        help        = STRING_TOKEN(0x1B3D),
        option text = STRING_TOKEN(0x1B3F),      value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B40),      value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B41), value = 2, flags = RESET_REQUIRED;
      endoneof;

      
      suppressif NOT ideqval SETUP_DATA.MipiCam_Link3_FlashDriverSelection == 1;
      oneof varid     = SETUP_DATA.MipiCam_Link3_DriverData_FlashID,
        prompt      = STRING_TOKEN(0x1B43),
        help        = STRING_TOKEN(0x1B42),
        option text = STRING_TOKEN(0x1C35),      value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1C36),      value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1C37),      value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1C38),      value = 3, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1C39),      value = 4, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1C3A),      value = 5, flags = RESET_REQUIRED;
      endoneof;
      endif;
    endform;

    
    form formid = 145,
      title    = STRING_TOKEN(0x19FA);
      subtitle text = STRING_TOKEN(0x19E8);

      oneof varid   = SETUP_DATA.MipiCam_Link4_SensorModel,
        prompt      = STRING_TOKEN(0x1A01),
        help        = STRING_TOKEN(0x19FC),
        option text = STRING_TOKEN(0x1B9A), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B9B), value = 1, flags = DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B9C), value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B9D), value = 3, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B9E), value = 4, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B9F), value = 5, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BA0), value = 6, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BA1), value = 7, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BA2), value = 8, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BA3), value = 9, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BA4), value = 10, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BA5), value = 11, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BA6), value = 12, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BA7), value = 13, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BA8), value = 14, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BA9), value = 15, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BAA), value = 16, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BAC), value = 17, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BAD), value = 18, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BAE), value = 19, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BAF), value = 20, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BB1), value = 21, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BB0), value = 22, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BB2), value = 255, flags = RESET_REQUIRED;
      endoneof;

      
      suppressif NOT ideqval SETUP_DATA.MipiCam_Link4_SensorModel == 255;
         string varid = SETUP_DATA.MipiCam_Link4_UserHid,
          prompt   = STRING_TOKEN(0x1BB3),
          help     = STRING_TOKEN(0x1BB3),
          minsize  = 6,
          maxsize  = 20,
        endstring;
      endif;

      oneof varid     = SETUP_DATA.MipiCam_Link4_LanesClkDiv,
        prompt      = STRING_TOKEN(0x1A12),
        help        = STRING_TOKEN(0x1A0D),
        option text = STRING_TOKEN(0x1A14), value = 0x00, flags = DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1A15), value = 0x02, flags =  RESET_REQUIRED;
        option text = STRING_TOKEN(0x1A16), value = 0x03, flags =  RESET_REQUIRED;
        option text = STRING_TOKEN(0x1A17), value = 0x04, flags =  RESET_REQUIRED;
        option text = STRING_TOKEN(0x1A18), value = 0x06, flags =  RESET_REQUIRED;
        option text = STRING_TOKEN(0x1A19), value = 0x07, flags =  RESET_REQUIRED;
      endoneof;

      
      oneof varid = SETUP_DATA.MipiCam_Link4_DriverData_CrdVersion,
        prompt   = STRING_TOKEN(0x1B49),
        help     = STRING_TOKEN(0x1B44),
        option text = STRING_TOKEN(0x1B4D), value = 0x10, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B4E), value = 0x20, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B4F), value = 0x30, flags = DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B50), value = 0x40, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B51), value = 0x50, flags = RESET_REQUIRED;
      endoneof;

      
      oneof varid = SETUP_DATA.MipiCam_Link4_DriverData_ControlLogic,
        prompt   = STRING_TOKEN(0x1C1E),
        help     = STRING_TOKEN(0x1C19),
        option text = STRING_TOKEN(0x1BC3), value = 0xFF, flags = DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BBD), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BBE), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BBF), value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BC0), value = 3, flags = RESET_REQUIRED;
        suppressif NOT ideqval SETUP_DATA.MipiCam4Enable == 1;
          option text = STRING_TOKEN(0x1BC1), value = 3, flags = RESET_REQUIRED;
        endif
        suppressif NOT ideqval SETUP_DATA.MipiCam5Enable == 1;
          option text = STRING_TOKEN(0x1BC2), value = 3, flags = RESET_REQUIRED;
        endif
      endoneof;

      
      oneof varid     = SETUP_DATA.MipiCam_Link4_CameraPhysicalLocation,
        prompt      = STRING_TOKEN(0x1AFB),
        help        = STRING_TOKEN(0x1AF6),
        option text = STRING_TOKEN(0x1B03), value = 0x61, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B04), value = 0x69, flags = DEFAULT | RESET_REQUIRED;
      endoneof;

      
      oneof varid     = SETUP_DATA.MipiCam_Link4_DriverData_FlashSupport,
        prompt      = STRING_TOKEN(0x1B0D),
        help        = STRING_TOKEN(0x1B08),
        option text = STRING_TOKEN(0x1B0F), value = 0, flags = DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0004), value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 3, flags = RESET_REQUIRED;
      endoneof;

      
      oneof varid   = SETUP_DATA.MipiCam_Link4_DriverData_PrivacyLed,
        prompt      = STRING_TOKEN(0x1B15),
        help        = STRING_TOKEN(0x1B10),
        option text = STRING_TOKEN(0x1B17), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B18), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B19), value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B1A), value = 3, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B1B), value = 4, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B1C), value = 5, flags = RESET_REQUIRED;
      endoneof;

      
      oneof varid     = SETUP_DATA.MipiCam_Link4_DriverData_Degree,
        prompt      = STRING_TOKEN(0x1B22),
        help        = STRING_TOKEN(0x1B1D),
        option text = STRING_TOKEN(0x1B24), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        
        option text = STRING_TOKEN(0x1B26), value = 2, flags = RESET_REQUIRED;
        
        option text = STRING_TOKEN(0x1B28), value = 4, flags = RESET_REQUIRED;
        
        option text = STRING_TOKEN(0x1B2A), value = 6, flags = RESET_REQUIRED;
        
      endoneof;

      
      suppressif NOT ideqval SETUP_DATA.MipiCam_Link4_DriverData_CrdVersion == 0x50;
        oneof varid   = SETUP_DATA.MipiCam_Link4_DriverData_PmicPosition,
          prompt      = STRING_TOKEN(0x1B31),
          help        = STRING_TOKEN(0x1B2C),
          option text = STRING_TOKEN(0x1B32), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1B33), value = 1, flags = RESET_REQUIRED;
        endoneof;
      endif;

      
      suppressif NOT ideqval SETUP_DATA.MipiCam_Link4_DriverData_PmicPosition == 1;
        oneof varid   = SETUP_DATA.MipiCam_Link4_DriverData_VoltageRail,
          prompt      = STRING_TOKEN(0x1B39),
          help        = STRING_TOKEN(0x1B34),
          option text = STRING_TOKEN(0x1B3B), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1B3C), value = 1, flags = RESET_REQUIRED;
        endoneof;
      endif;

      
      string varid    = SETUP_DATA.MipiCam_Link4_ModuleName,
        prompt   = STRING_TOKEN(0x1AFD),
        help     = STRING_TOKEN(0x1AFD),
        minsize  = 1,
        maxsize  = 15,
      endstring;

      
      numeric varid     = SETUP_DATA.MipiCam_Link4_DriverData_LinkUsed,
        prompt      = STRING_TOKEN(0x1B57),
        help        = STRING_TOKEN(0x1B52),
        flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
        minimum  = 0,
        maximum  = 10,
        step     = 1,
        default  = 2,
      endnumeric;

      
      oneof varid     = SETUP_DATA.MipiCam_Link4_DriverData_LaneUsed,
        prompt      = STRING_TOKEN(0x1B5E),
        help        = STRING_TOKEN(0x1B59),
        option text = STRING_TOKEN(0x1B8E), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B8F), value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B90), value = 3, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B91), value = 4, flags = DEFAULT | RESET_REQUIRED;
      endoneof;

      
      oneof varid     = SETUP_DATA.MipiCam_Link4_DriverData_CsiSpeed,
        prompt      = STRING_TOKEN(0x1B60),
        help        = STRING_TOKEN(0x1B61),
        option text = STRING_TOKEN(0x1B93), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B94),        value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B95),        value = 2, flags = DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B96),          value = 3, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B97),        value = 4, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B98),          value = 5, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B99),    value = 6, flags = RESET_REQUIRED;
      endoneof;

      
      numeric varid     = SETUP_DATA.MipiCam_Link4_DriverData_Mclk,
        prompt      = STRING_TOKEN(0x1B63),
        help        = STRING_TOKEN(0x1B62),
        flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
        minimum  = 6000000,
        maximum  = 27000000,
        step     = 100000,
        default  = 19200000,
      endnumeric;

      
      oneof varid     = SETUP_DATA.MipiCam_Link4_DriverData_EepromType,
        prompt      = STRING_TOKEN(0x1B69),
        help        = STRING_TOKEN(0x1B64),
        option text = STRING_TOKEN(0x1B72), value = 0x00, flags = DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B73), value = 0x01, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B74), value = 0x02, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B75), value = 0x03, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B76), value = 0x04, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B77), value = 0x05, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B78), value = 0x06, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B79), value = 0x07, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B7A), value = 0x08, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B7B), value = 0x09, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B7C), value = 0x0A, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B7D), value = 0x10, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B7E), value = 0x11, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B7F), value = 0x12, flags = RESET_REQUIRED;
      endoneof;

      
      oneof varid     = SETUP_DATA.MipiCam_Link4_DriverData_VcmType,
        prompt      = STRING_TOKEN(0x1B70),
        help        = STRING_TOKEN(0x1B6B),
        option text = STRING_TOKEN(0x1B80),        value = 0x00, flags = DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B81),      value = 0x01, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B82),      value = 0x02, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B83),      value = 0x03, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B85),      value = 0x04, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B84),      value = 0x05, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B86),     value = 0x06, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B87),      value = 0x07, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B88),  value = 0x08, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B89), value = 0x09, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B8A),   value = 0x0A, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B8B),   value = 0x0B, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B8C),      value = 0x0F, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B8D),  value = 0x10, flags = RESET_REQUIRED;
      endoneof;

      
      numeric varid     = SETUP_DATA.MipiCam_Link4_I2cDevicesEnabled,
        prompt      = STRING_TOKEN(0x1A08),
        help        = STRING_TOKEN(0x1A03),
        flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
        minimum  = 0,
        maximum  = 12,
        step     = 1,
        default  = 6,
      endnumeric;

      suppressif ideqval SETUP_DATA.MipiCam_Link4_I2cDevicesEnabled == 0;
        
        oneof varid = SETUP_DATA.MipiCam_Link4_I2cChannel,
          prompt   = STRING_TOKEN(0x1A2B),
          help        = STRING_TOKEN(0x1A26),
          option text = STRING_TOKEN(0x1BB4), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1BB5), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1BB6), value = 2, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1BB7), value = 3, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1BB8), value = 4, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1BB9), value = 5, flags = RESET_REQUIRED;



#line 8767 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaSetup.hfr"
        endoneof;

        
        subtitle text = STRING_TOKEN(0x1A1A);

        
        numeric varid = SETUP_DATA.MipiCam_Link4_I2cAddress[0],
          prompt   = STRING_TOKEN(0x1A62),
          help     = STRING_TOKEN(0x1A2F),
          flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
          minimum  = 0,
          maximum  = 0x7F,
          step     = 1,
          default  = 0x10,
        endnumeric;

        
        oneof varid = SETUP_DATA.MipiCam_Link4_I2cDeviceType[0],
          prompt   = STRING_TOKEN(0x1BF5),
          help        = STRING_TOKEN(0x1BC4),
          option text = STRING_TOKEN(0x1C0D), value = 0x00, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0E), value = 0x01, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0F), value = 0x02, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C10), value = 0x03, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C11), value = 0x04, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C12), value = 0x05, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C13), value = 0x06, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C14), value = 0x07, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C15), value = 0x08, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C16), value = 0x09, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C17), value = 0x0A, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C18), value = 0x0C, flags = RESET_REQUIRED;
        endoneof;
      endif ;

      
      suppressif ideqvallist SETUP_DATA.MipiCam_Link4_I2cDevicesEnabled == 0 1;
        subtitle text = STRING_TOKEN(0x1A1B);
        
        numeric varid = SETUP_DATA.MipiCam_Link4_I2cAddress[1],
          prompt   = STRING_TOKEN(0x1A63),
          help     = STRING_TOKEN(0x1A2F),
          flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
          minimum  = 0,
          maximum  = 0x7F,
          step     = 1,
          default  = 0x0C,
        endnumeric;
        
        oneof varid = SETUP_DATA.MipiCam_Link4_I2cDeviceType[1],
          prompt   = STRING_TOKEN(0x1BF6),
          help        = STRING_TOKEN(0x1BC4),
          option text = STRING_TOKEN(0x1C0D), value = 0x00, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0E), value = 0x01, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0F), value = 0x02, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C10), value = 0x03, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C11), value = 0x04, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C12), value = 0x05, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C13), value = 0x06, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C14), value = 0x07, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C15), value = 0x08, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C16), value = 0x09, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C17), value = 0x0A, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C18), value = 0x0C, flags = RESET_REQUIRED;
        endoneof;
      endif;

      
      suppressif ideqvallist SETUP_DATA.MipiCam_Link4_I2cDevicesEnabled == 0 1 2;
        subtitle text = STRING_TOKEN(0x1A1C);
        
        numeric varid = SETUP_DATA.MipiCam_Link4_I2cAddress[2],
          prompt   = STRING_TOKEN(0x1A64),
          help     = STRING_TOKEN(0x1A2F),
          flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
          minimum  = 0,
          maximum  = 0x7F,
          step     = 1,
          default  = 0x50,
        endnumeric;
        
        oneof varid = SETUP_DATA.MipiCam_Link4_I2cDeviceType[2],
          prompt   = STRING_TOKEN(0x1BF7),
          help        = STRING_TOKEN(0x1BC4),
          option text = STRING_TOKEN(0x1C0D), value = 0x00, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0E), value = 0x01, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0F), value = 0x02, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C10), value = 0x03, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C11), value = 0x04, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C12), value = 0x05, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C13), value = 0x06, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C14), value = 0x07, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C15), value = 0x08, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C16), value = 0x09, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C17), value = 0x0A, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C18), value = 0x0C, flags = RESET_REQUIRED;
        endoneof;
      endif;

      
      suppressif ideqvallist SETUP_DATA.MipiCam_Link4_I2cDevicesEnabled == 0 1 2 3;
        subtitle text = STRING_TOKEN(0x1A1D);
        
        numeric varid = SETUP_DATA.MipiCam_Link4_I2cAddress[3],
          prompt   = STRING_TOKEN(0x1A65),
          help     = STRING_TOKEN(0x1A2F),
          flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
          minimum  = 0,
          maximum  = 0x7F,
          step     = 1,
          default  = 0x51,
        endnumeric;
        
        oneof varid = SETUP_DATA.MipiCam_Link4_I2cDeviceType[3],
          prompt   = STRING_TOKEN(0x1BF8),
          help        = STRING_TOKEN(0x1BC4),
          option text = STRING_TOKEN(0x1C0D), value = 0x00, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0E), value = 0x01, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0F), value = 0x02, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C10), value = 0x03, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C11), value = 0x04, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C12), value = 0x05, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C13), value = 0x06, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C14), value = 0x07, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C15), value = 0x08, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C16), value = 0x09, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C17), value = 0x0A, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C18), value = 0x0C, flags = RESET_REQUIRED;
        endoneof;
      endif;

      
      suppressif ideqvallist SETUP_DATA.MipiCam_Link4_I2cDevicesEnabled == 0 1 2 3 4;
        subtitle text = STRING_TOKEN(0x1A1E);
        
        numeric varid = SETUP_DATA.MipiCam_Link4_I2cAddress[4],
          prompt   = STRING_TOKEN(0x1A66),
          help     = STRING_TOKEN(0x1A2F),
          flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
          minimum  = 0,
          maximum  = 0x7F,
          step     = 1,
          default  = 0x52,
        endnumeric;
        
        oneof varid = SETUP_DATA.MipiCam_Link4_I2cDeviceType[4],
          prompt   = STRING_TOKEN(0x1BF9),
          help        = STRING_TOKEN(0x1BC4),
          option text = STRING_TOKEN(0x1C0D), value = 0x00, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0E), value = 0x01, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0F), value = 0x02, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C10), value = 0x03, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C11), value = 0x04, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C12), value = 0x05, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C13), value = 0x06, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C14), value = 0x07, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C15), value = 0x08, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C16), value = 0x09, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C17), value = 0x0A, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C18), value = 0x0C, flags = RESET_REQUIRED;
        endoneof;
      endif;

      
      suppressif ideqvallist SETUP_DATA.MipiCam_Link4_I2cDevicesEnabled == 0 1 2 3 4 5;
        subtitle text = STRING_TOKEN(0x1A1F);
        
        numeric varid = SETUP_DATA.MipiCam_Link4_I2cAddress[5],
          prompt   = STRING_TOKEN(0x1A67),
          help     = STRING_TOKEN(0x1A2F),
          flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
          minimum  = 0,
          maximum  = 0x7F,
          step     = 1,
          default  = 0x53,
        endnumeric;
        
        oneof varid = SETUP_DATA.MipiCam_Link4_I2cDeviceType[5],
          prompt   = STRING_TOKEN(0x1BFA),
          help        = STRING_TOKEN(0x1BC4),
          option text = STRING_TOKEN(0x1C0D), value = 0x00, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0E), value = 0x01, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0F), value = 0x02, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C10), value = 0x03, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C11), value = 0x04, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C12), value = 0x05, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C13), value = 0x06, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C14), value = 0x07, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C15), value = 0x08, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C16), value = 0x09, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C17), value = 0x0A, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C18), value = 0x0C, flags = RESET_REQUIRED;
        endoneof;
      endif;

      
      suppressif ideqvallist SETUP_DATA.MipiCam_Link4_I2cDevicesEnabled == 0 1 2 3 4 5 6;
        subtitle text = STRING_TOKEN(0x1A20);
        
        numeric varid = SETUP_DATA.MipiCam_Link4_I2cAddress[6],
          prompt   = STRING_TOKEN(0x1A68),
          help     = STRING_TOKEN(0x1A2F),
          flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
          minimum  = 0,
          maximum  = 0x7F,
          step     = 1,
          default  = 0x54,
        endnumeric;
        
        oneof varid = SETUP_DATA.MipiCam_Link4_I2cDeviceType[6],
          prompt   = STRING_TOKEN(0x1BFB),
          help        = STRING_TOKEN(0x1BC4),
          option text = STRING_TOKEN(0x1C0D), value = 0x00, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0E), value = 0x01, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0F), value = 0x02, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C10), value = 0x03, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C11), value = 0x04, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C12), value = 0x05, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C13), value = 0x06, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C14), value = 0x07, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C15), value = 0x08, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C16), value = 0x09, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C17), value = 0x0A, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C18), value = 0x0C, flags = RESET_REQUIRED;
        endoneof;
      endif;

      
      suppressif ideqvallist SETUP_DATA.MipiCam_Link4_I2cDevicesEnabled == 0 1 2 3 4 5 6 7;
        subtitle text = STRING_TOKEN(0x1A21);
        
        numeric varid = SETUP_DATA.MipiCam_Link4_I2cAddress[7],
          prompt   = STRING_TOKEN(0x1A69),
          help     = STRING_TOKEN(0x1A2F),
          flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
          minimum  = 0,
          maximum  = 0x7F,
          step     = 1,
          default  = 0x55,
        endnumeric;
        
        oneof varid = SETUP_DATA.MipiCam_Link4_I2cDeviceType[7],
          prompt   = STRING_TOKEN(0x1BFC),
          help        = STRING_TOKEN(0x1BC4),
          option text = STRING_TOKEN(0x1C0D), value = 0x00, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0E), value = 0x01, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0F), value = 0x02, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C10), value = 0x03, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C11), value = 0x04, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C12), value = 0x05, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C13), value = 0x06, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C14), value = 0x07, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C15), value = 0x08, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C16), value = 0x09, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C17), value = 0x0A, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C18), value = 0x0C, flags = RESET_REQUIRED;
        endoneof;
      endif;

      
      suppressif ideqvallist SETUP_DATA.MipiCam_Link4_I2cDevicesEnabled == 0 1 2 3 4 5 6 7 8;
        subtitle text = STRING_TOKEN(0x1A22);
        
        numeric varid = SETUP_DATA.MipiCam_Link4_I2cAddress[8],
          prompt   = STRING_TOKEN(0x1A6A),
          help     = STRING_TOKEN(0x1A2F),
          flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
          minimum  = 0,
          maximum  = 0x7F,
          step     = 1,
          default  = 0x56,
        endnumeric;
        
        oneof varid = SETUP_DATA.MipiCam_Link4_I2cDeviceType[8],
          prompt   = STRING_TOKEN(0x1BFD),
          help        = STRING_TOKEN(0x1BC4),
          option text = STRING_TOKEN(0x1C0D), value = 0x00, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0E), value = 0x01, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0F), value = 0x02, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C10), value = 0x03, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C11), value = 0x04, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C12), value = 0x05, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C13), value = 0x06, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C14), value = 0x07, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C15), value = 0x08, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C16), value = 0x09, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C17), value = 0x0A, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C18), value = 0x0C, flags = RESET_REQUIRED;
        endoneof;
      endif;

      
      suppressif ideqvallist SETUP_DATA.MipiCam_Link4_I2cDevicesEnabled == 0 1 2 3 4 5 6 7 8 9;
        subtitle text = STRING_TOKEN(0x1A23);
        
        numeric varid = SETUP_DATA.MipiCam_Link4_I2cAddress[9],
          prompt   = STRING_TOKEN(0x1A6B),
          help     = STRING_TOKEN(0x1A2F),
          flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
          minimum  = 0,
          maximum  = 0x7F,
          step     = 1,
          default  = 0x57,
        endnumeric;
        
        oneof varid = SETUP_DATA.MipiCam_Link4_I2cDeviceType[9],
          prompt   = STRING_TOKEN(0x1BFE),
          help        = STRING_TOKEN(0x1BC4),
          option text = STRING_TOKEN(0x1C0D), value = 0x00, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0E), value = 0x01, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0F), value = 0x02, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C10), value = 0x03, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C11), value = 0x04, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C12), value = 0x05, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C13), value = 0x06, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C14), value = 0x07, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C15), value = 0x08, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C16), value = 0x09, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C17), value = 0x0A, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C18), value = 0x0C, flags = RESET_REQUIRED;
        endoneof;
      endif;

      
      suppressif ideqvallist SETUP_DATA.MipiCam_Link4_I2cDevicesEnabled == 0 1 2 3 4 5 6 7 8 9 10;
        subtitle text = STRING_TOKEN(0x1A24);
        
        numeric varid = SETUP_DATA.MipiCam_Link4_I2cAddress[10],
          prompt   = STRING_TOKEN(0x1A6C),
          help     = STRING_TOKEN(0x1A2F),
          flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
          minimum  = 0,
          maximum  = 0x7F,
          step     = 1,
          default  = 0x58,
        endnumeric;
        
        oneof varid = SETUP_DATA.MipiCam_Link4_I2cDeviceType[10],
          prompt   = STRING_TOKEN(0x1BFF),
          help        = STRING_TOKEN(0x1BC4),
          option text = STRING_TOKEN(0x1C0D), value = 0x00, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0E), value = 0x01, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0F), value = 0x02, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C10), value = 0x03, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C11), value = 0x04, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C12), value = 0x05, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C13), value = 0x06, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C14), value = 0x07, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C15), value = 0x08, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C16), value = 0x09, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C17), value = 0x0A, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C18), value = 0x0C, flags = RESET_REQUIRED;
        endoneof;
      endif;

      
      suppressif ideqvallist SETUP_DATA.MipiCam_Link4_I2cDevicesEnabled == 0 1 2 3 4 5 6 7 8 9 10 11;
        subtitle text = STRING_TOKEN(0x1A25);
        
        numeric varid = SETUP_DATA.MipiCam_Link4_I2cAddress[11],
          prompt   = STRING_TOKEN(0x1A6D),
          help     = STRING_TOKEN(0x1A2F),
          flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
          minimum  = 0,
          maximum  = 0x7F,
          step     = 1,
          default  = 0x59,
        endnumeric;
        
        oneof varid = SETUP_DATA.MipiCam_Link4_I2cDeviceType[11],
          prompt   = STRING_TOKEN(0x1C00),
          help        = STRING_TOKEN(0x1BC4),
          option text = STRING_TOKEN(0x1C0D), value = 0x00, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0E), value = 0x01, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0F), value = 0x02, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C10), value = 0x03, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C11), value = 0x04, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C12), value = 0x05, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C13), value = 0x06, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C14), value = 0x07, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C15), value = 0x08, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C16), value = 0x09, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C17), value = 0x0A, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C18), value = 0x0C, flags = DEFAULT | RESET_REQUIRED;
        endoneof;
      endif;

      
      oneof varid     = SETUP_DATA.MipiCam_Link4_FlashDriverSelection,
        prompt      = STRING_TOKEN(0x1B3E),
        help        = STRING_TOKEN(0x1B3D),
        option text = STRING_TOKEN(0x1B3F),      value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B40),      value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B41), value = 2, flags = RESET_REQUIRED;
      endoneof;

      
      suppressif NOT ideqval SETUP_DATA.MipiCam_Link4_FlashDriverSelection == 1;
      oneof varid     = SETUP_DATA.MipiCam_Link4_DriverData_FlashID,
        prompt      = STRING_TOKEN(0x1B43),
        help        = STRING_TOKEN(0x1B42),
        option text = STRING_TOKEN(0x1C35),      value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1C36),      value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1C37),      value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1C38),      value = 3, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1C39),      value = 4, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1C3A),      value = 5, flags = RESET_REQUIRED;
      endoneof;
      endif;
    endform;

    
    form formid = 146,
      title    = STRING_TOKEN(0x19FB);
      subtitle text = STRING_TOKEN(0x19E9);

      oneof varid   = SETUP_DATA.MipiCam_Link5_SensorModel,
        prompt      = STRING_TOKEN(0x1A02),
        help        = STRING_TOKEN(0x19FC),
        option text = STRING_TOKEN(0x1B9A), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B9B), value = 1, flags = DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B9C), value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B9D), value = 3, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B9E), value = 4, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B9F), value = 5, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BA0), value = 6, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BA1), value = 7, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BA2), value = 8, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BA3), value = 9, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BA4), value = 10, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BA5), value = 11, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BA6), value = 12, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BA7), value = 13, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BA8), value = 14, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BA9), value = 15, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BAA), value = 16, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BAC), value = 17, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BAD), value = 18, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BAE), value = 19, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BAF), value = 20, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BB1), value = 21, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BB0), value = 22, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BB2), value = 255, flags = RESET_REQUIRED;
      endoneof;

      
      suppressif NOT ideqval SETUP_DATA.MipiCam_Link5_SensorModel == 255;
         string varid = SETUP_DATA.MipiCam_Link5_UserHid,
          prompt   = STRING_TOKEN(0x1BB3),
          help     = STRING_TOKEN(0x1BB3),
          minsize  = 6,
          maxsize  = 20,
        endstring;
      endif;

      oneof varid     = SETUP_DATA.MipiCam_Link5_LanesClkDiv,
        prompt      = STRING_TOKEN(0x1A13),
        help        = STRING_TOKEN(0x1A0D),
        option text = STRING_TOKEN(0x1A14), value = 0x00, flags = DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1A15), value = 0x02, flags =  RESET_REQUIRED;
        option text = STRING_TOKEN(0x1A16), value = 0x03, flags =  RESET_REQUIRED;
        option text = STRING_TOKEN(0x1A17), value = 0x04, flags =  RESET_REQUIRED;
        option text = STRING_TOKEN(0x1A18), value = 0x06, flags =  RESET_REQUIRED;
        option text = STRING_TOKEN(0x1A19), value = 0x07, flags =  RESET_REQUIRED;
      endoneof;

      
      oneof varid = SETUP_DATA.MipiCam_Link5_DriverData_CrdVersion,
        prompt   = STRING_TOKEN(0x1B4A),
        help     = STRING_TOKEN(0x1B44),
        option text = STRING_TOKEN(0x1B4D), value = 0x10, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B4E), value = 0x20, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B4F), value = 0x30, flags = DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B50), value = 0x40, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B51), value = 0x50, flags = RESET_REQUIRED;
      endoneof;

      
      oneof varid = SETUP_DATA.MipiCam_Link5_DriverData_ControlLogic,
        prompt   = STRING_TOKEN(0x1C1F),
        help     = STRING_TOKEN(0x1C19),
        option text = STRING_TOKEN(0x1BC3), value = 0xFF, flags = DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BBD), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BBE), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BBF), value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BC0), value = 3, flags = RESET_REQUIRED;
        suppressif NOT ideqval SETUP_DATA.MipiCam4Enable == 1;
          option text = STRING_TOKEN(0x1BC1), value = 3, flags = RESET_REQUIRED;
        endif
        suppressif NOT ideqval SETUP_DATA.MipiCam5Enable == 1;
          option text = STRING_TOKEN(0x1BC2), value = 3, flags = RESET_REQUIRED;
        endif
      endoneof;

      
      oneof varid     = SETUP_DATA.MipiCam_Link5_CameraPhysicalLocation,
        prompt      = STRING_TOKEN(0x1AFC),
        help        = STRING_TOKEN(0x1AF6),
        option text = STRING_TOKEN(0x1B03), value = 0x61, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B04), value = 0x69, flags = DEFAULT | RESET_REQUIRED;
      endoneof;

      
      oneof varid     = SETUP_DATA.MipiCam_Link5_DriverData_FlashSupport,
        prompt      = STRING_TOKEN(0x1B0E),
        help        = STRING_TOKEN(0x1B08),
        option text = STRING_TOKEN(0x1B0F), value = 0, flags = DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0004), value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 3, flags = RESET_REQUIRED;
      endoneof;

      
      oneof varid   = SETUP_DATA.MipiCam_Link5_DriverData_PrivacyLed,
        prompt      = STRING_TOKEN(0x1B16),
        help        = STRING_TOKEN(0x1B10),
        option text = STRING_TOKEN(0x1B17), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B18), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B19), value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B1A), value = 3, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B1B), value = 4, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B1C), value = 5, flags = RESET_REQUIRED;
      endoneof;

      
      oneof varid     = SETUP_DATA.MipiCam_Link5_DriverData_Degree,
        prompt      = STRING_TOKEN(0x1B23),
        help        = STRING_TOKEN(0x1B1D),
        option text = STRING_TOKEN(0x1B24), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        
        option text = STRING_TOKEN(0x1B26), value = 2, flags = RESET_REQUIRED;
        
        option text = STRING_TOKEN(0x1B28), value = 4, flags = RESET_REQUIRED;
        
        option text = STRING_TOKEN(0x1B2A), value = 6, flags = RESET_REQUIRED;
        
      endoneof;

      
      suppressif NOT ideqval SETUP_DATA.MipiCam_Link5_DriverData_CrdVersion == 0x50;
        oneof varid   = SETUP_DATA.MipiCam_Link5_DriverData_PmicPosition,
          prompt      = STRING_TOKEN(0x1B30),
          help        = STRING_TOKEN(0x1B2C),
          option text = STRING_TOKEN(0x1B32), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1B33), value = 1, flags = RESET_REQUIRED;
        endoneof;
      endif;

      
      suppressif NOT ideqval SETUP_DATA.MipiCam_Link5_DriverData_PmicPosition == 1;
        oneof varid   = SETUP_DATA.MipiCam_Link5_DriverData_VoltageRail,
          prompt      = STRING_TOKEN(0x1B3A),
          help        = STRING_TOKEN(0x1B34),
          option text = STRING_TOKEN(0x1B3B), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1B3C), value = 1, flags = RESET_REQUIRED;
        endoneof;
      endif;

      
      string varid    = SETUP_DATA.MipiCam_Link5_ModuleName,
        prompt   = STRING_TOKEN(0x1AFD),
        help     = STRING_TOKEN(0x1AFD),
        minsize  = 1,
        maxsize  = 15,
      endstring;

      
      numeric varid     = SETUP_DATA.MipiCam_Link5_DriverData_LinkUsed,
        prompt      = STRING_TOKEN(0x1B58),
        help        = STRING_TOKEN(0x1B52),
        flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
        minimum  = 0,
        maximum  = 10,
        step     = 1,
        default  = 1,
      endnumeric;

      
      oneof varid     = SETUP_DATA.MipiCam_Link5_DriverData_LaneUsed,
        prompt      = STRING_TOKEN(0x1B5F),
        help        = STRING_TOKEN(0x1B59),
        option text = STRING_TOKEN(0x1B8E), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B8F), value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B90), value = 3, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B91), value = 4, flags = DEFAULT | RESET_REQUIRED;
      endoneof;

      
      oneof varid     = SETUP_DATA.MipiCam_Link5_DriverData_CsiSpeed,
        prompt      = STRING_TOKEN(0x1B60),
        help        = STRING_TOKEN(0x1B61),
        option text = STRING_TOKEN(0x1B93), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B94),        value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B95),        value = 2, flags = DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B96),          value = 3, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B97),        value = 4, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B98),          value = 5, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B99),    value = 6, flags = RESET_REQUIRED;
      endoneof;

      
      numeric varid     = SETUP_DATA.MipiCam_Link5_DriverData_Mclk,
        prompt      = STRING_TOKEN(0x1B63),
        help        = STRING_TOKEN(0x1B62),
        flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
        minimum  = 6000000,
        maximum  = 27000000,
        step     = 100000,
        default  = 19200000,
      endnumeric;

      
      oneof varid     = SETUP_DATA.MipiCam_Link5_DriverData_EepromType,
        prompt      = STRING_TOKEN(0x1B6A),
        help        = STRING_TOKEN(0x1B64),
        option text = STRING_TOKEN(0x1B72), value = 0x00, flags = DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B73), value = 0x01, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B74), value = 0x02, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B75), value = 0x03, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B76), value = 0x04, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B77), value = 0x05, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B78), value = 0x06, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B79), value = 0x07, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B7A), value = 0x08, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B7B), value = 0x09, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B7C), value = 0x0A, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B7D), value = 0x10, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B7E), value = 0x11, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B7F), value = 0x12, flags = RESET_REQUIRED;
      endoneof;

      
      oneof varid     = SETUP_DATA.MipiCam_Link5_DriverData_VcmType,
        prompt      = STRING_TOKEN(0x1B71),
        help        = STRING_TOKEN(0x1B6B),
        option text = STRING_TOKEN(0x1B80),        value = 0x00, flags = DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B81),      value = 0x01, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B82),      value = 0x02, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B83),      value = 0x03, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B85),      value = 0x04, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B84),      value = 0x05, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B86),     value = 0x06, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B87),      value = 0x07, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B88),  value = 0x08, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B89), value = 0x09, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B8A),   value = 0x0A, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B8B),   value = 0x0B, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B8C),      value = 0x0F, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B8D),  value = 0x10, flags = RESET_REQUIRED;
      endoneof;

      
      numeric varid     = SETUP_DATA.MipiCam_Link5_I2cDevicesEnabled,
        prompt      = STRING_TOKEN(0x1A09),
        help        = STRING_TOKEN(0x1A03),
        flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
        minimum  = 0,
        maximum  = 12,
        step     = 1,
        default  = 6,
      endnumeric;

      suppressif ideqval SETUP_DATA.MipiCam_Link5_I2cDevicesEnabled == 0;
        
        oneof varid = SETUP_DATA.MipiCam_Link5_I2cChannel,
          prompt   = STRING_TOKEN(0x1A2C),
          help        = STRING_TOKEN(0x1A26),
          option text = STRING_TOKEN(0x1BB4), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1BB5), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1BB6), value = 2, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1BB7), value = 3, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1BB8), value = 4, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1BB9), value = 5, flags = RESET_REQUIRED;



#line 9443 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaSetup.hfr"
        endoneof;

        
        subtitle text = STRING_TOKEN(0x1A1A);

        
        numeric varid = SETUP_DATA.MipiCam_Link5_I2cAddress[0],
          prompt   = STRING_TOKEN(0x1A6E),
          help     = STRING_TOKEN(0x1A2F),
          flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
          minimum  = 0,
          maximum  = 0x7F,
          step     = 1,
          default  = 0x10,
        endnumeric;

        
        oneof varid = SETUP_DATA.MipiCam_Link5_I2cDeviceType[0],
          prompt   = STRING_TOKEN(0x1C01),
          help        = STRING_TOKEN(0x1BC4),
          option text = STRING_TOKEN(0x1C0D), value = 0x00, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0E), value = 0x01, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0F), value = 0x02, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C10), value = 0x03, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C11), value = 0x04, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C12), value = 0x05, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C13), value = 0x06, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C14), value = 0x07, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C15), value = 0x08, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C16), value = 0x09, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C17), value = 0x0A, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C18), value = 0x0C, flags = RESET_REQUIRED;
        endoneof;
      endif ;

      
      suppressif ideqvallist SETUP_DATA.MipiCam_Link5_I2cDevicesEnabled == 0 1;
        subtitle text = STRING_TOKEN(0x1A1B);
        
        numeric varid = SETUP_DATA.MipiCam_Link5_I2cAddress[1],
          prompt   = STRING_TOKEN(0x1A6F),
          help     = STRING_TOKEN(0x1A2F),
          flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
          minimum  = 0,
          maximum  = 0x7F,
          step     = 1,
          default  = 0x0C,
        endnumeric;
        
        oneof varid = SETUP_DATA.MipiCam_Link5_I2cDeviceType[1],
          prompt   = STRING_TOKEN(0x1C02),
          help        = STRING_TOKEN(0x1BC4),
          option text = STRING_TOKEN(0x1C0D), value = 0x00, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0E), value = 0x01, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0F), value = 0x02, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C10), value = 0x03, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C11), value = 0x04, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C12), value = 0x05, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C13), value = 0x06, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C14), value = 0x07, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C15), value = 0x08, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C16), value = 0x09, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C17), value = 0x0A, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C18), value = 0x0C, flags = RESET_REQUIRED;
        endoneof;
      endif;

      
      suppressif ideqvallist SETUP_DATA.MipiCam_Link5_I2cDevicesEnabled == 0 1 2;
        subtitle text = STRING_TOKEN(0x1A1C);
        
        numeric varid = SETUP_DATA.MipiCam_Link5_I2cAddress[2],
          prompt   = STRING_TOKEN(0x1A70),
          help     = STRING_TOKEN(0x1A2F),
          flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
          minimum  = 0,
          maximum  = 0x7F,
          step     = 1,
          default  = 0x50,
        endnumeric;
        
        oneof varid = SETUP_DATA.MipiCam_Link5_I2cDeviceType[2],
          prompt   = STRING_TOKEN(0x1C03),
          help        = STRING_TOKEN(0x1BC4),
          option text = STRING_TOKEN(0x1C0D), value = 0x00, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0E), value = 0x01, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0F), value = 0x02, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C10), value = 0x03, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C11), value = 0x04, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C12), value = 0x05, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C13), value = 0x06, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C14), value = 0x07, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C15), value = 0x08, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C16), value = 0x09, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C17), value = 0x0A, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C18), value = 0x0C, flags = RESET_REQUIRED;
        endoneof;
      endif;

      
      suppressif ideqvallist SETUP_DATA.MipiCam_Link5_I2cDevicesEnabled == 0 1 2 3;
        subtitle text = STRING_TOKEN(0x1A1D);
        
        numeric varid = SETUP_DATA.MipiCam_Link5_I2cAddress[3],
          prompt   = STRING_TOKEN(0x1A71),
          help     = STRING_TOKEN(0x1A2F),
          flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
          minimum  = 0,
          maximum  = 0x7F,
          step     = 1,
          default  = 0x51,
        endnumeric;
        
        oneof varid = SETUP_DATA.MipiCam_Link5_I2cDeviceType[3],
          prompt   = STRING_TOKEN(0x1C04),
          help        = STRING_TOKEN(0x1BC4),
          option text = STRING_TOKEN(0x1C0D), value = 0x00, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0E), value = 0x01, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0F), value = 0x02, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C10), value = 0x03, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C11), value = 0x04, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C12), value = 0x05, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C13), value = 0x06, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C14), value = 0x07, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C15), value = 0x08, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C16), value = 0x09, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C17), value = 0x0A, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C18), value = 0x0C, flags = RESET_REQUIRED;
        endoneof;
      endif;

      
      suppressif ideqvallist SETUP_DATA.MipiCam_Link5_I2cDevicesEnabled == 0 1 2 3 4;
        subtitle text = STRING_TOKEN(0x1A1E);
        
        numeric varid = SETUP_DATA.MipiCam_Link5_I2cAddress[4],
          prompt   = STRING_TOKEN(0x1A72),
          help     = STRING_TOKEN(0x1A2F),
          flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
          minimum  = 0,
          maximum  = 0x7F,
          step     = 1,
          default  = 0x52,
        endnumeric;
        
        oneof varid = SETUP_DATA.MipiCam_Link5_I2cDeviceType[4],
          prompt   = STRING_TOKEN(0x1C05),
          help        = STRING_TOKEN(0x1BC4),
          option text = STRING_TOKEN(0x1C0D), value = 0x00, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0E), value = 0x01, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0F), value = 0x02, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C10), value = 0x03, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C11), value = 0x04, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C12), value = 0x05, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C13), value = 0x06, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C14), value = 0x07, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C15), value = 0x08, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C16), value = 0x09, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C17), value = 0x0A, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C18), value = 0x0C, flags = RESET_REQUIRED;
        endoneof;
      endif;

      
      suppressif ideqvallist SETUP_DATA.MipiCam_Link5_I2cDevicesEnabled == 0 1 2 3 4 5;
        subtitle text = STRING_TOKEN(0x1A1F);
        
        numeric varid = SETUP_DATA.MipiCam_Link5_I2cAddress[5],
          prompt   = STRING_TOKEN(0x1A73),
          help     = STRING_TOKEN(0x1A2F),
          flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
          minimum  = 0,
          maximum  = 0x7F,
          step     = 1,
          default  = 0x53,
        endnumeric;
        
        oneof varid = SETUP_DATA.MipiCam_Link5_I2cDeviceType[5],
          prompt   = STRING_TOKEN(0x1C06),
          help        = STRING_TOKEN(0x1BC4),
          option text = STRING_TOKEN(0x1C0D), value = 0x00, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0E), value = 0x01, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0F), value = 0x02, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C10), value = 0x03, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C11), value = 0x04, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C12), value = 0x05, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C13), value = 0x06, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C14), value = 0x07, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C15), value = 0x08, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C16), value = 0x09, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C17), value = 0x0A, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C18), value = 0x0C, flags = RESET_REQUIRED;
        endoneof;
      endif;

      
      suppressif ideqvallist SETUP_DATA.MipiCam_Link5_I2cDevicesEnabled == 0 1 2 3 4 5 6;
        subtitle text = STRING_TOKEN(0x1A20);
        
        numeric varid = SETUP_DATA.MipiCam_Link5_I2cAddress[6],
          prompt   = STRING_TOKEN(0x1A74),
          help     = STRING_TOKEN(0x1A2F),
          flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
          minimum  = 0,
          maximum  = 0x7F,
          step     = 1,
          default  = 0x54,
        endnumeric;
        
        oneof varid = SETUP_DATA.MipiCam_Link5_I2cDeviceType[6],
          prompt   = STRING_TOKEN(0x1C07),
          help        = STRING_TOKEN(0x1BC4),
          option text = STRING_TOKEN(0x1C0D), value = 0x00, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0E), value = 0x01, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0F), value = 0x02, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C10), value = 0x03, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C11), value = 0x04, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C12), value = 0x05, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C13), value = 0x06, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C14), value = 0x07, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C15), value = 0x08, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C16), value = 0x09, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C17), value = 0x0A, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C18), value = 0x0C, flags = RESET_REQUIRED;
        endoneof;
      endif;

      
      suppressif ideqvallist SETUP_DATA.MipiCam_Link5_I2cDevicesEnabled == 0 1 2 3 4 5 6 7;
        subtitle text = STRING_TOKEN(0x1A21);
        
        numeric varid = SETUP_DATA.MipiCam_Link5_I2cAddress[7],
          prompt   = STRING_TOKEN(0x1A75),
          help     = STRING_TOKEN(0x1A2F),
          flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
          minimum  = 0,
          maximum  = 0x7F,
          step     = 1,
          default  = 0x55,
        endnumeric;
        
        oneof varid = SETUP_DATA.MipiCam_Link5_I2cDeviceType[7],
          prompt   = STRING_TOKEN(0x1C08),
          help        = STRING_TOKEN(0x1BC4),
          option text = STRING_TOKEN(0x1C0D), value = 0x00, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0E), value = 0x01, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0F), value = 0x02, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C10), value = 0x03, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C11), value = 0x04, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C12), value = 0x05, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C13), value = 0x06, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C14), value = 0x07, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C15), value = 0x08, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C16), value = 0x09, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C17), value = 0x0A, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C18), value = 0x0C, flags = RESET_REQUIRED;
        endoneof;
      endif;

      
      suppressif ideqvallist SETUP_DATA.MipiCam_Link5_I2cDevicesEnabled == 0 1 2 3 4 5 6 7 8;
        subtitle text = STRING_TOKEN(0x1A22);
        
        numeric varid = SETUP_DATA.MipiCam_Link5_I2cAddress[8],
          prompt   = STRING_TOKEN(0x1A76),
          help     = STRING_TOKEN(0x1A2F),
          flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
          minimum  = 0,
          maximum  = 0x7F,
          step     = 1,
          default  = 0x56,
        endnumeric;
        
        oneof varid = SETUP_DATA.MipiCam_Link5_I2cDeviceType[8],
          prompt   = STRING_TOKEN(0x1C09),
          help        = STRING_TOKEN(0x1BC4),
          option text = STRING_TOKEN(0x1C0D), value = 0x00, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0E), value = 0x01, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0F), value = 0x02, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C10), value = 0x03, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C11), value = 0x04, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C12), value = 0x05, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C13), value = 0x06, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C14), value = 0x07, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C15), value = 0x08, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C16), value = 0x09, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C17), value = 0x0A, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C18), value = 0x0C, flags = RESET_REQUIRED;
        endoneof;
      endif;

      
      suppressif ideqvallist SETUP_DATA.MipiCam_Link5_I2cDevicesEnabled == 0 1 2 3 4 5 6 7 8 9;
        subtitle text = STRING_TOKEN(0x1A23);
        
        numeric varid = SETUP_DATA.MipiCam_Link5_I2cAddress[9],
          prompt   = STRING_TOKEN(0x1A77),
          help     = STRING_TOKEN(0x1A2F),
          flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
          minimum  = 0,
          maximum  = 0x7F,
          step     = 1,
          default  = 0x57,
        endnumeric;
        
        oneof varid = SETUP_DATA.MipiCam_Link5_I2cDeviceType[9],
          prompt   = STRING_TOKEN(0x1C0A),
          help        = STRING_TOKEN(0x1BC4),
          option text = STRING_TOKEN(0x1C0D), value = 0x00, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0E), value = 0x01, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0F), value = 0x02, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C10), value = 0x03, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C11), value = 0x04, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C12), value = 0x05, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C13), value = 0x06, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C14), value = 0x07, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C15), value = 0x08, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C16), value = 0x09, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C17), value = 0x0A, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C18), value = 0x0C, flags = RESET_REQUIRED;
        endoneof;
      endif;

      
      suppressif ideqvallist SETUP_DATA.MipiCam_Link5_I2cDevicesEnabled == 0 1 2 3 4 5 6 7 8 9 10;
        subtitle text = STRING_TOKEN(0x1A24);
        
        numeric varid = SETUP_DATA.MipiCam_Link5_I2cAddress[10],
          prompt   = STRING_TOKEN(0x1A78),
          help     = STRING_TOKEN(0x1A2F),
          flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
          minimum  = 0,
          maximum  = 0x7F,
          step     = 1,
          default  = 0x58,
        endnumeric;
        
        oneof varid = SETUP_DATA.MipiCam_Link5_I2cDeviceType[10],
          prompt   = STRING_TOKEN(0x1C0B),
          help        = STRING_TOKEN(0x1BC4),
          option text = STRING_TOKEN(0x1C0D), value = 0x00, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0E), value = 0x01, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0F), value = 0x02, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C10), value = 0x03, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C11), value = 0x04, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C12), value = 0x05, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C13), value = 0x06, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C14), value = 0x07, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C15), value = 0x08, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C16), value = 0x09, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C17), value = 0x0A, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C18), value = 0x0C, flags = RESET_REQUIRED;
        endoneof;
      endif;

      
      suppressif ideqvallist SETUP_DATA.MipiCam_Link5_I2cDevicesEnabled == 0 1 2 3 4 5 6 7 8 9 10 11;
        subtitle text = STRING_TOKEN(0x1A25);
        
        numeric varid = SETUP_DATA.MipiCam_Link5_I2cAddress[11],
          prompt   = STRING_TOKEN(0x1A79),
          help     = STRING_TOKEN(0x1A2F),
          flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
          minimum  = 0,
          maximum  = 0x7F,
          step     = 1,
          default  = 0x59,
        endnumeric;
        
        oneof varid = SETUP_DATA.MipiCam_Link5_I2cDeviceType[11],
          prompt   = STRING_TOKEN(0x1C0C),
          help        = STRING_TOKEN(0x1BC4),
          option text = STRING_TOKEN(0x1C0D), value = 0x00, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0E), value = 0x01, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C0F), value = 0x02, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C10), value = 0x03, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C11), value = 0x04, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C12), value = 0x05, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C13), value = 0x06, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C14), value = 0x07, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C15), value = 0x08, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C16), value = 0x09, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C17), value = 0x0A, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C18), value = 0x0C, flags = DEFAULT | RESET_REQUIRED;
        endoneof;
      endif;

      
      oneof varid     = SETUP_DATA.MipiCam_Link5_FlashDriverSelection,
        prompt      = STRING_TOKEN(0x1B3E),
        help        = STRING_TOKEN(0x1B3D),
        option text = STRING_TOKEN(0x1B3F),      value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B40),      value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B41), value = 2, flags = RESET_REQUIRED;
      endoneof;

      
      suppressif NOT ideqval SETUP_DATA.MipiCam_Link5_FlashDriverSelection == 1;
      oneof varid     = SETUP_DATA.MipiCam_Link5_DriverData_FlashID,
        prompt      = STRING_TOKEN(0x1B43),
        help        = STRING_TOKEN(0x1B42),
        option text = STRING_TOKEN(0x1C35),      value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1C36),      value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1C37),      value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1C38),      value = 3, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1C39),      value = 4, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1C3A),      value = 5, flags = RESET_REQUIRED;
      endoneof;
      endif;
    endform;

    
    form formid = 147,
      title    = STRING_TOKEN(0x1BBC);
      subtitle text = STRING_TOKEN(0x1BBC);

      
      oneof varid = SETUP_DATA.MipiCam_ControlLogic0_Type,
        prompt   = STRING_TOKEN(0x1C21),
        help     = STRING_TOKEN(0x1C20),

        option text = STRING_TOKEN(0x1C23), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1C24), value = 2, flags = DEFAULT | RESET_REQUIRED;



#line 9870 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaSetup.hfr"
        option text = STRING_TOKEN(0x1C25), value = 3, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1C26), value = 253, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1C27), value = 254, flags = RESET_REQUIRED;
      endoneof;

      
      oneof varid = SETUP_DATA.MipiCam_ControlLogic0_CrdVersion,
        prompt   = STRING_TOKEN(0x1B4B),
        help     = STRING_TOKEN(0x1B44),
        option text = STRING_TOKEN(0x1B4D), value = 0x10, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B4F), value = 0x30, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B50), value = 0x40, flags = RESET_REQUIRED;

        option text = STRING_TOKEN(0x1B4E), value = 0x20, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B51), value = 0x50, flags = DEFAULT | RESET_REQUIRED;



#line 9889 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaSetup.hfr"
      endoneof;

      
      oneof varid = SETUP_DATA.MipiCam_ControlLogic0_InputClock,
        prompt   = STRING_TOKEN(0x19EA),
        help     = STRING_TOKEN(0x19EA),
        option text = STRING_TOKEN(0x19EC), value = 0x20, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x19ED), value = 0x30, flags = RESET_REQUIRED;

        option text = STRING_TOKEN(0x19EB), value = 0x10, flags = DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN(0x19EE), value = 0x40, flags = RESET_REQUIRED;



#line 9904 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaSetup.hfr"
      endoneof;

      
      oneof varid = SETUP_DATA.MipiCam_ControlLogic0_PchClockSource,
        prompt   = STRING_TOKEN(0x1C2E),
        help     = STRING_TOKEN(0x1C2F),
        option text = STRING_TOKEN(0x1C30), value = 0, flags = DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1C31), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1C32), value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1C33), value = 3, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1C34), value = 4, flags = RESET_REQUIRED;
      endoneof;

      suppressif NOT ideqvallist SETUP_DATA.MipiCam_ControlLogic0_CrdVersion == 0x30 0x50;
        
        oneof varid   = SETUP_DATA.MipiCam_ControlLogic0_Pld,
          prompt      = STRING_TOKEN(0x1B06),
          help        = STRING_TOKEN(0x1B05),
          option text = STRING_TOKEN(0x1B03), value = 0x21, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1B04), value = 0x29, flags = DEFAULT | RESET_REQUIRED;
        endoneof;
      endif;

      suppressif ideqval SETUP_DATA.MipiCam_ControlLogic0_Type == 1;
        
        
        oneof varid = SETUP_DATA.MipiCam_ControlLogic0_I2cChannel,
          prompt   = STRING_TOKEN(0x1A2D),
          help        = STRING_TOKEN(0x1A26),
          option text = STRING_TOKEN(0x1BB4), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1BB5), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1BB6), value = 2, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1BB7), value = 3, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1BB8), value = 4, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1BB9), value = 5, flags = RESET_REQUIRED;



#line 9943 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaSetup.hfr"
        endoneof;

        
        numeric varid = SETUP_DATA.MipiCam_ControlLogic0_I2cAddress,
          prompt   = STRING_TOKEN(0x1A30),
          help     = STRING_TOKEN(0x1A2F),
          flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
          minimum  = 0,
          maximum  = 0x7F,
          step     = 1,
          default  = 0x4D, defaultstore = MyStandardDefault,
        endnumeric;

        suppressif NOT ideqvallist SETUP_DATA.MipiCam_ControlLogic0_Type == 2 3;
          
          oneof varid   = SETUP_DATA.MipiCam_ControlLogic0_Wled1Type,
            prompt      = STRING_TOKEN(0x1A95),
            help        = STRING_TOKEN(0x1A94),
            option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AA0), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AA1), value = 2, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AA2), value = 3, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AA3), value = 4, flags = RESET_REQUIRED;
          endoneof;

          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic0_Wled1FlashMaxCurrent,
            prompt      = STRING_TOKEN(0x1A7B),
            help        = STRING_TOKEN(0x1A7A),
            flags       = RESET_REQUIRED | DISPLAY_UINT_HEX,
            minimum     = 0,
            maximum     = 0x1F,
            step        = 1,
            default     = 0,
          endnumeric;

          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic0_Wled1TorchMaxCurrent,
            prompt      = STRING_TOKEN(0x1A88),
            help        = STRING_TOKEN(0x1A87),
            flags       = RESET_REQUIRED | DISPLAY_UINT_HEX,
            minimum     = 0,
            maximum     = 0x7,
            step        = 1,
            default     = 0,
          endnumeric;

          
          oneof varid   = SETUP_DATA.MipiCam_ControlLogic0_Wled2Type,
            prompt      = STRING_TOKEN(0x1A9A),
            help        = STRING_TOKEN(0x1A94),
            option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AA0), value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AA1), value = 2, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AA2), value = 3, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AA3), value = 4, flags = RESET_REQUIRED;
          endoneof;

          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic0_Wled2FlashMaxCurrent,
            prompt      = STRING_TOKEN(0x1A81),
            help        = STRING_TOKEN(0x1A7A),
            flags       = RESET_REQUIRED | DISPLAY_UINT_HEX,
            minimum     = 0,
            maximum     = 0x1F,
            step        = 1,
            default     = 0,
          endnumeric;

          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic0_Wled2TorchMaxCurrent,
            prompt      = STRING_TOKEN(0x1A8E),
            help        = STRING_TOKEN(0x1A87),
            flags       = RESET_REQUIRED | DISPLAY_UINT_HEX,
            minimum     = 0,
            maximum     = 0x7,
            step        = 1,
            default     = 0,
          endnumeric;

          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic0_SubPlatformId,
            prompt      = STRING_TOKEN(0x19EF),
            help        = STRING_TOKEN(0x19EF),
            flags       = RESET_REQUIRED | DISPLAY_UINT_HEX,
            minimum     = 0,
            maximum     = 0xF,
            step        = 1,
            default     = 0,
          endnumeric;
        endif;
      endif;

      suppressif ideqvallist SETUP_DATA.MipiCam_ControlLogic0_Type == 253 254;
        
        
        numeric varid = SETUP_DATA.MipiCam_ControlLogic0_GpioPinsEnabled,
          prompt      = STRING_TOKEN(0x1A0B),
          help        = STRING_TOKEN(0x1A0A),
          flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
          minimum  = 0,
          maximum  = 6,
          step     = 1,
          default  = 0,
        endnumeric;

        suppressif ideqval SETUP_DATA.MipiCam_ControlLogic0_GpioPinsEnabled == 0;
        
          subtitle text = STRING_TOKEN(0x1C28);
          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic0_GpioGroupPadNumber[0],
            prompt   = STRING_TOKEN(0x1AB2),
            help     = STRING_TOKEN(0x1AB1),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 23,
            step     = 1,

            default  = 22,


#line 10065 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaSetup.hfr"
          endnumeric;

          
          oneof varid = SETUP_DATA.MipiCam_ControlLogic0_GpioGroupNumber[0],
            prompt   = STRING_TOKEN(0x1ABF),
            help     = STRING_TOKEN(0x1ABE),
            option text = STRING_TOKEN(0x1AEB), value = 0x02, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEC), value = 0x00, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AED), value = 0x0B, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEF), value = 0x0E, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF0), value = 0x0C, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF1), value = 0x07, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF3), value = 0x06, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF4), value = 0x01, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF5), value = 0x09, flags = RESET_REQUIRED;

            option text = STRING_TOKEN(0x1AEE), value = 0x08, flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF2), value = 0x03, flags = RESET_REQUIRED;



#line 10087 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaSetup.hfr"
          endoneof;

          
          oneof varid = SETUP_DATA.MipiCam_ControlLogic0_GpioFunction[0],
            prompt    = STRING_TOKEN(0x1AA5),
            help      = STRING_TOKEN(0x1AA4),
            option text = STRING_TOKEN(0x1AE5), value = 0x00, flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE6), value = 0x0B, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE7), value = 0x00C, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE8), value = 0x0D, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE9), value = 0x02, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEA), value = 0x12, flags = RESET_REQUIRED;
          endoneof;

          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic0_GpioActiveValue[0],
            prompt   = STRING_TOKEN(0x1ACC),
            help     = STRING_TOKEN(0x1ACB),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 1,
            step     = 1,
            default  = 1,
          endnumeric;

          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic0_GpioInitialValue[0],
            prompt   = STRING_TOKEN(0x1AD9),
            help     = STRING_TOKEN(0x1AD8),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 1,
            step     = 1,
            default  = 0,
          endnumeric;

        endif;

        suppressif ideqvallist SETUP_DATA.MipiCam_ControlLogic0_GpioPinsEnabled == 0 1;
          
          subtitle text = STRING_TOKEN(0x1C29);
          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic0_GpioGroupPadNumber[1],
            prompt   = STRING_TOKEN(0x1AB3),
            help     = STRING_TOKEN(0x1AB1),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 23,
            step     = 1,
            default  = 11,
          endnumeric;

          
          oneof varid = SETUP_DATA.MipiCam_ControlLogic0_GpioGroupNumber[1],
            prompt   = STRING_TOKEN(0x1AC0),
            help     = STRING_TOKEN(0x1ABE),
            option text = STRING_TOKEN(0x1AEB), value = 0x02, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEC), value = 0x00, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AED), value = 0x0B, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEE), value = 0x08, flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEF), value = 0x0E, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF0), value = 0x0C, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF1), value = 0x07, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF2), value = 0x03, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF3), value = 0x06, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF4), value = 0x01, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF5), value = 0x09, flags = RESET_REQUIRED;
          endoneof;

          
          oneof varid = SETUP_DATA.MipiCam_ControlLogic0_GpioFunction[1],
            prompt    = STRING_TOKEN(0x1AA6),
            help      = STRING_TOKEN(0x1AA4),
            option text = STRING_TOKEN(0x1AE5), value = 0x00, flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE6), value = 0x0B, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE7), value = 0x00C, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE8), value = 0x0D, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE9), value = 0x02, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEA), value = 0x12, flags = RESET_REQUIRED;
          endoneof;

          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic0_GpioActiveValue[1],
            prompt   = STRING_TOKEN(0x1ACD),
            help     = STRING_TOKEN(0x1ACB),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 1,
            step     = 1,
            default  = 1,
          endnumeric;

          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic0_GpioInitialValue[1],
            prompt   = STRING_TOKEN(0x1ADA),
            help     = STRING_TOKEN(0x1AD8),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 1,
            step     = 1,
            default  = 0,
          endnumeric;
        endif;

        suppressif ideqvallist SETUP_DATA.MipiCam_ControlLogic0_GpioPinsEnabled == 0 1 2;
          
          subtitle text = STRING_TOKEN(0x1C2A);
          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic0_GpioGroupPadNumber[2],
            prompt   = STRING_TOKEN(0x1AB4),
            help     = STRING_TOKEN(0x1AB1),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 23,
            step     = 1,
            default  = 11,
          endnumeric;

          
          oneof varid = SETUP_DATA.MipiCam_ControlLogic0_GpioGroupNumber[2],
            prompt   = STRING_TOKEN(0x1AC1),
            help     = STRING_TOKEN(0x1ABE),
            option text = STRING_TOKEN(0x1AEB), value = 0x02, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEC), value = 0x00, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AED), value = 0x0B, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEE), value = 0x08, flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEF), value = 0x0E, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF0), value = 0x0C, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF1), value = 0x07, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF2), value = 0x03, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF3), value = 0x06, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF4), value = 0x01, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF5), value = 0x09, flags = RESET_REQUIRED;
          endoneof;

          
          oneof varid = SETUP_DATA.MipiCam_ControlLogic0_GpioFunction[2],
            prompt    = STRING_TOKEN(0x1AA7),
            help      = STRING_TOKEN(0x1AA4),
            option text = STRING_TOKEN(0x1AE5), value = 0x00, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE6), value = 0x0B, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE7), value = 0x00C, flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE8), value = 0x0D, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE9), value = 0x02, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEA), value = 0x12, flags = RESET_REQUIRED;
          endoneof;

          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic0_GpioActiveValue[2],
            prompt   = STRING_TOKEN(0x1ACE),
            help     = STRING_TOKEN(0x1ACB),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 1,
            step     = 1,
            default  = 1,
          endnumeric;

          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic0_GpioInitialValue[2],
            prompt   = STRING_TOKEN(0x1ADB),
            help     = STRING_TOKEN(0x1AD8),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 1,
            step     = 1,
            default  = 0,
          endnumeric;
        endif;


        suppressif ideqvallist SETUP_DATA.MipiCam_ControlLogic0_GpioPinsEnabled == 0 1 2 3;
          
          subtitle text = STRING_TOKEN(0x1C2B);
          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic0_GpioGroupPadNumber[3],
            prompt   = STRING_TOKEN(0x1AB5),
            help     = STRING_TOKEN(0x1AB1),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 23,
            step     = 1,
            default  = 11,
          endnumeric;

          
          oneof varid = SETUP_DATA.MipiCam_ControlLogic0_GpioGroupNumber[3],
            prompt   = STRING_TOKEN(0x1AC2),
            help     = STRING_TOKEN(0x1ABE),
            option text = STRING_TOKEN(0x1AEB), value = 0x02, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEC), value = 0x00, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AED), value = 0x0B, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEE), value = 0x08, flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEF), value = 0x0E, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF0), value = 0x0C, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF1), value = 0x07, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF2), value = 0x03, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF3), value = 0x06, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF4), value = 0x01, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF5), value = 0x09, flags = RESET_REQUIRED;
          endoneof;

          
          oneof varid = SETUP_DATA.MipiCam_ControlLogic0_GpioFunction[3],
            prompt    = STRING_TOKEN(0x1AA8),
            help      = STRING_TOKEN(0x1AA4),
            option text = STRING_TOKEN(0x1AE5), value = 0x00, flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE6), value = 0x0B, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE7), value = 0x00C, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE8), value = 0x0D, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE9), value = 0x02, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEA), value = 0x12, flags = RESET_REQUIRED;
          endoneof;

          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic0_GpioActiveValue[3],
            prompt   = STRING_TOKEN(0x1ACF),
            help     = STRING_TOKEN(0x1ACB),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 1,
            step     = 1,
            default  = 1,
          endnumeric;

          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic0_GpioInitialValue[3],
            prompt   = STRING_TOKEN(0x1ADC),
            help     = STRING_TOKEN(0x1AD8),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 1,
            step     = 1,
            default  = 0,
          endnumeric;
        endif;


        suppressif ideqvallist SETUP_DATA.MipiCam_ControlLogic0_GpioPinsEnabled == 0 1 2 3 4;
          
          subtitle text = STRING_TOKEN(0x1C2C);
          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic0_GpioGroupPadNumber[4],
            prompt   = STRING_TOKEN(0x1AB6),
            help     = STRING_TOKEN(0x1AB1),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 23,
            step     = 1,
            default  = 11,
          endnumeric;

          
          oneof varid = SETUP_DATA.MipiCam_ControlLogic0_GpioGroupNumber[4],
            prompt   = STRING_TOKEN(0x1AC3),
            help     = STRING_TOKEN(0x1ABE),
            option text = STRING_TOKEN(0x1AEB), value = 0x02, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEC), value = 0x00, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AED), value = 0x0B, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEE), value = 0x08, flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEF), value = 0x0E, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF0), value = 0x0C, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF1), value = 0x07, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF2), value = 0x03, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF3), value = 0x06, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF4), value = 0x01, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF5), value = 0x09, flags = RESET_REQUIRED;
          endoneof;

          
          oneof varid = SETUP_DATA.MipiCam_ControlLogic0_GpioFunction[4],
            prompt    = STRING_TOKEN(0x1AA9),
            help      = STRING_TOKEN(0x1AA4),
            option text = STRING_TOKEN(0x1AE5), value = 0x00, flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE6), value = 0x0B, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE7), value = 0x00C, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE8), value = 0x0D, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE9), value = 0x02, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEA), value = 0x12, flags = RESET_REQUIRED;
          endoneof;

          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic0_GpioActiveValue[4],
            prompt   = STRING_TOKEN(0x1AD0),
            help     = STRING_TOKEN(0x1ACB),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 1,
            step     = 1,
            default  = 1,
          endnumeric;

          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic0_GpioInitialValue[4],
            prompt   = STRING_TOKEN(0x1ADD),
            help     = STRING_TOKEN(0x1AD8),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 1,
            step     = 1,
            default  = 0,
          endnumeric;
        endif;

        suppressif ideqvallist SETUP_DATA.MipiCam_ControlLogic0_GpioPinsEnabled == 0 1 2 3 4 5;
          
          subtitle text = STRING_TOKEN(0x1C2D);
          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic0_GpioGroupPadNumber[5],
            prompt   = STRING_TOKEN(0x1AB7),
            help     = STRING_TOKEN(0x1AB1),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 23,
            step     = 1,
            default  = 11,
          endnumeric;

          
          oneof varid = SETUP_DATA.MipiCam_ControlLogic0_GpioGroupNumber[5],
            prompt   = STRING_TOKEN(0x1AC4),
            help     = STRING_TOKEN(0x1ABE),
            option text = STRING_TOKEN(0x1AEB), value = 0x02, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEC), value = 0x00, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AED), value = 0x0B, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEE), value = 0x08, flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEF), value = 0x0E, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF0), value = 0x0C, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF1), value = 0x07, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF2), value = 0x03, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF3), value = 0x06, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF4), value = 0x01, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF5), value = 0x09, flags = RESET_REQUIRED;
          endoneof;

          
          oneof varid = SETUP_DATA.MipiCam_ControlLogic0_GpioFunction[5],
            prompt    = STRING_TOKEN(0x1AAA),
            help      = STRING_TOKEN(0x1AA4),
            option text = STRING_TOKEN(0x1AE5), value = 0x00, flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE6), value = 0x0B, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE7), value = 0x00C, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE8), value = 0x0D, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE9), value = 0x02, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEA), value = 0x12, flags = RESET_REQUIRED;
          endoneof;

          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic0_GpioActiveValue[5],
            prompt   = STRING_TOKEN(0x1AD1),
            help     = STRING_TOKEN(0x1ACB),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 1,
            step     = 1,
            default  = 1,
          endnumeric;

          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic0_GpioInitialValue[5],
            prompt   = STRING_TOKEN(0x1ADE),
            help     = STRING_TOKEN(0x1AD8),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 1,
            step     = 1,
            default  = 0,
          endnumeric;
        endif;
      endif ;
    endform;

    
    form formid = 148,
      title    = STRING_TOKEN(0x1BBC);
      subtitle text = STRING_TOKEN(0x1BBC);

      
      oneof varid = SETUP_DATA.MipiCam_ControlLogic1_Type,
        prompt   = STRING_TOKEN(0x1C22),
        help     = STRING_TOKEN(0x1C20),
        option text = STRING_TOKEN(0x1C23), value = 1, flags = DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1C24), value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1C25), value = 3, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1C26), value = 253, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1C27), value = 254, flags = RESET_REQUIRED;
      endoneof;

      
      oneof varid = SETUP_DATA.MipiCam_ControlLogic1_CrdVersion,
        prompt   = STRING_TOKEN(0x1B4C),
        help     = STRING_TOKEN(0x1B44),
        option text = STRING_TOKEN(0x1B4D), value = 0x10, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B4E), value = 0x20, flags = DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B4F), value = 0x30, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B50), value = 0x40, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B51), value = 0x50, flags = RESET_REQUIRED;
      endoneof;

      
      oneof varid = SETUP_DATA.MipiCam_ControlLogic1_InputClock,
        prompt   = STRING_TOKEN(0x19EA),
        help     = STRING_TOKEN(0x19EA),
        option text = STRING_TOKEN(0x19EC), value = 0x20, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x19ED), value = 0x30, flags = RESET_REQUIRED;

        option text = STRING_TOKEN(0x19EB), value = 0x10, flags = DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN(0x19EE), value = 0x40, flags = RESET_REQUIRED;



#line 10499 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaSetup.hfr"
      endoneof;

      
      oneof varid = SETUP_DATA.MipiCam_ControlLogic1_PchClockSource,
        prompt   = STRING_TOKEN(0x1C2E),
        help     = STRING_TOKEN(0x1C2F),
        option text = STRING_TOKEN(0x1C30), value = 0, flags = RESET_REQUIRED;

        option text = STRING_TOKEN(0x1C31), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1C32), value = 2, flags = DEFAULT | RESET_REQUIRED;



#line 10513 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaSetup.hfr"
        option text = STRING_TOKEN(0x1C33), value = 3, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1C34), value = 4, flags = RESET_REQUIRED;
      endoneof;

      suppressif NOT ideqvallist SETUP_DATA.MipiCam_ControlLogic1_CrdVersion == 0x30 0x50;
        
        oneof varid   = SETUP_DATA.MipiCam_ControlLogic1_Pld,
          prompt      = STRING_TOKEN(0x1B07),
          help        = STRING_TOKEN(0x1B05),
          option text = STRING_TOKEN(0x1B03), value = 0x21, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1B04), value = 0x29, flags = DEFAULT | RESET_REQUIRED;
        endoneof;
      endif;

      suppressif ideqval SETUP_DATA.MipiCam_ControlLogic1_Type == 1;
        
        
        oneof varid = SETUP_DATA.MipiCam_ControlLogic1_I2cChannel,
          prompt   = STRING_TOKEN(0x1A2E),
          help        = STRING_TOKEN(0x1A26),
          option text = STRING_TOKEN(0x1BB4), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1BB5), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1BB6), value = 2, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1BB7), value = 3, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1BB8), value = 4, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1BB9), value = 5, flags = RESET_REQUIRED;



#line 10543 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaSetup.hfr"
        endoneof;

        
        numeric varid = SETUP_DATA.MipiCam_ControlLogic1_I2cAddress,
          prompt   = STRING_TOKEN(0x1A31),
          help     = STRING_TOKEN(0x1A2F),
          flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
          minimum  = 0,
          maximum  = 0x7F,
          step     = 1,
          default  = 0x49,
        endnumeric;

        suppressif NOT ideqvallist SETUP_DATA.MipiCam_ControlLogic1_Type == 2 3;
          
          oneof varid   = SETUP_DATA.MipiCam_ControlLogic1_Wled1Type,
            prompt      = STRING_TOKEN(0x1A96),
            help        = STRING_TOKEN(0x1A94),
            option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AA0), value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AA1), value = 2, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AA2), value = 3, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AA3), value = 4, flags = RESET_REQUIRED;
          endoneof;

          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic1_Wled1FlashMaxCurrent,
            prompt      = STRING_TOKEN(0x1A7C),
            help        = STRING_TOKEN(0x1A7A),
            flags       = RESET_REQUIRED | DISPLAY_UINT_HEX,
            minimum     = 0,
            maximum     = 0x1F,
            step        = 1,
            default     = 0,
          endnumeric;

          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic1_Wled1TorchMaxCurrent,
            prompt      = STRING_TOKEN(0x1A89),
            help        = STRING_TOKEN(0x1A87),
            flags       = RESET_REQUIRED | DISPLAY_UINT_HEX,
            minimum     = 0,
            maximum     = 0x7,
            step        = 1,
            default     = 0,
          endnumeric;

          
          oneof varid   = SETUP_DATA.MipiCam_ControlLogic1_Wled2Type,
            prompt      = STRING_TOKEN(0x1A9B),
            help        = STRING_TOKEN(0x1A94),
            option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AA0), value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AA1), value = 2, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AA2), value = 3, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AA3), value = 4, flags = RESET_REQUIRED;
          endoneof;

          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic1_Wled2FlashMaxCurrent,
            prompt      = STRING_TOKEN(0x1A82),
            help        = STRING_TOKEN(0x1A7A),
            flags       = RESET_REQUIRED | DISPLAY_UINT_HEX,
            minimum     = 0,
            maximum     = 0x1F,
            step        = 1,
            default     = 0,
          endnumeric;

          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic1_Wled2TorchMaxCurrent,
            prompt      = STRING_TOKEN(0x1A8F),
            help        = STRING_TOKEN(0x1A87),
            flags       = RESET_REQUIRED | DISPLAY_UINT_HEX,
            minimum     = 0,
            maximum     = 0x7,
            step        = 1,
            default     = 0,
          endnumeric;

          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic1_SubPlatformId,
            prompt      = STRING_TOKEN(0x19F0),
            help        = STRING_TOKEN(0x19F0),
            flags       = RESET_REQUIRED | DISPLAY_UINT_HEX,
            minimum     = 0,
            maximum     = 0xF,
            step        = 1,
            default     = 0,
          endnumeric;
        endif;
    endif;

      suppressif ideqvallist SETUP_DATA.MipiCam_ControlLogic1_Type == 253 254;
        
        
        numeric varid = SETUP_DATA.MipiCam_ControlLogic1_GpioPinsEnabled,
          prompt      = STRING_TOKEN(0x1A0C),
          help        = STRING_TOKEN(0x1A0A),
          flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
          minimum  = 0,
          maximum  = 6,
          step     = 1,
          default  = 2,
        endnumeric;

        suppressif ideqval SETUP_DATA.MipiCam_ControlLogic1_GpioPinsEnabled == 0;
        
          subtitle text = STRING_TOKEN(0x1C28);
          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic1_GpioGroupPadNumber[0],
            prompt   = STRING_TOKEN(0x1AB8),
            help     = STRING_TOKEN(0x1AB1),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 23,
            step     = 1,

            default  = 13,


#line 10665 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaSetup.hfr"
          endnumeric;

          
          oneof varid = SETUP_DATA.MipiCam_ControlLogic1_GpioGroupNumber[0],
            prompt   = STRING_TOKEN(0x1AC5),
            help     = STRING_TOKEN(0x1ABE),
            option text = STRING_TOKEN(0x1AEB), value = 0x02, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEC), value = 0x00, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AED), value = 0x0B, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEE), value = 0x08, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF0), value = 0x0C, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF2), value = 0x03, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF3), value = 0x06, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF4), value = 0x01, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF5), value = 0x09, flags = RESET_REQUIRED;

            option text = STRING_TOKEN(0x1AEF), value = 0x0E, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF1), value = 0x07, flags = DEFAULT | RESET_REQUIRED;



#line 10687 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaSetup.hfr"
          endoneof;

          
          oneof varid = SETUP_DATA.MipiCam_ControlLogic1_GpioFunction[0],
            prompt    = STRING_TOKEN(0x1AAB),
            help      = STRING_TOKEN(0x1AA4),
            option text = STRING_TOKEN(0x1AE5), value = 0x00, flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE6), value = 0x0B, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE7), value = 0x00C, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE8), value = 0x0D, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE9), value = 0x02, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEA), value = 0x12, flags = RESET_REQUIRED;
          endoneof;

          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic1_GpioActiveValue[0],
            prompt   = STRING_TOKEN(0x1AD2),
            help     = STRING_TOKEN(0x1ACB),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 1,
            step     = 1,
            default  = 1,
          endnumeric;

          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic1_GpioInitialValue[0],
            prompt   = STRING_TOKEN(0x1ADF),
            help     = STRING_TOKEN(0x1AD8),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 1,
            step     = 1,
            default  = 0,
          endnumeric;

        endif;

        suppressif ideqvallist SETUP_DATA.MipiCam_ControlLogic1_GpioPinsEnabled == 0 1;
          
          subtitle text = STRING_TOKEN(0x1C29);
          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic1_GpioGroupPadNumber[1],
            prompt   = STRING_TOKEN(0x1AB9),
            help     = STRING_TOKEN(0x1AB1),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 23,
            step     = 1,

            default  = 15,


#line 10741 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaSetup.hfr"
          endnumeric;

          
          oneof varid = SETUP_DATA.MipiCam_ControlLogic1_GpioGroupNumber[1],
            prompt   = STRING_TOKEN(0x1AC6),
            help     = STRING_TOKEN(0x1ABE),
            option text = STRING_TOKEN(0x1AEB), value = 0x02, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEC), value = 0x00, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AED), value = 0x0B, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEE), value = 0x08, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF0), value = 0x0C, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF2), value = 0x03, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF3), value = 0x06, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF4), value = 0x01, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF5), value = 0x09, flags = RESET_REQUIRED;

            option text = STRING_TOKEN(0x1AEF), value = 0x0E, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF1), value = 0x07, flags = DEFAULT | RESET_REQUIRED;



#line 10763 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaSetup.hfr"
          endoneof;

          
          oneof varid = SETUP_DATA.MipiCam_ControlLogic1_GpioFunction[1],
            prompt    = STRING_TOKEN(0x1AAC),
            help      = STRING_TOKEN(0x1AA4),
            option text = STRING_TOKEN(0x1AE5), value = 0x00, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE6), value = 0x0B, flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE7), value = 0x00C, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE8), value = 0x0D, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE9), value = 0x02, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEA), value = 0x12, flags = RESET_REQUIRED;
          endoneof;

          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic1_GpioActiveValue[1],
            prompt   = STRING_TOKEN(0x1AD3),
            help     = STRING_TOKEN(0x1ACB),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 1,
            step     = 1,
            default  = 1,
          endnumeric;

          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic1_GpioInitialValue[1],
            prompt   = STRING_TOKEN(0x1AE0),
            help     = STRING_TOKEN(0x1AD8),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 1,
            step     = 1,
            default  = 0,
          endnumeric;
        endif;

        suppressif ideqvallist SETUP_DATA.MipiCam_ControlLogic1_GpioPinsEnabled == 0 1 2;
          
          subtitle text = STRING_TOKEN(0x1C2A);
          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic1_GpioGroupPadNumber[2],
            prompt   = STRING_TOKEN(0x1ABA),
            help     = STRING_TOKEN(0x1AB1),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 23,
            step     = 1,
            default  = 11,
          endnumeric;

          
          oneof varid = SETUP_DATA.MipiCam_ControlLogic1_GpioGroupNumber[2],
            prompt   = STRING_TOKEN(0x1AC7),
            help     = STRING_TOKEN(0x1ABE),
            option text = STRING_TOKEN(0x1AEB), value = 0x02, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEC), value = 0x00, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AED), value = 0x0B, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEE), value = 0x08, flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEF), value = 0x0E, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF0), value = 0x0C, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF1), value = 0x07, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF2), value = 0x03, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF3), value = 0x06, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF4), value = 0x01, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF5), value = 0x09, flags = RESET_REQUIRED;
          endoneof;

          
          oneof varid = SETUP_DATA.MipiCam_ControlLogic1_GpioFunction[2],
            prompt    = STRING_TOKEN(0x1AAD),
            help      = STRING_TOKEN(0x1AA4),
            option text = STRING_TOKEN(0x1AE5), value = 0x00, flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE6), value = 0x0B, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE7), value = 0x00C, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE8), value = 0x0D, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE9), value = 0x02, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEA), value = 0x12, flags = RESET_REQUIRED;
          endoneof;

          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic1_GpioActiveValue[2],
            prompt   = STRING_TOKEN(0x1AD4),
            help     = STRING_TOKEN(0x1ACB),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 1,
            step     = 1,
            default  = 1,
          endnumeric;

          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic1_GpioInitialValue[2],
            prompt   = STRING_TOKEN(0x1AE1),
            help     = STRING_TOKEN(0x1AD8),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 1,
            step     = 1,
            default  = 0,
          endnumeric;
        endif;


        suppressif ideqvallist SETUP_DATA.MipiCam_ControlLogic1_GpioPinsEnabled == 0 1 2 3;
          
          subtitle text = STRING_TOKEN(0x1C2B);
          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic1_GpioGroupPadNumber[3],
            prompt   = STRING_TOKEN(0x1ABB),
            help     = STRING_TOKEN(0x1AB1),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 23,
            step     = 1,
            default  = 11,
          endnumeric;

          
          oneof varid = SETUP_DATA.MipiCam_ControlLogic1_GpioGroupNumber[3],
            prompt   = STRING_TOKEN(0x1AC8),
            help     = STRING_TOKEN(0x1ABE),
            option text = STRING_TOKEN(0x1AEB), value = 0x02, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEC), value = 0x00, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AED), value = 0x0B, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEE), value = 0x08, flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEF), value = 0x0E, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF0), value = 0x0C, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF1), value = 0x07, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF2), value = 0x03, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF3), value = 0x06, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF4), value = 0x01, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF5), value = 0x09, flags = RESET_REQUIRED;
          endoneof;

          
          oneof varid = SETUP_DATA.MipiCam_ControlLogic1_GpioFunction[3],
            prompt    = STRING_TOKEN(0x1AAE),
            help      = STRING_TOKEN(0x1AA4),
            option text = STRING_TOKEN(0x1AE5), value = 0x00, flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE6), value = 0x0B, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE7), value = 0x00C, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE8), value = 0x0D, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE9), value = 0x02, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEA), value = 0x12, flags = RESET_REQUIRED;
          endoneof;

          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic1_GpioActiveValue[3],
            prompt   = STRING_TOKEN(0x1AD5),
            help     = STRING_TOKEN(0x1ACB),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 1,
            step     = 1,
            default  = 1,
          endnumeric;

          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic1_GpioInitialValue[3],
            prompt   = STRING_TOKEN(0x1AE2),
            help     = STRING_TOKEN(0x1AD8),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 1,
            step     = 1,
            default  = 0,
          endnumeric;
        endif;


        suppressif ideqvallist SETUP_DATA.MipiCam_ControlLogic1_GpioPinsEnabled == 0 1 2 3 4;
          
          subtitle text = STRING_TOKEN(0x1C2C);
          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic1_GpioGroupPadNumber[4],
            prompt   = STRING_TOKEN(0x1ABC),
            help     = STRING_TOKEN(0x1AB1),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 23,
            step     = 1,
            default  = 11,
          endnumeric;

          
          oneof varid = SETUP_DATA.MipiCam_ControlLogic1_GpioGroupNumber[4],
            prompt   = STRING_TOKEN(0x1AC9),
            help     = STRING_TOKEN(0x1ABE),
            option text = STRING_TOKEN(0x1AEB), value = 0x02, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEC), value = 0x00, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AED), value = 0x0B, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEE), value = 0x08, flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEF), value = 0x0E, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF0), value = 0x0C, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF1), value = 0x07, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF2), value = 0x03, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF3), value = 0x06, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF4), value = 0x01, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF5), value = 0x09, flags = RESET_REQUIRED;
          endoneof;

          
          oneof varid = SETUP_DATA.MipiCam_ControlLogic1_GpioFunction[4],
            prompt    = STRING_TOKEN(0x1AAF),
            help      = STRING_TOKEN(0x1AA4),
            option text = STRING_TOKEN(0x1AE5), value = 0x00, flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE6), value = 0x0B, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE7), value = 0x00C, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE8), value = 0x0D, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE9), value = 0x02, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEA), value = 0x12, flags = RESET_REQUIRED;
          endoneof;

          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic1_GpioActiveValue[4],
            prompt   = STRING_TOKEN(0x1AD6),
            help     = STRING_TOKEN(0x1ACB),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 1,
            step     = 1,
            default  = 1,
          endnumeric;

          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic1_GpioInitialValue[4],
            prompt   = STRING_TOKEN(0x1AE3),
            help     = STRING_TOKEN(0x1AD8),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 1,
            step     = 1,
            default  = 0,
          endnumeric;
        endif;

        suppressif ideqvallist SETUP_DATA.MipiCam_ControlLogic1_GpioPinsEnabled == 0 1 2 3 4 5;
          
          subtitle text = STRING_TOKEN(0x1C2D);
          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic1_GpioGroupPadNumber[5],
            prompt   = STRING_TOKEN(0x1ABD),
            help     = STRING_TOKEN(0x1AB1),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 23,
            step     = 1,
            default  = 11,
          endnumeric;

          
          oneof varid = SETUP_DATA.MipiCam_ControlLogic1_GpioGroupNumber[5],
            prompt   = STRING_TOKEN(0x1ACA),
            help     = STRING_TOKEN(0x1ABE),
            option text = STRING_TOKEN(0x1AEB), value = 0x02, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEC), value = 0x00, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AED), value = 0x0B, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEE), value = 0x08, flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEF), value = 0x0E, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF0), value = 0x0C, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF1), value = 0x07, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF2), value = 0x03, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF3), value = 0x06, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF4), value = 0x01, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF5), value = 0x09, flags = RESET_REQUIRED;
          endoneof;

          
          oneof varid = SETUP_DATA.MipiCam_ControlLogic1_GpioFunction[5],
            prompt    = STRING_TOKEN(0x1AB0),
            help      = STRING_TOKEN(0x1AA4),
            option text = STRING_TOKEN(0x1AE5), value = 0x00, flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE6), value = 0x0B, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE7), value = 0x00C, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE8), value = 0x0D, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE9), value = 0x02, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEA), value = 0x12, flags = RESET_REQUIRED;
          endoneof;

          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic1_GpioActiveValue[5],
            prompt   = STRING_TOKEN(0x1AD7),
            help     = STRING_TOKEN(0x1ACB),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 1,
            step     = 1,
            default  = 1,
          endnumeric;

          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic1_GpioInitialValue[5],
            prompt   = STRING_TOKEN(0x1AE4),
            help     = STRING_TOKEN(0x1AD8),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 1,
            step     = 1,
            default  = 0,
          endnumeric;
        endif;
      endif ;
     endform;

    
    form formid = 149,
      title    = STRING_TOKEN(0x1BBC);
      subtitle text = STRING_TOKEN(0x1BBC);

      
      oneof varid = SETUP_DATA.MipiCam_ControlLogic2_Type,
        prompt   = STRING_TOKEN(0x1C20),
        help     = STRING_TOKEN(0x1C20),
        option text = STRING_TOKEN(0x1C23), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1C24), value = 2, flags = DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1C25), value = 3, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1C26), value = 253, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1C27), value = 254, flags = RESET_REQUIRED;
      endoneof;

      
      oneof varid = SETUP_DATA.MipiCam_ControlLogic2_CrdVersion,
        prompt   = STRING_TOKEN(0x1B44),
        help     = STRING_TOKEN(0x1B44),
        option text = STRING_TOKEN(0x1B4D), value = 0x10, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B4E), value = 0x20, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B4F), value = 0x30, flags = DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B50), value = 0x40, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B51), value = 0x50, flags = RESET_REQUIRED;
      endoneof;

      
      oneof varid = SETUP_DATA.MipiCam_ControlLogic2_InputClock,
        prompt   = STRING_TOKEN(0x19EA),
        help     = STRING_TOKEN(0x19EA),
        option text = STRING_TOKEN(0x19EB), value = 0x10, flags = DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN(0x19EC), value = 0x20, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x19ED), value = 0x30, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x19EE), value = 0x40, flags = RESET_REQUIRED;
      endoneof;

      
      oneof varid = SETUP_DATA.MipiCam_ControlLogic2_PchClockSource,
        prompt   = STRING_TOKEN(0x1C2E),
        help     = STRING_TOKEN(0x1C2F),
        option text = STRING_TOKEN(0x1C30), value = 0, flags = DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1C31), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1C32), value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1C33), value = 3, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1C34), value = 4, flags = RESET_REQUIRED;
      endoneof;

      suppressif NOT ideqvallist SETUP_DATA.MipiCam_ControlLogic2_CrdVersion == 0x30 0x50;
        
        oneof varid   = SETUP_DATA.MipiCam_ControlLogic2_Pld,
          prompt      = STRING_TOKEN(0x1B05),
          help        = STRING_TOKEN(0x1B05),
          option text = STRING_TOKEN(0x1B03), value = 0x21, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1B04), value = 0x29, flags = DEFAULT | RESET_REQUIRED;
        endoneof;
      endif;

      suppressif ideqval SETUP_DATA.MipiCam_ControlLogic2_Type == 1;
        
        
        oneof varid = SETUP_DATA.MipiCam_ControlLogic2_I2cChannel,
          prompt   = STRING_TOKEN(0x1A26),
          help        = STRING_TOKEN(0x1A26),
          option text = STRING_TOKEN(0x1BB4), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1BB5), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1BB6), value = 2, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1BB7), value = 3, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1BB8), value = 4, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1BB9), value = 5, flags = RESET_REQUIRED;



#line 11142 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaSetup.hfr"
        endoneof;

        
        numeric varid = SETUP_DATA.MipiCam_ControlLogic2_I2cAddress,
          prompt   = STRING_TOKEN(0x1A2F),
          help     = STRING_TOKEN(0x1A2F),
          flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
          minimum  = 0,
          maximum  = 0x7F,
          step     = 1,
          default  = 0x49,
        endnumeric;

        suppressif NOT ideqvallist SETUP_DATA.MipiCam_ControlLogic2_Type == 2 3;
          
          oneof varid   = SETUP_DATA.MipiCam_ControlLogic2_Wled1Type,
            prompt      = STRING_TOKEN(0x1A97),
            help        = STRING_TOKEN(0x1A94),
            option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AA0), value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AA1), value = 2, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AA2), value = 3, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AA3), value = 4, flags = RESET_REQUIRED;
          endoneof;

          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic2_Wled1FlashMaxCurrent,
            prompt      = STRING_TOKEN(0x1A7D),
            help        = STRING_TOKEN(0x1A7A),
            flags       = RESET_REQUIRED | DISPLAY_UINT_HEX,
            minimum     = 0,
            maximum     = 0x1F,
            step        = 1,
            default     = 0,
          endnumeric;

          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic2_Wled1TorchMaxCurrent,
            prompt      = STRING_TOKEN(0x1A8A),
            help        = STRING_TOKEN(0x1A87),
            flags       = RESET_REQUIRED | DISPLAY_UINT_HEX,
            minimum     = 0,
            maximum     = 0x7,
            step        = 1,
            default     = 0,
          endnumeric;

          
          oneof varid   = SETUP_DATA.MipiCam_ControlLogic2_Wled2Type,
            prompt      = STRING_TOKEN(0x1A9C),
            help        = STRING_TOKEN(0x1A94),
            option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AA0), value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AA1), value = 2, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AA2), value = 3, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AA3), value = 4, flags = RESET_REQUIRED;
          endoneof;

          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic2_Wled2FlashMaxCurrent,
            prompt      = STRING_TOKEN(0x1A83),
            help        = STRING_TOKEN(0x1A7A),
            flags       = RESET_REQUIRED | DISPLAY_UINT_HEX,
            minimum     = 0,
            maximum     = 0x1F,
            step        = 1,
            default     = 0,
          endnumeric;

          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic2_Wled2TorchMaxCurrent,
            prompt      = STRING_TOKEN(0x1A90),
            help        = STRING_TOKEN(0x1A87),
            flags       = RESET_REQUIRED | DISPLAY_UINT_HEX,
            minimum     = 0,
            maximum     = 0x7,
            step        = 1,
            default     = 0,
          endnumeric;

          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic2_SubPlatformId,
            prompt      = STRING_TOKEN(0x19F1),
            help        = STRING_TOKEN(0x19F1),
            flags       = RESET_REQUIRED | DISPLAY_UINT_HEX,
            minimum     = 0,
            maximum     = 0xF,
            step        = 1,
            default     = 0,
          endnumeric;
        endif;
      endif;

      suppressif ideqvallist SETUP_DATA.MipiCam_ControlLogic2_Type == 253 254;
        
        
        numeric varid = SETUP_DATA.MipiCam_ControlLogic2_GpioPinsEnabled,
          prompt      = STRING_TOKEN(0x1A0A),
          help        = STRING_TOKEN(0x1A0A),
          flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
          minimum  = 0,
          maximum  = 6,
          step     = 1,
          default  = 2,
        endnumeric;

        suppressif ideqval SETUP_DATA.MipiCam_ControlLogic2_GpioPinsEnabled == 0;
        
          subtitle text = STRING_TOKEN(0x1C28);
          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic2_GpioGroupPadNumber[0],
            prompt   = STRING_TOKEN(0x1AB1),
            help     = STRING_TOKEN(0x1AB1),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 23,
            step     = 1,
            default  = 22,
          endnumeric;

          
          oneof varid = SETUP_DATA.MipiCam_ControlLogic2_GpioGroupNumber[0],
            prompt   = STRING_TOKEN(0x1ABE),
            help     = STRING_TOKEN(0x1ABE),
            option text = STRING_TOKEN(0x1AEB), value = 0x02, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEC), value = 0x00, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AED), value = 0x0B, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEE), value = 0x08, flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEF), value = 0x0E, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF0), value = 0x0C, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF1), value = 0x07, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF2), value = 0x03, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF3), value = 0x06, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF4), value = 0x01, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF5), value = 0x09, flags = RESET_REQUIRED;
          endoneof;

          
          oneof varid = SETUP_DATA.MipiCam_ControlLogic2_GpioFunction[0],
            prompt    = STRING_TOKEN(0x1AA4),
            help      = STRING_TOKEN(0x1AA4),
            option text = STRING_TOKEN(0x1AE5), value = 0x00, flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE6), value = 0x0B, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE7), value = 0x00C, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE8), value = 0x0D, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE9), value = 0x02, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEA), value = 0x12, flags = RESET_REQUIRED;
          endoneof;

          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic2_GpioActiveValue[0],
            prompt   = STRING_TOKEN(0x1ACB),
            help     = STRING_TOKEN(0x1ACB),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 1,
            step     = 1,
            default  = 1,
          endnumeric;

          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic2_GpioInitialValue[0],
            prompt   = STRING_TOKEN(0x1AD8),
            help     = STRING_TOKEN(0x1AD8),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 1,
            step     = 1,
            default  = 0,
          endnumeric;

        endif;

        suppressif ideqvallist SETUP_DATA.MipiCam_ControlLogic2_GpioPinsEnabled == 0 1;
          
          subtitle text = STRING_TOKEN(0x1C29);
          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic2_GpioGroupPadNumber[1],
            prompt   = STRING_TOKEN(0x1AB1),
            help     = STRING_TOKEN(0x1AB1),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 23,
            step     = 1,
            default  = 11,
          endnumeric;

          
          oneof varid = SETUP_DATA.MipiCam_ControlLogic2_GpioGroupNumber[1],
            prompt   = STRING_TOKEN(0x1ABE),
            help     = STRING_TOKEN(0x1ABE),
            option text = STRING_TOKEN(0x1AEB), value = 0x02, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEC), value = 0x00, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AED), value = 0x0B, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEE), value = 0x08, flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEF), value = 0x0E, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF0), value = 0x0C, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF1), value = 0x07, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF2), value = 0x03, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF3), value = 0x06, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF4), value = 0x01, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF5), value = 0x09, flags = RESET_REQUIRED;
          endoneof;

          
          oneof varid = SETUP_DATA.MipiCam_ControlLogic2_GpioFunction[1],
            prompt    = STRING_TOKEN(0x1AA4),
            help      = STRING_TOKEN(0x1AA4),
            option text = STRING_TOKEN(0x1AE5), value = 0x00, flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE6), value = 0x0B, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE7), value = 0x00C, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE8), value = 0x0D, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE9), value = 0x02, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEA), value = 0x12, flags = RESET_REQUIRED;
          endoneof;

          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic2_GpioActiveValue[1],
            prompt   = STRING_TOKEN(0x1ACB),
            help     = STRING_TOKEN(0x1ACB),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 1,
            step     = 1,
            default  = 1,
          endnumeric;

          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic2_GpioInitialValue[1],
            prompt   = STRING_TOKEN(0x1AD8),
            help     = STRING_TOKEN(0x1AD8),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 1,
            step     = 1,
            default  = 0,
          endnumeric;
        endif;

        suppressif ideqvallist SETUP_DATA.MipiCam_ControlLogic2_GpioPinsEnabled == 0 1 2;
          
          subtitle text = STRING_TOKEN(0x1C2A);
          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic2_GpioGroupPadNumber[2],
            prompt   = STRING_TOKEN(0x1AB1),
            help     = STRING_TOKEN(0x1AB1),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 23,
            step     = 1,
            default  = 11,
          endnumeric;

          
          oneof varid = SETUP_DATA.MipiCam_ControlLogic2_GpioGroupNumber[2],
            prompt   = STRING_TOKEN(0x1ABE),
            help     = STRING_TOKEN(0x1ABE),
            option text = STRING_TOKEN(0x1AEB), value = 0x02, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEC), value = 0x00, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AED), value = 0x0B, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEE), value = 0x08, flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEF), value = 0x0E, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF0), value = 0x0C, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF1), value = 0x07, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF2), value = 0x03, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF3), value = 0x06, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF4), value = 0x01, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF5), value = 0x09, flags = RESET_REQUIRED;
          endoneof;

          
          oneof varid = SETUP_DATA.MipiCam_ControlLogic2_GpioFunction[2],
            prompt    = STRING_TOKEN(0x1AA4),
            help      = STRING_TOKEN(0x1AA4),
            option text = STRING_TOKEN(0x1AE5), value = 0x00, flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE6), value = 0x0B, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE7), value = 0x00C, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE8), value = 0x0D, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE9), value = 0x02, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEA), value = 0x12, flags = RESET_REQUIRED;
          endoneof;

          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic2_GpioActiveValue[2],
            prompt   = STRING_TOKEN(0x1ACB),
            help     = STRING_TOKEN(0x1ACB),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 1,
            step     = 1,
            default  = 1,
          endnumeric;

          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic2_GpioInitialValue[2],
            prompt   = STRING_TOKEN(0x1AD8),
            help     = STRING_TOKEN(0x1AD8),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 1,
            step     = 1,
            default  = 0,
          endnumeric;
        endif;


        suppressif ideqvallist SETUP_DATA.MipiCam_ControlLogic2_GpioPinsEnabled == 0 1 2 3;
          
          subtitle text = STRING_TOKEN(0x1C2B);
          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic2_GpioGroupPadNumber[3],
            prompt   = STRING_TOKEN(0x1AB1),
            help     = STRING_TOKEN(0x1AB1),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 23,
            step     = 1,
            default  = 11,
          endnumeric;

          
          oneof varid = SETUP_DATA.MipiCam_ControlLogic2_GpioGroupNumber[3],
            prompt   = STRING_TOKEN(0x1ABE),
            help     = STRING_TOKEN(0x1ABE),
            option text = STRING_TOKEN(0x1AEB), value = 0x02, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEC), value = 0x00, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AED), value = 0x0B, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEE), value = 0x08, flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEF), value = 0x0E, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF0), value = 0x0C, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF1), value = 0x07, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF2), value = 0x03, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF3), value = 0x06, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF4), value = 0x01, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF5), value = 0x09, flags = RESET_REQUIRED;
          endoneof;

          
          oneof varid = SETUP_DATA.MipiCam_ControlLogic2_GpioFunction[3],
            prompt    = STRING_TOKEN(0x1AA4),
            help      = STRING_TOKEN(0x1AA4),
            option text = STRING_TOKEN(0x1AE5), value = 0x00, flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE6), value = 0x0B, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE7), value = 0x00C, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE8), value = 0x0D, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE9), value = 0x02, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEA), value = 0x12, flags = RESET_REQUIRED;
          endoneof;

          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic2_GpioActiveValue[3],
            prompt   = STRING_TOKEN(0x1ACB),
            help     = STRING_TOKEN(0x1ACB),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 1,
            step     = 1,
            default  = 1,
          endnumeric;

          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic2_GpioInitialValue[3],
            prompt   = STRING_TOKEN(0x1AD8),
            help     = STRING_TOKEN(0x1AD8),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 1,
            step     = 1,
            default  = 0,
          endnumeric;
        endif;


        suppressif ideqvallist SETUP_DATA.MipiCam_ControlLogic1_GpioPinsEnabled == 0 1 2 3 4;
          
          subtitle text = STRING_TOKEN(0x1C2C);
          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic2_GpioGroupPadNumber[4],
            prompt   = STRING_TOKEN(0x1AB1),
            help     = STRING_TOKEN(0x1AB1),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 23,
            step     = 1,
            default  = 11,
          endnumeric;

          
          oneof varid = SETUP_DATA.MipiCam_ControlLogic2_GpioGroupNumber[4],
            prompt   = STRING_TOKEN(0x1ABE),
            help     = STRING_TOKEN(0x1ABE),
            option text = STRING_TOKEN(0x1AEB), value = 0x02, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEC), value = 0x00, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AED), value = 0x0B, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEE), value = 0x08, flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEF), value = 0x0E, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF0), value = 0x0C, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF1), value = 0x07, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF2), value = 0x03, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF3), value = 0x06, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF4), value = 0x01, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF5), value = 0x09, flags = RESET_REQUIRED;
          endoneof;

          
          oneof varid = SETUP_DATA.MipiCam_ControlLogic2_GpioFunction[4],
            prompt    = STRING_TOKEN(0x1AA4),
            help      = STRING_TOKEN(0x1AA4),
            option text = STRING_TOKEN(0x1AE5), value = 0x00, flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE6), value = 0x0B, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE7), value = 0x00C, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE8), value = 0x0D, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE9), value = 0x02, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEA), value = 0x12, flags = RESET_REQUIRED;
          endoneof;

          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic2_GpioActiveValue[4],
            prompt   = STRING_TOKEN(0x1ACB),
            help     = STRING_TOKEN(0x1ACB),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 1,
            step     = 1,
            default  = 1,
          endnumeric;

          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic2_GpioInitialValue[4],
            prompt   = STRING_TOKEN(0x1AD8),
            help     = STRING_TOKEN(0x1AD8),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 1,
            step     = 1,
            default  = 0,
          endnumeric;
        endif;

        suppressif ideqvallist SETUP_DATA.MipiCam_ControlLogic1_GpioPinsEnabled == 0 1 2 3 4 5;
          
          subtitle text = STRING_TOKEN(0x1C2D);
          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic2_GpioGroupPadNumber[5],
            prompt   = STRING_TOKEN(0x1AB1),
            help     = STRING_TOKEN(0x1AB1),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 23,
            step     = 1,
            default  = 11,
          endnumeric;

          
          oneof varid = SETUP_DATA.MipiCam_ControlLogic2_GpioGroupNumber[5],
            prompt   = STRING_TOKEN(0x1ABE),
            help     = STRING_TOKEN(0x1ABE),
            option text = STRING_TOKEN(0x1AEB), value = 0x02, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEC), value = 0x00, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AED), value = 0x0B, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEE), value = 0x08, flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEF), value = 0x0E, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF0), value = 0x0C, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF1), value = 0x07, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF2), value = 0x03, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF3), value = 0x06, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF4), value = 0x01, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF5), value = 0x09, flags = RESET_REQUIRED;
          endoneof;

          
          oneof varid = SETUP_DATA.MipiCam_ControlLogic2_GpioFunction[5],
            prompt    = STRING_TOKEN(0x1AA4),
            help      = STRING_TOKEN(0x1AA4),
            option text = STRING_TOKEN(0x1AE5), value = 0x00, flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE6), value = 0x0B, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE7), value = 0x00C, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE8), value = 0x0D, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE9), value = 0x02, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEA), value = 0x12, flags = RESET_REQUIRED;
          endoneof;

          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic2_GpioActiveValue[5],
            prompt   = STRING_TOKEN(0x1ACB),
            help     = STRING_TOKEN(0x1ACB),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 1,
            step     = 1,
            default  = 1,
          endnumeric;

          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic2_GpioInitialValue[5],
            prompt   = STRING_TOKEN(0x1AD8),
            help     = STRING_TOKEN(0x1AD8),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 1,
            step     = 1,
            default  = 0,
          endnumeric;
        endif;
      endif ;
     endform;

    
    form formid = 150,
      title    = STRING_TOKEN(0x1BBC);
      subtitle text = STRING_TOKEN(0x1BBC);

      
      oneof varid = SETUP_DATA.MipiCam_ControlLogic3_Type,
        prompt   = STRING_TOKEN(0x1C20),
        help     = STRING_TOKEN(0x1C20),
        option text = STRING_TOKEN(0x1C23), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1C24), value = 2, flags = DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1C25), value = 3, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1C26), value = 253, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1C27), value = 254, flags = RESET_REQUIRED;
      endoneof;

      
      oneof varid = SETUP_DATA.MipiCam_ControlLogic3_CrdVersion,
        prompt   = STRING_TOKEN(0x1B44),
        help     = STRING_TOKEN(0x1B44),
        option text = STRING_TOKEN(0x1B4D), value = 0x10, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B4E), value = 0x20, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B4F), value = 0x30, flags = DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B50), value = 0x40, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B51), value = 0x50, flags = RESET_REQUIRED;
      endoneof;

      
      oneof varid = SETUP_DATA.MipiCam_ControlLogic3_InputClock,
        prompt   = STRING_TOKEN(0x19EA),
        help     = STRING_TOKEN(0x19EA),
        option text = STRING_TOKEN(0x19EB), value = 0x10, flags = DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN(0x19EC), value = 0x20, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x19ED), value = 0x30, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x19EE), value = 0x40, flags = RESET_REQUIRED;
      endoneof;

      
      oneof varid = SETUP_DATA.MipiCam_ControlLogic3_PchClockSource,
        prompt   = STRING_TOKEN(0x1C2E),
        help     = STRING_TOKEN(0x1C2F),
        option text = STRING_TOKEN(0x1C30), value = 0, flags = DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1C31), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1C32), value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1C33), value = 3, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1C34), value = 4, flags = RESET_REQUIRED;
      endoneof;

      suppressif NOT ideqvallist SETUP_DATA.MipiCam_ControlLogic3_CrdVersion == 0x30 0x50;
        
        oneof varid   = SETUP_DATA.MipiCam_ControlLogic3_Pld,
          prompt      = STRING_TOKEN(0x1B05),
          help        = STRING_TOKEN(0x1B05),
          option text = STRING_TOKEN(0x1B03), value = 0x21, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1B04), value = 0x29, flags = DEFAULT | RESET_REQUIRED;
        endoneof;
      endif;

      suppressif ideqval SETUP_DATA.MipiCam_ControlLogic3_Type == 1;
        
        
        oneof varid = SETUP_DATA.MipiCam_ControlLogic3_I2cChannel,
          prompt   = STRING_TOKEN(0x1A26),
          help        = STRING_TOKEN(0x1A26),
          option text = STRING_TOKEN(0x1BB4), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1BB5), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1BB6), value = 2, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1BB7), value = 3, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1BB8), value = 4, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1BB9), value = 5, flags = RESET_REQUIRED;



#line 11723 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaSetup.hfr"
        endoneof;

        
        numeric varid = SETUP_DATA.MipiCam_ControlLogic3_I2cAddress,
          prompt   = STRING_TOKEN(0x1A2F),
          help     = STRING_TOKEN(0x1A2F),
          flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
          minimum  = 0,
          maximum  = 0x7F,
          step     = 1,
          default  = 0x49,
        endnumeric;

        suppressif NOT ideqvallist SETUP_DATA.MipiCam_ControlLogic3_Type == 2 3;
          
          oneof varid   = SETUP_DATA.MipiCam_ControlLogic3_Wled1Type,
            prompt      = STRING_TOKEN(0x1A98),
            help        = STRING_TOKEN(0x1A94),
            option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AA0), value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AA1), value = 2, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AA2), value = 3, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AA3), value = 4, flags = RESET_REQUIRED;
          endoneof;

          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic3_Wled1FlashMaxCurrent,
            prompt      = STRING_TOKEN(0x1A7E),
            help        = STRING_TOKEN(0x1A7A),
            flags       = RESET_REQUIRED | DISPLAY_UINT_HEX,
            minimum     = 0,
            maximum     = 0x1F,
            step        = 1,
            default     = 0,
          endnumeric;

          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic3_Wled1TorchMaxCurrent,
            prompt      = STRING_TOKEN(0x1A8B),
            help        = STRING_TOKEN(0x1A87),
            flags       = RESET_REQUIRED | DISPLAY_UINT_HEX,
            minimum     = 0,
            maximum     = 0x7,
            step        = 1,
            default     = 0,
          endnumeric;

          
          oneof varid   = SETUP_DATA.MipiCam_ControlLogic3_Wled2Type,
            prompt      = STRING_TOKEN(0x1A9D),
            help        = STRING_TOKEN(0x1A94),
            option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AA0), value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AA1), value = 2, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AA2), value = 3, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AA3), value = 4, flags = RESET_REQUIRED;
          endoneof;

          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic3_Wled2FlashMaxCurrent,
            prompt      = STRING_TOKEN(0x1A84),
            help        = STRING_TOKEN(0x1A7A),
            flags       = RESET_REQUIRED | DISPLAY_UINT_HEX,
            minimum     = 0,
            maximum     = 0x1F,
            step        = 1,
            default     = 0,
          endnumeric;

          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic3_Wled2TorchMaxCurrent,
            prompt      = STRING_TOKEN(0x1A91),
            help        = STRING_TOKEN(0x1A87),
            flags       = RESET_REQUIRED | DISPLAY_UINT_HEX,
            minimum     = 0,
            maximum     = 0x7,
            step        = 1,
            default     = 0,
          endnumeric;

          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic3_SubPlatformId,
            prompt      = STRING_TOKEN(0x19F2),
            help        = STRING_TOKEN(0x19F2),
            flags       = RESET_REQUIRED | DISPLAY_UINT_HEX,
            minimum     = 0,
            maximum     = 0xF,
            step        = 1,
            default     = 0,
          endnumeric;
        endif;

      endif;

      suppressif ideqvallist SETUP_DATA.MipiCam_ControlLogic3_Type == 253 254;
        
        
        numeric varid = SETUP_DATA.MipiCam_ControlLogic3_GpioPinsEnabled,
          prompt      = STRING_TOKEN(0x1A0A),
          help        = STRING_TOKEN(0x1A0A),
          flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
          minimum  = 0,
          maximum  = 6,
          step     = 1,
          default  = 2,
        endnumeric;

        suppressif ideqval SETUP_DATA.MipiCam_ControlLogic3_GpioPinsEnabled == 0;
        
          subtitle text = STRING_TOKEN(0x1C28);
          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic3_GpioGroupPadNumber[0],
            prompt   = STRING_TOKEN(0x1AB1),
            help     = STRING_TOKEN(0x1AB1),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 23,
            step     = 1,
            default  = 22,
          endnumeric;

          
          oneof varid = SETUP_DATA.MipiCam_ControlLogic3_GpioGroupNumber[0],
            prompt   = STRING_TOKEN(0x1ABE),
            help     = STRING_TOKEN(0x1ABE),
            option text = STRING_TOKEN(0x1AEB), value = 0x02, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEC), value = 0x00, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AED), value = 0x0B, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEE), value = 0x08, flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEF), value = 0x0E, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF0), value = 0x0C, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF1), value = 0x07, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF2), value = 0x03, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF3), value = 0x06, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF4), value = 0x01, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF5), value = 0x09, flags = RESET_REQUIRED;
          endoneof;

          
          oneof varid = SETUP_DATA.MipiCam_ControlLogic3_GpioFunction[0],
            prompt    = STRING_TOKEN(0x1AA4),
            help      = STRING_TOKEN(0x1AA4),
            option text = STRING_TOKEN(0x1AE5), value = 0x00, flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE6), value = 0x0B, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE7), value = 0x00C, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE8), value = 0x0D, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE9), value = 0x02, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEA), value = 0x12, flags = RESET_REQUIRED;
          endoneof;

          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic3_GpioActiveValue[0],
            prompt   = STRING_TOKEN(0x1ACB),
            help     = STRING_TOKEN(0x1ACB),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 1,
            step     = 1,
            default  = 1,
          endnumeric;

          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic3_GpioInitialValue[0],
            prompt   = STRING_TOKEN(0x1AD8),
            help     = STRING_TOKEN(0x1AD8),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 1,
            step     = 1,
            default  = 0,
          endnumeric;

        endif;

        suppressif ideqvallist SETUP_DATA.MipiCam_ControlLogic3_GpioPinsEnabled == 0 1;
          
          subtitle text = STRING_TOKEN(0x1C29);
          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic3_GpioGroupPadNumber[1],
            prompt   = STRING_TOKEN(0x1AB1),
            help     = STRING_TOKEN(0x1AB1),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 23,
            step     = 1,
            default  = 11,
          endnumeric;

          
          oneof varid = SETUP_DATA.MipiCam_ControlLogic3_GpioGroupNumber[1],
            prompt   = STRING_TOKEN(0x1ABE),
            help     = STRING_TOKEN(0x1ABE),
            option text = STRING_TOKEN(0x1AEB), value = 0x02, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEC), value = 0x00, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AED), value = 0x0B, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEE), value = 0x08, flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEF), value = 0x0E, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF0), value = 0x0C, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF1), value = 0x07, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF2), value = 0x03, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF3), value = 0x06, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF4), value = 0x01, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF5), value = 0x09, flags = RESET_REQUIRED;
          endoneof;

          
          oneof varid = SETUP_DATA.MipiCam_ControlLogic3_GpioFunction[1],
            prompt    = STRING_TOKEN(0x1AA4),
            help      = STRING_TOKEN(0x1AA4),
            option text = STRING_TOKEN(0x1AE5), value = 0x00, flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE6), value = 0x0B, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE7), value = 0x00C, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE8), value = 0x0D, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE9), value = 0x02, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEA), value = 0x12, flags = RESET_REQUIRED;
          endoneof;

          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic3_GpioActiveValue[1],
            prompt   = STRING_TOKEN(0x1ACB),
            help     = STRING_TOKEN(0x1ACB),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 1,
            step     = 1,
            default  = 1,
          endnumeric;

          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic3_GpioInitialValue[1],
            prompt   = STRING_TOKEN(0x1AD8),
            help     = STRING_TOKEN(0x1AD8),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 1,
            step     = 1,
            default  = 0,
          endnumeric;
        endif;

        suppressif ideqvallist SETUP_DATA.MipiCam_ControlLogic3_GpioPinsEnabled == 0 1 2;
          
          subtitle text = STRING_TOKEN(0x1C2A);
          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic3_GpioGroupPadNumber[2],
            prompt   = STRING_TOKEN(0x1AB1),
            help     = STRING_TOKEN(0x1AB1),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 23,
            step     = 1,
            default  = 11,
          endnumeric;

          
          oneof varid = SETUP_DATA.MipiCam_ControlLogic3_GpioGroupNumber[2],
            prompt   = STRING_TOKEN(0x1ABE),
            help     = STRING_TOKEN(0x1ABE),
            option text = STRING_TOKEN(0x1AEB), value = 0x02, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEC), value = 0x00, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AED), value = 0x0B, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEE), value = 0x08, flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEF), value = 0x0E, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF0), value = 0x0C, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF1), value = 0x07, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF2), value = 0x03, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF3), value = 0x06, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF4), value = 0x01, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF5), value = 0x09, flags = RESET_REQUIRED;
          endoneof;

          
          oneof varid = SETUP_DATA.MipiCam_ControlLogic3_GpioFunction[2],
            prompt    = STRING_TOKEN(0x1AA4),
            help      = STRING_TOKEN(0x1AA4),
            option text = STRING_TOKEN(0x1AE5), value = 0x00, flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE6), value = 0x0B, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE7), value = 0x00C, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE8), value = 0x0D, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE9), value = 0x02, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEA), value = 0x12, flags = RESET_REQUIRED;
          endoneof;

          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic3_GpioActiveValue[2],
            prompt   = STRING_TOKEN(0x1ACB),
            help     = STRING_TOKEN(0x1ACB),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 1,
            step     = 1,
            default  = 1,
          endnumeric;

          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic3_GpioInitialValue[2],
            prompt   = STRING_TOKEN(0x1AD8),
            help     = STRING_TOKEN(0x1AD8),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 1,
            step     = 1,
            default  = 0,
          endnumeric;
        endif;


        suppressif ideqvallist SETUP_DATA.MipiCam_ControlLogic3_GpioPinsEnabled == 0 1 2 3;
          
          subtitle text = STRING_TOKEN(0x1C2B);
          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic3_GpioGroupPadNumber[3],
            prompt   = STRING_TOKEN(0x1AB1),
            help     = STRING_TOKEN(0x1AB1),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 23,
            step     = 1,
            default  = 11,
          endnumeric;

          
          oneof varid = SETUP_DATA.MipiCam_ControlLogic3_GpioGroupNumber[3],
            prompt   = STRING_TOKEN(0x1ABE),
            help     = STRING_TOKEN(0x1ABE),
            option text = STRING_TOKEN(0x1AEB), value = 0x02, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEC), value = 0x00, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AED), value = 0x0B, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEE), value = 0x08, flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEF), value = 0x0E, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF0), value = 0x0C, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF1), value = 0x07, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF2), value = 0x03, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF3), value = 0x06, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF4), value = 0x01, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF5), value = 0x09, flags = RESET_REQUIRED;
          endoneof;

          
          oneof varid = SETUP_DATA.MipiCam_ControlLogic3_GpioFunction[3],
            prompt    = STRING_TOKEN(0x1AA4),
            help      = STRING_TOKEN(0x1AA4),
            option text = STRING_TOKEN(0x1AE5), value = 0x00, flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE6), value = 0x0B, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE7), value = 0x00C, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE8), value = 0x0D, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE9), value = 0x02, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEA), value = 0x12, flags = RESET_REQUIRED;
          endoneof;

          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic3_GpioActiveValue[3],
            prompt   = STRING_TOKEN(0x1ACB),
            help     = STRING_TOKEN(0x1ACB),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 1,
            step     = 1,
            default  = 1,
          endnumeric;

          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic3_GpioInitialValue[3],
            prompt   = STRING_TOKEN(0x1AD8),
            help     = STRING_TOKEN(0x1AD8),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 1,
            step     = 1,
            default  = 0,
          endnumeric;
        endif;


        suppressif ideqvallist SETUP_DATA.MipiCam_ControlLogic1_GpioPinsEnabled == 0 1 2 3 4;
          
          subtitle text = STRING_TOKEN(0x1C2C);
          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic3_GpioGroupPadNumber[4],
            prompt   = STRING_TOKEN(0x1AB1),
            help     = STRING_TOKEN(0x1AB1),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 23,
            step     = 1,
            default  = 11,
          endnumeric;

          
          oneof varid = SETUP_DATA.MipiCam_ControlLogic3_GpioGroupNumber[4],
            prompt   = STRING_TOKEN(0x1ABE),
            help     = STRING_TOKEN(0x1ABE),
            option text = STRING_TOKEN(0x1AEB), value = 0x02, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEC), value = 0x00, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AED), value = 0x0B, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEE), value = 0x08, flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEF), value = 0x0E, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF0), value = 0x0C, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF1), value = 0x07, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF2), value = 0x03, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF3), value = 0x06, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF4), value = 0x01, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF5), value = 0x09, flags = RESET_REQUIRED;
          endoneof;

          
          oneof varid = SETUP_DATA.MipiCam_ControlLogic3_GpioFunction[4],
            prompt    = STRING_TOKEN(0x1AA4),
            help      = STRING_TOKEN(0x1AA4),
            option text = STRING_TOKEN(0x1AE5), value = 0x00, flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE6), value = 0x0B, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE7), value = 0x00C, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE8), value = 0x0D, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE9), value = 0x02, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEA), value = 0x12, flags = RESET_REQUIRED;
          endoneof;

          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic3_GpioActiveValue[4],
            prompt   = STRING_TOKEN(0x1ACB),
            help     = STRING_TOKEN(0x1ACB),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 1,
            step     = 1,
            default  = 1,
          endnumeric;

          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic3_GpioInitialValue[4],
            prompt   = STRING_TOKEN(0x1AD8),
            help     = STRING_TOKEN(0x1AD8),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 1,
            step     = 1,
            default  = 0,
          endnumeric;
        endif;

        suppressif ideqvallist SETUP_DATA.MipiCam_ControlLogic1_GpioPinsEnabled == 0 1 2 3 4 5;
          
          subtitle text = STRING_TOKEN(0x1C2D);
          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic3_GpioGroupPadNumber[5],
            prompt   = STRING_TOKEN(0x1AB1),
            help     = STRING_TOKEN(0x1AB1),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 23,
            step     = 1,
            default  = 11,
          endnumeric;

          
          oneof varid = SETUP_DATA.MipiCam_ControlLogic3_GpioGroupNumber[5],
            prompt   = STRING_TOKEN(0x1ABE),
            help     = STRING_TOKEN(0x1ABE),
            option text = STRING_TOKEN(0x1AEB), value = 0x02, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEC), value = 0x00, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AED), value = 0x0B, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEE), value = 0x08, flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEF), value = 0x0E, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF0), value = 0x0C, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF1), value = 0x07, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF2), value = 0x03, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF3), value = 0x06, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF4), value = 0x01, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF5), value = 0x09, flags = RESET_REQUIRED;
          endoneof;

          
          oneof varid = SETUP_DATA.MipiCam_ControlLogic3_GpioFunction[5],
            prompt    = STRING_TOKEN(0x1AA4),
            help      = STRING_TOKEN(0x1AA4),
            option text = STRING_TOKEN(0x1AE5), value = 0x00, flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE6), value = 0x0B, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE7), value = 0x00C, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE8), value = 0x0D, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE9), value = 0x02, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEA), value = 0x12, flags = RESET_REQUIRED;
          endoneof;

          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic3_GpioActiveValue[5],
            prompt   = STRING_TOKEN(0x1ACB),
            help     = STRING_TOKEN(0x1ACB),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 1,
            step     = 1,
            default  = 1,
          endnumeric;

          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic3_GpioInitialValue[5],
            prompt   = STRING_TOKEN(0x1AD8),
            help     = STRING_TOKEN(0x1AD8),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 1,
            step     = 1,
            default  = 0,
          endnumeric;
        endif;
      endif ;
     endform;

    
    form formid = 151,
      title    = STRING_TOKEN(0x1BBC);
      subtitle text = STRING_TOKEN(0x1BBC);

      
      oneof varid = SETUP_DATA.MipiCam_ControlLogic4_Type,
        prompt   = STRING_TOKEN(0x1C20),
        help     = STRING_TOKEN(0x1C20),
        option text = STRING_TOKEN(0x1C23), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1C24), value = 2, flags = DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1C25), value = 3, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1C26), value = 253, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1C27), value = 254, flags = RESET_REQUIRED;
      endoneof;

      
      oneof varid = SETUP_DATA.MipiCam_ControlLogic4_CrdVersion,
        prompt   = STRING_TOKEN(0x1B44),
        help     = STRING_TOKEN(0x1B44),
        option text = STRING_TOKEN(0x1B4D), value = 0x10, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B4E), value = 0x20, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B4F), value = 0x30, flags = DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B50), value = 0x40, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B51), value = 0x50, flags = RESET_REQUIRED;
      endoneof;

      
      oneof varid = SETUP_DATA.MipiCam_ControlLogic4_InputClock,
        prompt   = STRING_TOKEN(0x19EA),
        help     = STRING_TOKEN(0x19EA),
        option text = STRING_TOKEN(0x19EB), value = 0x10, flags = DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN(0x19EC), value = 0x20, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x19ED), value = 0x30, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x19EE), value = 0x40, flags = RESET_REQUIRED;
      endoneof;

      
      oneof varid = SETUP_DATA.MipiCam_ControlLogic4_PchClockSource,
        prompt   = STRING_TOKEN(0x1C2E),
        help     = STRING_TOKEN(0x1C2F),
        option text = STRING_TOKEN(0x1C30), value = 0, flags = DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1C31), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1C32), value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1C33), value = 3, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1C34), value = 4, flags = RESET_REQUIRED;
      endoneof;

      suppressif NOT ideqvallist SETUP_DATA.MipiCam_ControlLogic4_CrdVersion == 0x30 0x50;
        
        oneof varid   = SETUP_DATA.MipiCam_ControlLogic4_Pld,
          prompt      = STRING_TOKEN(0x1B05),
          help        = STRING_TOKEN(0x1B05),
          option text = STRING_TOKEN(0x1B03), value = 0x21, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1B04), value = 0x29, flags = DEFAULT | RESET_REQUIRED;
        endoneof;
      endif;

      suppressif ideqval SETUP_DATA.MipiCam_ControlLogic4_Type == 1;
        
        
        oneof varid = SETUP_DATA.MipiCam_ControlLogic4_I2cChannel,
          prompt   = STRING_TOKEN(0x1A26),
          help        = STRING_TOKEN(0x1A26),
          option text = STRING_TOKEN(0x1BB4), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1BB5), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1BB6), value = 2, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1BB7), value = 3, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1BB8), value = 4, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1BB9), value = 5, flags = RESET_REQUIRED;



#line 12305 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaSetup.hfr"
        endoneof;

        
        numeric varid = SETUP_DATA.MipiCam_ControlLogic4_I2cAddress,
          prompt   = STRING_TOKEN(0x1A2F),
          help     = STRING_TOKEN(0x1A2F),
          flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
          minimum  = 0,
          maximum  = 0x7F,
          step     = 1,
          default  = 0x49,
        endnumeric;

        suppressif NOT ideqvallist SETUP_DATA.MipiCam_ControlLogic4_Type == 2 3;
          
          oneof varid   = SETUP_DATA.MipiCam_ControlLogic4_Wled1Type,
            prompt      = STRING_TOKEN(0x1A99),
            help        = STRING_TOKEN(0x1A94),
            option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AA0), value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AA1), value = 2, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AA2), value = 3, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AA3), value = 4, flags = RESET_REQUIRED;
          endoneof;

          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic4_Wled1FlashMaxCurrent,
            prompt      = STRING_TOKEN(0x1A7F),
            help        = STRING_TOKEN(0x1A7A),
            flags       = RESET_REQUIRED | DISPLAY_UINT_HEX,
            minimum     = 0,
            maximum     = 0x1F,
            step        = 1,
            default     = 0,
          endnumeric;

          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic4_Wled1TorchMaxCurrent,
            prompt      = STRING_TOKEN(0x1A8C),
            help        = STRING_TOKEN(0x1A87),
            flags       = RESET_REQUIRED | DISPLAY_UINT_HEX,
            minimum     = 0,
            maximum     = 0x7,
            step        = 1,
            default     = 0,
          endnumeric;

          
          oneof varid   = SETUP_DATA.MipiCam_ControlLogic4_Wled2Type,
            prompt      = STRING_TOKEN(0x1A9E),
            help        = STRING_TOKEN(0x1A94),
            option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AA0), value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AA1), value = 2, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AA2), value = 3, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AA3), value = 4, flags = RESET_REQUIRED;
          endoneof;

          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic4_Wled2FlashMaxCurrent,
            prompt      = STRING_TOKEN(0x1A85),
            help        = STRING_TOKEN(0x1A7A),
            flags       = RESET_REQUIRED | DISPLAY_UINT_HEX,
            minimum     = 0,
            maximum     = 0x1F,
            step        = 1,
            default     = 0,
          endnumeric;

          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic4_Wled2TorchMaxCurrent,
            prompt      = STRING_TOKEN(0x1A92),
            help        = STRING_TOKEN(0x1A87),
            flags       = RESET_REQUIRED | DISPLAY_UINT_HEX,
            minimum     = 0,
            maximum     = 0x7,
            step        = 1,
            default     = 0,
          endnumeric;

          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic4_SubPlatformId,
            prompt      = STRING_TOKEN(0x19F3),
            help        = STRING_TOKEN(0x19F3),
            flags       = RESET_REQUIRED | DISPLAY_UINT_HEX,
            minimum     = 0,
            maximum     = 0xF,
            step        = 1,
            default     = 0,
          endnumeric;
        endif;

      endif;

      suppressif ideqvallist SETUP_DATA.MipiCam_ControlLogic4_Type == 253 254;
        
        
        numeric varid = SETUP_DATA.MipiCam_ControlLogic4_GpioPinsEnabled,
          prompt      = STRING_TOKEN(0x1A0A),
          help        = STRING_TOKEN(0x1A0A),
          flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
          minimum  = 0,
          maximum  = 6,
          step     = 1,
          default  = 2,
        endnumeric;

        suppressif ideqval SETUP_DATA.MipiCam_ControlLogic4_GpioPinsEnabled == 0;
        
          subtitle text = STRING_TOKEN(0x1C28);
          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic4_GpioGroupPadNumber[0],
            prompt   = STRING_TOKEN(0x1AB1),
            help     = STRING_TOKEN(0x1AB1),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 23,
            step     = 1,
            default  = 22,
          endnumeric;

          
          oneof varid = SETUP_DATA.MipiCam_ControlLogic4_GpioGroupNumber[0],
            prompt   = STRING_TOKEN(0x1ABE),
            help     = STRING_TOKEN(0x1ABE),
            option text = STRING_TOKEN(0x1AEB), value = 0x02, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEC), value = 0x00, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AED), value = 0x0B, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEE), value = 0x08, flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEF), value = 0x0E, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF0), value = 0x0C, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF1), value = 0x07, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF2), value = 0x03, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF3), value = 0x06, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF4), value = 0x01, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF5), value = 0x09, flags = RESET_REQUIRED;
          endoneof;

          
          oneof varid = SETUP_DATA.MipiCam_ControlLogic4_GpioFunction[0],
            prompt    = STRING_TOKEN(0x1AA4),
            help      = STRING_TOKEN(0x1AA4),
            option text = STRING_TOKEN(0x1AE5), value = 0x00, flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE6), value = 0x0B, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE7), value = 0x00C, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE8), value = 0x0D, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE9), value = 0x02, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEA), value = 0x12, flags = RESET_REQUIRED;
          endoneof;

          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic4_GpioActiveValue[0],
            prompt   = STRING_TOKEN(0x1ACB),
            help     = STRING_TOKEN(0x1ACB),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 1,
            step     = 1,
            default  = 1,
          endnumeric;

          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic4_GpioInitialValue[0],
            prompt   = STRING_TOKEN(0x1AD8),
            help     = STRING_TOKEN(0x1AD8),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 1,
            step     = 1,
            default  = 0,
          endnumeric;

        endif;

        suppressif ideqvallist SETUP_DATA.MipiCam_ControlLogic4_GpioPinsEnabled == 0 1;
          
          subtitle text = STRING_TOKEN(0x1C29);
          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic4_GpioGroupPadNumber[1],
            prompt   = STRING_TOKEN(0x1AB1),
            help     = STRING_TOKEN(0x1AB1),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 23,
            step     = 1,
            default  = 11,
          endnumeric;

          
          oneof varid = SETUP_DATA.MipiCam_ControlLogic4_GpioGroupNumber[1],
            prompt   = STRING_TOKEN(0x1ABE),
            help     = STRING_TOKEN(0x1ABE),
            option text = STRING_TOKEN(0x1AEB), value = 0x02, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEC), value = 0x00, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AED), value = 0x0B, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEE), value = 0x08, flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEF), value = 0x0E, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF0), value = 0x0C, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF1), value = 0x07, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF2), value = 0x03, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF3), value = 0x06, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF4), value = 0x01, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF5), value = 0x09, flags = RESET_REQUIRED;
          endoneof;

          
          oneof varid = SETUP_DATA.MipiCam_ControlLogic4_GpioFunction[1],
            prompt    = STRING_TOKEN(0x1AA4),
            help      = STRING_TOKEN(0x1AA4),
            option text = STRING_TOKEN(0x1AE5), value = 0x00, flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE6), value = 0x0B, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE7), value = 0x00C, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE8), value = 0x0D, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE9), value = 0x02, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEA), value = 0x12, flags = RESET_REQUIRED;
          endoneof;

          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic4_GpioActiveValue[1],
            prompt   = STRING_TOKEN(0x1ACB),
            help     = STRING_TOKEN(0x1ACB),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 1,
            step     = 1,
            default  = 1,
          endnumeric;

          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic4_GpioInitialValue[1],
            prompt   = STRING_TOKEN(0x1AD8),
            help     = STRING_TOKEN(0x1AD8),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 1,
            step     = 1,
            default  = 0,
          endnumeric;
        endif;

        suppressif ideqvallist SETUP_DATA.MipiCam_ControlLogic4_GpioPinsEnabled == 0 1 2;
          
          subtitle text = STRING_TOKEN(0x1C2A);
          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic4_GpioGroupPadNumber[2],
            prompt   = STRING_TOKEN(0x1AB1),
            help     = STRING_TOKEN(0x1AB1),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 23,
            step     = 1,
            default  = 11,
          endnumeric;

          
          oneof varid = SETUP_DATA.MipiCam_ControlLogic4_GpioGroupNumber[2],
            prompt   = STRING_TOKEN(0x1ABE),
            help     = STRING_TOKEN(0x1ABE),
            option text = STRING_TOKEN(0x1AEB), value = 0x02, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEC), value = 0x00, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AED), value = 0x0B, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEE), value = 0x08, flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEF), value = 0x0E, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF0), value = 0x0C, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF1), value = 0x07, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF2), value = 0x03, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF3), value = 0x06, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF4), value = 0x01, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF5), value = 0x09, flags = RESET_REQUIRED;
          endoneof;

          
          oneof varid = SETUP_DATA.MipiCam_ControlLogic4_GpioFunction[2],
            prompt    = STRING_TOKEN(0x1AA4),
            help      = STRING_TOKEN(0x1AA4),
            option text = STRING_TOKEN(0x1AE5), value = 0x00, flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE6), value = 0x0B, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE7), value = 0x00C, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE8), value = 0x0D, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE9), value = 0x02, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEA), value = 0x12, flags = RESET_REQUIRED;
          endoneof;

          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic4_GpioActiveValue[2],
            prompt   = STRING_TOKEN(0x1ACB),
            help     = STRING_TOKEN(0x1ACB),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 1,
            step     = 1,
            default  = 1,
          endnumeric;

          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic4_GpioInitialValue[2],
            prompt   = STRING_TOKEN(0x1AD8),
            help     = STRING_TOKEN(0x1AD8),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 1,
            step     = 1,
            default  = 0,
          endnumeric;
        endif;


        suppressif ideqvallist SETUP_DATA.MipiCam_ControlLogic4_GpioPinsEnabled == 0 1 2 3;
          
          subtitle text = STRING_TOKEN(0x1C2B);
          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic4_GpioGroupPadNumber[3],
            prompt   = STRING_TOKEN(0x1AB1),
            help     = STRING_TOKEN(0x1AB1),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 23,
            step     = 1,
            default  = 11,
          endnumeric;

          
          oneof varid = SETUP_DATA.MipiCam_ControlLogic4_GpioGroupNumber[3],
            prompt   = STRING_TOKEN(0x1ABE),
            help     = STRING_TOKEN(0x1ABE),
            option text = STRING_TOKEN(0x1AEB), value = 0x02, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEC), value = 0x00, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AED), value = 0x0B, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEE), value = 0x08, flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEF), value = 0x0E, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF0), value = 0x0C, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF1), value = 0x07, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF2), value = 0x03, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF3), value = 0x06, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF4), value = 0x01, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF5), value = 0x09, flags = RESET_REQUIRED;
          endoneof;

          
          oneof varid = SETUP_DATA.MipiCam_ControlLogic4_GpioFunction[3],
            prompt    = STRING_TOKEN(0x1AA4),
            help      = STRING_TOKEN(0x1AA4),
            option text = STRING_TOKEN(0x1AE5), value = 0x00, flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE6), value = 0x0B, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE7), value = 0x00C, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE8), value = 0x0D, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE9), value = 0x02, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEA), value = 0x12, flags = RESET_REQUIRED;
          endoneof;

          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic4_GpioActiveValue[3],
            prompt   = STRING_TOKEN(0x1ACB),
            help     = STRING_TOKEN(0x1ACB),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 1,
            step     = 1,
            default  = 1,
          endnumeric;

          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic4_GpioInitialValue[3],
            prompt   = STRING_TOKEN(0x1AD8),
            help     = STRING_TOKEN(0x1AD8),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 1,
            step     = 1,
            default  = 0,
          endnumeric;
        endif;


        suppressif ideqvallist SETUP_DATA.MipiCam_ControlLogic4_GpioPinsEnabled == 0 1 2 3 4;
          
          subtitle text = STRING_TOKEN(0x1C2C);
          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic4_GpioGroupPadNumber[4],
            prompt   = STRING_TOKEN(0x1AB1),
            help     = STRING_TOKEN(0x1AB1),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 23,
            step     = 1,
            default  = 11,
          endnumeric;

          
          oneof varid = SETUP_DATA.MipiCam_ControlLogic4_GpioGroupNumber[4],
            prompt   = STRING_TOKEN(0x1ABE),
            help     = STRING_TOKEN(0x1ABE),
            option text = STRING_TOKEN(0x1AEB), value = 0x02, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEC), value = 0x00, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AED), value = 0x0B, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEE), value = 0x08, flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEF), value = 0x0E, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF0), value = 0x0C, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF1), value = 0x07, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF2), value = 0x03, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF3), value = 0x06, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF4), value = 0x01, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF5), value = 0x09, flags = RESET_REQUIRED;
          endoneof;

          
          oneof varid = SETUP_DATA.MipiCam_ControlLogic4_GpioFunction[4],
            prompt    = STRING_TOKEN(0x1AA4),
            help      = STRING_TOKEN(0x1AA4),
            option text = STRING_TOKEN(0x1AE5), value = 0x00, flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE6), value = 0x0B, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE7), value = 0x00C, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE8), value = 0x0D, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE9), value = 0x02, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEA), value = 0x12, flags = RESET_REQUIRED;
          endoneof;

          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic4_GpioActiveValue[4],
            prompt   = STRING_TOKEN(0x1ACB),
            help     = STRING_TOKEN(0x1ACB),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 1,
            step     = 1,
            default  = 1,
          endnumeric;

          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic4_GpioInitialValue[4],
            prompt   = STRING_TOKEN(0x1AD8),
            help     = STRING_TOKEN(0x1AD8),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 1,
            step     = 1,
            default  = 0,
          endnumeric;
        endif;

        suppressif ideqvallist SETUP_DATA.MipiCam_ControlLogic4_GpioPinsEnabled == 0 1 2 3 4 5;
          
          subtitle text = STRING_TOKEN(0x1C2D);
          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic4_GpioGroupPadNumber[5],
            prompt   = STRING_TOKEN(0x1AB1),
            help     = STRING_TOKEN(0x1AB1),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 23,
            step     = 1,
            default  = 11,
          endnumeric;

          
          oneof varid = SETUP_DATA.MipiCam_ControlLogic4_GpioGroupNumber[5],
            prompt   = STRING_TOKEN(0x1ABE),
            help     = STRING_TOKEN(0x1ABE),
            option text = STRING_TOKEN(0x1AEB), value = 0x02, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEC), value = 0x00, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AED), value = 0x0B, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEE), value = 0x08, flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEF), value = 0x0E, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF0), value = 0x0C, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF1), value = 0x07, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF2), value = 0x03, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF3), value = 0x06, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF4), value = 0x01, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF5), value = 0x09, flags = RESET_REQUIRED;
          endoneof;

          
          oneof varid = SETUP_DATA.MipiCam_ControlLogic4_GpioFunction[5],
            prompt    = STRING_TOKEN(0x1AA4),
            help      = STRING_TOKEN(0x1AA4),
            option text = STRING_TOKEN(0x1AE5), value = 0x00, flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE6), value = 0x0B, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE7), value = 0x00C, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE8), value = 0x0D, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE9), value = 0x02, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEA), value = 0x12, flags = RESET_REQUIRED;
          endoneof;

          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic4_GpioActiveValue[5],
            prompt   = STRING_TOKEN(0x1ACB),
            help     = STRING_TOKEN(0x1ACB),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 1,
            step     = 1,
            default  = 1,
          endnumeric;

          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic4_GpioInitialValue[5],
            prompt   = STRING_TOKEN(0x1AD8),
            help     = STRING_TOKEN(0x1AD8),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 1,
            step     = 1,
            default  = 0,
          endnumeric;
        endif;
      endif ;
     endform;

    
    form formid = 152,
      title    = STRING_TOKEN(0x1BBC);
      subtitle text = STRING_TOKEN(0x1BBC);

      
      oneof varid = SETUP_DATA.MipiCam_ControlLogic5_Type,
        prompt   = STRING_TOKEN(0x1C20),
        help     = STRING_TOKEN(0x1C20),
        option text = STRING_TOKEN(0x1C23), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1C24), value = 2, flags = DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1C25), value = 3, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1C26), value = 253, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1C27), value = 254, flags = RESET_REQUIRED;
      endoneof;

      
      oneof varid = SETUP_DATA.MipiCam_ControlLogic5_CrdVersion,
        prompt   = STRING_TOKEN(0x1B44),
        help     = STRING_TOKEN(0x1B44),
        option text = STRING_TOKEN(0x1B4D), value = 0x10, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B4E), value = 0x20, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B4F), value = 0x30, flags = DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B50), value = 0x40, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1B51), value = 0x50, flags = RESET_REQUIRED;
      endoneof;

      
      oneof varid = SETUP_DATA.MipiCam_ControlLogic5_InputClock,
        prompt   = STRING_TOKEN(0x19EA),
        help     = STRING_TOKEN(0x19EA),
        option text = STRING_TOKEN(0x19EB), value = 0x10, flags = DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN(0x19EC), value = 0x20, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x19ED), value = 0x30, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x19EE), value = 0x40, flags = RESET_REQUIRED;
      endoneof;

      
      oneof varid = SETUP_DATA.MipiCam_ControlLogic5_PchClockSource,
        prompt   = STRING_TOKEN(0x1C2E),
        help     = STRING_TOKEN(0x1C2F),
        option text = STRING_TOKEN(0x1C30), value = 0, flags = DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1C31), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1C32), value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1C33), value = 3, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1C34), value = 4, flags = RESET_REQUIRED;
      endoneof;

      suppressif NOT ideqvallist SETUP_DATA.MipiCam_ControlLogic5_CrdVersion == 0x30 0x50;
        
        oneof varid   = SETUP_DATA.MipiCam_ControlLogic5_Pld,
          prompt      = STRING_TOKEN(0x1B05),
          help        = STRING_TOKEN(0x1B05),
          option text = STRING_TOKEN(0x1B03), value = 0x21, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1B04), value = 0x29, flags = DEFAULT | RESET_REQUIRED;
        endoneof;
      endif;

      suppressif ideqval SETUP_DATA.MipiCam_ControlLogic5_Type == 1;
        
        
        oneof varid = SETUP_DATA.MipiCam_ControlLogic5_I2cChannel,
          prompt   = STRING_TOKEN(0x1A26),
          help        = STRING_TOKEN(0x1A26),
          option text = STRING_TOKEN(0x1BB4), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1BB5), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1BB6), value = 2, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1BB7), value = 3, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1BB8), value = 4, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1BB9), value = 5, flags = RESET_REQUIRED;



#line 12887 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaSetup.hfr"
        endoneof;

        
        numeric varid = SETUP_DATA.MipiCam_ControlLogic5_I2cAddress,
          prompt   = STRING_TOKEN(0x1A2F),
          help     = STRING_TOKEN(0x1A2F),
          flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
          minimum  = 0,
          maximum  = 0x7F,
          step     = 1,
          default  = 0x49,
        endnumeric;

        suppressif NOT ideqvallist SETUP_DATA.MipiCam_ControlLogic5_Type == 2 3;
          
          oneof varid   = SETUP_DATA.MipiCam_ControlLogic5_Wled1Type,
            prompt      = STRING_TOKEN(0x1A98),
            help        = STRING_TOKEN(0x1A94),
            option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AA0), value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AA1), value = 2, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AA2), value = 3, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AA3), value = 4, flags = RESET_REQUIRED;
          endoneof;

          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic5_Wled1FlashMaxCurrent,
            prompt      = STRING_TOKEN(0x1A80),
            help        = STRING_TOKEN(0x1A7A),
            flags       = RESET_REQUIRED | DISPLAY_UINT_HEX,
            minimum     = 0,
            maximum     = 0x1F,
            step        = 1,
            default     = 0,
          endnumeric;

          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic5_Wled1TorchMaxCurrent,
            prompt      = STRING_TOKEN(0x1A8D),
            help        = STRING_TOKEN(0x1A87),
            flags       = RESET_REQUIRED | DISPLAY_UINT_HEX,
            minimum     = 0,
            maximum     = 0x7,
            step        = 1,
            default     = 0,
          endnumeric;

          
          oneof varid   = SETUP_DATA.MipiCam_ControlLogic5_Wled2Type,
            prompt      = STRING_TOKEN(0x1A9F),
            help        = STRING_TOKEN(0x1A94),
            option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AA0), value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AA1), value = 2, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AA2), value = 3, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AA3), value = 4, flags = RESET_REQUIRED;
          endoneof;

          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic5_Wled2FlashMaxCurrent,
            prompt      = STRING_TOKEN(0x1A86),
            help        = STRING_TOKEN(0x1A7A),
            flags       = RESET_REQUIRED | DISPLAY_UINT_HEX,
            minimum     = 0,
            maximum     = 0x1F,
            step        = 1,
            default     = 0,
          endnumeric;

          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic5_Wled2TorchMaxCurrent,
            prompt      = STRING_TOKEN(0x1A93),
            help        = STRING_TOKEN(0x1A87),
            flags       = RESET_REQUIRED | DISPLAY_UINT_HEX,
            minimum     = 0,
            maximum     = 0x7,
            step        = 1,
            default     = 0,
          endnumeric;

          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic5_SubPlatformId,
            prompt      = STRING_TOKEN(0x19F4),
            help        = STRING_TOKEN(0x19F4),
            flags       = RESET_REQUIRED | DISPLAY_UINT_HEX,
            minimum     = 0,
            maximum     = 0xF,
            step        = 1,
            default     = 0,
          endnumeric;
        endif;

      endif;

      suppressif ideqvallist SETUP_DATA.MipiCam_ControlLogic5_Type == 253 254;
        
        
        numeric varid = SETUP_DATA.MipiCam_ControlLogic5_GpioPinsEnabled,
          prompt      = STRING_TOKEN(0x1A0A),
          help        = STRING_TOKEN(0x1A0A),
          flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
          minimum  = 0,
          maximum  = 6,
          step     = 1,
          default  = 2,
        endnumeric;

        suppressif ideqval SETUP_DATA.MipiCam_ControlLogic5_GpioPinsEnabled == 0;
        
          subtitle text = STRING_TOKEN(0x1C28);
          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic5_GpioGroupPadNumber[0],
            prompt   = STRING_TOKEN(0x1AB1),
            help     = STRING_TOKEN(0x1AB1),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 23,
            step     = 1,
            default  = 22,
          endnumeric;

          
          oneof varid = SETUP_DATA.MipiCam_ControlLogic5_GpioGroupNumber[0],
            prompt   = STRING_TOKEN(0x1ABE),
            help     = STRING_TOKEN(0x1ABE),
            option text = STRING_TOKEN(0x1AEB), value = 0x02, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEC), value = 0x00, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AED), value = 0x0B, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEE), value = 0x08, flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEF), value = 0x0E, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF0), value = 0x0C, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF1), value = 0x07, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF2), value = 0x03, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF3), value = 0x06, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF4), value = 0x01, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF5), value = 0x09, flags = RESET_REQUIRED;
          endoneof;

          
          oneof varid = SETUP_DATA.MipiCam_ControlLogic5_GpioFunction[0],
            prompt    = STRING_TOKEN(0x1AA4),
            help      = STRING_TOKEN(0x1AA4),
            option text = STRING_TOKEN(0x1AE5), value = 0x00, flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE6), value = 0x0B, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE7), value = 0x00C, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE8), value = 0x0D, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE9), value = 0x02, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEA), value = 0x12, flags = RESET_REQUIRED;
          endoneof;

          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic5_GpioActiveValue[0],
            prompt   = STRING_TOKEN(0x1ACB),
            help     = STRING_TOKEN(0x1ACB),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 1,
            step     = 1,
            default  = 1,
          endnumeric;

          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic5_GpioInitialValue[0],
            prompt   = STRING_TOKEN(0x1AD8),
            help     = STRING_TOKEN(0x1AD8),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 1,
            step     = 1,
            default  = 0,
          endnumeric;

        endif;

        suppressif ideqvallist SETUP_DATA.MipiCam_ControlLogic5_GpioPinsEnabled == 0 1;
          
          subtitle text = STRING_TOKEN(0x1C29);
          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic5_GpioGroupPadNumber[1],
            prompt   = STRING_TOKEN(0x1AB1),
            help     = STRING_TOKEN(0x1AB1),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 23,
            step     = 1,
            default  = 11,
          endnumeric;

          
          oneof varid = SETUP_DATA.MipiCam_ControlLogic5_GpioGroupNumber[1],
            prompt   = STRING_TOKEN(0x1ABE),
            help     = STRING_TOKEN(0x1ABE),
            option text = STRING_TOKEN(0x1AEB), value = 0x02, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEC), value = 0x00, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AED), value = 0x0B, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEE), value = 0x08, flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEF), value = 0x0E, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF0), value = 0x0C, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF1), value = 0x07, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF2), value = 0x03, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF3), value = 0x06, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF4), value = 0x01, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF5), value = 0x09, flags = RESET_REQUIRED;
          endoneof;

          
          oneof varid = SETUP_DATA.MipiCam_ControlLogic5_GpioFunction[1],
            prompt    = STRING_TOKEN(0x1AA4),
            help      = STRING_TOKEN(0x1AA4),
            option text = STRING_TOKEN(0x1AE5), value = 0x00, flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE6), value = 0x0B, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE7), value = 0x00C, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE8), value = 0x0D, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE9), value = 0x02, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEA), value = 0x12, flags = RESET_REQUIRED;
          endoneof;

          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic5_GpioActiveValue[1],
            prompt   = STRING_TOKEN(0x1ACB),
            help     = STRING_TOKEN(0x1ACB),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 1,
            step     = 1,
            default  = 1,
          endnumeric;

          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic5_GpioInitialValue[1],
            prompt   = STRING_TOKEN(0x1AD8),
            help     = STRING_TOKEN(0x1AD8),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 1,
            step     = 1,
            default  = 0,
          endnumeric;
        endif;

        suppressif ideqvallist SETUP_DATA.MipiCam_ControlLogic5_GpioPinsEnabled == 0 1 2;
          
          subtitle text = STRING_TOKEN(0x1C2A);
          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic5_GpioGroupPadNumber[2],
            prompt   = STRING_TOKEN(0x1AB1),
            help     = STRING_TOKEN(0x1AB1),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 23,
            step     = 1,
            default  = 11,
          endnumeric;

          
          oneof varid = SETUP_DATA.MipiCam_ControlLogic5_GpioGroupNumber[2],
            prompt   = STRING_TOKEN(0x1ABE),
            help     = STRING_TOKEN(0x1ABE),
            option text = STRING_TOKEN(0x1AEB), value = 0x02, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEC), value = 0x00, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AED), value = 0x0B, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEE), value = 0x08, flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEF), value = 0x0E, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF0), value = 0x0C, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF1), value = 0x07, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF2), value = 0x03, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF3), value = 0x06, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF4), value = 0x01, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF5), value = 0x09, flags = RESET_REQUIRED;
          endoneof;

          
          oneof varid = SETUP_DATA.MipiCam_ControlLogic5_GpioFunction[2],
            prompt    = STRING_TOKEN(0x1AA4),
            help      = STRING_TOKEN(0x1AA4),
            option text = STRING_TOKEN(0x1AE5), value = 0x00, flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE6), value = 0x0B, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE7), value = 0x00C, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE8), value = 0x0D, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE9), value = 0x02, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEA), value = 0x12, flags = RESET_REQUIRED;
          endoneof;

          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic5_GpioActiveValue[2],
            prompt   = STRING_TOKEN(0x1ACB),
            help     = STRING_TOKEN(0x1ACB),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 1,
            step     = 1,
            default  = 1,
          endnumeric;

          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic5_GpioInitialValue[2],
            prompt   = STRING_TOKEN(0x1AD8),
            help     = STRING_TOKEN(0x1AD8),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 1,
            step     = 1,
            default  = 0,
          endnumeric;
        endif;


        suppressif ideqvallist SETUP_DATA.MipiCam_ControlLogic5_GpioPinsEnabled == 0 1 2 3;
          
          subtitle text = STRING_TOKEN(0x1C2B);
          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic5_GpioGroupPadNumber[3],
            prompt   = STRING_TOKEN(0x1AB1),
            help     = STRING_TOKEN(0x1AB1),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 23,
            step     = 1,
            default  = 11,
          endnumeric;

          
          oneof varid = SETUP_DATA.MipiCam_ControlLogic5_GpioGroupNumber[3],
            prompt   = STRING_TOKEN(0x1ABE),
            help     = STRING_TOKEN(0x1ABE),
            option text = STRING_TOKEN(0x1AEB), value = 0x02, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEC), value = 0x00, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AED), value = 0x0B, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEE), value = 0x08, flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEF), value = 0x0E, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF0), value = 0x0C, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF1), value = 0x07, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF2), value = 0x03, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF3), value = 0x06, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF4), value = 0x01, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF5), value = 0x09, flags = RESET_REQUIRED;
          endoneof;

          
          oneof varid = SETUP_DATA.MipiCam_ControlLogic5_GpioFunction[3],
            prompt    = STRING_TOKEN(0x1AA4),
            help      = STRING_TOKEN(0x1AA4),
            option text = STRING_TOKEN(0x1AE5), value = 0x00, flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE6), value = 0x0B, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE7), value = 0x00C, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE8), value = 0x0D, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE9), value = 0x02, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEA), value = 0x12, flags = RESET_REQUIRED;
          endoneof;

          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic5_GpioActiveValue[3],
            prompt   = STRING_TOKEN(0x1ACB),
            help     = STRING_TOKEN(0x1ACB),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 1,
            step     = 1,
            default  = 1,
          endnumeric;

          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic5_GpioInitialValue[3],
            prompt   = STRING_TOKEN(0x1AD8),
            help     = STRING_TOKEN(0x1AD8),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 1,
            step     = 1,
            default  = 0,
          endnumeric;
        endif;


        suppressif ideqvallist SETUP_DATA.MipiCam_ControlLogic5_GpioPinsEnabled == 0 1 2 3 4;
          
          subtitle text = STRING_TOKEN(0x1C2C);
          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic5_GpioGroupPadNumber[4],
            prompt   = STRING_TOKEN(0x1AB1),
            help     = STRING_TOKEN(0x1AB1),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 23,
            step     = 1,
            default  = 11,
          endnumeric;

          
          oneof varid = SETUP_DATA.MipiCam_ControlLogic5_GpioGroupNumber[4],
            prompt   = STRING_TOKEN(0x1ABE),
            help     = STRING_TOKEN(0x1ABE),
            option text = STRING_TOKEN(0x1AEB), value = 0x02, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEC), value = 0x00, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AED), value = 0x0B, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEE), value = 0x08, flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEF), value = 0x0E, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF0), value = 0x0C, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF1), value = 0x07, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF2), value = 0x03, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF3), value = 0x06, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF4), value = 0x01, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF5), value = 0x09, flags = RESET_REQUIRED;
          endoneof;

          
          oneof varid = SETUP_DATA.MipiCam_ControlLogic5_GpioFunction[4],
            prompt     = STRING_TOKEN(0x1AA4),
            help      = STRING_TOKEN(0x1AA4),
            option text = STRING_TOKEN(0x1AE5), value = 0x00, flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE6), value = 0x0B, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE7), value = 0x00C, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE8), value = 0x0D, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE9), value = 0x02, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEA), value = 0x12, flags = RESET_REQUIRED;
          endoneof;

          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic5_GpioActiveValue[4],
            prompt   = STRING_TOKEN(0x1ACB),
            help     = STRING_TOKEN(0x1ACB),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 1,
            step     = 1,
            default  = 1,
          endnumeric;

          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic5_GpioInitialValue[4],
            prompt   = STRING_TOKEN(0x1AD8),
            help     = STRING_TOKEN(0x1AD8),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 1,
            step     = 1,
            default  = 0,
          endnumeric;
        endif;

        suppressif ideqvallist SETUP_DATA.MipiCam_ControlLogic5_GpioPinsEnabled == 0 1 2 3 4 5;
          
          subtitle text = STRING_TOKEN(0x1C2D);
          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic5_GpioGroupPadNumber[5],
            prompt   = STRING_TOKEN(0x1AB1),
            help     = STRING_TOKEN(0x1AB1),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 23,
            step     = 1,
            default  = 11,
          endnumeric;

          
          oneof varid = SETUP_DATA.MipiCam_ControlLogic5_GpioGroupNumber[5],
            prompt   = STRING_TOKEN(0x1ABE),
            help     = STRING_TOKEN(0x1ABE),
            option text = STRING_TOKEN(0x1AEB), value = 0x02, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEC), value = 0x00, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AED), value = 0x0B, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEE), value = 0x08, flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEF), value = 0x0E, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF0), value = 0x0C, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF1), value = 0x07, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF2), value = 0x03, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF3), value = 0x06, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF4), value = 0x01, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF5), value = 0x09, flags = RESET_REQUIRED;
          endoneof;

          
          oneof varid = SETUP_DATA.MipiCam_ControlLogic5_GpioFunction[5],
            prompt    = STRING_TOKEN(0x1AA4),
            help      = STRING_TOKEN(0x1AA4),
            option text = STRING_TOKEN(0x1AE5), value = 0x00, flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE6), value = 0x0B, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE7), value = 0x00C, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE8), value = 0x0D, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AE9), value = 0x02, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEA), value = 0x12, flags = RESET_REQUIRED;
          endoneof;

          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic5_GpioActiveValue[5],
            prompt   = STRING_TOKEN(0x1ACB),
            help     = STRING_TOKEN(0x1ACB),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 1,
            step     = 1,
            default  = 1,
          endnumeric;

          
          numeric varid = SETUP_DATA.MipiCam_ControlLogic5_GpioInitialValue[5],
            prompt   = STRING_TOKEN(0x1AD8),
            help     = STRING_TOKEN(0x1AD8),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 1,
            step     = 1,
            default  = 0,
          endnumeric;
        endif;
      endif ;
     endform;

    form formid = 5450,
      title    = STRING_TOKEN(0x1C3B);
      subtitle text = STRING_TOKEN(0x1C35);

      oneof varid   = SETUP_DATA.MipiCam_Flash0_Model,
        prompt      = STRING_TOKEN(0x1C3C),
        help        = STRING_TOKEN(0x1C3C),
        option text = STRING_TOKEN(0x1C3F), value = 0, flags = DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1C40), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = SETUP_DATA.MipiCam_Flash0_Mode,
        prompt      = STRING_TOKEN(0x1C3D),
        help        = STRING_TOKEN(0x1C3E),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1AA0), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1AA1), value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1AA2), value = 3, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1AA3), value = 4, flags = RESET_REQUIRED;
      endoneof;

      
      string varid    = SETUP_DATA.MipiCam_Flash0_ModuleName,
        prompt   = STRING_TOKEN(0x1AFD),
        help     = STRING_TOKEN(0x1AFD),
        minsize  = 1,
        maxsize  = 15,
        default  = STRING_TOKEN(0x1B02),
      endstring;

      
      oneof varid = SETUP_DATA.MipiCam_Flash0_I2cChannel,
        prompt   = STRING_TOKEN(0x1A26),
        help        = STRING_TOKEN(0x1A26),
        option text = STRING_TOKEN(0x1BB4), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BB5), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BB6), value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BB7), value = 3, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BB8), value = 4, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BB9), value = 5, flags = DEFAULT | RESET_REQUIRED;



#line 13439 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaSetup.hfr"
      endoneof;

      
      numeric varid = SETUP_DATA.MipiCam_Flash0_I2cAddress,
        prompt   = STRING_TOKEN(0x1A2F),
        help     = STRING_TOKEN(0x1A2F),
        flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
        minimum  = 0,
        maximum  = 0x7F,
        step     = 1,
        default  = 0x67,
      endnumeric;

      suppressif ideqvallist SETUP_DATA.MipiCam_ControlLogic0_Type == 253 254;
        subtitle text = STRING_TOKEN(0x1C41);
          
          numeric varid = SETUP_DATA.MipiCam_Flash0_GpioGroupPadNumber,
            prompt   = STRING_TOKEN(0x1C43),
            help     = STRING_TOKEN(0x1AB1),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 88,
            step     = 1,
            default  = 18,
          endnumeric;

          
          oneof varid = SETUP_DATA.MipiCam_Flash0_GpioGroupNumber,
            prompt   = STRING_TOKEN(0x1ABE),
            help     = STRING_TOKEN(0x1ABE),
            option text = STRING_TOKEN(0x1AEB), value = 0x02, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AED), value = 0x0B, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEF), value = 0x0E, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF0), value = 0x0C, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF1), value = 0x07, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF2), value = 0x03, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF3), value = 0x06, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF4), value = 0x01, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF5), value = 0x09, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEC), value = 0x00, flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEE), value = 0x08, flags = RESET_REQUIRED;
          endoneof;

          
          numeric varid = SETUP_DATA.MipiCam_Flash0_GpioActiveValue,
            prompt   = STRING_TOKEN(0x1ACB),
            help     = STRING_TOKEN(0x1ACB),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 1,
            step     = 1,
            default  = 1,
          endnumeric;

          
          numeric varid = SETUP_DATA.MipiCam_Flash0_GpioInitialValue,
            prompt   = STRING_TOKEN(0x1AD8),
            help     = STRING_TOKEN(0x1AD8),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 1,
            step     = 1,
            default  = 0,
          endnumeric;
      endif;

      suppressif ideqvallist SETUP_DATA.MipiCam_Link0_FlashDriverSelection == 0 1;
        
        oneof varid = SETUP_DATA.MipiCam_Flash0_OperatingMode,
          prompt   = STRING_TOKEN(0x1C42),
          help        = STRING_TOKEN(0x1C44),
          option text = STRING_TOKEN(0x1C45), value = 0, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C46),    value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C47),    value = 2, flags = RESET_REQUIRED;
        endoneof;
      endif;
    endform;
    
    form formid = 5451,
      title    = STRING_TOKEN(0x1C3B);
      subtitle text = STRING_TOKEN(0x1C36);

      oneof varid   = SETUP_DATA.MipiCam_Flash1_Model,
        prompt      = STRING_TOKEN(0x1C3C),
        help        = STRING_TOKEN(0x1C3C),

        option text = STRING_TOKEN(0x1C3F), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1C40), value = 1, flags = DEFAULT | RESET_REQUIRED;



#line 13531 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaSetup.hfr"
      endoneof;

      oneof varid   = SETUP_DATA.MipiCam_Flash1_Mode,
        prompt      = STRING_TOKEN(0x1C3D),
        help        = STRING_TOKEN(0x1C3E),

        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1AA0), value = 1, flags = RESET_REQUIRED;



#line 13543 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaSetup.hfr"
        option text = STRING_TOKEN(0x1AA1), value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1AA2), value = 3, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1AA3), value = 4, flags = RESET_REQUIRED;
      endoneof;

      
      string varid    = SETUP_DATA.MipiCam_Flash1_ModuleName,
        prompt   = STRING_TOKEN(0x1AFD),
        help     = STRING_TOKEN(0x1AFD),
        minsize  = 1,
        maxsize  = 15,
        default  = STRING_TOKEN(0x1B01),
      endstring;

      
      oneof varid = SETUP_DATA.MipiCam_Flash1_I2cChannel,
        prompt   = STRING_TOKEN(0x1A26),
        help        = STRING_TOKEN(0x1A26),
        option text = STRING_TOKEN(0x1BB4), value = 0, flags = RESET_REQUIRED;

        option text = STRING_TOKEN(0x1BB5), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BB6), value = 2, flags = DEFAULT | RESET_REQUIRED;



#line 13569 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaSetup.hfr"
        option text = STRING_TOKEN(0x1BB7), value = 3, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BB8), value = 4, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BB9), value = 5, flags = RESET_REQUIRED;



#line 13576 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaSetup.hfr"
      endoneof;

      
      numeric varid = SETUP_DATA.MipiCam_Flash1_I2cAddress,
        prompt   = STRING_TOKEN(0x1A2F),
        help     = STRING_TOKEN(0x1A2F),
        flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
        minimum  = 0,
        maximum  = 0x7F,
        step     = 1,

        default  = 0x67,


#line 13591 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaSetup.hfr"
      endnumeric;

      suppressif ideqvallist SETUP_DATA.MipiCam_ControlLogic1_Type == 253 254;
        subtitle text = STRING_TOKEN(0x1C41);
          
          numeric varid = SETUP_DATA.MipiCam_Flash1_GpioGroupPadNumber,
            prompt   = STRING_TOKEN(0x1C43),
            help     = STRING_TOKEN(0x1AB1),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 88,
            step     = 1,

            default  = 3,


#line 13608 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaSetup.hfr"
          endnumeric;

          
          oneof varid = SETUP_DATA.MipiCam_Flash1_GpioGroupNumber,
            prompt   = STRING_TOKEN(0x1ABE),
            help     = STRING_TOKEN(0x1ABE),
            option text = STRING_TOKEN(0x1AEB), value = 0x02, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AED), value = 0x0B, flags = RESET_REQUIRED;

            option text = STRING_TOKEN(0x1AEC), value = 0x00, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEE), value = 0x08, flags = DEFAULT | RESET_REQUIRED;



#line 13623 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaSetup.hfr"
            option text = STRING_TOKEN(0x1AEF), value = 0x0E, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF0), value = 0x0C, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF1), value = 0x07, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF2), value = 0x03, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF3), value = 0x06, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF4), value = 0x01, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF5), value = 0x09, flags = RESET_REQUIRED;
          endoneof;

          
          numeric varid = SETUP_DATA.MipiCam_Flash1_GpioActiveValue,
            prompt   = STRING_TOKEN(0x1ACB),
            help     = STRING_TOKEN(0x1ACB),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 1,
            step     = 1,
            default  = 1,
          endnumeric;

          
          numeric varid = SETUP_DATA.MipiCam_Flash1_GpioInitialValue,
            prompt   = STRING_TOKEN(0x1AD8),
            help     = STRING_TOKEN(0x1AD8),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 1,
            step     = 1,
            default  = 0,
          endnumeric;
      endif;

      suppressif ideqvallist SETUP_DATA.MipiCam_Link1_FlashDriverSelection == 0 1;
        
        oneof varid = SETUP_DATA.MipiCam_Flash1_OperatingMode,
          prompt   = STRING_TOKEN(0x1C42),
          help        = STRING_TOKEN(0x1C44),
          option text = STRING_TOKEN(0x1C45), value = 0, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C46),    value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C47),    value = 2, flags = RESET_REQUIRED;
        endoneof;
      endif;
    endform;

    
    form formid = 5452,
      title    = STRING_TOKEN(0x1C3B);
      subtitle text = STRING_TOKEN(0x1C37);

      oneof varid   = SETUP_DATA.MipiCam_Flash2_Model,
        prompt      = STRING_TOKEN(0x1C3C),
        help        = STRING_TOKEN(0x1C3C),
        option text = STRING_TOKEN(0x1C3F), value = 0, flags = DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1C40), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = SETUP_DATA.MipiCam_Flash2_Mode,
        prompt      = STRING_TOKEN(0x1C3D),
        help        = STRING_TOKEN(0x1C3E),
        option text = STRING_TOKEN(0x0004), value = 0, flags =  RESET_REQUIRED;
        option text = STRING_TOKEN(0x1AA0), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1AA1), value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1AA2), value = 3, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1AA3), value = 4, flags = RESET_REQUIRED;
      endoneof;

      
      string varid    = SETUP_DATA.MipiCam_Flash2_ModuleName,
        prompt   = STRING_TOKEN(0x1AFD),
        help     = STRING_TOKEN(0x1AFD),
        minsize  = 1,
        maxsize  = 15,
      endstring;

      
      oneof varid = SETUP_DATA.MipiCam_Flash2_I2cChannel,
        prompt   = STRING_TOKEN(0x1A26),
        help        = STRING_TOKEN(0x1A26),
        option text = STRING_TOKEN(0x1BB4), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BB5), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BB6), value = 2, flags = DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BB7), value = 3, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BB8), value = 4, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BB9), value = 5, flags = RESET_REQUIRED;



#line 13711 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaSetup.hfr"
      endoneof;

      
      numeric varid = SETUP_DATA.MipiCam_Flash2_I2cAddress,
        prompt   = STRING_TOKEN(0x1A2F),
        help     = STRING_TOKEN(0x1A2F),
        flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
        minimum  = 0,
        maximum  = 0x7F,
        step     = 1,
        default  = 0x63,
      endnumeric;

      suppressif ideqvallist SETUP_DATA.MipiCam_ControlLogic2_Type == 253 254;
        subtitle text = STRING_TOKEN(0x1C41);
          
          numeric varid = SETUP_DATA.MipiCam_Flash2_GpioGroupPadNumber,
            prompt   = STRING_TOKEN(0x1C43),
            help     = STRING_TOKEN(0x1AB1),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 88,
            step     = 1,
            default  = 18,
          endnumeric;

          
          oneof varid = SETUP_DATA.MipiCam_Flash2_GpioGroupNumber,
            prompt   = STRING_TOKEN(0x1ABE),
            help     = STRING_TOKEN(0x1ABE),
            option text = STRING_TOKEN(0x1AEB), value = 0x02, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEC), value = 0x00, flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AED), value = 0x0B, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEE), value = 0x08, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEF), value = 0x0E, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF0), value = 0x0C, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF1), value = 0x07, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF2), value = 0x03, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF3), value = 0x06, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF4), value = 0x01, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF5), value = 0x09, flags = RESET_REQUIRED;
          endoneof;

          
          numeric varid = SETUP_DATA.MipiCam_Flash2_GpioActiveValue,
            prompt   = STRING_TOKEN(0x1ACB),
            help     = STRING_TOKEN(0x1ACB),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 1,
            step     = 1,
            default  = 1,
          endnumeric;

          
          numeric varid = SETUP_DATA.MipiCam_Flash2_GpioInitialValue,
            prompt   = STRING_TOKEN(0x1AD8),
            help     = STRING_TOKEN(0x1AD8),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 1,
            step     = 1,
            default  = 0,
          endnumeric;
      endif;

      suppressif ideqvallist SETUP_DATA.MipiCam_Link2_FlashDriverSelection == 0 1;
        
        oneof varid = SETUP_DATA.MipiCam_Flash2_OperatingMode,
          prompt   = STRING_TOKEN(0x1C42),
          help        = STRING_TOKEN(0x1C44),
          option text = STRING_TOKEN(0x1C45), value = 0, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C46),    value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C47),    value = 2, flags = RESET_REQUIRED;
        endoneof;
      endif;
    endform;

    
    form formid = 5453,
      title    = STRING_TOKEN(0x1C3B);
      subtitle text = STRING_TOKEN(0x1C38);

      oneof varid   = SETUP_DATA.MipiCam_Flash3_Model,
        prompt      = STRING_TOKEN(0x1C3C),
        help        = STRING_TOKEN(0x1C3C),
        option text = STRING_TOKEN(0x1C3F), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1C40), value = 1, flags = DEFAULT | RESET_REQUIRED;
      endoneof;

      oneof varid   = SETUP_DATA.MipiCam_Flash3_Mode,
        prompt      = STRING_TOKEN(0x1C3D),
        help        = STRING_TOKEN(0x1C3E),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1AA0), value = 1, flags =  RESET_REQUIRED;
        option text = STRING_TOKEN(0x1AA1), value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1AA2), value = 3, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1AA3), value = 4, flags = RESET_REQUIRED;
      endoneof;

      
      string varid    = SETUP_DATA.MipiCam_Flash3_ModuleName,
        prompt   = STRING_TOKEN(0x1AFD),
        help     = STRING_TOKEN(0x1AFD),
        minsize  = 1,
        maxsize  = 15,
      endstring;

      
      oneof varid = SETUP_DATA.MipiCam_Flash3_I2cChannel,
        prompt   = STRING_TOKEN(0x1A26),
        help        = STRING_TOKEN(0x1A26),
        option text = STRING_TOKEN(0x1BB4), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BB5), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BB6), value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BB7), value = 3, flags = DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BB8), value = 4, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BB9), value = 5, flags = RESET_REQUIRED;



#line 13833 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaSetup.hfr"
      endoneof;

      
      numeric varid = SETUP_DATA.MipiCam_Flash3_I2cAddress,
        prompt   = STRING_TOKEN(0x1A2F),
        help     = STRING_TOKEN(0x1A2F),
        flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
        minimum  = 0,
        maximum  = 0x7F,
        step     = 1,
        default  = 0x67,
      endnumeric;

      suppressif ideqvallist SETUP_DATA.MipiCam_ControlLogic3_Type == 253 254;
        subtitle text = STRING_TOKEN(0x1C41);
          
          numeric varid = SETUP_DATA.MipiCam_Flash3_GpioGroupPadNumber,
            prompt   = STRING_TOKEN(0x1C43),
            help     = STRING_TOKEN(0x1AB1),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 88,
            step     = 1,
            default  = 3,
          endnumeric;

          
          oneof varid = SETUP_DATA.MipiCam_Flash3_GpioGroupNumber,
            prompt   = STRING_TOKEN(0x1ABE),
            help     = STRING_TOKEN(0x1ABE),
            option text = STRING_TOKEN(0x1AEB), value = 0x02, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEC), value = 0x00, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AED), value = 0x0B, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEE), value = 0x08, flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEF), value = 0x0E, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF0), value = 0x0C, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF1), value = 0x07, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF2), value = 0x03, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF3), value = 0x06, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF4), value = 0x01, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF5), value = 0x09, flags = RESET_REQUIRED;
          endoneof;

          
          numeric varid = SETUP_DATA.MipiCam_Flash3_GpioActiveValue,
            prompt   = STRING_TOKEN(0x1ACB),
            help     = STRING_TOKEN(0x1ACB),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 1,
            step     = 1,
            default  = 1,
          endnumeric;

          
          numeric varid = SETUP_DATA.MipiCam_Flash3_GpioInitialValue,
            prompt   = STRING_TOKEN(0x1AD8),
            help     = STRING_TOKEN(0x1AD8),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 1,
            step     = 1,
            default  = 0,
          endnumeric;
      endif;

      suppressif ideqvallist SETUP_DATA.MipiCam_Link3_FlashDriverSelection == 0 1;
        
        oneof varid = SETUP_DATA.MipiCam_Flash3_OperatingMode,
          prompt   = STRING_TOKEN(0x1C42),
          help        = STRING_TOKEN(0x1C44),
          option text = STRING_TOKEN(0x1C45), value = 0, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C46),    value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C47),    value = 2, flags = RESET_REQUIRED;
        endoneof;
      endif;
    endform;

    
    form formid = 5454,
      title    = STRING_TOKEN(0x1C3B);
      subtitle text = STRING_TOKEN(0x1C39);

      oneof varid   = SETUP_DATA.MipiCam_Flash4_Model,
        prompt      = STRING_TOKEN(0x1C3C),
        help        = STRING_TOKEN(0x1C3C),
        option text = STRING_TOKEN(0x1C3F), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1C40), value = 1, flags = DEFAULT | RESET_REQUIRED;
      endoneof;

      oneof varid   = SETUP_DATA.MipiCam_Flash4_Mode,
        prompt      = STRING_TOKEN(0x1C3D),
        help        = STRING_TOKEN(0x1C3E),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING |RESET_REQUIRED;
        option text = STRING_TOKEN(0x1AA0), value = 1, flags =  RESET_REQUIRED;
        option text = STRING_TOKEN(0x1AA1), value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1AA2), value = 3, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1AA3), value = 4, flags = RESET_REQUIRED;
      endoneof;

      
      string varid    = SETUP_DATA.MipiCam_Flash4_ModuleName,
        prompt   = STRING_TOKEN(0x1AFD),
        help     = STRING_TOKEN(0x1AFD),
        minsize  = 1,
        maxsize  = 15,
      endstring;

      
      oneof varid = SETUP_DATA.MipiCam_Flash4_I2cChannel,
        prompt   = STRING_TOKEN(0x1A26),
        help        = STRING_TOKEN(0x1A26),
        option text = STRING_TOKEN(0x1BB4), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BB5), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BB6), value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BB7), value = 3, flags = DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BB8), value = 4, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BB9), value = 5, flags = RESET_REQUIRED;



#line 13955 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaSetup.hfr"
      endoneof;

      
      numeric varid = SETUP_DATA.MipiCam_Flash4_I2cAddress,
        prompt   = STRING_TOKEN(0x1A2F),
        help     = STRING_TOKEN(0x1A2F),
        flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
        minimum  = 0,
        maximum  = 0x7F,
        step     = 1,
        default  = 0x67,
      endnumeric;

      suppressif ideqvallist SETUP_DATA.MipiCam_ControlLogic4_Type == 253 254;
        subtitle text = STRING_TOKEN(0x1C41);
          
          numeric varid = SETUP_DATA.MipiCam_Flash4_GpioGroupPadNumber,
            prompt   = STRING_TOKEN(0x1C43),
            help     = STRING_TOKEN(0x1AB1),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 88,
            step     = 1,
            default  = 3,
          endnumeric;

          
          oneof varid = SETUP_DATA.MipiCam_Flash4_GpioGroupNumber,
            prompt   = STRING_TOKEN(0x1ABE),
            help     = STRING_TOKEN(0x1ABE),
            option text = STRING_TOKEN(0x1AEB), value = 0x02, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEC), value = 0x00, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AED), value = 0x0B, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEE), value = 0x08, flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEF), value = 0x0E, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF0), value = 0x0C, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF1), value = 0x07, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF2), value = 0x03, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF3), value = 0x06, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF4), value = 0x01, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF5), value = 0x09, flags = RESET_REQUIRED;
          endoneof;

          
          numeric varid = SETUP_DATA.MipiCam_Flash4_GpioActiveValue,
            prompt   = STRING_TOKEN(0x1ACB),
            help     = STRING_TOKEN(0x1ACB),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 1,
            step     = 1,
            default  = 1,
          endnumeric;

          
          numeric varid = SETUP_DATA.MipiCam_Flash4_GpioInitialValue,
            prompt   = STRING_TOKEN(0x1AD8),
            help     = STRING_TOKEN(0x1AD8),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 1,
            step     = 1,
            default  = 0,
          endnumeric;
      endif;

      suppressif ideqvallist SETUP_DATA.MipiCam_Link4_FlashDriverSelection == 0 1;
        
        oneof varid = SETUP_DATA.MipiCam_Flash4_OperatingMode,
          prompt   = STRING_TOKEN(0x1C42),
          help        = STRING_TOKEN(0x1C44),
          option text = STRING_TOKEN(0x1C45), value = 0, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C46),    value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C47),    value = 2, flags = RESET_REQUIRED;
        endoneof;
      endif;
    endform;

    
    form formid = 5455,
      title    = STRING_TOKEN(0x1C3B);
      subtitle text = STRING_TOKEN(0x1C3A);

      oneof varid   = SETUP_DATA.MipiCam_Flash5_Model,
        prompt      = STRING_TOKEN(0x1C3C),
        help        = STRING_TOKEN(0x1C3C),
        option text = STRING_TOKEN(0x1C3F), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1C40), value = 1, flags = DEFAULT | RESET_REQUIRED;
      endoneof;

      oneof varid   = SETUP_DATA.MipiCam_Flash5_Mode,
        prompt      = STRING_TOKEN(0x1C3D),
        help        = STRING_TOKEN(0x1C3E),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING |RESET_REQUIRED;
        option text = STRING_TOKEN(0x1AA0), value = 1, flags =  RESET_REQUIRED;
        option text = STRING_TOKEN(0x1AA1), value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1AA2), value = 3, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1AA3), value = 4, flags =  RESET_REQUIRED;
      endoneof;

      
      string varid    = SETUP_DATA.MipiCam_Flash5_ModuleName,
        prompt   = STRING_TOKEN(0x1AFD),
        help     = STRING_TOKEN(0x1AFD),
        minsize  = 1,
        maxsize  = 15,
      endstring;

      
      oneof varid = SETUP_DATA.MipiCam_Flash5_I2cChannel,
        prompt   = STRING_TOKEN(0x1A26),
        help        = STRING_TOKEN(0x1A26),
        option text = STRING_TOKEN(0x1BB4), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BB5), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BB6), value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BB7), value = 3, flags = DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BB8), value = 4, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1BB9), value = 5, flags = RESET_REQUIRED;



#line 14077 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaSetup.hfr"
      endoneof;

      
      numeric varid = SETUP_DATA.MipiCam_Flash5_I2cAddress,
        prompt   = STRING_TOKEN(0x1A2F),
        help     = STRING_TOKEN(0x1A2F),
        flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
        minimum  = 0,
        maximum  = 0x7F,
        step     = 1,
        default  = 0x67,
      endnumeric;

      suppressif ideqvallist SETUP_DATA.MipiCam_ControlLogic5_Type == 253 254;
        subtitle text = STRING_TOKEN(0x1C41);
          
          numeric varid = SETUP_DATA.MipiCam_Flash5_GpioGroupPadNumber,
            prompt   = STRING_TOKEN(0x1C43),
            help     = STRING_TOKEN(0x1AB1),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 88,
            step     = 1,
            default  = 3,
          endnumeric;

          
          oneof varid = SETUP_DATA.MipiCam_Flash5_GpioGroupNumber,
            prompt   = STRING_TOKEN(0x1ABE),
            help     = STRING_TOKEN(0x1ABE),
            option text = STRING_TOKEN(0x1AEB), value = 0x02, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEC), value = 0x00, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AED), value = 0x0B, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEE), value = 0x08, flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AEF), value = 0x0E, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF0), value = 0x0C, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF1), value = 0x07, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF2), value = 0x03, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF3), value = 0x06, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF4), value = 0x01, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1AF5), value = 0x09, flags = RESET_REQUIRED;
          endoneof;

          
          numeric varid = SETUP_DATA.MipiCam_Flash5_GpioActiveValue,
            prompt   = STRING_TOKEN(0x1ACB),
            help     = STRING_TOKEN(0x1ACB),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 1,
            step     = 1,
            default  = 1,
          endnumeric;

          
          numeric varid = SETUP_DATA.MipiCam_Flash5_GpioInitialValue,
            prompt   = STRING_TOKEN(0x1AD8),
            help     = STRING_TOKEN(0x1AD8),
            flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
            minimum  = 0,
            maximum  = 1,
            step     = 1,
            default  = 0,
          endnumeric;
      endif;

      suppressif ideqvallist SETUP_DATA.MipiCam_Link5_FlashDriverSelection == 0 1;
        
        oneof varid = SETUP_DATA.MipiCam_Flash5_OperatingMode,
          prompt   = STRING_TOKEN(0x1C42),
          help        = STRING_TOKEN(0x1C44),
          option text = STRING_TOKEN(0x1C45), value = 0, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C46),    value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1C47),    value = 2, flags = RESET_REQUIRED;
        endoneof;
      endif;
    endform;




#line 14159 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaSetup.hfr"































































































































































































#line 14351 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaSetup.hfr"

  
    form formid = 5220,
    title     = STRING_TOKEN(0x1E4D);

    subtitle text = STRING_TOKEN(0x1E4E);
    subtitle text = STRING_TOKEN(0x0002);

    oneof varid   = SA_SETUP.VmdEnable,
      prompt      = STRING_TOKEN(0x1E26),
      help        = STRING_TOKEN(0x1E27),



#line 14366 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaSetup.hfr"
      option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
#line 14369 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaSetup.hfr"
    endoneof;

    subtitle text = STRING_TOKEN(0x0002);

    
    suppressif ideqval SA_SETUP.VmdEnable == 0x0;

      oneof varid   = SA_SETUP.VmdGlobalMapping,
        questionid  = 5221,
        prompt      = STRING_TOKEN(0x1E28),
        help        = STRING_TOKEN(0x1E29),



#line 14384 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaSetup.hfr"
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED | INTERACTIVE;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED | INTERACTIVE;
#line 14387 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaSetup.hfr"
      endoneof;

      grayoutif ideqval SA_SETUP.VmdGlobalMapping == 0x1;
        suppressif ideqval SA_SETUP.VmdPortPresent[0] == 0x0;
          oneof varid     = SA_SETUP.VmdPort[0],
            prompt        = STRING_TOKEN(0x1E2A),
            help          = STRING_TOKEN(0x1E2B),
            default value = cond((get(SA_SETUP.VmdGlobalMapping) & 0x1) == 1 ? 0x1 : 0x0), defaultstore = MyStandardDefault,
            option text   = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
            option text   = STRING_TOKEN(0x0003), value = 1, flags =  RESET_REQUIRED;
          endoneof;
          text
              help   = STRING_TOKEN(0x1E50),
              text   = STRING_TOKEN(0x1E51),
              text   = STRING_TOKEN(0x1E52),
              flags  = 0,
              key    = 0;
          subtitle text = STRING_TOKEN(0x0002);
          endif; 

        suppressif ideqval SA_SETUP.VmdPortPresent[1] == 0x0;
          oneof varid     = SA_SETUP.VmdPort[1],
            prompt        = STRING_TOKEN(0x1E2A),
            help          = STRING_TOKEN(0x1E2B),
            default value = cond((get(SA_SETUP.VmdGlobalMapping) & 0x1) == 1 ? 0x1 : 0x0), defaultstore = MyStandardDefault,
            option text   = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
            option text   = STRING_TOKEN(0x0003), value = 1, flags =  RESET_REQUIRED;
          endoneof;
          text
              help   = STRING_TOKEN(0x1E50),
              text   = STRING_TOKEN(0x1E51),
              text   = STRING_TOKEN(0x1E53),
              flags  = 0,
              key    = 0;
          subtitle text = STRING_TOKEN(0x0002);
          endif; 

        suppressif ideqval SA_SETUP.VmdPortPresent[2] == 0x0;
          oneof varid     = SA_SETUP.VmdPort[2],
            prompt        = STRING_TOKEN(0x1E2A),
            help          = STRING_TOKEN(0x1E2B),
            default value = cond((get(SA_SETUP.VmdGlobalMapping) & 0x1) == 1 ? 0x1 : 0x0), defaultstore = MyStandardDefault,
            option text   = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
            option text   = STRING_TOKEN(0x0003), value = 1, flags =  RESET_REQUIRED;
          endoneof;
          text
              help   = STRING_TOKEN(0x1E50),
              text   = STRING_TOKEN(0x1E51),
              text   = STRING_TOKEN(0x1E54),
              flags  = 0,
              key    = 0;
          subtitle text = STRING_TOKEN(0x0002);
          endif; 

        suppressif ideqval SA_SETUP.VmdPortPresent[3] == 0x0;
          oneof varid     = SA_SETUP.VmdPort[3],
            prompt        = STRING_TOKEN(0x1E2A),
            help          = STRING_TOKEN(0x1E2B),
            default value = cond((get(SA_SETUP.VmdGlobalMapping) & 0x1) == 1 ? 0x1 : 0x0), defaultstore = MyStandardDefault,
            option text   = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
            option text   = STRING_TOKEN(0x0003), value = 1, flags =  RESET_REQUIRED;
          endoneof;
          text
              help   = STRING_TOKEN(0x1E50),
              text   = STRING_TOKEN(0x1E51),
              text   = STRING_TOKEN(0x1E55),
              flags  = 0,
              key    = 0;
          subtitle text = STRING_TOKEN(0x0002);
          endif; 

        suppressif ideqval SA_SETUP.VmdPortPresent[4] == 0x0;
          oneof varid     = SA_SETUP.VmdPort[4],
            prompt        = STRING_TOKEN(0x1E2A),
            help          = STRING_TOKEN(0x1E2B),
            default value = cond((get(SA_SETUP.VmdGlobalMapping) & 0x1) == 1 ? 0x1 : 0x0), defaultstore = MyStandardDefault,
            option text   = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
            option text   = STRING_TOKEN(0x0003), value = 1, flags =  RESET_REQUIRED;
          endoneof;
          text
              help   = STRING_TOKEN(0x1E50),
              text   = STRING_TOKEN(0x1E51),
              text   = STRING_TOKEN(0x1E56),
              flags  = 0,
              key    = 0;
          subtitle text = STRING_TOKEN(0x0002);
          endif; 

        suppressif ideqval SA_SETUP.VmdPortPresent[5] == 0x0;
          oneof varid     = SA_SETUP.VmdPort[5],
            prompt        = STRING_TOKEN(0x1E2A),
            help          = STRING_TOKEN(0x1E2B),
            default value = cond((get(SA_SETUP.VmdGlobalMapping) & 0x1) == 1 ? 0x1 : 0x0), defaultstore = MyStandardDefault,
            option text   = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
            option text   = STRING_TOKEN(0x0003), value = 1, flags =  RESET_REQUIRED;
          endoneof;
          text
              help   = STRING_TOKEN(0x1E50),
              text   = STRING_TOKEN(0x1E51),
              text   = STRING_TOKEN(0x1E57),
              flags  = 0,
              key    = 0;
          subtitle text = STRING_TOKEN(0x0002);
          endif; 

        suppressif ideqval SA_SETUP.VmdPortPresent[6] == 0x0;
          oneof varid     = SA_SETUP.VmdPort[6],
            prompt        = STRING_TOKEN(0x1E2A),
            help          = STRING_TOKEN(0x1E2B),
            default value = cond((get(SA_SETUP.VmdGlobalMapping) & 0x1) == 1 ? 0x1 : 0x0), defaultstore = MyStandardDefault,
            option text   = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
            option text   = STRING_TOKEN(0x0003), value = 1, flags =  RESET_REQUIRED;
          endoneof;
          text
              help   = STRING_TOKEN(0x1E50),
              text   = STRING_TOKEN(0x1E51),
              text   = STRING_TOKEN(0x1E58),
              flags  = 0,
              key    = 0;
          subtitle text = STRING_TOKEN(0x0002);
          endif; 

        suppressif ideqval SA_SETUP.VmdPortPresent[7] == 0x0;
          oneof varid     = SA_SETUP.VmdPort[7],
            prompt        = STRING_TOKEN(0x1E2A),
            help          = STRING_TOKEN(0x1E2B),
            default value = cond((get(SA_SETUP.VmdGlobalMapping) & 0x1) == 1 ? 0x1 : 0x0), defaultstore = MyStandardDefault,
            option text   = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
            option text   = STRING_TOKEN(0x0003), value = 1, flags =  RESET_REQUIRED;
          endoneof;
          text
              help   = STRING_TOKEN(0x1E50),
              text   = STRING_TOKEN(0x1E51),
              text   = STRING_TOKEN(0x1E59),
              flags  = 0,
              key    = 0;
          subtitle text = STRING_TOKEN(0x0002);
          endif; 

        suppressif ideqval SA_SETUP.VmdPortPresent[8] == 0x0;
          oneof varid     = SA_SETUP.VmdPort[8],
            prompt        = STRING_TOKEN(0x1E2A),
            help          = STRING_TOKEN(0x1E2B),
            default value = cond((get(SA_SETUP.VmdGlobalMapping) & 0x1) == 1 ? 0x1 : 0x0), defaultstore = MyStandardDefault,
            option text   = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
            option text   = STRING_TOKEN(0x0003), value = 1, flags =  RESET_REQUIRED;
          endoneof;
          text
              help   = STRING_TOKEN(0x1E50),
              text   = STRING_TOKEN(0x1E51),
              text   = STRING_TOKEN(0x1E5A),
              flags  = 0,
              key    = 0;
          subtitle text = STRING_TOKEN(0x0002);
          endif; 

        suppressif ideqval SA_SETUP.VmdPortPresent[9] == 0x0;
          oneof varid     = SA_SETUP.VmdPort[9],
            prompt        = STRING_TOKEN(0x1E2A),
            help          = STRING_TOKEN(0x1E2B),
            default value = cond((get(SA_SETUP.VmdGlobalMapping) & 0x1) == 1 ? 0x1 : 0x0), defaultstore = MyStandardDefault,
            option text   = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
            option text   = STRING_TOKEN(0x0003), value = 1, flags =  RESET_REQUIRED;
          endoneof;
          text
              help   = STRING_TOKEN(0x1E50),
              text   = STRING_TOKEN(0x1E51),
              text   = STRING_TOKEN(0x1E5B),
              flags  = 0,
              key    = 0;
          subtitle text = STRING_TOKEN(0x0002);
          endif; 

        suppressif ideqval SA_SETUP.VmdPortPresent[10] == 0x0;
          oneof varid     = SA_SETUP.VmdPort[10],
            prompt        = STRING_TOKEN(0x1E2A),
            help          = STRING_TOKEN(0x1E2B),
            default value = cond((get(SA_SETUP.VmdGlobalMapping) & 0x1) == 1 ? 0x1 : 0x0), defaultstore = MyStandardDefault,
            option text   = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
            option text   = STRING_TOKEN(0x0003), value = 1, flags =  RESET_REQUIRED;
          endoneof;
          text
              help   = STRING_TOKEN(0x1E50),
              text   = STRING_TOKEN(0x1E51),
              text   = STRING_TOKEN(0x1E5C),
              flags  = 0,
              key    = 0;
          subtitle text = STRING_TOKEN(0x0002);
          endif; 

        suppressif ideqval SA_SETUP.VmdPortPresent[11] == 0x0;
          oneof varid     = SA_SETUP.VmdPort[11],
            prompt        = STRING_TOKEN(0x1E2A),
            help          = STRING_TOKEN(0x1E2B),
            default value = cond((get(SA_SETUP.VmdGlobalMapping) & 0x1) == 1 ? 0x1 : 0x0), defaultstore = MyStandardDefault,
            option text   = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
            option text   = STRING_TOKEN(0x0003), value = 1, flags =  RESET_REQUIRED;
          endoneof;
          text
              help   = STRING_TOKEN(0x1E50),
              text   = STRING_TOKEN(0x1E51),
              text   = STRING_TOKEN(0x1E5D),
              flags  = 0,
              key    = 0;
          subtitle text = STRING_TOKEN(0x0002);
          endif; 

        suppressif ideqval SA_SETUP.VmdPortPresent[12] == 0x0;
          oneof varid     = SA_SETUP.VmdPort[12],
            prompt        = STRING_TOKEN(0x1E2A),
            help          = STRING_TOKEN(0x1E2B),
            default value = cond((get(SA_SETUP.VmdGlobalMapping) & 0x1) == 1 ? 0x1 : 0x0), defaultstore = MyStandardDefault,
            option text   = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
            option text   = STRING_TOKEN(0x0003), value = 1, flags =  RESET_REQUIRED;
          endoneof;
          text
              help   = STRING_TOKEN(0x1E50),
              text   = STRING_TOKEN(0x1E51),
              text   = STRING_TOKEN(0x1E5E),
              flags  = 0,
              key    = 0;
          subtitle text = STRING_TOKEN(0x0002);
          endif; 

        suppressif ideqval SA_SETUP.VmdPortPresent[13] == 0x0;
          oneof varid     = SA_SETUP.VmdPort[13],
            prompt        = STRING_TOKEN(0x1E2A),
            help          = STRING_TOKEN(0x1E2B),
            default value = cond((get(SA_SETUP.VmdGlobalMapping) & 0x1) == 1 ? 0x1 : 0x0), defaultstore = MyStandardDefault,
            option text   = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
            option text   = STRING_TOKEN(0x0003), value = 1, flags =  RESET_REQUIRED;
          endoneof;
          text
              help   = STRING_TOKEN(0x1E50),
              text   = STRING_TOKEN(0x1E51),
              text   = STRING_TOKEN(0x1E5F),
              flags  = 0,
              key    = 0;
          subtitle text = STRING_TOKEN(0x0002);
          endif; 

        suppressif ideqval SA_SETUP.VmdPortPresent[14] == 0x0;
          oneof varid     = SA_SETUP.VmdPort[14],
            prompt        = STRING_TOKEN(0x1E2A),
            help          = STRING_TOKEN(0x1E2B),
            default value = cond((get(SA_SETUP.VmdGlobalMapping) & 0x1) == 1 ? 0x1 : 0x0), defaultstore = MyStandardDefault,
            option text   = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
            option text   = STRING_TOKEN(0x0003), value = 1, flags =  RESET_REQUIRED;
          endoneof;
          text
              help   = STRING_TOKEN(0x1E50),
              text   = STRING_TOKEN(0x1E51),
              text   = STRING_TOKEN(0x1E60),
              flags  = 0,
              key    = 0;
          subtitle text = STRING_TOKEN(0x0002);
          endif; 

        suppressif ideqval SA_SETUP.VmdPortPresent[15] == 0x0;
          oneof varid     = SA_SETUP.VmdPort[15],
            prompt        = STRING_TOKEN(0x1E2A),
            help          = STRING_TOKEN(0x1E2B),
            default value = cond((get(SA_SETUP.VmdGlobalMapping) & 0x1) == 1 ? 0x1 : 0x0), defaultstore = MyStandardDefault,
            option text   = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
            option text   = STRING_TOKEN(0x0003), value = 1, flags =  RESET_REQUIRED;
          endoneof;
          text
              help   = STRING_TOKEN(0x1E50),
              text   = STRING_TOKEN(0x1E51),
              text   = STRING_TOKEN(0x1E61),
              flags  = 0,
              key    = 0;
          subtitle text = STRING_TOKEN(0x0002);
          endif; 

        suppressif ideqval SA_SETUP.VmdPortPresent[16] == 0x0;
          oneof varid     = SA_SETUP.VmdPort[16],
            prompt        = STRING_TOKEN(0x1E2A),
            help          = STRING_TOKEN(0x1E2B),
            default value = cond((get(SA_SETUP.VmdGlobalMapping) & 0x1) == 1 ? 0x1 : 0x0), defaultstore = MyStandardDefault,
            option text   = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
            option text   = STRING_TOKEN(0x0003), value = 1, flags =  RESET_REQUIRED;
          endoneof;
          text
              help   = STRING_TOKEN(0x1E50),
              text   = STRING_TOKEN(0x1E51),
              text   = STRING_TOKEN(0x1E62),
              flags  = 0,
              key    = 0;
          subtitle text = STRING_TOKEN(0x0002);
          endif; 

        suppressif ideqval SA_SETUP.VmdPortPresent[17] == 0x0;
          oneof varid     = SA_SETUP.VmdPort[17],
            prompt        = STRING_TOKEN(0x1E2A),
            help          = STRING_TOKEN(0x1E2B),
            default value = cond((get(SA_SETUP.VmdGlobalMapping) & 0x1) == 1 ? 0x1 : 0x0), defaultstore = MyStandardDefault,
            option text   = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
            option text   = STRING_TOKEN(0x0003), value = 1, flags =  RESET_REQUIRED;
          endoneof;
          text
              help   = STRING_TOKEN(0x1E50),
              text   = STRING_TOKEN(0x1E51),
              text   = STRING_TOKEN(0x1E63),
              flags  = 0,
              key    = 0;
          subtitle text = STRING_TOKEN(0x0002);
          endif; 

        suppressif ideqval SA_SETUP.VmdPortPresent[18] == 0x0;
          oneof varid     = SA_SETUP.VmdPort[18],
            prompt        = STRING_TOKEN(0x1E2A),
            help          = STRING_TOKEN(0x1E2B),
            default value = cond((get(SA_SETUP.VmdGlobalMapping) & 0x1) == 1 ? 0x1 : 0x0), defaultstore = MyStandardDefault,
            option text   = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
            option text   = STRING_TOKEN(0x0003), value = 1, flags =  RESET_REQUIRED;
          endoneof;
          text
              help   = STRING_TOKEN(0x1E50),
              text   = STRING_TOKEN(0x1E51),
              text   = STRING_TOKEN(0x1E64),
              flags  = 0,
              key    = 0;
          subtitle text = STRING_TOKEN(0x0002);
          endif; 

        suppressif ideqval SA_SETUP.VmdPortPresent[19] == 0x0;
          oneof varid     = SA_SETUP.VmdPort[19],
            prompt        = STRING_TOKEN(0x1E2A),
            help          = STRING_TOKEN(0x1E2B),
            default value = cond((get(SA_SETUP.VmdGlobalMapping) & 0x1) == 1 ? 0x1 : 0x0), defaultstore = MyStandardDefault,
            option text   = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
            option text   = STRING_TOKEN(0x0003), value = 1, flags =  RESET_REQUIRED;
          endoneof;
          text
              help   = STRING_TOKEN(0x1E50),
              text   = STRING_TOKEN(0x1E51),
              text   = STRING_TOKEN(0x1E65),
              flags  = 0,
              key    = 0;
          subtitle text = STRING_TOKEN(0x0002);
          endif; 

        suppressif ideqval SA_SETUP.VmdPortPresent[20] == 0x0;
          oneof varid     = SA_SETUP.VmdPort[20],
            prompt        = STRING_TOKEN(0x1E2A),
            help          = STRING_TOKEN(0x1E2B),
            default value = cond((get(SA_SETUP.VmdGlobalMapping) & 0x1) == 1 ? 0x1 : 0x0), defaultstore = MyStandardDefault,
            option text   = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
            option text   = STRING_TOKEN(0x0003), value = 1, flags =  RESET_REQUIRED;
          endoneof;
          text
              help   = STRING_TOKEN(0x1E50),
              text   = STRING_TOKEN(0x1E51),
              text   = STRING_TOKEN(0x1E66),
              flags  = 0,
              key    = 0;
          subtitle text = STRING_TOKEN(0x0002);
          endif; 

        suppressif ideqval SA_SETUP.VmdPortPresent[21] == 0x0;
          oneof varid     = SA_SETUP.VmdPort[21],
            prompt        = STRING_TOKEN(0x1E2A),
            help          = STRING_TOKEN(0x1E2B),
            default value = cond((get(SA_SETUP.VmdGlobalMapping) & 0x1) == 1 ? 0x1 : 0x0), defaultstore = MyStandardDefault,
            option text   = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
            option text   = STRING_TOKEN(0x0003), value = 1, flags =  RESET_REQUIRED;
          endoneof;
          text
              help   = STRING_TOKEN(0x1E50),
              text   = STRING_TOKEN(0x1E51),
              text   = STRING_TOKEN(0x1E67),
              flags  = 0,
              key    = 0;
          subtitle text = STRING_TOKEN(0x0002);
          endif; 

        suppressif ideqval SA_SETUP.VmdPortPresent[22] == 0x0;
          oneof varid     = SA_SETUP.VmdPort[22],
            prompt        = STRING_TOKEN(0x1E2A),
            help          = STRING_TOKEN(0x1E2B),
            default value = cond((get(SA_SETUP.VmdGlobalMapping) & 0x1) == 1 ? 0x1 : 0x0), defaultstore = MyStandardDefault,
            option text   = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
            option text   = STRING_TOKEN(0x0003), value = 1, flags =  RESET_REQUIRED;
          endoneof;
          text
              help   = STRING_TOKEN(0x1E50),
              text   = STRING_TOKEN(0x1E51),
              text   = STRING_TOKEN(0x1E68),
              flags  = 0,
              key    = 0;
          subtitle text = STRING_TOKEN(0x0002);
          endif; 

        suppressif ideqval SA_SETUP.VmdPortPresent[23] == 0x0;
          oneof varid     = SA_SETUP.VmdPort[23],
            prompt        = STRING_TOKEN(0x1E2A),
            help          = STRING_TOKEN(0x1E2B),
            default value = cond((get(SA_SETUP.VmdGlobalMapping) & 0x1) == 1 ? 0x1 : 0x0), defaultstore = MyStandardDefault,
            option text   = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
            option text   = STRING_TOKEN(0x0003), value = 1, flags =  RESET_REQUIRED;
          endoneof;
          text
              help   = STRING_TOKEN(0x1E50),
              text   = STRING_TOKEN(0x1E51),
              text   = STRING_TOKEN(0x1E69),
              flags  = 0,
              key    = 0;
          subtitle text = STRING_TOKEN(0x0002);
          endif; 

        suppressif ideqval SA_SETUP.VmdPortPresent[24] == 0x0;
          oneof varid     = SA_SETUP.VmdPort[24],
            prompt        = STRING_TOKEN(0x1E2A),
            help          = STRING_TOKEN(0x1E2B),
            default value = cond((get(SA_SETUP.VmdGlobalMapping) & 0x1) == 1 ? 0x1 : 0x0), defaultstore = MyStandardDefault,
            option text   = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
            option text   = STRING_TOKEN(0x0003), value = 1, flags =  RESET_REQUIRED;
          endoneof;
          text
              help   = STRING_TOKEN(0x1E50),
              text   = STRING_TOKEN(0x1E51),
              text   = STRING_TOKEN(0x1E6A),
              flags  = 0,
              key    = 0;
          subtitle text = STRING_TOKEN(0x0002);
          endif; 

        suppressif ideqval SA_SETUP.VmdPortPresent[25] == 0x0;
          oneof varid     = SA_SETUP.VmdPort[25],
            prompt        = STRING_TOKEN(0x1E2A),
            help          = STRING_TOKEN(0x1E2B),
            default value = cond((get(SA_SETUP.VmdGlobalMapping) & 0x1) == 1 ? 0x1 : 0x0), defaultstore = MyStandardDefault,
            option text   = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
            option text   = STRING_TOKEN(0x0003), value = 1, flags =  RESET_REQUIRED;
          endoneof;
          text
              help   = STRING_TOKEN(0x1E50),
              text   = STRING_TOKEN(0x1E51),
              text   = STRING_TOKEN(0x1E6B),
              flags  = 0,
              key    = 0;
          subtitle text = STRING_TOKEN(0x0002);
          endif; 

        suppressif ideqval SA_SETUP.VmdPortPresent[26] == 0x0;
          oneof varid     = SA_SETUP.VmdPort[26],
            prompt        = STRING_TOKEN(0x1E2A),
            help          = STRING_TOKEN(0x1E2B),
            default value = cond((get(SA_SETUP.VmdGlobalMapping) & 0x1) == 1 ? 0x1 : 0x0), defaultstore = MyStandardDefault,
            option text   = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
            option text   = STRING_TOKEN(0x0003), value = 1, flags =  RESET_REQUIRED;
          endoneof;
          text
              help   = STRING_TOKEN(0x1E50),
              text   = STRING_TOKEN(0x1E51),
              text   = STRING_TOKEN(0x1E6C),
              flags  = 0,
              key    = 0;
          subtitle text = STRING_TOKEN(0x0002);
          endif; 

        suppressif ideqval SA_SETUP.VmdPortPresent[27] == 0x0;
          oneof varid     = SA_SETUP.VmdPort[27],
            prompt        = STRING_TOKEN(0x1E2A),
            help          = STRING_TOKEN(0x1E2B),
            default value = cond((get(SA_SETUP.VmdGlobalMapping) & 0x1) == 1 ? 0x1 : 0x0), defaultstore = MyStandardDefault,
            option text   = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
            option text   = STRING_TOKEN(0x0003), value = 1, flags =  RESET_REQUIRED;
          endoneof;
          text
              help   = STRING_TOKEN(0x1E50),
              text   = STRING_TOKEN(0x1E51),
              text   = STRING_TOKEN(0x1E6D),
              flags  = 0,
              key    = 0;
          subtitle text = STRING_TOKEN(0x0002);
          endif; 

        suppressif ideqval SA_SETUP.VmdPortPresent[28] == 0x0;
          oneof varid     = SA_SETUP.VmdPort[28],
            prompt        = STRING_TOKEN(0x1E2A),
            help          = STRING_TOKEN(0x1E2B),
            default value = cond((get(SA_SETUP.VmdGlobalMapping) & 0x1) == 1 ? 0x1 : 0x0), defaultstore = MyStandardDefault,
            option text   = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
            option text   = STRING_TOKEN(0x0003), value = 1, flags =  RESET_REQUIRED;
          endoneof;
          text
              help   = STRING_TOKEN(0x1E50),
              text   = STRING_TOKEN(0x1E51),
              text   = STRING_TOKEN(0x1E6E),
              flags  = 0,
              key    = 0;
          subtitle text = STRING_TOKEN(0x0002);
          endif; 

        suppressif ideqval SA_SETUP.VmdPortPresent[29] == 0x0;
          oneof varid     = SA_SETUP.VmdPort[29],
            prompt        = STRING_TOKEN(0x1E2A),
            help          = STRING_TOKEN(0x1E2B),
            default value = cond((get(SA_SETUP.VmdGlobalMapping) & 0x1) == 1 ? 0x1 : 0x0), defaultstore = MyStandardDefault,
            option text   = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
            option text   = STRING_TOKEN(0x0003), value = 1, flags =  RESET_REQUIRED;
          endoneof;
          text
              help   = STRING_TOKEN(0x1E50),
              text   = STRING_TOKEN(0x1E51),
              text   = STRING_TOKEN(0x1E6F),
              flags  = 0,
              key    = 0;
          subtitle text = STRING_TOKEN(0x0002);
          endif; 

        suppressif ideqval SA_SETUP.VmdPortPresent[30] == 0x0;
          oneof varid     = SA_SETUP.VmdPort[30],
            prompt        = STRING_TOKEN(0x1E2A),
            help          = STRING_TOKEN(0x1E2B),
            default value = cond((get(SA_SETUP.VmdGlobalMapping) & 0x1) == 1 ? 0x1 : 0x0), defaultstore = MyStandardDefault,
            option text   = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
            option text   = STRING_TOKEN(0x0003), value = 1, flags =  RESET_REQUIRED;
          endoneof;
          text
              help   = STRING_TOKEN(0x1E50),
              text   = STRING_TOKEN(0x1E51),
              text   = STRING_TOKEN(0x1E70),
              flags  = 0,
              key    = 0;
          subtitle text = STRING_TOKEN(0x0002);
          endif; 
        endif; 

    
    suppressif 1;
      numeric varid = SA_SETUP.VmdCfgBarSize,
        prompt      = STRING_TOKEN(0x1E2C),
        help        = STRING_TOKEN(0x1E2D),
        flags       = RESET_REQUIRED,
        minimum     = 20,
        maximum     = 27,
        step        = 1,
        default     = 25, defaultstore = MyStandardDefault,
      endnumeric;

      oneof varid   = SA_SETUP.VmdCfgBarAttr,
        prompt      = STRING_TOKEN(0x1E2E),
        help        = STRING_TOKEN(0x1E2F),
        option text = STRING_TOKEN(0x1E30),    value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1E31), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1E32), value = 1, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
      endoneof;

      numeric varid = SA_SETUP.VmdMemBarSize1,
        prompt      = STRING_TOKEN(0x1E33),
        help        = STRING_TOKEN(0x1E34),
        flags       = RESET_REQUIRED,
        minimum     = 20,
        maximum     = 39,
        step        = 1,
        default     = 25, defaultstore = MyStandardDefault,
      endnumeric;

      oneof varid   = SA_SETUP.VmdMemBar1Attr,
        prompt      = STRING_TOKEN(0x1E35),
        help        = STRING_TOKEN(0x1E36),
        option text = STRING_TOKEN(0x1E31), value = 0, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
        option text = STRING_TOKEN(0x1E32), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1E30),    value = 2, flags = RESET_REQUIRED ;
      endoneof;

      numeric varid = SA_SETUP.VmdMemBarSize2,
        prompt      = STRING_TOKEN(0x1E37),
        help        = STRING_TOKEN(0x1E38),
        flags       = RESET_REQUIRED,
        minimum     = 20,
        maximum     = 39,
        step        = 1,
        default     = 20, defaultstore = MyStandardDefault,
      endnumeric;

      oneof varid   = SA_SETUP.VmdMemBar2Attr,
        prompt      = STRING_TOKEN(0x1E39),
        help        = STRING_TOKEN(0x1E3A),
        option text = STRING_TOKEN(0x1E31), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1E32), value = 1, flags = RESET_REQUIRED | MANUFACTURING | DEFAULT;
        option text = STRING_TOKEN(0x1E30),    value = 2, flags = RESET_REQUIRED ;
      endoneof;
      subtitle text = STRING_TOKEN(0x0002);
    endif; 

      oneof varid   = SA_SETUP.RaidR0,
        prompt      = STRING_TOKEN(0x1E3B),
        help        = STRING_TOKEN(0x1E3C),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.RaidR1,
        prompt      = STRING_TOKEN(0x1E3D),
        help        = STRING_TOKEN(0x1E3E),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.RaidR5,
        prompt      = STRING_TOKEN(0x1E3F),
        help        = STRING_TOKEN(0x1E40),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.RaidR10,
        prompt      = STRING_TOKEN(0x1E41),
        help        = STRING_TOKEN(0x1E42),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.Rrt,
        prompt      = STRING_TOKEN(0x1E43),
        help        = STRING_TOKEN(0x1E44),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.RrtOnlyEsata,
        prompt      = STRING_TOKEN(0x1E45),
        help        = STRING_TOKEN(0x1E46),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.OptaneMemory,
        prompt      = STRING_TOKEN(0x1E47),
        help        = STRING_TOKEN(0x1E48),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      
      
      
 
      suppressif ideqval SETUP_DATA.IsAdlSNative == 0x1;
        oneof varid   = SETUP_DATA.ZpoddSuportForVmd,
          questionid  = 5222,
          prompt      = STRING_TOKEN(0x1E49),
          help        = STRING_TOKEN(0x1E4A),
          option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
        endoneof;
      endif;
 #line 15039 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaSetup.hfr"
      
      
      
    endif;
    endform;

    
    form formid = 4333,
    title     = STRING_TOKEN(0x1EA9);

    subtitle text = STRING_TOKEN(0x1EAA);
    subtitle text = STRING_TOKEN(0x0002);

    
    
    
    oneof varid   = SA_SETUP.DisplayDdiPort1,
      prompt      = STRING_TOKEN(0x1EAC),
      help        = STRING_TOKEN(0x1EB0),
      option text = STRING_TOKEN(0x0004),       value = 0,    flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x1EB1), value = 1,    flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = SA_SETUP.DisplayDdiPort2,
      prompt      = STRING_TOKEN(0x1EAD),
      help        = STRING_TOKEN(0x1EB0),
      option text = STRING_TOKEN(0x0004),       value = 0,    flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x1EB1), value = 1,    flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = SA_SETUP.DisplayDdiPort3,
      prompt      = STRING_TOKEN(0x1EAE),
      help        = STRING_TOKEN(0x1EB0),
      option text = STRING_TOKEN(0x0004),       value = 0,    flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x1EB1), value = 1,    flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = SA_SETUP.DisplayDdiPort4,
      prompt      = STRING_TOKEN(0x1EAF),
      help        = STRING_TOKEN(0x1EB0),
      option text = STRING_TOKEN(0x0004),       value = 0,    flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x1EB1), value = 1,    flags = RESET_REQUIRED;
    endoneof;
     
     
     
  endform;

    
  form formid   = 5530,
    title         = STRING_TOKEN(0x0B34);

    subtitle text = STRING_TOKEN(0x0B34);
    subtitle text = STRING_TOKEN(0x0002);

    oneof varid     = SA_SETUP.PcieFiaProgramming,
        prompt      = STRING_TOKEN(0x1D24),
        help        = STRING_TOKEN(0x1D25),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    oneof varid   = SA_SETUP.PcieComplianceTestMode,
      prompt      = STRING_TOKEN(0x1D2C),
      help        = STRING_TOKEN(0x1D2D),
      option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
    endoneof;

    
    
    
    oneof varid   = SA_SETUP.PcieRootPortDekelProgramming,
      prompt      = STRING_TOKEN(0x1D38),
      help        = STRING_TOKEN(0x1D39),
      option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = SA_SETUP.PcieRootPortNewFom[0],
      prompt   = STRING_TOKEN (0x1D9F),
      help     = STRING_TOKEN (0x1DA2),
      option text = STRING_TOKEN (0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN (0x0003), value = 1, flags = RESET_REQUIRED;
    endoneof;








#line 15133 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaSetup.hfr"
    
    
    

    oneof varid   = SA_SETUP.PcieRootPortCdrRelock[0],
      prompt      = STRING_TOKEN (0x1DA3),
      help        = STRING_TOKEN (0x1DA5),
      option text = STRING_TOKEN (0x0004), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN (0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    oneof varid   = SA_SETUP.PcieRootPortLinkDownGpios,
      prompt      = STRING_TOKEN(0x1D2E),
      help        = STRING_TOKEN(0x1D2F),
      option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = SA_SETUP.PcieSlotSelection,
      prompt      = STRING_TOKEN(0x1D35),
      help        = STRING_TOKEN(0x1D36),
      option text = STRING_TOKEN(0x110E), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x1D37), value = 0, flags = RESET_REQUIRED;
    endoneof;

    
    
    

    oneof varid    = SA_SETUP.CpuPcieRtd3,
      prompt   = STRING_TOKEN(0x1660),
      help     = STRING_TOKEN(0x1661),
      option text = STRING_TOKEN (0x1590),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN (0x1591), value = 0, flags = RESET_REQUIRED;
    endoneof;
#line 15169 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaSetup.hfr"
    
    
    

    oneof varid    = SA_SETUP.PcieResizableBarSupport,
        prompt   = STRING_TOKEN(0x165E),
        help     = STRING_TOKEN(0x165F),
        option text = STRING_TOKEN (0x158F), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN (0x1590),  value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x1591), value = 0, flags = RESET_REQUIRED;
    endoneof;






#line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaPcieStringPool.hfr"
































































































































































































#line 15187 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaSetup.hfr"


#line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaPcieSetupSinglePortMenu.hfr"

































    suppressif NOT ideqval SETUP_VOLATILE_DATA.CpuPciePortCfg[0] == 0;
      goto 5506,
        prompt = STRING_TOKEN(0x1044),
        help = STRING_TOKEN(0x1060);
    endif;
    suppressif NOT ideqval SETUP_VOLATILE_DATA.CpuPciePortCfg[0] == 1;
      text
        help   = STRING_TOKEN(0x0851),
        text   = STRING_TOKEN(0x1044),
        text   = STRING_TOKEN(0x1061);
    endif;
    
    
    

#line 15190 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaSetup.hfr"


#line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaPcieSetupSinglePortMenu.hfr"

































    suppressif NOT ideqval SETUP_VOLATILE_DATA.CpuPciePortCfg[1] == 0;
      goto 5507,
        prompt = STRING_TOKEN(0x1045),
        help = STRING_TOKEN(0x1060);
    endif;
    suppressif NOT ideqval SETUP_VOLATILE_DATA.CpuPciePortCfg[1] == 1;
      text
        help   = STRING_TOKEN(0x0851),
        text   = STRING_TOKEN(0x1045),
        text   = STRING_TOKEN(0x1061);
    endif;
    
    
    

#line 15193 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaSetup.hfr"


#line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaPcieSetupSinglePortMenu.hfr"

































    suppressif NOT ideqval SETUP_VOLATILE_DATA.CpuPciePortCfg[2] == 0;
      goto 5508,
        prompt = STRING_TOKEN(0x1046),
        help = STRING_TOKEN(0x1060);
    endif;
    suppressif NOT ideqval SETUP_VOLATILE_DATA.CpuPciePortCfg[2] == 1;
      text
        help   = STRING_TOKEN(0x0851),
        text   = STRING_TOKEN(0x1046),
        text   = STRING_TOKEN(0x1061);
    endif;
    
    
    

#line 15196 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaSetup.hfr"


  endform; 

  
  
  
  
  
  
  form formid = 4119,
    title     = STRING_TOKEN(0x1EB6);

    subtitle text = STRING_TOKEN(0x1EB6);
    subtitle text = STRING_TOKEN(0x0002);

    oneof varid     = SA_SETUP.DynamicBoostEnable,
        prompt      = STRING_TOKEN(0x1EB7),
        help        = STRING_TOKEN(0x1EB8),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
    endoneof;

    numeric varid = SA_SETUP.AcTotalGraphicsPowerValue,
      prompt      = STRING_TOKEN(0x1EB9),
      help        = STRING_TOKEN(0x1EBA),
      minimum     = 0x0000,
      maximum     = 0xFFFF,
      step        = 1,
      default     = 0x0000,
    endnumeric;


    numeric varid = SA_SETUP.AcTotalGraphicsPowerMaxValue,
      prompt      = STRING_TOKEN(0x1EBD),
      help        = STRING_TOKEN(0x1EBE),
      minimum     = 0x0000,
      maximum     = 0xFFFF,
      step        = 1,
      default     = 40,
    endnumeric;

    numeric varid = SA_SETUP.AcTotalGraphicsPowerMinValue,
      prompt      = STRING_TOKEN(0x1EBF),
      help        = STRING_TOKEN(0x1EC0),
      minimum     = 0x0000,
      maximum     = 0xFFFF,
      step        = 1,
      default     = 0x0000,
    endnumeric;

    numeric varid = SA_SETUP.AcTotalProcessPowerValue,
      prompt      = STRING_TOKEN(0x1EC1),
      help        = STRING_TOKEN(0x1EC2),
      minimum     = 0x0000,
      maximum     = 0xFFFF,
      step        = 1,
      default     = 200,
    endnumeric;
    subtitle text = STRING_TOKEN(0x0002);
    numeric varid = SA_SETUP.DcTotalGraphicsPowerValue,
      prompt      = STRING_TOKEN(0x1EBB),
      help        = STRING_TOKEN(0x1EBC),
      minimum     = 0x0000,
      maximum     = 0xFFFF,
      step        = 1,
      default     = 0x0000,
    endnumeric;

    numeric varid = SA_SETUP.DcTotalProcessPowerValue,
      prompt      = STRING_TOKEN(0x1EC3),
      help        = STRING_TOKEN(0x1EC4),
      minimum     = 0x0000,
      maximum     = 0xFFFF,
      step        = 1,
      default     = 0x0000,
    endnumeric;
    subtitle text = STRING_TOKEN(0x0002);

  endform; 
  
  
  








#line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaPcieSetupSinglePort.hfr"

































  form formid = 5506,
    title     = STRING_TOKEN(0x1D1F);

    oneof varid   = SA_SETUP.PcieRootPortEn[0],
      prompt      = STRING_TOKEN(0x1DF5),
      help        = STRING_TOKEN(0x1D23),
      option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    suppressif ideqval SA_SETUP.PcieRootPortEn[0] == 0x0;
      grayoutif ideqval SA_SETUP.PcieRootPortHPE[0] == 1;
        oneof varid   = SA_SETUP.PcieRootPortSI[0],
          prompt      = STRING_TOKEN(0x1D96),
          help        = STRING_TOKEN(0x112B),
          option text = STRING_TOKEN(0x112C), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x112D), value = 1, flags = DEFAULT | RESET_REQUIRED;
        endoneof;
      endif;

       
        oneof varid     = SA_SETUP.PcieRootPortClockGating[0],
          questionid  = 5480,
          prompt      = STRING_TOKEN(0x1D26),
          help        = STRING_TOKEN(0x0BE7),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
       

      oneof varid     = SA_SETUP.PcieRootPortPowerGating[0],
        prompt      = STRING_TOKEN(0x1D2A),
        help        = STRING_TOKEN(0x1D2B),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

       
        oneof varid   = SA_SETUP.PcieRootPortAspm[0],
          questionid  = 5510,
          prompt      = STRING_TOKEN(0x1DAB),
          help        = STRING_TOKEN(0x0BA5),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0BA6), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0BA7), value = 2, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0BA8), value = 3, flags = RESET_REQUIRED;
        endoneof;

        grayoutif ideqval SA_SETUP.PcieRootPortClockReqMsgEnable[0] == 0;
          oneof varid   = SA_SETUP.PcieRootPortL1SubStates[0],
          questionid    = 5514,
            prompt      = STRING_TOKEN(0x1DAF),
            help        = STRING_TOKEN(0x1DB3),
            option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1DB4), value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1DB5), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          endoneof;
        endif;
       

      oneof varid   = SA_SETUP.PcieRootPortEqPh3Method[0],
        prompt      = STRING_TOKEN(0x1DA6),
        help        = STRING_TOKEN(0x1DA8),
        option text = STRING_TOKEN(0x1DA9),           value = 1, flags = RESET_REQUIRED | DEFAULT;
        option text = STRING_TOKEN(0x1DAA), value = 4, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.PcieRootPortGen4EqPh3Method[0],
        prompt      = STRING_TOKEN(0x1DA7),
        help        = STRING_TOKEN(0x1DA8),
        option text = STRING_TOKEN(0x1DA9),           value = 1, flags = RESET_REQUIRED | DEFAULT;
        option text = STRING_TOKEN(0x1DAA), value = 4, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.PcieRootPortACS[0],
        prompt      = STRING_TOKEN(0x1D49),
        help        = STRING_TOKEN(0x0BE6),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

       
        oneof varid   = SA_SETUP.PcieRootPortPTM[0],
          questionid  = 5518,
          prompt      = STRING_TOKEN(0x1DC8),
          help        = STRING_TOKEN(0x1DCC),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
       

      oneof varid   = SA_SETUP.PcieRootPortDPC[0],
        prompt      = STRING_TOKEN(0x1D75),
        help        = STRING_TOKEN(0x1D79),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.CpuPcieFomsCp[0],
        prompt      = STRING_TOKEN(0x1D8C),
        help        = STRING_TOKEN(0x1D90),
        option text = STRING_TOKEN(0x0006), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0C62), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0C63), value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1D8A), value = 3, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1D8B), value = 4, flags = RESET_REQUIRED;
      endoneof;

       
        oneof varid   = SA_SETUP.PcieRootPortMultiVc[0],
          questionid    = 5526,
          prompt      = STRING_TOKEN(0x1D7E),
          help        = STRING_TOKEN(0x1D82),
    


#line 151 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaPcieSetupSinglePort.hfr"
    
          default value = cond(0 == 1 ? 1 : 0),
    

#line 156 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaPcieSetupSinglePort.hfr"
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
    #line 159 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaPcieSetupSinglePort.hfr"
        endoneof;
       

      oneof varid   = SA_SETUP.PcieRootPortEDPC[0],
        prompt      = STRING_TOKEN(0x1D91),
        help        = STRING_TOKEN(0x1D95),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.PcieRootPortURE[0],
        prompt      = STRING_TOKEN(0x1D52),
        help        = STRING_TOKEN(0x1D56),


#line 175 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaPcieSetupSinglePort.hfr"
        default     = 0, defaultstore = MyStandardDefault,
#line 177 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaPcieSetupSinglePort.hfr"
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.PcieRootPortFEE[0],
        prompt      = STRING_TOKEN(0x1D57),
        help        = STRING_TOKEN(0x1D5B),


#line 187 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaPcieSetupSinglePort.hfr"
        default     = 0, defaultstore = MyStandardDefault,
#line 189 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaPcieSetupSinglePort.hfr"
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.PcieRootPortNFE[0],
        prompt      = STRING_TOKEN(0x1D5C),
        help        = STRING_TOKEN(0x1D60),


#line 199 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaPcieSetupSinglePort.hfr"
        default     = 0, defaultstore = MyStandardDefault,
#line 201 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaPcieSetupSinglePort.hfr"
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.PcieRootPortCEE[0],
        prompt      = STRING_TOKEN(0x1D61),
        help        = STRING_TOKEN(0x1D65),


#line 211 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaPcieSetupSinglePort.hfr"
        default     = 0, defaultstore = MyStandardDefault,
#line 213 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaPcieSetupSinglePort.hfr"
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortCTD[0],
        prompt      = STRING_TOKEN(0x0CF5),
        help        = STRING_TOKEN(0x0D11),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.PcieRootPortSFE[0],
        prompt      = STRING_TOKEN(0x1D66),
        help        = STRING_TOKEN(0x1D6A),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.PcieRootPortSNE[0],
        prompt      = STRING_TOKEN(0x1D6B),
        help        = STRING_TOKEN(0x1D6F),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.PcieRootPortSCE[0],
        prompt      = STRING_TOKEN(0x1D70),
        help        = STRING_TOKEN(0x1D74),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.PcieRootPortPMCE[0],
        prompt      = STRING_TOKEN(0x1D3F),
        help        = STRING_TOKEN(0x1D43),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      suppressif ideqval SETUP_VOLATILE_DATA.PlatformFlavor == 0x2;
        suppressif 0 == 1;
          grayoutif ideqval SA_SETUP.PcieRootPortSI[0] == 0;
            oneof varid   = SA_SETUP.PcieRootPortHPE[0],
              prompt      = STRING_TOKEN(0x1D3A),
              help        = STRING_TOKEN(0x1D3E),
              option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
              option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
            endoneof;
          endif;
        endif;
      endif;

      oneof varid   = SA_SETUP.PcieRootPortAER[0],
        prompt      = STRING_TOKEN(0x1D4D),
        help        = STRING_TOKEN(0x1D51),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.PcieRootPortSpeed[0],
        prompt   = STRING_TOKEN (0x1D9A),
        help     = STRING_TOKEN (0x1D9E),

        option text = STRING_TOKEN (0x0006), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN (0x0C60), value = 1, flags = RESET_REQUIRED;



#line 282 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaPcieSetupSinglePort.hfr"
        option text = STRING_TOKEN (0x0C61), value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x0C62), value = 3, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x0C63), value = 4, flags = RESET_REQUIRED;
      suppressif 0 == 0;
        option text = STRING_TOKEN (0x1D8B), value = 5, flags = RESET_REQUIRED;
      endif;
      endoneof;

    oneof varid   = SA_SETUP.PcieRootPortClockReqMsgEnable[0],
      prompt      = STRING_TOKEN(0x1D30),
      help        = STRING_TOKEN(0x1D34),
      option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
    endoneof;

      oneof varid   = SA_SETUP.PcieRootPortTHS[0],
        prompt      = STRING_TOKEN(0x1D44),
        help        = STRING_TOKEN(0x1D48),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      numeric varid = SA_SETUP.PcieDetectTimeoutMs[0],
        prompt      = STRING_TOKEN (0x1DCD),
        help        = STRING_TOKEN (0x1DD1),
        minimum     = 0,
        maximum     = 65535,
        step        = 1,
        default     = 0,
      endnumeric;

      oneof varid   = SA_SETUP.CpuPcieRootPortPeerToPeerMode[0],
        prompt      = STRING_TOKEN(0x1D83),
        help        = STRING_TOKEN(0x1D87),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      suppressif NOT (((0 == 1) AND (ideqval SETUP_VOLATILE_DATA.PlatformFlavor == 0x2)) OR
                     ((0 == 1) AND (ideqval SETUP_VOLATILE_DATA.PlatformFlavor == 0x6)) OR
                     (((0 == 0) AND (ideqval SETUP_VOLATILE_DATA.PlatformFlavor == 0x1))));
        oneof varid   = SA_SETUP.PcieFunc0LinkDisable[0],
          prompt      = STRING_TOKEN(0x1D88),
          help        = STRING_TOKEN(0x1D89),
          option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
        endoneof;
      endif;

      subtitle text = STRING_TOKEN(0x0002);

      subtitle text = STRING_TOKEN(0x1DB6);
      oneof varid   = SA_SETUP.CpuPcieLtrEnable[0],
        prompt   = STRING_TOKEN (0x1DB7),
        help     = STRING_TOKEN (0x1DBB),
        option text = STRING_TOKEN(0x0004),  value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      suppressif ideqval SA_SETUP.CpuPcieLtrEnable[0] == 0;
        oneof varid   = SA_SETUP.CpuPcieSnoopLatencyOverrideMode[0],
          prompt      = STRING_TOKEN (0x1DD2),
          help        = STRING_TOKEN (0x1DEE),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x09F8),   value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x158F),     value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        suppressif NOT ideqval SA_SETUP.CpuPcieSnoopLatencyOverrideMode[0] == 1;
          numeric varid = SA_SETUP.CpuPcieSnoopLatencyOverrideValue[0],
            prompt      = STRING_TOKEN(0x1DD4),
            help        = STRING_TOKEN(0x1DF1),
            flags       = RESET_REQUIRED,
            minimum     = 0,
            maximum     = 1023,
            step        = 1,
            default     = 60,
          endnumeric;

          oneof varid   = SA_SETUP.CpuPcieSnoopLatencyOverrideMultiplier[0],
            prompt      = STRING_TOKEN(0x1DD5),
            help        = STRING_TOKEN(0x1DF0),
            option text = STRING_TOKEN(0x0E74), value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E75), value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E76), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E77), value = 3, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E78), value = 4, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E79), value = 5, flags = RESET_REQUIRED;
          endoneof;
        endif;

        oneof varid   = SA_SETUP.CpuPcieNonSnoopLatencyOverrideMode[0],
          prompt      = STRING_TOKEN (0x1DD3),
          help        = STRING_TOKEN (0x1DEF),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x09F8),   value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x158F),     value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        suppressif NOT ideqval SA_SETUP.CpuPcieNonSnoopLatencyOverrideMode[0] == 1;
          numeric varid = SA_SETUP.CpuPcieNonSnoopLatencyOverrideValue[0],
            prompt      = STRING_TOKEN(0x1DD6),
            help        = STRING_TOKEN(0x1DF2),
            flags       = RESET_REQUIRED,
            minimum     = 0,
            maximum     = 1023,
            step        = 1,
            default     = 60,
          endnumeric;

          oneof varid   = SA_SETUP.CpuPcieNonSnoopLatencyOverrideMultiplier[0],
            prompt      = STRING_TOKEN(0x1DD7),
            help        = STRING_TOKEN(0x1DF3),
            option text = STRING_TOKEN(0x0E74), value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E75), value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E76), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E77), value = 3, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E78), value = 4, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E79), value = 5, flags = RESET_REQUIRED;
          endoneof;
        endif;

        oneof varid  = SA_SETUP.CpuPcieForceLtrOverride[0],
          prompt      = STRING_TOKEN(0x1DEA),
          help        = STRING_TOKEN(0x1DF4),
          option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
        endoneof;

      endif;

      subtitle text = STRING_TOKEN(0x0002);

      oneof varid   = SA_SETUP.CpuPcieLtrConfigLock[0],
        prompt   = STRING_TOKEN (0x1DBC),
        help     = STRING_TOKEN (0x1DC0),
        option text = STRING_TOKEN(0x0004),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = RESET_REQUIRED;
      endoneof;

    endif;

    subtitle text = STRING_TOKEN(0x0002);

    subtitle text = STRING_TOKEN(0x1DC1);
      numeric varid = SA_SETUP.PcieRootPortGen3Uptp[0],
        prompt      = STRING_TOKEN (0x1DC4),
        help        = STRING_TOKEN (0x1DC5),
        minimum     = 0,
        maximum     = 10,
        step        = 1,
        default value = cond(0 == 1 ? 0x5 : 0x7), defaultstore = MyStandardDefault,
      endnumeric;

      numeric varid = SA_SETUP.PcieRootPortGen3Dptp[0],
        prompt      = STRING_TOKEN (0x1DC6),
        help        = STRING_TOKEN (0x1DC7),
        minimum     = 0,
        maximum     = 10,
        step        = 1,
        default     = 7,
      endnumeric;

    subtitle text = STRING_TOKEN(0x0002);

    subtitle text = STRING_TOKEN(0x1DC2);
      numeric varid = SA_SETUP.PcieRootPortGen4Uptp[0],
        prompt      = STRING_TOKEN (0x1DC4),
        help        = STRING_TOKEN (0x1DC5),
        minimum     = 0,
        maximum     = 10,
        step        = 1,
        default value = cond(0 == 1 ? 0x8 : 0x7), defaultstore = MyStandardDefault,
      endnumeric;

      numeric varid = SA_SETUP.PcieRootPortGen4Dptp[0],
        prompt      = STRING_TOKEN (0x1DC6),
        help        = STRING_TOKEN (0x1DC7),
        minimum     = 0,
        maximum     = 10,
        step        = 1,
        default value = cond(0 == 1 ? 0x9 : 0x5), defaultstore = MyStandardDefault,
      endnumeric;

    subtitle text = STRING_TOKEN(0x0002);

  suppressif ((0 == 0) OR ((0 == 2) AND (ideqval SETUP_VOLATILE_DATA.PlatformFlavor == 0x1 OR ideqval SETUP_VOLATILE_DATA.PlatformFlavor == 0x6)));
    subtitle text = STRING_TOKEN(0x1DC3);

      numeric varid = SA_SETUP.PcieRootPortGen5Uptp[0],
        prompt      = STRING_TOKEN (0x1DC4),
        help        = STRING_TOKEN (0x1DC5),
        minimum     = 0,
        maximum     = 10,
        step        = 1,
        default     = 5,
      endnumeric;

      numeric varid = SA_SETUP.PcieRootPortGen5Dptp[0],
        prompt      = STRING_TOKEN (0x1DC6),
        help        = STRING_TOKEN (0x1DC7),
        minimum     = 0,
        maximum     = 10,
        step        = 1,
        default     = 7,
      endnumeric;

    subtitle text = STRING_TOKEN(0x0002);
  endif;
  endform; 
#line 15288 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaSetup.hfr"





#line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaPcieSetupSinglePort.hfr"

































  form formid = 5507,
    title     = STRING_TOKEN(0x1D20);

    oneof varid   = SA_SETUP.PcieRootPortEn[1],
      prompt      = STRING_TOKEN(0x1DF6),
      help        = STRING_TOKEN(0x1D23),
      option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    suppressif ideqval SA_SETUP.PcieRootPortEn[1] == 0x0;
      grayoutif ideqval SA_SETUP.PcieRootPortHPE[1] == 1;
        oneof varid   = SA_SETUP.PcieRootPortSI[1],
          prompt      = STRING_TOKEN(0x1D97),
          help        = STRING_TOKEN(0x112B),
          option text = STRING_TOKEN(0x112C), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x112D), value = 1, flags = DEFAULT | RESET_REQUIRED;
        endoneof;
      endif;

       
        oneof varid     = SA_SETUP.PcieRootPortClockGating[1],
          questionid  = 5481,
          prompt      = STRING_TOKEN(0x1D27),
          help        = STRING_TOKEN(0x0BE7),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
       

      oneof varid     = SA_SETUP.PcieRootPortPowerGating[1],
        prompt      = STRING_TOKEN(0x1D2A),
        help        = STRING_TOKEN(0x1D2B),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

       
        oneof varid   = SA_SETUP.PcieRootPortAspm[1],
          questionid  = 5511,
          prompt      = STRING_TOKEN(0x1DAC),
          help        = STRING_TOKEN(0x0BA5),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0BA6), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0BA7), value = 2, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0BA8), value = 3, flags = RESET_REQUIRED;
        endoneof;

        grayoutif ideqval SA_SETUP.PcieRootPortClockReqMsgEnable[1] == 0;
          oneof varid   = SA_SETUP.PcieRootPortL1SubStates[1],
          questionid    = 5515,
            prompt      = STRING_TOKEN(0x1DB0),
            help        = STRING_TOKEN(0x1DB3),
            option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1DB4), value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1DB5), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          endoneof;
        endif;
       

      oneof varid   = SA_SETUP.PcieRootPortEqPh3Method[1],
        prompt      = STRING_TOKEN(0x1DA6),
        help        = STRING_TOKEN(0x1DA8),
        option text = STRING_TOKEN(0x1DA9),           value = 1, flags = RESET_REQUIRED | DEFAULT;
        option text = STRING_TOKEN(0x1DAA), value = 4, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.PcieRootPortGen4EqPh3Method[1],
        prompt      = STRING_TOKEN(0x1DA7),
        help        = STRING_TOKEN(0x1DA8),
        option text = STRING_TOKEN(0x1DA9),           value = 1, flags = RESET_REQUIRED | DEFAULT;
        option text = STRING_TOKEN(0x1DAA), value = 4, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.PcieRootPortACS[1],
        prompt      = STRING_TOKEN(0x1D4A),
        help        = STRING_TOKEN(0x0BE6),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

       
        oneof varid   = SA_SETUP.PcieRootPortPTM[1],
          questionid  = 5519,
          prompt      = STRING_TOKEN(0x1DC9),
          help        = STRING_TOKEN(0x1DCC),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
       

      oneof varid   = SA_SETUP.PcieRootPortDPC[1],
        prompt      = STRING_TOKEN(0x1D76),
        help        = STRING_TOKEN(0x1D79),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.CpuPcieFomsCp[1],
        prompt      = STRING_TOKEN(0x1D8D),
        help        = STRING_TOKEN(0x1D90),
        option text = STRING_TOKEN(0x0006), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0C62), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0C63), value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1D8A), value = 3, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1D8B), value = 4, flags = RESET_REQUIRED;
      endoneof;

       
        oneof varid   = SA_SETUP.PcieRootPortMultiVc[1],
          questionid    = 5527,
          prompt      = STRING_TOKEN(0x1D7F),
          help        = STRING_TOKEN(0x1D82),
    


#line 151 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaPcieSetupSinglePort.hfr"
    
          default value = cond(1 == 1 ? 1 : 0),
    

#line 156 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaPcieSetupSinglePort.hfr"
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
    #line 159 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaPcieSetupSinglePort.hfr"
        endoneof;
       

      oneof varid   = SA_SETUP.PcieRootPortEDPC[1],
        prompt      = STRING_TOKEN(0x1D92),
        help        = STRING_TOKEN(0x1D95),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.PcieRootPortURE[1],
        prompt      = STRING_TOKEN(0x1D53),
        help        = STRING_TOKEN(0x1D56),


#line 175 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaPcieSetupSinglePort.hfr"
        default     = 0, defaultstore = MyStandardDefault,
#line 177 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaPcieSetupSinglePort.hfr"
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.PcieRootPortFEE[1],
        prompt      = STRING_TOKEN(0x1D58),
        help        = STRING_TOKEN(0x1D5B),


#line 187 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaPcieSetupSinglePort.hfr"
        default     = 0, defaultstore = MyStandardDefault,
#line 189 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaPcieSetupSinglePort.hfr"
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.PcieRootPortNFE[1],
        prompt      = STRING_TOKEN(0x1D5D),
        help        = STRING_TOKEN(0x1D60),


#line 199 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaPcieSetupSinglePort.hfr"
        default     = 0, defaultstore = MyStandardDefault,
#line 201 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaPcieSetupSinglePort.hfr"
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.PcieRootPortCEE[1],
        prompt      = STRING_TOKEN(0x1D62),
        help        = STRING_TOKEN(0x1D65),


#line 211 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaPcieSetupSinglePort.hfr"
        default     = 0, defaultstore = MyStandardDefault,
#line 213 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaPcieSetupSinglePort.hfr"
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortCTD[1],
        prompt      = STRING_TOKEN(0x0CF6),
        help        = STRING_TOKEN(0x0D11),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.PcieRootPortSFE[1],
        prompt      = STRING_TOKEN(0x1D67),
        help        = STRING_TOKEN(0x1D6A),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.PcieRootPortSNE[1],
        prompt      = STRING_TOKEN(0x1D6C),
        help        = STRING_TOKEN(0x1D6F),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.PcieRootPortSCE[1],
        prompt      = STRING_TOKEN(0x1D71),
        help        = STRING_TOKEN(0x1D74),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.PcieRootPortPMCE[1],
        prompt      = STRING_TOKEN(0x1D40),
        help        = STRING_TOKEN(0x1D43),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      suppressif ideqval SETUP_VOLATILE_DATA.PlatformFlavor == 0x2;
        suppressif 1 == 1;
          grayoutif ideqval SA_SETUP.PcieRootPortSI[1] == 0;
            oneof varid   = SA_SETUP.PcieRootPortHPE[1],
              prompt      = STRING_TOKEN(0x1D3B),
              help        = STRING_TOKEN(0x1D3E),
              option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
              option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
            endoneof;
          endif;
        endif;
      endif;

      oneof varid   = SA_SETUP.PcieRootPortAER[1],
        prompt      = STRING_TOKEN(0x1D4E),
        help        = STRING_TOKEN(0x1D51),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.PcieRootPortSpeed[1],
        prompt   = STRING_TOKEN (0x1D9B),
        help     = STRING_TOKEN (0x1D9E),

        option text = STRING_TOKEN (0x0006), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN (0x0C60), value = 1, flags = RESET_REQUIRED;



#line 282 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaPcieSetupSinglePort.hfr"
        option text = STRING_TOKEN (0x0C61), value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x0C62), value = 3, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x0C63), value = 4, flags = RESET_REQUIRED;
      suppressif 1 == 0;
        option text = STRING_TOKEN (0x1D8B), value = 5, flags = RESET_REQUIRED;
      endif;
      endoneof;

    oneof varid   = SA_SETUP.PcieRootPortClockReqMsgEnable[1],
      prompt      = STRING_TOKEN(0x1D31),
      help        = STRING_TOKEN(0x1D34),
      option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
    endoneof;

      oneof varid   = SA_SETUP.PcieRootPortTHS[1],
        prompt      = STRING_TOKEN(0x1D45),
        help        = STRING_TOKEN(0x1D48),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      numeric varid = SA_SETUP.PcieDetectTimeoutMs[1],
        prompt      = STRING_TOKEN (0x1DCE),
        help        = STRING_TOKEN (0x1DD1),
        minimum     = 0,
        maximum     = 65535,
        step        = 1,
        default     = 0,
      endnumeric;

      oneof varid   = SA_SETUP.CpuPcieRootPortPeerToPeerMode[1],
        prompt      = STRING_TOKEN(0x1D84),
        help        = STRING_TOKEN(0x1D87),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      suppressif NOT (((1 == 1) AND (ideqval SETUP_VOLATILE_DATA.PlatformFlavor == 0x2)) OR
                     ((1 == 1) AND (ideqval SETUP_VOLATILE_DATA.PlatformFlavor == 0x6)) OR
                     (((1 == 0) AND (ideqval SETUP_VOLATILE_DATA.PlatformFlavor == 0x1))));
        oneof varid   = SA_SETUP.PcieFunc0LinkDisable[1],
          prompt      = STRING_TOKEN(0x1D88),
          help        = STRING_TOKEN(0x1D89),
          option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
        endoneof;
      endif;

      subtitle text = STRING_TOKEN(0x0002);

      subtitle text = STRING_TOKEN(0x1DB6);
      oneof varid   = SA_SETUP.CpuPcieLtrEnable[1],
        prompt   = STRING_TOKEN (0x1DB8),
        help     = STRING_TOKEN (0x1DBB),
        option text = STRING_TOKEN(0x0004),  value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      suppressif ideqval SA_SETUP.CpuPcieLtrEnable[1] == 0;
        oneof varid   = SA_SETUP.CpuPcieSnoopLatencyOverrideMode[1],
          prompt      = STRING_TOKEN (0x1DD8),
          help        = STRING_TOKEN (0x1DEE),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x09F8),   value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x158F),     value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        suppressif NOT ideqval SA_SETUP.CpuPcieSnoopLatencyOverrideMode[1] == 1;
          numeric varid = SA_SETUP.CpuPcieSnoopLatencyOverrideValue[1],
            prompt      = STRING_TOKEN(0x1DDA),
            help        = STRING_TOKEN(0x1DF1),
            flags       = RESET_REQUIRED,
            minimum     = 0,
            maximum     = 1023,
            step        = 1,
            default     = 60,
          endnumeric;

          oneof varid   = SA_SETUP.CpuPcieSnoopLatencyOverrideMultiplier[1],
            prompt      = STRING_TOKEN(0x1DDB),
            help        = STRING_TOKEN(0x1DF0),
            option text = STRING_TOKEN(0x0E74), value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E75), value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E76), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E77), value = 3, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E78), value = 4, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E79), value = 5, flags = RESET_REQUIRED;
          endoneof;
        endif;

        oneof varid   = SA_SETUP.CpuPcieNonSnoopLatencyOverrideMode[1],
          prompt      = STRING_TOKEN (0x1DD9),
          help        = STRING_TOKEN (0x1DEF),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x09F8),   value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x158F),     value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        suppressif NOT ideqval SA_SETUP.CpuPcieNonSnoopLatencyOverrideMode[1] == 1;
          numeric varid = SA_SETUP.CpuPcieNonSnoopLatencyOverrideValue[1],
            prompt      = STRING_TOKEN(0x1DDC),
            help        = STRING_TOKEN(0x1DF2),
            flags       = RESET_REQUIRED,
            minimum     = 0,
            maximum     = 1023,
            step        = 1,
            default     = 60,
          endnumeric;

          oneof varid   = SA_SETUP.CpuPcieNonSnoopLatencyOverrideMultiplier[1],
            prompt      = STRING_TOKEN(0x1DDD),
            help        = STRING_TOKEN(0x1DF3),
            option text = STRING_TOKEN(0x0E74), value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E75), value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E76), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E77), value = 3, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E78), value = 4, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E79), value = 5, flags = RESET_REQUIRED;
          endoneof;
        endif;

        oneof varid  = SA_SETUP.CpuPcieForceLtrOverride[1],
          prompt      = STRING_TOKEN(0x1DEB),
          help        = STRING_TOKEN(0x1DF4),
          option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
        endoneof;

      endif;

      subtitle text = STRING_TOKEN(0x0002);

      oneof varid   = SA_SETUP.CpuPcieLtrConfigLock[1],
        prompt   = STRING_TOKEN (0x1DBD),
        help     = STRING_TOKEN (0x1DC0),
        option text = STRING_TOKEN(0x0004),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = RESET_REQUIRED;
      endoneof;

    endif;

    subtitle text = STRING_TOKEN(0x0002);

    subtitle text = STRING_TOKEN(0x1DC1);
      numeric varid = SA_SETUP.PcieRootPortGen3Uptp[1],
        prompt      = STRING_TOKEN (0x1DC4),
        help        = STRING_TOKEN (0x1DC5),
        minimum     = 0,
        maximum     = 10,
        step        = 1,
        default value = cond(1 == 1 ? 0x5 : 0x7), defaultstore = MyStandardDefault,
      endnumeric;

      numeric varid = SA_SETUP.PcieRootPortGen3Dptp[1],
        prompt      = STRING_TOKEN (0x1DC6),
        help        = STRING_TOKEN (0x1DC7),
        minimum     = 0,
        maximum     = 10,
        step        = 1,
        default     = 7,
      endnumeric;

    subtitle text = STRING_TOKEN(0x0002);

    subtitle text = STRING_TOKEN(0x1DC2);
      numeric varid = SA_SETUP.PcieRootPortGen4Uptp[1],
        prompt      = STRING_TOKEN (0x1DC4),
        help        = STRING_TOKEN (0x1DC5),
        minimum     = 0,
        maximum     = 10,
        step        = 1,
        default value = cond(1 == 1 ? 0x8 : 0x7), defaultstore = MyStandardDefault,
      endnumeric;

      numeric varid = SA_SETUP.PcieRootPortGen4Dptp[1],
        prompt      = STRING_TOKEN (0x1DC6),
        help        = STRING_TOKEN (0x1DC7),
        minimum     = 0,
        maximum     = 10,
        step        = 1,
        default value = cond(1 == 1 ? 0x9 : 0x5), defaultstore = MyStandardDefault,
      endnumeric;

    subtitle text = STRING_TOKEN(0x0002);

  suppressif ((1 == 0) OR ((1 == 2) AND (ideqval SETUP_VOLATILE_DATA.PlatformFlavor == 0x1 OR ideqval SETUP_VOLATILE_DATA.PlatformFlavor == 0x6)));
    subtitle text = STRING_TOKEN(0x1DC3);

      numeric varid = SA_SETUP.PcieRootPortGen5Uptp[1],
        prompt      = STRING_TOKEN (0x1DC4),
        help        = STRING_TOKEN (0x1DC5),
        minimum     = 0,
        maximum     = 10,
        step        = 1,
        default     = 5,
      endnumeric;

      numeric varid = SA_SETUP.PcieRootPortGen5Dptp[1],
        prompt      = STRING_TOKEN (0x1DC6),
        help        = STRING_TOKEN (0x1DC7),
        minimum     = 0,
        maximum     = 10,
        step        = 1,
        default     = 7,
      endnumeric;

    subtitle text = STRING_TOKEN(0x0002);
  endif;
  endform; 
#line 15294 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaSetup.hfr"







#line 15302 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaSetup.hfr"

#line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaPcieSetupSinglePort.hfr"

































  form formid = 5508,
    title     = STRING_TOKEN(0x1D21);

    oneof varid   = SA_SETUP.PcieRootPortEn[2],
      prompt      = STRING_TOKEN(0x1DF7),
      help        = STRING_TOKEN(0x1D23),
      option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    suppressif ideqval SA_SETUP.PcieRootPortEn[2] == 0x0;
      grayoutif ideqval SA_SETUP.PcieRootPortHPE[2] == 1;
        oneof varid   = SA_SETUP.PcieRootPortSI[2],
          prompt      = STRING_TOKEN(0x1D98),
          help        = STRING_TOKEN(0x112B),
          option text = STRING_TOKEN(0x112C), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x112D), value = 1, flags = DEFAULT | RESET_REQUIRED;
        endoneof;
      endif;

       
        oneof varid     = SA_SETUP.PcieRootPortClockGating[2],
          questionid  = 5482,
          prompt      = STRING_TOKEN(0x1D28),
          help        = STRING_TOKEN(0x0BE7),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
       

      oneof varid     = SA_SETUP.PcieRootPortPowerGating[2],
        prompt      = STRING_TOKEN(0x1D2A),
        help        = STRING_TOKEN(0x1D2B),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

       
        oneof varid   = SA_SETUP.PcieRootPortAspm[2],
          questionid  = 5512,
          prompt      = STRING_TOKEN(0x1DAD),
          help        = STRING_TOKEN(0x0BA5),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0BA6), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0BA7), value = 2, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0BA8), value = 3, flags = RESET_REQUIRED;
        endoneof;

        grayoutif ideqval SA_SETUP.PcieRootPortClockReqMsgEnable[2] == 0;
          oneof varid   = SA_SETUP.PcieRootPortL1SubStates[2],
          questionid    = 5516,
            prompt      = STRING_TOKEN(0x1DB1),
            help        = STRING_TOKEN(0x1DB3),
            option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1DB4), value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1DB5), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          endoneof;
        endif;
       

      oneof varid   = SA_SETUP.PcieRootPortEqPh3Method[2],
        prompt      = STRING_TOKEN(0x1DA6),
        help        = STRING_TOKEN(0x1DA8),
        option text = STRING_TOKEN(0x1DA9),           value = 1, flags = RESET_REQUIRED | DEFAULT;
        option text = STRING_TOKEN(0x1DAA), value = 4, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.PcieRootPortGen4EqPh3Method[2],
        prompt      = STRING_TOKEN(0x1DA7),
        help        = STRING_TOKEN(0x1DA8),
        option text = STRING_TOKEN(0x1DA9),           value = 1, flags = RESET_REQUIRED | DEFAULT;
        option text = STRING_TOKEN(0x1DAA), value = 4, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.PcieRootPortACS[2],
        prompt      = STRING_TOKEN(0x1D4B),
        help        = STRING_TOKEN(0x0BE6),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

       
        oneof varid   = SA_SETUP.PcieRootPortPTM[2],
          questionid  = 5520,
          prompt      = STRING_TOKEN(0x1DCA),
          help        = STRING_TOKEN(0x1DCC),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
       

      oneof varid   = SA_SETUP.PcieRootPortDPC[2],
        prompt      = STRING_TOKEN(0x1D77),
        help        = STRING_TOKEN(0x1D79),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.CpuPcieFomsCp[2],
        prompt      = STRING_TOKEN(0x1D8E),
        help        = STRING_TOKEN(0x1D90),
        option text = STRING_TOKEN(0x0006), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0C62), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0C63), value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1D8A), value = 3, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1D8B), value = 4, flags = RESET_REQUIRED;
      endoneof;

       
        oneof varid   = SA_SETUP.PcieRootPortMultiVc[2],
          questionid    = 5528,
          prompt      = STRING_TOKEN(0x1D80),
          help        = STRING_TOKEN(0x1D82),
    


#line 151 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaPcieSetupSinglePort.hfr"
    
          default value = cond(1 == 1 ? 1 : 0),
    

#line 156 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaPcieSetupSinglePort.hfr"
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
    #line 159 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaPcieSetupSinglePort.hfr"
        endoneof;
       

      oneof varid   = SA_SETUP.PcieRootPortEDPC[2],
        prompt      = STRING_TOKEN(0x1D93),
        help        = STRING_TOKEN(0x1D95),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.PcieRootPortURE[2],
        prompt      = STRING_TOKEN(0x1D54),
        help        = STRING_TOKEN(0x1D56),


#line 175 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaPcieSetupSinglePort.hfr"
        default     = 0, defaultstore = MyStandardDefault,
#line 177 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaPcieSetupSinglePort.hfr"
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.PcieRootPortFEE[2],
        prompt      = STRING_TOKEN(0x1D59),
        help        = STRING_TOKEN(0x1D5B),


#line 187 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaPcieSetupSinglePort.hfr"
        default     = 0, defaultstore = MyStandardDefault,
#line 189 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaPcieSetupSinglePort.hfr"
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.PcieRootPortNFE[2],
        prompt      = STRING_TOKEN(0x1D5E),
        help        = STRING_TOKEN(0x1D60),


#line 199 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaPcieSetupSinglePort.hfr"
        default     = 0, defaultstore = MyStandardDefault,
#line 201 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaPcieSetupSinglePort.hfr"
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.PcieRootPortCEE[2],
        prompt      = STRING_TOKEN(0x1D63),
        help        = STRING_TOKEN(0x1D65),


#line 211 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaPcieSetupSinglePort.hfr"
        default     = 0, defaultstore = MyStandardDefault,
#line 213 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaPcieSetupSinglePort.hfr"
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortCTD[2],
        prompt      = STRING_TOKEN(0x0CF7),
        help        = STRING_TOKEN(0x0D11),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.PcieRootPortSFE[2],
        prompt      = STRING_TOKEN(0x1D68),
        help        = STRING_TOKEN(0x1D6A),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.PcieRootPortSNE[2],
        prompt      = STRING_TOKEN(0x1D6D),
        help        = STRING_TOKEN(0x1D6F),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.PcieRootPortSCE[2],
        prompt      = STRING_TOKEN(0x1D72),
        help        = STRING_TOKEN(0x1D74),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.PcieRootPortPMCE[2],
        prompt      = STRING_TOKEN(0x1D41),
        help        = STRING_TOKEN(0x1D43),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      suppressif ideqval SETUP_VOLATILE_DATA.PlatformFlavor == 0x2;
        suppressif 2 == 1;
          grayoutif ideqval SA_SETUP.PcieRootPortSI[2] == 0;
            oneof varid   = SA_SETUP.PcieRootPortHPE[2],
              prompt      = STRING_TOKEN(0x1D3C),
              help        = STRING_TOKEN(0x1D3E),
              option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
              option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
            endoneof;
          endif;
        endif;
      endif;

      oneof varid   = SA_SETUP.PcieRootPortAER[2],
        prompt      = STRING_TOKEN(0x1D4F),
        help        = STRING_TOKEN(0x1D51),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.PcieRootPortSpeed[2],
        prompt   = STRING_TOKEN (0x1D9C),
        help     = STRING_TOKEN (0x1D9E),

        option text = STRING_TOKEN (0x0006), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN (0x0C60), value = 1, flags = RESET_REQUIRED;



#line 282 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaPcieSetupSinglePort.hfr"
        option text = STRING_TOKEN (0x0C61), value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x0C62), value = 3, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x0C63), value = 4, flags = RESET_REQUIRED;
      suppressif 2 == 0;
        option text = STRING_TOKEN (0x1D8B), value = 5, flags = RESET_REQUIRED;
      endif;
      endoneof;

    oneof varid   = SA_SETUP.PcieRootPortClockReqMsgEnable[2],
      prompt      = STRING_TOKEN(0x1D32),
      help        = STRING_TOKEN(0x1D34),
      option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
    endoneof;

      oneof varid   = SA_SETUP.PcieRootPortTHS[2],
        prompt      = STRING_TOKEN(0x1D46),
        help        = STRING_TOKEN(0x1D48),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      numeric varid = SA_SETUP.PcieDetectTimeoutMs[2],
        prompt      = STRING_TOKEN (0x1DCF),
        help        = STRING_TOKEN (0x1DD1),
        minimum     = 0,
        maximum     = 65535,
        step        = 1,
        default     = 0,
      endnumeric;

      oneof varid   = SA_SETUP.CpuPcieRootPortPeerToPeerMode[2],
        prompt      = STRING_TOKEN(0x1D85),
        help        = STRING_TOKEN(0x1D87),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      suppressif NOT (((2 == 1) AND (ideqval SETUP_VOLATILE_DATA.PlatformFlavor == 0x2)) OR
                     ((2 == 1) AND (ideqval SETUP_VOLATILE_DATA.PlatformFlavor == 0x6)) OR
                     (((2 == 0) AND (ideqval SETUP_VOLATILE_DATA.PlatformFlavor == 0x1))));
        oneof varid   = SA_SETUP.PcieFunc0LinkDisable[2],
          prompt      = STRING_TOKEN(0x1D88),
          help        = STRING_TOKEN(0x1D89),
          option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
        endoneof;
      endif;

      subtitle text = STRING_TOKEN(0x0002);

      subtitle text = STRING_TOKEN(0x1DB6);
      oneof varid   = SA_SETUP.CpuPcieLtrEnable[2],
        prompt   = STRING_TOKEN (0x1DB9),
        help     = STRING_TOKEN (0x1DBB),
        option text = STRING_TOKEN(0x0004),  value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      suppressif ideqval SA_SETUP.CpuPcieLtrEnable[2] == 0;
        oneof varid   = SA_SETUP.CpuPcieSnoopLatencyOverrideMode[2],
          prompt      = STRING_TOKEN (0x1DDE),
          help        = STRING_TOKEN (0x1DEE),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x09F8),   value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x158F),     value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        suppressif NOT ideqval SA_SETUP.CpuPcieSnoopLatencyOverrideMode[2] == 1;
          numeric varid = SA_SETUP.CpuPcieSnoopLatencyOverrideValue[2],
            prompt      = STRING_TOKEN(0x1DE0),
            help        = STRING_TOKEN(0x1DF1),
            flags       = RESET_REQUIRED,
            minimum     = 0,
            maximum     = 1023,
            step        = 1,
            default     = 60,
          endnumeric;

          oneof varid   = SA_SETUP.CpuPcieSnoopLatencyOverrideMultiplier[2],
            prompt      = STRING_TOKEN(0x1DE1),
            help        = STRING_TOKEN(0x1DF0),
            option text = STRING_TOKEN(0x0E74), value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E75), value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E76), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E77), value = 3, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E78), value = 4, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E79), value = 5, flags = RESET_REQUIRED;
          endoneof;
        endif;

        oneof varid   = SA_SETUP.CpuPcieNonSnoopLatencyOverrideMode[2],
          prompt      = STRING_TOKEN (0x1DDF),
          help        = STRING_TOKEN (0x1DEF),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x09F8),   value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x158F),     value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        suppressif NOT ideqval SA_SETUP.CpuPcieNonSnoopLatencyOverrideMode[2] == 1;
          numeric varid = SA_SETUP.CpuPcieNonSnoopLatencyOverrideValue[2],
            prompt      = STRING_TOKEN(0x1DE2),
            help        = STRING_TOKEN(0x1DF2),
            flags       = RESET_REQUIRED,
            minimum     = 0,
            maximum     = 1023,
            step        = 1,
            default     = 60,
          endnumeric;

          oneof varid   = SA_SETUP.CpuPcieNonSnoopLatencyOverrideMultiplier[2],
            prompt      = STRING_TOKEN(0x1DE3),
            help        = STRING_TOKEN(0x1DF3),
            option text = STRING_TOKEN(0x0E74), value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E75), value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E76), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E77), value = 3, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E78), value = 4, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E79), value = 5, flags = RESET_REQUIRED;
          endoneof;
        endif;

        oneof varid  = SA_SETUP.CpuPcieForceLtrOverride[2],
          prompt      = STRING_TOKEN(0x1DEC),
          help        = STRING_TOKEN(0x1DF4),
          option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
        endoneof;

      endif;

      subtitle text = STRING_TOKEN(0x0002);

      oneof varid   = SA_SETUP.CpuPcieLtrConfigLock[2],
        prompt   = STRING_TOKEN (0x1DBE),
        help     = STRING_TOKEN (0x1DC0),
        option text = STRING_TOKEN(0x0004),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = RESET_REQUIRED;
      endoneof;

    endif;

    subtitle text = STRING_TOKEN(0x0002);

    subtitle text = STRING_TOKEN(0x1DC1);
      numeric varid = SA_SETUP.PcieRootPortGen3Uptp[2],
        prompt      = STRING_TOKEN (0x1DC4),
        help        = STRING_TOKEN (0x1DC5),
        minimum     = 0,
        maximum     = 10,
        step        = 1,
        default value = cond(1 == 1 ? 0x5 : 0x7), defaultstore = MyStandardDefault,
      endnumeric;

      numeric varid = SA_SETUP.PcieRootPortGen3Dptp[2],
        prompt      = STRING_TOKEN (0x1DC6),
        help        = STRING_TOKEN (0x1DC7),
        minimum     = 0,
        maximum     = 10,
        step        = 1,
        default     = 7,
      endnumeric;

    subtitle text = STRING_TOKEN(0x0002);

    subtitle text = STRING_TOKEN(0x1DC2);
      numeric varid = SA_SETUP.PcieRootPortGen4Uptp[2],
        prompt      = STRING_TOKEN (0x1DC4),
        help        = STRING_TOKEN (0x1DC5),
        minimum     = 0,
        maximum     = 10,
        step        = 1,
        default value = cond(1 == 1 ? 0x8 : 0x7), defaultstore = MyStandardDefault,
      endnumeric;

      numeric varid = SA_SETUP.PcieRootPortGen4Dptp[2],
        prompt      = STRING_TOKEN (0x1DC6),
        help        = STRING_TOKEN (0x1DC7),
        minimum     = 0,
        maximum     = 10,
        step        = 1,
        default value = cond(1 == 1 ? 0x9 : 0x5), defaultstore = MyStandardDefault,
      endnumeric;

    subtitle text = STRING_TOKEN(0x0002);

  suppressif ((2 == 0) OR ((2 == 2) AND (ideqval SETUP_VOLATILE_DATA.PlatformFlavor == 0x1 OR ideqval SETUP_VOLATILE_DATA.PlatformFlavor == 0x6)));
    subtitle text = STRING_TOKEN(0x1DC3);

      numeric varid = SA_SETUP.PcieRootPortGen5Uptp[2],
        prompt      = STRING_TOKEN (0x1DC4),
        help        = STRING_TOKEN (0x1DC5),
        minimum     = 0,
        maximum     = 10,
        step        = 1,
        default     = 5,
      endnumeric;

      numeric varid = SA_SETUP.PcieRootPortGen5Dptp[2],
        prompt      = STRING_TOKEN (0x1DC6),
        help        = STRING_TOKEN (0x1DC7),
        minimum     = 0,
        maximum     = 10,
        step        = 1,
        default     = 7,
      endnumeric;

    subtitle text = STRING_TOKEN(0x0002);
  endif;
  endform; 
#line 15304 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\SaSetup.hfr"


#line 474 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\Advanced.vfr"
  #line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PcieSetup.hfr"








































form formid = 5433,
  title = STRING_TOKEN(0x1320);

  subtitle text = STRING_TOKEN(0x1320);
  subtitle text = STRING_TOKEN(0x0002);

  goto 5075,
  prompt   = STRING_TOKEN(0x1322),
  help     = STRING_TOKEN(0x1322);
subtitle text = STRING_TOKEN(0x0002);
endform;

form formid = 5075,
  title   = STRING_TOKEN(0x1322);
  oneof varid   = SI_SETUP.PcieImrEnable,
    prompt      = STRING_TOKEN (0x1323),
    help        = STRING_TOKEN (0x1324),
    option text = STRING_TOKEN (0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    option text = STRING_TOKEN (0x0003),  value = 1, flags = RESET_REQUIRED;
  endoneof;

  suppressif ideqval SI_SETUP.PcieImrEnable == 0;
    numeric varid  = SI_SETUP.PcieImrSize,
      prompt  = STRING_TOKEN (0x1325),
      help    = STRING_TOKEN (0x1326),
      flags   = RESET_REQUIRED,
      minimum = 0,  
      maximum = 1024, 
      step    = 1,
      default = 0,
    endnumeric;

    oneof varid   = SI_SETUP.PcieImrRpLocation,
      prompt      = STRING_TOKEN (0x1327),
      help        = STRING_TOKEN (0x1328),
      option text = STRING_TOKEN (0x131E), value = 1, flags =  RESET_REQUIRED;
      option text = STRING_TOKEN (0x131F),  value = 2, flags = RESET_REQUIRED;
    endoneof;

    suppressif ideqval SI_SETUP.PcieImrRpLocation == 1;
      numeric varid = SI_SETUP.PcieImrRpSelection,
        prompt      = STRING_TOKEN (0x1329),
        help        = STRING_TOKEN (0x132A),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 3,
        step        = 1,
        default     = 0,
      endnumeric;
    endif;

    suppressif ideqval SI_SETUP.PcieImrRpLocation == 2;
      numeric varid = SI_SETUP.PcieImrRpSelection,
        prompt      = STRING_TOKEN (0x1329),
        help        = STRING_TOKEN (0x132A),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 27,
        step        = 1,
        default     = 0,
      endnumeric;
    endif;
  endif;

endform;
#line 475 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\Advanced.vfr"
  #line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"







































    
    form formid = 4143,
    title       = STRING_TOKEN(0x09F9);

    subtitle text = STRING_TOKEN(0x09F9);
    subtitle text = STRING_TOKEN(0x0002);
    goto 4144,
         prompt = STRING_TOKEN(0x0B34),
         help = STRING_TOKEN(0x0B35);

    goto 4146,
         prompt = STRING_TOKEN(0x1069),
         help = STRING_TOKEN(0x106A);

    goto 4145,
         prompt = STRING_TOKEN(0x0FD5),
         help = STRING_TOKEN(0x0FD6);

    goto 4157,
         prompt = STRING_TOKEN(0x0B2C),
         help = STRING_TOKEN(0x0B2D);

    suppressif ideqval SETUP_VOLATILE_DATA.PlatformFlavor == 0x4;
        goto 4156,
             prompt = STRING_TOKEN(0x0A17),
             help = STRING_TOKEN(0x0A18);
    endif;

    grayoutif ideqval SETUP_VOLATILE_DATA.ThcSupported == 0x0;
      goto 5422,
           prompt = STRING_TOKEN(0x0AFD),
           help = STRING_TOKEN(0x0AFE);
    endif;

    goto 122, 
         prompt = STRING_TOKEN(0x1183),
         help = STRING_TOKEN(0x1184);





#line 83 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"

    goto 5046,
         prompt = STRING_TOKEN(0x116B),
         help = STRING_TOKEN(0x116C);

    goto 5054,
        prompt   = STRING_TOKEN(0x1210),
        help     = STRING_TOKEN(0x1210),
        flags   = 0,
        key     = 0;

  oneof varid = PCH_SETUP.PchSkipVccInConfig,
    prompt   = STRING_TOKEN(0x12D5),
    help     = STRING_TOKEN(0x12D6),
    option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | RESET_REQUIRED;
    option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
  endoneof;

    goto 5089,
        prompt = STRING_TOKEN(0x12B3),
        help   = STRING_TOKEN(0x12B4);

    goto 5090,
        prompt = STRING_TOKEN(0x12D7),
        help   = STRING_TOKEN(0x12D8);

    subtitle text = STRING_TOKEN(0x0002);







#line 118 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"

    subtitle text = STRING_TOKEN(0x0002);

    suppressif ideqval SETUP_VOLATILE_DATA.GbeSupportByPch == 0;
      
      
      
      suppressif ideqval SETUP_VOLATILE_DATA.GbeAvailable == 0;
        oneof varid = PCH_SETUP.PchLan,
          prompt   = STRING_TOKEN(0x09FD),
          help     = STRING_TOKEN(0x09FE),
          option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        endoneof;
      endif;

      suppressif ideqval PCH_SETUP.PchLan == 0 OR ideqval SETUP_VOLATILE_DATA.GbeAvailable == 0;

        oneof varid = PCH_SETUP.LanWakeFromDeepSx,
          prompt   = STRING_TOKEN(0x1150),
          help     = STRING_TOKEN(0x1151),
          option text = STRING_TOKEN(0x0003), value = 1, flags =  DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        endoneof;

        oneof varid = PCH_SETUP.PchWakeOnLan,
          prompt   = STRING_TOKEN(0x0A00),
          help     = STRING_TOKEN(0x0A01),
          
          
          
          
          option text = STRING_TOKEN(0x0003), value = 1, flags =  DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        endoneof;

        oneof varid = PCH_SETUP.SlpLanLowDc,
          prompt   = STRING_TOKEN(0x0A02),
          help     = STRING_TOKEN(0x0A03),
          option text = STRING_TOKEN(0x0003), value = 1, flags =  DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        endoneof;
      endif;

      
      
      
      suppressif ideqval SETUP_VOLATILE_DATA.GbeAvailable == 1;
        text
          help   = STRING_TOKEN(0x0851),
          text   = STRING_TOKEN(0x09FD),
          text   = STRING_TOKEN(0x09FF),
          flags  = 0,
          key    = 0;
      endif;
    endif;


    oneof varid = PCH_SETUP.FoxvilleLanSupport,
      prompt   = STRING_TOKEN(0x0A06),
      help     = STRING_TOKEN(0x0A07),
      option text = STRING_TOKEN(0x0003),  value = 1, flags =  RESET_REQUIRED;
      option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING |RESET_REQUIRED;
    endoneof;

    suppressif ideqval PCH_SETUP.FoxvilleLanSupport == 0;
      oneof varid = PCH_SETUP.FoxvilleWakeOnLan,
        prompt   = STRING_TOKEN(0x0A08),
        help     = STRING_TOKEN(0x0A09),
        option text = STRING_TOKEN(0x0003),  value = 1, flags =  RESET_REQUIRED;
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING |RESET_REQUIRED;
      endoneof;
    endif;
#line 192 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"

    
    
    
    oneof varid = SETUP_DATA.EfiNetworkSupport,
     prompt   = STRING_TOKEN(0x0A10),
     help     = STRING_TOKEN(0x0A11),
     option text = STRING_TOKEN(0x0A12), value = 3, flags = RESET_REQUIRED;

     option text = STRING_TOKEN(0x0A13), value = 2, flags = RESET_REQUIRED;
     option text = STRING_TOKEN(0x0A14), value = 1, flags = RESET_REQUIRED;
#line 204 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"
     option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING |RESET_REQUIRED;
    endoneof;

     suppressif NOT ideqval SETUP_VOLATILE_DATA.PlatformFlavor == 0x1 AND
                NOT ideqval SETUP_VOLATILE_DATA.PlatformFlavor == 0x6 AND
                NOT ideqval SETUP_VOLATILE_DATA.PlatformFlavor == 0x5;
      oneof varid = SETUP_DATA.SensorHubType,
       prompt   = STRING_TOKEN(0x1144),
       help     = STRING_TOKEN(0x1145),
       option text = STRING_TOKEN(0x1146), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
       option text = STRING_TOKEN(0x1147), value = 1, flags = RESET_REQUIRED;
       option text = STRING_TOKEN(0x1148), value = 2, flags = RESET_REQUIRED;
      endoneof;
      endif;

    oneof varid = PCH_SETUP.DeepSxMode,
      prompt   = STRING_TOKEN(0x1149),
      help     = STRING_TOKEN(0x114A),
       option text = STRING_TOKEN(0x0004),                    value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
       suppressif ideqval SETUP_VOLATILE_DATA.PlatformFlavor == 0x2 OR
                  ideqval SETUP_VOLATILE_DATA.PlatformFlavor == 0x4 OR
                  ideqval SETUP_VOLATILE_DATA.PlatformFlavor == 0x3;
         option text = STRING_TOKEN(0x114D),    value = 3, flags = RESET_REQUIRED;
         option text = STRING_TOKEN(0x114B),       value = 1, flags = RESET_REQUIRED;



         

#line 234 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"



       endif
       option text = STRING_TOKEN(0x114E),         value = 4, flags = RESET_REQUIRED;
       option text = STRING_TOKEN(0x114C),            value = 2, flags = RESET_REQUIRED;
    endoneof;

    suppressif NOT ideqval SETUP_VOLATILE_DATA.PlatformFlavor == 0x2;
      oneof varid = PCH_SETUP.PsOnEnable,
          prompt   = STRING_TOKEN(0x0A04),
          help     = STRING_TOKEN(0x0A05),
    
      option text = STRING_TOKEN(0x0003), value = 1, flags =  DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
    


#line 253 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"
      endoneof;
      endif;

    oneof varid = PCH_SETUP.PchWakeOnWlan,
        prompt   = STRING_TOKEN(0x0A0A),
        help     = STRING_TOKEN(0x0A0B),
        option text = STRING_TOKEN(0x0003), value = 1, flags =  RESET_REQUIRED;
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING |RESET_REQUIRED;
    endoneof;

    suppressif ideqval PCH_SETUP.PchWakeOnWlan == 0;
      oneof varid = PCH_SETUP.PchWakeOnWlanDeepSx,
          prompt   = STRING_TOKEN(0x0A0C),
          help     = STRING_TOKEN(0x0A0D),
          option text = STRING_TOKEN(0x0003), value = 1, flags =  RESET_REQUIRED;
          option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING |RESET_REQUIRED;
      endoneof;
    endif;

    oneof varid = PCH_SETUP.DisableDsxAcPresentPulldown,
        prompt   = STRING_TOKEN(0x0A0E),
        help     = STRING_TOKEN(0x0A0F),
        default     = 0, defaultstore = MyStandardDefault,
        option text = STRING_TOKEN(0x0003), value = 1, flags =  RESET_REQUIRED;
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
    endoneof;



    
    
    
    
    suppressif TRUE;
    oneof varid = PCH_SETUP.Hpet,
      prompt   = STRING_TOKEN(0x0A15),
      help     = STRING_TOKEN(0x0A16),
      option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;
    endif;

    oneof varid  = PCH_SETUP.StateAfterG3,
      questionid  = 4244,
      prompt   = STRING_TOKEN(0x1065),
      help     = STRING_TOKEN(0x1066),
      option text   = STRING_TOKEN(0x1067), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED | INTERACTIVE;
      option text   = STRING_TOKEN(0x1068), value = 1, flags = RESET_REQUIRED | INTERACTIVE;
    endoneof;

    oneof varid = PCH_SETUP.IchPort80Route,
      prompt   = STRING_TOKEN(0x113E),
      help     = STRING_TOKEN(0x113F),
      option text = STRING_TOKEN(0x1140), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x1141), value = 1, flags = RESET_REQUIRED;
    endoneof;

    grayoutif NOT ideqval PCH_SETUP.IchPort80Route == 0;
      oneof varid = PCH_SETUP.EnhancePort8xhDecoding,
        prompt   = STRING_TOKEN(0x1142),
        help     = STRING_TOKEN(0x1143),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;
    endif;

    grayoutif ideqval SETUP_VOLATILE_DATA.PchCridSupport == 0;
      oneof varid  = PCH_SETUP.PchCrid,
        prompt   = STRING_TOKEN(0x0ADE),
        help     = STRING_TOKEN(0x0ADF),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;
    endif;

     
      oneof varid  = PCH_SETUP.PchLegacyIoLowLatency,
        questionid  = 5142,
        prompt      = STRING_TOKEN(0x0AE0),
        help        = STRING_TOKEN(0x0AE1),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;
     

    oneof varid  = PCH_SETUP.PchCrossThrottling,
      prompt   = STRING_TOKEN(0x0AE2),
      help     = STRING_TOKEN(0x0AE3),
      option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    oneof varid  = PCH_SETUP.PchEnergyReport,
      prompt   = STRING_TOKEN(0x0AE4),
      help     = STRING_TOKEN(0x0AE5),
      option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    oneof varid  = PCH_SETUP.PmcLpmS0i2p0En,
      prompt   = STRING_TOKEN(0x0AE6),
      help     = STRING_TOKEN(0x0AED),
      option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;











#line 370 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"
    oneof varid  = PCH_SETUP.PmcLpmS0i2p1En,
      prompt   = STRING_TOKEN(0x0AE7),
      help     = STRING_TOKEN(0x0AED),
      option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;
#line 377 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"

    
    
    
    suppressif TRUE;







#line 390 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"
      oneof varid  = PCH_SETUP.PmcLpmS0i3p0En,
        prompt   = STRING_TOKEN(0x0AE9),
        help     = STRING_TOKEN(0x0AED),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags =  RESET_REQUIRED;
      endoneof;
#line 397 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"
      oneof varid  = PCH_SETUP.PmcLpmS0i2p2En,
        prompt   = STRING_TOKEN(0x0AE8),
        help     = STRING_TOKEN(0x0AED),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid  = PCH_SETUP.PmcLpmS0i3p2En,
        prompt   = STRING_TOKEN(0x0AEA),
        help     = STRING_TOKEN(0x0AED),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid  = PCH_SETUP.PmcLpmS0i3p3En,
        prompt   = STRING_TOKEN(0x0AEB),
        help     = STRING_TOKEN(0x0AED),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid  = PCH_SETUP.PmcLpmS0i3p4En,
        prompt   = STRING_TOKEN(0x0AEC),
        help     = STRING_TOKEN(0x0AED),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;
    endif; 

    oneof varid = PCH_SETUP.PmcC10DynamicThresholdAdjustment,
      prompt    = STRING_TOKEN(0x0AEE),
      help      = STRING_TOKEN(0x0AEF),
      option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
    endoneof;

    
    
    
    suppressif ideqval PCH_SETUP.PchEnergyReport == 0;
    oneof varid  = SETUP_DATA.TestPchPmErDebugMode,
      prompt   = STRING_TOKEN(0x0AF0),
      help     = STRING_TOKEN(0x0AF1),
      option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;
    endif;
    
    
    

    oneof varid  = PCH_SETUP.IehMode,
      prompt   = STRING_TOKEN(0x0AF2),
      help     = STRING_TOKEN(0x0AF3),
      option text = STRING_TOKEN(0x0AF4), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = PCH_SETUP.EnableTcoTimer,
      prompt      = STRING_TOKEN(0x0AF7),
      help        = STRING_TOKEN(0x0AF8),
      option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
    endoneof;















#line 477 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"



    oneof varid = PCH_SETUP.PciePllSsc,
      prompt   = STRING_TOKEN(0x1263),
      help     = STRING_TOKEN(0x1264),
      option text = STRING_TOKEN(0x158F), value = 0xFF, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x1265), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x1266), value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x1267), value = 2, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x1268), value = 3, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x1269), value = 4, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x126A), value = 5, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x126B), value = 6, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x126C), value = 7, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x126D), value = 8, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x126E), value = 9, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x126F), value = 10, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x1270), value = 11, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x1271), value = 12, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x1272), value = 13, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x1273), value = 14, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x1274), value = 15, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x1275), value = 16, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x1276), value = 17, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x1277), value = 18, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x1278), value = 19, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x1279), value = 20, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x127A), value = 0xFE, flags = RESET_REQUIRED;
    endoneof;

    
    
    
    oneof varid   = PCH_SETUP.IotgPllSscEn,
      prompt      = STRING_TOKEN(0x125F),
      help        = STRING_TOKEN(0x1260),
      option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;
    
    
    

    
    
    
    
    
    
    
    
    
    
    suppressif NOT ideqval SETUP_VOLATILE_DATA.PlatformType == 0x2 AND
               NOT ideqval SETUP_VOLATILE_DATA.PlatformFlavor == 0x4;
      oneof varid   = PCH_SETUP.PchIoApic24119Entries,
        prompt      = STRING_TOKEN(0x1152),
        help        = STRING_TOKEN(0x1153),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;
    endif;

    oneof varid   = PCH_SETUP.Enable8254ClockGating,
      prompt      = STRING_TOKEN(0x1154),
      help        = STRING_TOKEN(0x1155),
      option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x1156), value = 2, flags = RESET_REQUIRED;
    endoneof;

    oneof varid  = PCH_SETUP.PchSidebandLock,
      prompt      = STRING_TOKEN(0x09FB),
      help        = STRING_TOKEN(0x09FC),
      option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | RESET_REQUIRED;
    endoneof;

    oneof varid   = PCH_SETUP.FprrEnable,
      prompt      = STRING_TOKEN(0x127D),
      help        = STRING_TOKEN(0x127E),
      option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    oneof varid   = PCH_SETUP.SmbusSpdWriteDisable,
      prompt      = STRING_TOKEN(0x127F),
      help        = STRING_TOKEN(0x1280),
      option text = STRING_TOKEN(0x0583), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x0582), value = 0, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = PCH_SETUP.PchEspiLgmrEnable,
      prompt      = STRING_TOKEN(0x1281),
      help        = STRING_TOKEN(0x1282),
      option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    oneof varid   = PCH_SETUP.PchEspiHostC10ReportEnable,
      prompt      = STRING_TOKEN(0x1283),
      help        = STRING_TOKEN(0x1284),
      option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = PCH_SETUP.PchPmcOsIdleModeEnable,
      prompt      = STRING_TOKEN(0x1287),
      help        = STRING_TOKEN(0x1288),
      option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    oneof varid = PCH_SETUP.PchS0ixAutoDemotion,
        prompt   = STRING_TOKEN(0x1289),
        help     = STRING_TOKEN(0x128A),
        option text = STRING_TOKEN(0x0003), value = 1, flags =  DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = PCH_SETUP.PchLatchEventsC10Exit,
        prompt      = STRING_TOKEN(0x0AF5),
        help        = STRING_TOKEN(0x0AF6),
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    
      oneof varid   = PCH_SETUP.HybridStorageMode,
        prompt      = STRING_TOKEN(0x12FB),
        help        = STRING_TOKEN(0x12FC),
        option text = STRING_TOKEN(0x12FD), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;
    #line 613 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"

    suppressif ideqval PCH_SETUP.HybridStorageMode == 0;
          numeric varid = PCH_SETUP.CpuRootportUsedForHybridStorage,
            prompt      = STRING_TOKEN (0x12FE),
            help        = STRING_TOKEN (0x12FF),
            flags       = RESET_REQUIRED,
            minimum     = 0,
            maximum     = 0xFF,
            step        = 1,
            default     = 0xFF,
          endnumeric;
    endif;

    suppressif ideqval PCH_SETUP.CpuRootportUsedForHybridStorage == 0xFF;
          numeric varid = PCH_SETUP.PchRootportUsedForCpuAttach,
            prompt      = STRING_TOKEN (0x1300),
            help        = STRING_TOKEN (0x1301),
            flags       = RESET_REQUIRED,
            minimum     = 0,
            maximum     = 0xFF,
            step        = 1,
            default     = 0xFF,
          endnumeric;
    endif;
    oneof varid   = PCH_SETUP.ExtendedBiosDecodeRangeEnable,
      prompt      = STRING_TOKEN(0x1285),
      help        = STRING_TOKEN(0x1286),

      option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;



#line 647 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"
    endoneof;
    oneof varid   = PCH_SETUP.AcpiL6dPmeHandling,
      prompt      = STRING_TOKEN(0x1302),
      help        = STRING_TOKEN(0x1303),
      option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;
    endform;

  form formid   = 4144,
    title         = STRING_TOKEN(0x0B34);

    subtitle text = STRING_TOKEN(0x0B34);
    subtitle text = STRING_TOKEN(0x0002);

     
      oneof varid     = PCH_SETUP.PchDmiAspm,
          questionid  = 5140,
          prompt      = STRING_TOKEN(0x0C3F),
          help        = STRING_TOKEN(0x0C40),






#line 674 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0BA7), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x158F), value = 4, flags = RESET_REQUIRED;
#line 678 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"
      endoneof;
     



    oneof varid     = PCH_SETUP.PchDelayEnDmiAspm,
        prompt      = STRING_TOKEN(0x0C41),
        help        = STRING_TOKEN(0x0C42),
        option text = STRING_TOKEN(0x1261), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0004), value = 2, flags = RESET_REQUIRED;
    endoneof;




    oneof varid   = PCH_SETUP.PcieRootPort8xhDecode,
      prompt      = STRING_TOKEN(0x0DC0),
      help        = STRING_TOKEN(0x0DC1),
      option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
    endoneof;

    suppressif ideqval PCH_SETUP.PcieRootPort8xhDecode == 0;
      numeric varid = PCH_SETUP.Pcie8xhDecodePortIndex,
        prompt      = STRING_TOKEN (0x0DC2),
        help        = STRING_TOKEN (0x0DC3),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 27,
        step        = 1,    
        default     = 0,    
      endnumeric;
    endif;

    oneof varid   = PCH_SETUP.PcieComplianceTestMode,
      prompt      = STRING_TOKEN(0x0DE1),
      help        = STRING_TOKEN(0x0DE2),
      option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = PCH_SETUP.RpFunctionSwap,
      prompt      = STRING_TOKEN(0x127B),
      help        = STRING_TOKEN(0x127C),
      option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    goto 4400,
      prompt = STRING_TOKEN(0x0B36),
      help   = STRING_TOKEN(0x0B37);
    subtitle text = STRING_TOKEN(0x0002);






#line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieStringPool.hfr"




































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 738 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"


#line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePortMenu.hfr"

































    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[0] == 0;
      goto 5500,
        prompt = STRING_TOKEN(0x1044),
        help = STRING_TOKEN(0x1060);
    endif;
    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[0] == 1;
      text
        help   = STRING_TOKEN(0x0851),
        text   = STRING_TOKEN(0x1044),
        text   = STRING_TOKEN(0x1061);
    endif;
    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[0] == 2;
      text
        help   = STRING_TOKEN(0x0851),
        text   = STRING_TOKEN(0x1044),
        text   = STRING_TOKEN(0x1062);
    endif;
    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[0] == 3;
      text
        help   = STRING_TOKEN(0x0851),
        text   = STRING_TOKEN(0x1044),
        text   = STRING_TOKEN(0x1063);
    endif;
    
    
    

#line 741 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"


#line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePortMenu.hfr"

































    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[1] == 0;
      goto 4148,
        prompt = STRING_TOKEN(0x1045),
        help = STRING_TOKEN(0x1060);
    endif;
    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[1] == 1;
      text
        help   = STRING_TOKEN(0x0851),
        text   = STRING_TOKEN(0x1045),
        text   = STRING_TOKEN(0x1061);
    endif;
    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[1] == 2;
      text
        help   = STRING_TOKEN(0x0851),
        text   = STRING_TOKEN(0x1045),
        text   = STRING_TOKEN(0x1062);
    endif;
    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[1] == 3;
      text
        help   = STRING_TOKEN(0x0851),
        text   = STRING_TOKEN(0x1045),
        text   = STRING_TOKEN(0x1063);
    endif;
    
    
    

#line 744 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"


#line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePortMenu.hfr"

































    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[2] == 0;
      goto 4149,
        prompt = STRING_TOKEN(0x1046),
        help = STRING_TOKEN(0x1060);
    endif;
    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[2] == 1;
      text
        help   = STRING_TOKEN(0x0851),
        text   = STRING_TOKEN(0x1046),
        text   = STRING_TOKEN(0x1061);
    endif;
    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[2] == 2;
      text
        help   = STRING_TOKEN(0x0851),
        text   = STRING_TOKEN(0x1046),
        text   = STRING_TOKEN(0x1062);
    endif;
    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[2] == 3;
      text
        help   = STRING_TOKEN(0x0851),
        text   = STRING_TOKEN(0x1046),
        text   = STRING_TOKEN(0x1063);
    endif;
    
    
    

#line 747 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"


#line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePortMenu.hfr"

































    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[3] == 0;
      goto 4150,
        prompt = STRING_TOKEN(0x1047),
        help = STRING_TOKEN(0x1060);
    endif;
    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[3] == 1;
      text
        help   = STRING_TOKEN(0x0851),
        text   = STRING_TOKEN(0x1047),
        text   = STRING_TOKEN(0x1061);
    endif;
    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[3] == 2;
      text
        help   = STRING_TOKEN(0x0851),
        text   = STRING_TOKEN(0x1047),
        text   = STRING_TOKEN(0x1062);
    endif;
    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[3] == 3;
      text
        help   = STRING_TOKEN(0x0851),
        text   = STRING_TOKEN(0x1047),
        text   = STRING_TOKEN(0x1063);
    endif;
    
    
    

#line 750 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"


#line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePortMenu.hfr"

































    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[4] == 0;
      goto 4151,
        prompt = STRING_TOKEN(0x1048),
        help = STRING_TOKEN(0x1060);
    endif;
    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[4] == 1;
      text
        help   = STRING_TOKEN(0x0851),
        text   = STRING_TOKEN(0x1048),
        text   = STRING_TOKEN(0x1061);
    endif;
    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[4] == 2;
      text
        help   = STRING_TOKEN(0x0851),
        text   = STRING_TOKEN(0x1048),
        text   = STRING_TOKEN(0x1062);
    endif;
    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[4] == 3;
      text
        help   = STRING_TOKEN(0x0851),
        text   = STRING_TOKEN(0x1048),
        text   = STRING_TOKEN(0x1063);
    endif;
    
    
    

#line 753 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"


#line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePortMenu.hfr"

































    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[5] == 0;
      goto 4152,
        prompt = STRING_TOKEN(0x1049),
        help = STRING_TOKEN(0x1060);
    endif;
    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[5] == 1;
      text
        help   = STRING_TOKEN(0x0851),
        text   = STRING_TOKEN(0x1049),
        text   = STRING_TOKEN(0x1061);
    endif;
    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[5] == 2;
      text
        help   = STRING_TOKEN(0x0851),
        text   = STRING_TOKEN(0x1049),
        text   = STRING_TOKEN(0x1062);
    endif;
    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[5] == 3;
      text
        help   = STRING_TOKEN(0x0851),
        text   = STRING_TOKEN(0x1049),
        text   = STRING_TOKEN(0x1063);
    endif;
    
    
    

#line 756 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"


#line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePortMenu.hfr"

































    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[6] == 0;
      goto 4153,
        prompt = STRING_TOKEN(0x104A),
        help = STRING_TOKEN(0x1060);
    endif;
    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[6] == 1;
      text
        help   = STRING_TOKEN(0x0851),
        text   = STRING_TOKEN(0x104A),
        text   = STRING_TOKEN(0x1061);
    endif;
    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[6] == 2;
      text
        help   = STRING_TOKEN(0x0851),
        text   = STRING_TOKEN(0x104A),
        text   = STRING_TOKEN(0x1062);
    endif;
    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[6] == 3;
      text
        help   = STRING_TOKEN(0x0851),
        text   = STRING_TOKEN(0x104A),
        text   = STRING_TOKEN(0x1063);
    endif;
    
    
    

#line 759 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"


#line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePortMenu.hfr"

































    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[7] == 0;
      goto 4154,
        prompt = STRING_TOKEN(0x104B),
        help = STRING_TOKEN(0x1060);
    endif;
    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[7] == 1;
      text
        help   = STRING_TOKEN(0x0851),
        text   = STRING_TOKEN(0x104B),
        text   = STRING_TOKEN(0x1061);
    endif;
    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[7] == 2;
      text
        help   = STRING_TOKEN(0x0851),
        text   = STRING_TOKEN(0x104B),
        text   = STRING_TOKEN(0x1062);
    endif;
    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[7] == 3;
      text
        help   = STRING_TOKEN(0x0851),
        text   = STRING_TOKEN(0x104B),
        text   = STRING_TOKEN(0x1063);
    endif;
    
    
    

#line 762 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"


#line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePortMenu.hfr"

































    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[8] == 0;
      goto 4155,
        prompt = STRING_TOKEN(0x104C),
        help = STRING_TOKEN(0x1060);
    endif;
    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[8] == 1;
      text
        help   = STRING_TOKEN(0x0851),
        text   = STRING_TOKEN(0x104C),
        text   = STRING_TOKEN(0x1061);
    endif;
    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[8] == 2;
      text
        help   = STRING_TOKEN(0x0851),
        text   = STRING_TOKEN(0x104C),
        text   = STRING_TOKEN(0x1062);
    endif;
    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[8] == 3;
      text
        help   = STRING_TOKEN(0x0851),
        text   = STRING_TOKEN(0x104C),
        text   = STRING_TOKEN(0x1063);
    endif;
    
    
    

#line 765 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"


#line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePortMenu.hfr"

































    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[9] == 0;
      goto 5101,
        prompt = STRING_TOKEN(0x104D),
        help = STRING_TOKEN(0x1060);
    endif;
    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[9] == 1;
      text
        help   = STRING_TOKEN(0x0851),
        text   = STRING_TOKEN(0x104D),
        text   = STRING_TOKEN(0x1061);
    endif;
    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[9] == 2;
      text
        help   = STRING_TOKEN(0x0851),
        text   = STRING_TOKEN(0x104D),
        text   = STRING_TOKEN(0x1062);
    endif;
    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[9] == 3;
      text
        help   = STRING_TOKEN(0x0851),
        text   = STRING_TOKEN(0x104D),
        text   = STRING_TOKEN(0x1063);
    endif;
    
    
    

#line 768 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"


#line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePortMenu.hfr"

































    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[10] == 0;
      goto 5102,
        prompt = STRING_TOKEN(0x104E),
        help = STRING_TOKEN(0x1060);
    endif;
    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[10] == 1;
      text
        help   = STRING_TOKEN(0x0851),
        text   = STRING_TOKEN(0x104E),
        text   = STRING_TOKEN(0x1061);
    endif;
    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[10] == 2;
      text
        help   = STRING_TOKEN(0x0851),
        text   = STRING_TOKEN(0x104E),
        text   = STRING_TOKEN(0x1062);
    endif;
    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[10] == 3;
      text
        help   = STRING_TOKEN(0x0851),
        text   = STRING_TOKEN(0x104E),
        text   = STRING_TOKEN(0x1063);
    endif;
    
    
    

#line 771 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"


#line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePortMenu.hfr"

































    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[11] == 0;
      goto 5103,
        prompt = STRING_TOKEN(0x104F),
        help = STRING_TOKEN(0x1060);
    endif;
    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[11] == 1;
      text
        help   = STRING_TOKEN(0x0851),
        text   = STRING_TOKEN(0x104F),
        text   = STRING_TOKEN(0x1061);
    endif;
    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[11] == 2;
      text
        help   = STRING_TOKEN(0x0851),
        text   = STRING_TOKEN(0x104F),
        text   = STRING_TOKEN(0x1062);
    endif;
    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[11] == 3;
      text
        help   = STRING_TOKEN(0x0851),
        text   = STRING_TOKEN(0x104F),
        text   = STRING_TOKEN(0x1063);
    endif;
    
    
    

#line 774 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"


#line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePortMenu.hfr"

































    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[12] == 0;
      goto 5104,
        prompt = STRING_TOKEN(0x1050),
        help = STRING_TOKEN(0x1060);
    endif;
    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[12] == 1;
      text
        help   = STRING_TOKEN(0x0851),
        text   = STRING_TOKEN(0x1050),
        text   = STRING_TOKEN(0x1061);
    endif;
    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[12] == 2;
      text
        help   = STRING_TOKEN(0x0851),
        text   = STRING_TOKEN(0x1050),
        text   = STRING_TOKEN(0x1062);
    endif;
    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[12] == 3;
      text
        help   = STRING_TOKEN(0x0851),
        text   = STRING_TOKEN(0x1050),
        text   = STRING_TOKEN(0x1063);
    endif;
    
    
    

#line 777 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"


#line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePortMenu.hfr"

































    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[13] == 0;
      goto 5105,
        prompt = STRING_TOKEN(0x1051),
        help = STRING_TOKEN(0x1060);
    endif;
    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[13] == 1;
      text
        help   = STRING_TOKEN(0x0851),
        text   = STRING_TOKEN(0x1051),
        text   = STRING_TOKEN(0x1061);
    endif;
    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[13] == 2;
      text
        help   = STRING_TOKEN(0x0851),
        text   = STRING_TOKEN(0x1051),
        text   = STRING_TOKEN(0x1062);
    endif;
    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[13] == 3;
      text
        help   = STRING_TOKEN(0x0851),
        text   = STRING_TOKEN(0x1051),
        text   = STRING_TOKEN(0x1063);
    endif;
    
    
    

#line 780 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"


#line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePortMenu.hfr"

































    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[14] == 0;
      goto 5106,
        prompt = STRING_TOKEN(0x1052),
        help = STRING_TOKEN(0x1060);
    endif;
    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[14] == 1;
      text
        help   = STRING_TOKEN(0x0851),
        text   = STRING_TOKEN(0x1052),
        text   = STRING_TOKEN(0x1061);
    endif;
    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[14] == 2;
      text
        help   = STRING_TOKEN(0x0851),
        text   = STRING_TOKEN(0x1052),
        text   = STRING_TOKEN(0x1062);
    endif;
    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[14] == 3;
      text
        help   = STRING_TOKEN(0x0851),
        text   = STRING_TOKEN(0x1052),
        text   = STRING_TOKEN(0x1063);
    endif;
    
    
    

#line 783 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"


#line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePortMenu.hfr"

































    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[15] == 0;
      goto 5107,
        prompt = STRING_TOKEN(0x1053),
        help = STRING_TOKEN(0x1060);
    endif;
    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[15] == 1;
      text
        help   = STRING_TOKEN(0x0851),
        text   = STRING_TOKEN(0x1053),
        text   = STRING_TOKEN(0x1061);
    endif;
    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[15] == 2;
      text
        help   = STRING_TOKEN(0x0851),
        text   = STRING_TOKEN(0x1053),
        text   = STRING_TOKEN(0x1062);
    endif;
    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[15] == 3;
      text
        help   = STRING_TOKEN(0x0851),
        text   = STRING_TOKEN(0x1053),
        text   = STRING_TOKEN(0x1063);
    endif;
    
    
    

#line 786 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"


#line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePortMenu.hfr"

































    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[16] == 0;
      goto 5108,
        prompt = STRING_TOKEN(0x1054),
        help = STRING_TOKEN(0x1060);
    endif;
    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[16] == 1;
      text
        help   = STRING_TOKEN(0x0851),
        text   = STRING_TOKEN(0x1054),
        text   = STRING_TOKEN(0x1061);
    endif;
    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[16] == 2;
      text
        help   = STRING_TOKEN(0x0851),
        text   = STRING_TOKEN(0x1054),
        text   = STRING_TOKEN(0x1062);
    endif;
    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[16] == 3;
      text
        help   = STRING_TOKEN(0x0851),
        text   = STRING_TOKEN(0x1054),
        text   = STRING_TOKEN(0x1063);
    endif;
    
    
    

#line 789 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"


#line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePortMenu.hfr"

































    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[17] == 0;
      goto 5109,
        prompt = STRING_TOKEN(0x1055),
        help = STRING_TOKEN(0x1060);
    endif;
    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[17] == 1;
      text
        help   = STRING_TOKEN(0x0851),
        text   = STRING_TOKEN(0x1055),
        text   = STRING_TOKEN(0x1061);
    endif;
    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[17] == 2;
      text
        help   = STRING_TOKEN(0x0851),
        text   = STRING_TOKEN(0x1055),
        text   = STRING_TOKEN(0x1062);
    endif;
    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[17] == 3;
      text
        help   = STRING_TOKEN(0x0851),
        text   = STRING_TOKEN(0x1055),
        text   = STRING_TOKEN(0x1063);
    endif;
    
    
    

#line 792 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"


#line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePortMenu.hfr"

































    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[18] == 0;
      goto 5110,
        prompt = STRING_TOKEN(0x1056),
        help = STRING_TOKEN(0x1060);
    endif;
    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[18] == 1;
      text
        help   = STRING_TOKEN(0x0851),
        text   = STRING_TOKEN(0x1056),
        text   = STRING_TOKEN(0x1061);
    endif;
    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[18] == 2;
      text
        help   = STRING_TOKEN(0x0851),
        text   = STRING_TOKEN(0x1056),
        text   = STRING_TOKEN(0x1062);
    endif;
    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[18] == 3;
      text
        help   = STRING_TOKEN(0x0851),
        text   = STRING_TOKEN(0x1056),
        text   = STRING_TOKEN(0x1063);
    endif;
    
    
    

#line 795 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"


#line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePortMenu.hfr"

































    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[19] == 0;
      goto 5111,
        prompt = STRING_TOKEN(0x1057),
        help = STRING_TOKEN(0x1060);
    endif;
    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[19] == 1;
      text
        help   = STRING_TOKEN(0x0851),
        text   = STRING_TOKEN(0x1057),
        text   = STRING_TOKEN(0x1061);
    endif;
    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[19] == 2;
      text
        help   = STRING_TOKEN(0x0851),
        text   = STRING_TOKEN(0x1057),
        text   = STRING_TOKEN(0x1062);
    endif;
    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[19] == 3;
      text
        help   = STRING_TOKEN(0x0851),
        text   = STRING_TOKEN(0x1057),
        text   = STRING_TOKEN(0x1063);
    endif;
    
    
    

#line 798 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"


#line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePortMenu.hfr"

































    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[20] == 0;
      goto 5112,
        prompt = STRING_TOKEN(0x1058),
        help = STRING_TOKEN(0x1060);
    endif;
    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[20] == 1;
      text
        help   = STRING_TOKEN(0x0851),
        text   = STRING_TOKEN(0x1058),
        text   = STRING_TOKEN(0x1061);
    endif;
    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[20] == 2;
      text
        help   = STRING_TOKEN(0x0851),
        text   = STRING_TOKEN(0x1058),
        text   = STRING_TOKEN(0x1062);
    endif;
    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[20] == 3;
      text
        help   = STRING_TOKEN(0x0851),
        text   = STRING_TOKEN(0x1058),
        text   = STRING_TOKEN(0x1063);
    endif;
    
    
    

#line 801 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"


#line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePortMenu.hfr"

































    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[21] == 0;
      goto 5501,
        prompt = STRING_TOKEN(0x1059),
        help = STRING_TOKEN(0x1060);
    endif;
    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[21] == 1;
      text
        help   = STRING_TOKEN(0x0851),
        text   = STRING_TOKEN(0x1059),
        text   = STRING_TOKEN(0x1061);
    endif;
    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[21] == 2;
      text
        help   = STRING_TOKEN(0x0851),
        text   = STRING_TOKEN(0x1059),
        text   = STRING_TOKEN(0x1062);
    endif;
    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[21] == 3;
      text
        help   = STRING_TOKEN(0x0851),
        text   = STRING_TOKEN(0x1059),
        text   = STRING_TOKEN(0x1063);
    endif;
    
    
    

#line 804 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"


#line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePortMenu.hfr"

































    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[22] == 0;
      goto 5502,
        prompt = STRING_TOKEN(0x105A),
        help = STRING_TOKEN(0x1060);
    endif;
    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[22] == 1;
      text
        help   = STRING_TOKEN(0x0851),
        text   = STRING_TOKEN(0x105A),
        text   = STRING_TOKEN(0x1061);
    endif;
    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[22] == 2;
      text
        help   = STRING_TOKEN(0x0851),
        text   = STRING_TOKEN(0x105A),
        text   = STRING_TOKEN(0x1062);
    endif;
    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[22] == 3;
      text
        help   = STRING_TOKEN(0x0851),
        text   = STRING_TOKEN(0x105A),
        text   = STRING_TOKEN(0x1063);
    endif;
    
    
    

#line 807 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"


#line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePortMenu.hfr"

































    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[23] == 0;
      goto 5503,
        prompt = STRING_TOKEN(0x105B),
        help = STRING_TOKEN(0x1060);
    endif;
    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[23] == 1;
      text
        help   = STRING_TOKEN(0x0851),
        text   = STRING_TOKEN(0x105B),
        text   = STRING_TOKEN(0x1061);
    endif;
    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[23] == 2;
      text
        help   = STRING_TOKEN(0x0851),
        text   = STRING_TOKEN(0x105B),
        text   = STRING_TOKEN(0x1062);
    endif;
    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[23] == 3;
      text
        help   = STRING_TOKEN(0x0851),
        text   = STRING_TOKEN(0x105B),
        text   = STRING_TOKEN(0x1063);
    endif;
    
    
    

#line 810 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"



#line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePortMenu.hfr"

































    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[24] == 0;
      goto 5511,
        prompt = STRING_TOKEN(0x105C),
        help = STRING_TOKEN(0x1060);
    endif;
    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[24] == 1;
      text
        help   = STRING_TOKEN(0x0851),
        text   = STRING_TOKEN(0x105C),
        text   = STRING_TOKEN(0x1061);
    endif;
    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[24] == 2;
      text
        help   = STRING_TOKEN(0x0851),
        text   = STRING_TOKEN(0x105C),
        text   = STRING_TOKEN(0x1062);
    endif;
    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[24] == 3;
      text
        help   = STRING_TOKEN(0x0851),
        text   = STRING_TOKEN(0x105C),
        text   = STRING_TOKEN(0x1063);
    endif;
    
    
    

#line 814 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"


#line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePortMenu.hfr"

































    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[25] == 0;
      goto 5512,
        prompt = STRING_TOKEN(0x105D),
        help = STRING_TOKEN(0x1060);
    endif;
    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[25] == 1;
      text
        help   = STRING_TOKEN(0x0851),
        text   = STRING_TOKEN(0x105D),
        text   = STRING_TOKEN(0x1061);
    endif;
    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[25] == 2;
      text
        help   = STRING_TOKEN(0x0851),
        text   = STRING_TOKEN(0x105D),
        text   = STRING_TOKEN(0x1062);
    endif;
    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[25] == 3;
      text
        help   = STRING_TOKEN(0x0851),
        text   = STRING_TOKEN(0x105D),
        text   = STRING_TOKEN(0x1063);
    endif;
    
    
    

#line 817 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"


#line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePortMenu.hfr"

































    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[26] == 0;
      goto 5513,
        prompt = STRING_TOKEN(0x105E),
        help = STRING_TOKEN(0x1060);
    endif;
    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[26] == 1;
      text
        help   = STRING_TOKEN(0x0851),
        text   = STRING_TOKEN(0x105E),
        text   = STRING_TOKEN(0x1061);
    endif;
    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[26] == 2;
      text
        help   = STRING_TOKEN(0x0851),
        text   = STRING_TOKEN(0x105E),
        text   = STRING_TOKEN(0x1062);
    endif;
    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[26] == 3;
      text
        help   = STRING_TOKEN(0x0851),
        text   = STRING_TOKEN(0x105E),
        text   = STRING_TOKEN(0x1063);
    endif;
    
    
    

#line 820 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"


#line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePortMenu.hfr"

































    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[27] == 0;
      goto 5514,
        prompt = STRING_TOKEN(0x105F),
        help = STRING_TOKEN(0x1060);
    endif;
    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[27] == 1;
      text
        help   = STRING_TOKEN(0x0851),
        text   = STRING_TOKEN(0x105F),
        text   = STRING_TOKEN(0x1061);
    endif;
    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[27] == 2;
      text
        help   = STRING_TOKEN(0x0851),
        text   = STRING_TOKEN(0x105F),
        text   = STRING_TOKEN(0x1062);
    endif;
    suppressif NOT ideqval SETUP_VOLATILE_DATA.PciePortCfg[27] == 3;
      text
        help   = STRING_TOKEN(0x0851),
        text   = STRING_TOKEN(0x105F),
        text   = STRING_TOKEN(0x1063);
    endif;
    
    
    

#line 823 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"

#line 825 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"
  subtitle text = STRING_TOKEN(0x0002);
  goto 5504,
    prompt = STRING_TOKEN(0x128B),
    help   = STRING_TOKEN(0x128C);

  endform; 

  form formid = 4145,
    title     = STRING_TOKEN(0x0FD5);

    subtitle text = STRING_TOKEN(0x0FD5);
    subtitle text = STRING_TOKEN(0x0002);

    oneof varid   = PCH_SETUP.PchXdciSupport,
      prompt      = STRING_TOKEN(0x1042),
      help        = STRING_TOKEN(0x1043),
    

#line 844 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"
      default     = 0, defaultstore = MyStandardDefault,
    #line 846 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"
      option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags =  RESET_REQUIRED;
    endoneof;











#line 861 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"

    subtitle text = STRING_TOKEN(0x0002);

    oneof varid   = PCH_SETUP.PchUsbPdoProgramming,
      prompt      = STRING_TOKEN(0x0FD9),
      help        = STRING_TOKEN(0x0FDA),
      option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    oneof varid   = PCH_SETUP.PchUsbOverCurrentEnable,
      prompt      = STRING_TOKEN(0x0FDB),
      help        = STRING_TOKEN(0x0FDC),
      option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    oneof varid   = PCH_SETUP.PchXhciOcLock,
      prompt      = STRING_TOKEN(0x0FDD),
      help        = STRING_TOKEN(0x0FDE),
      option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    oneof varid   = PCH_SETUP.PchXhciUaol,
      prompt      = STRING_TOKEN(0x0FDF),
      help        = STRING_TOKEN(0x0FE0),
      option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    oneof varid   = PCH_SETUP.PchXhciHsiiEnable,
      prompt      = STRING_TOKEN(0x0FE3),
      help        = STRING_TOKEN(0x0FE4),
      option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    subtitle text = STRING_TOKEN(0x0002);

    
    
    
    oneof varid  = PCH_SETUP.PchUsbPortDisable,
      prompt   = STRING_TOKEN(0x0FE5),
      help     = STRING_TOKEN(0x0FE6),
      default     = 0, defaultstore = MyStandardDefault,
      option text = STRING_TOKEN(0x1474), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0FE7), value = 1, flags = RESET_REQUIRED;
    endoneof;

    subtitle text = STRING_TOKEN(0x0002);

    
    
    
    suppressif NOT ideqval SETUP_DATA.FirmwareConfiguration == 5;
      goto 5300,
           prompt = STRING_TOKEN(0x0FD4),
           help   = STRING_TOKEN(0x0FD4),
           flags = 0,
           key = 0;
    endif;
    
    
    


    
    
    
    suppressif ideqval PCH_SETUP.PchUsbPortDisable == 0x0;

      
      
      
      
      #line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchUsbSingleSsPort.hfr"


































suppressif ideqval SETUP_VOLATILE_DATA.PchUsb3PortCount <= 0;
  oneof varid   = PCH_SETUP.PchUsbSsPort[0],
    prompt      = STRING_TOKEN(0x0FE8),
    help        = STRING_TOKEN(0x1000),
    option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
  endoneof;
endif;
#line 939 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"
      
      
      #line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchUsbSingleSsPort.hfr"


































suppressif ideqval SETUP_VOLATILE_DATA.PchUsb3PortCount <= 1;
  oneof varid   = PCH_SETUP.PchUsbSsPort[1],
    prompt      = STRING_TOKEN(0x0FE9),
    help        = STRING_TOKEN(0x1000),
    option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
  endoneof;
endif;
#line 942 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"
      
      
      #line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchUsbSingleSsPort.hfr"


































suppressif ideqval SETUP_VOLATILE_DATA.PchUsb3PortCount <= 2;
  oneof varid   = PCH_SETUP.PchUsbSsPort[2],
    prompt      = STRING_TOKEN(0x0FEA),
    help        = STRING_TOKEN(0x1000),
    option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
  endoneof;
endif;
#line 945 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"
      
      
      #line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchUsbSingleSsPort.hfr"


































suppressif ideqval SETUP_VOLATILE_DATA.PchUsb3PortCount <= 3;
  oneof varid   = PCH_SETUP.PchUsbSsPort[3],
    prompt      = STRING_TOKEN(0x0FEB),
    help        = STRING_TOKEN(0x1000),
    option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
  endoneof;
endif;
#line 948 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"
      
      
      #line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchUsbSingleSsPort.hfr"


































suppressif ideqval SETUP_VOLATILE_DATA.PchUsb3PortCount <= 4;
  oneof varid   = PCH_SETUP.PchUsbSsPort[4],
    prompt      = STRING_TOKEN(0x0FEC),
    help        = STRING_TOKEN(0x1000),
    option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
  endoneof;
endif;
#line 951 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"
      
      
      #line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchUsbSingleSsPort.hfr"


































suppressif ideqval SETUP_VOLATILE_DATA.PchUsb3PortCount <= 5;
  oneof varid   = PCH_SETUP.PchUsbSsPort[5],
    prompt      = STRING_TOKEN(0x0FED),
    help        = STRING_TOKEN(0x1000),
    option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
  endoneof;
endif;
#line 954 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"
      
      
      #line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchUsbSingleSsPort.hfr"


































suppressif ideqval SETUP_VOLATILE_DATA.PchUsb3PortCount <= 6;
  oneof varid   = PCH_SETUP.PchUsbSsPort[6],
    prompt      = STRING_TOKEN(0x0FEE),
    help        = STRING_TOKEN(0x1000),
    option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
  endoneof;
endif;
#line 957 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"
      
      
      #line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchUsbSingleSsPort.hfr"


































suppressif ideqval SETUP_VOLATILE_DATA.PchUsb3PortCount <= 7;
  oneof varid   = PCH_SETUP.PchUsbSsPort[7],
    prompt      = STRING_TOKEN(0x0FEF),
    help        = STRING_TOKEN(0x1000),
    option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
  endoneof;
endif;
#line 960 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"
      
      
      #line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchUsbSingleSsPort.hfr"


































suppressif ideqval SETUP_VOLATILE_DATA.PchUsb3PortCount <= 8;
  oneof varid   = PCH_SETUP.PchUsbSsPort[8],
    prompt      = STRING_TOKEN(0x0FF0),
    help        = STRING_TOKEN(0x1000),
    option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
  endoneof;
endif;
#line 963 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"
      
      
      #line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchUsbSingleSsPort.hfr"


































suppressif ideqval SETUP_VOLATILE_DATA.PchUsb3PortCount <= 9;
  oneof varid   = PCH_SETUP.PchUsbSsPort[9],
    prompt      = STRING_TOKEN(0x0FF1),
    help        = STRING_TOKEN(0x1000),
    option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
  endoneof;
endif;
#line 966 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"
      

      
      #line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchUsbSingleHsPort.hfr"


































suppressif ideqval SETUP_VOLATILE_DATA.PchUsb2PortCount <= 0;
  oneof varid   = PCH_SETUP.PchUsbHsPort[0],
    prompt      = STRING_TOKEN(0x0FF2),
    help        = STRING_TOKEN(0x1000),



#line 43 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchUsbSingleHsPort.hfr"
    option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
#line 46 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchUsbSingleHsPort.hfr"
  endoneof;
endif;
#line 970 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"
      
      
      #line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchUsbSingleHsPort.hfr"


































suppressif ideqval SETUP_VOLATILE_DATA.PchUsb2PortCount <= 1;
  oneof varid   = PCH_SETUP.PchUsbHsPort[1],
    prompt      = STRING_TOKEN(0x0FF3),
    help        = STRING_TOKEN(0x1000),



#line 43 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchUsbSingleHsPort.hfr"
    option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
#line 46 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchUsbSingleHsPort.hfr"
  endoneof;
endif;
#line 973 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"
      
      
      #line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchUsbSingleHsPort.hfr"


































suppressif ideqval SETUP_VOLATILE_DATA.PchUsb2PortCount <= 2;
  oneof varid   = PCH_SETUP.PchUsbHsPort[2],
    prompt      = STRING_TOKEN(0x0FF4),
    help        = STRING_TOKEN(0x1000),



#line 43 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchUsbSingleHsPort.hfr"
    option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
#line 46 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchUsbSingleHsPort.hfr"
  endoneof;
endif;
#line 976 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"
      
      
      #line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchUsbSingleHsPort.hfr"


































suppressif ideqval SETUP_VOLATILE_DATA.PchUsb2PortCount <= 3;
  oneof varid   = PCH_SETUP.PchUsbHsPort[3],
    prompt      = STRING_TOKEN(0x0FF5),
    help        = STRING_TOKEN(0x1000),



#line 43 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchUsbSingleHsPort.hfr"
    option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
#line 46 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchUsbSingleHsPort.hfr"
  endoneof;
endif;
#line 979 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"
      
      
      #line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchUsbSingleHsPort.hfr"


































suppressif ideqval SETUP_VOLATILE_DATA.PchUsb2PortCount <= 4;
  oneof varid   = PCH_SETUP.PchUsbHsPort[4],
    prompt      = STRING_TOKEN(0x0FF6),
    help        = STRING_TOKEN(0x1000),



#line 43 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchUsbSingleHsPort.hfr"
    option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
#line 46 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchUsbSingleHsPort.hfr"
  endoneof;
endif;
#line 982 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"
      
      
      #line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchUsbSingleHsPort.hfr"


































suppressif ideqval SETUP_VOLATILE_DATA.PchUsb2PortCount <= 5;
  oneof varid   = PCH_SETUP.PchUsbHsPort[5],
    prompt      = STRING_TOKEN(0x0FF7),
    help        = STRING_TOKEN(0x1000),



#line 43 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchUsbSingleHsPort.hfr"
    option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
#line 46 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchUsbSingleHsPort.hfr"
  endoneof;
endif;
#line 985 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"
      
      
      #line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchUsbSingleHsPort.hfr"


































suppressif ideqval SETUP_VOLATILE_DATA.PchUsb2PortCount <= 6;
  oneof varid   = PCH_SETUP.PchUsbHsPort[6],
    prompt      = STRING_TOKEN(0x0FF8),
    help        = STRING_TOKEN(0x1000),



#line 43 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchUsbSingleHsPort.hfr"
    option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
#line 46 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchUsbSingleHsPort.hfr"
  endoneof;
endif;
#line 988 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"
      
      
      #line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchUsbSingleHsPort.hfr"


































suppressif ideqval SETUP_VOLATILE_DATA.PchUsb2PortCount <= 7;
  oneof varid   = PCH_SETUP.PchUsbHsPort[7],
    prompt      = STRING_TOKEN(0x0FF9),
    help        = STRING_TOKEN(0x1000),



#line 43 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchUsbSingleHsPort.hfr"
    option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
#line 46 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchUsbSingleHsPort.hfr"
  endoneof;
endif;
#line 991 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"
      
      
      #line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchUsbSingleHsPort.hfr"


































suppressif ideqval SETUP_VOLATILE_DATA.PchUsb2PortCount <= 8;
  oneof varid   = PCH_SETUP.PchUsbHsPort[8],
    prompt      = STRING_TOKEN(0x0FFA),
    help        = STRING_TOKEN(0x1000),



#line 43 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchUsbSingleHsPort.hfr"
    option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
#line 46 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchUsbSingleHsPort.hfr"
  endoneof;
endif;
#line 994 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"
      
      
      #line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchUsbSingleHsPort.hfr"


































suppressif ideqval SETUP_VOLATILE_DATA.PchUsb2PortCount <= 9;
  oneof varid   = PCH_SETUP.PchUsbHsPort[9],
    prompt      = STRING_TOKEN(0x0FFB),
    help        = STRING_TOKEN(0x1000),



#line 43 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchUsbSingleHsPort.hfr"
    option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
#line 46 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchUsbSingleHsPort.hfr"
  endoneof;
endif;
#line 997 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"
      
      
      #line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchUsbSingleHsPort.hfr"


































suppressif ideqval SETUP_VOLATILE_DATA.PchUsb2PortCount <= 10;
  oneof varid   = PCH_SETUP.PchUsbHsPort[10],
    prompt      = STRING_TOKEN(0x0FFC),
    help        = STRING_TOKEN(0x1000),



#line 43 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchUsbSingleHsPort.hfr"
    option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
#line 46 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchUsbSingleHsPort.hfr"
  endoneof;
endif;
#line 1000 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"
      
      
      #line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchUsbSingleHsPort.hfr"


































suppressif ideqval SETUP_VOLATILE_DATA.PchUsb2PortCount <= 11;
  oneof varid   = PCH_SETUP.PchUsbHsPort[11],
    prompt      = STRING_TOKEN(0x0FFD),
    help        = STRING_TOKEN(0x1000),



#line 43 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchUsbSingleHsPort.hfr"
    option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
#line 46 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchUsbSingleHsPort.hfr"
  endoneof;
endif;
#line 1003 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"
      
      
      #line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchUsbSingleHsPort.hfr"


































suppressif ideqval SETUP_VOLATILE_DATA.PchUsb2PortCount <= 12;
  oneof varid   = PCH_SETUP.PchUsbHsPort[12],
    prompt      = STRING_TOKEN(0x0FFE),
    help        = STRING_TOKEN(0x1000),



#line 43 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchUsbSingleHsPort.hfr"
    option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
#line 46 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchUsbSingleHsPort.hfr"
  endoneof;
endif;
#line 1006 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"
      
      
      #line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchUsbSingleHsPort.hfr"


































suppressif ideqval SETUP_VOLATILE_DATA.PchUsb2PortCount <= 13;
  oneof varid   = PCH_SETUP.PchUsbHsPort[13],
    prompt      = STRING_TOKEN(0x0FFF),
    help        = STRING_TOKEN(0x1000),



#line 43 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchUsbSingleHsPort.hfr"
    option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
#line 46 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchUsbSingleHsPort.hfr"
  endoneof;
endif;
#line 1009 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"
      

    endif; 

    suppressif NOT ideqval SETUP_DATA.SensorHubType == 2;
    subtitle text = STRING_TOKEN(0x0002);
      oneof varid   = SETUP_DATA.UsbSensorHub,
        prompt      = STRING_TOKEN(0x0FD7),
        help        = STRING_TOKEN(0x0FD8),
        option text = STRING_TOKEN(0x0003), value = 1, flags =  RESET_REQUIRED;
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;
    endif;

  endform; 






  suppressif NOT ideqval SETUP_DATA.FirmwareConfiguration == 5;
    form formid = 5300,
         title  = STRING_TOKEN(0x0FD4);

      subtitle text = STRING_TOKEN(0x0FD4);
      subtitle text = STRING_TOKEN(0x0002);

        oneof varid   = SETUP_DATA.TestXhciEnabled,
          prompt      = STRING_TOKEN(0x1001),
          help        = STRING_TOKEN(0x1002),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | RESET_REQUIRED;
        endoneof;

        
        oneof varid     = SETUP_DATA.UsbModifyOsc,
            prompt      = STRING_TOKEN(0x1003),
            help        = STRING_TOKEN(0x1004),
            option text = STRING_TOKEN(0x1005), value = 0, flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN(0x1006), value = 1, flags = RESET_REQUIRED;
        endoneof;

        oneof varid     = SETUP_DATA.UsbModifyPldUpc,
            prompt      = STRING_TOKEN(0x1007),
            help        = STRING_TOKEN(0x1008),
            option text = STRING_TOKEN(0x1009), value = 0, flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN(0x100A), value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x100B), value = 2, flags = RESET_REQUIRED;
        endoneof;

        oneof varid     = SETUP_DATA.Hsp1ConnectorLocation,
            prompt      = STRING_TOKEN(0x100C),
            help        = STRING_TOKEN(0x1010),
            option text = STRING_TOKEN(0x1011), value = 0, flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN(0x1012), value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1013), value = 2, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1014), value = 3, flags = RESET_REQUIRED;
        endoneof;

        oneof varid     = SETUP_DATA.Hsp2ConnectorLocation,
            prompt      = STRING_TOKEN(0x100D),
            help        = STRING_TOKEN(0x1010),
            option text = STRING_TOKEN(0x1011), value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1012), value = 1, flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN(0x1013), value = 2, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1014), value = 3, flags = RESET_REQUIRED;
        endoneof;

        oneof varid     = SETUP_DATA.Hsp3ConnectorLocation,
            prompt      = STRING_TOKEN(0x100E),
            help        = STRING_TOKEN(0x1010),
            option text = STRING_TOKEN(0x1011), value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1012), value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1013), value = 2, flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN(0x1014), value = 3, flags = RESET_REQUIRED;
        endoneof;

        oneof varid     = SETUP_DATA.Hsp4ConnectorLocation,
            prompt      = STRING_TOKEN(0x100F),
            help        = STRING_TOKEN(0x1010),
            option text = STRING_TOKEN(0x1011), value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1012), value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1013), value = 2, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1014), value = 3, flags = DEFAULT | RESET_REQUIRED;
        endoneof;

       subtitle text = STRING_TOKEN(0x0002);

       goto 5301,
        prompt   = STRING_TOKEN(0x1015),
        help     = STRING_TOKEN(0x1015),
        flags   = 0,
        key     = 0;

    endform;
  endif;

  suppressif NOT ideqval SETUP_DATA.FirmwareConfiguration == 5;
    form formid = 5301,
        title    = STRING_TOKEN(0x1015);

        oneof varid     = SETUP_DATA.TestUsbEPTypeLockPolicy[0],
           prompt      = STRING_TOKEN(0x1015),
           help        = STRING_TOKEN(0x1016),
           option text = STRING_TOKEN(0x1261), value = 0, flags = DEFAULT | RESET_REQUIRED;
           option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
           option text = STRING_TOKEN(0x0004), value = 2, flags = RESET_REQUIRED;
        endoneof;

        suppressif NOT ideqval SETUP_DATA.TestUsbEPTypeLockPolicy[0] == 1;


        subtitle text = STRING_TOKEN(0x1017);
         oneof varid     = SETUP_DATA.TestUsbEPTypeLockPolicy[1],
           prompt      = STRING_TOKEN(0x101A),
           help        = STRING_TOKEN(0x101B),
           option text = STRING_TOKEN(0x1261), value = 0, flags = DEFAULT | RESET_REQUIRED;
           option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
           option text = STRING_TOKEN(0x0004), value = 2, flags = RESET_REQUIRED;
        endoneof;

         oneof varid     = SETUP_DATA.TestUsbEPTypeLockPolicy[5],
           prompt      = STRING_TOKEN(0x101C),
           help        = STRING_TOKEN(0x101D),
           option text = STRING_TOKEN(0x1261), value = 0, flags = DEFAULT | RESET_REQUIRED;
           option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
           option text = STRING_TOKEN(0x0004), value = 2, flags = RESET_REQUIRED;
        endoneof;

         oneof varid     = SETUP_DATA.TestUsbEPTypeLockPolicy[2],
           prompt      = STRING_TOKEN(0x101E),
           help        = STRING_TOKEN(0x101F),
           option text = STRING_TOKEN(0x1261), value = 0, flags = DEFAULT | RESET_REQUIRED;
           option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
           option text = STRING_TOKEN(0x0004), value = 2, flags = RESET_REQUIRED;
        endoneof;

         oneof varid     = SETUP_DATA.TestUsbEPTypeLockPolicy[6],
           prompt      = STRING_TOKEN(0x1020),
           help        = STRING_TOKEN(0x1021),
           option text = STRING_TOKEN(0x1261), value = 0, flags = DEFAULT | RESET_REQUIRED;
           option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
           option text = STRING_TOKEN(0x0004), value = 2, flags = RESET_REQUIRED;
        endoneof;

         oneof varid     = SETUP_DATA.TestUsbEPTypeLockPolicy[3],
           prompt      = STRING_TOKEN(0x1022),
           help        = STRING_TOKEN(0x1023),
           option text = STRING_TOKEN(0x1261), value = 0, flags = DEFAULT | RESET_REQUIRED;
           option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
           option text = STRING_TOKEN(0x0004), value = 2, flags = RESET_REQUIRED;
        endoneof;

         oneof varid     = SETUP_DATA.TestUsbEPTypeLockPolicy[7],
           prompt      = STRING_TOKEN(0x1024),
           help        = STRING_TOKEN(0x1025),
           option text = STRING_TOKEN(0x1261), value = 0, flags = DEFAULT | RESET_REQUIRED;
           option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
           option text = STRING_TOKEN(0x0004), value = 2, flags = RESET_REQUIRED;
        endoneof;

         oneof varid     = SETUP_DATA.TestUsbEPTypeLockPolicy[4],
           prompt      = STRING_TOKEN(0x1026),
           help        = STRING_TOKEN(0x1027),
           option text = STRING_TOKEN(0x1261), value = 0, flags = DEFAULT | RESET_REQUIRED;
           option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
           option text = STRING_TOKEN(0x0004), value = 2, flags = RESET_REQUIRED;
        endoneof;

        subtitle text = STRING_TOKEN(0x1018);
        oneof varid     = SETUP_DATA.TestUsbEPTypeLockPolicy[9],
           prompt      = STRING_TOKEN(0x101A),
           help        = STRING_TOKEN(0x101B),
           option text = STRING_TOKEN(0x1261), value = 0, flags = DEFAULT | RESET_REQUIRED;
           option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
           option text = STRING_TOKEN(0x0004), value = 2, flags = RESET_REQUIRED;
        endoneof;

         oneof varid     = SETUP_DATA.TestUsbEPTypeLockPolicy[13],
           prompt      = STRING_TOKEN(0x101C),
           help        = STRING_TOKEN(0x101D),
           option text = STRING_TOKEN(0x1261), value = 0, flags = DEFAULT | RESET_REQUIRED;
           option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
           option text = STRING_TOKEN(0x0004), value = 2, flags = RESET_REQUIRED;
        endoneof;

         oneof varid     = SETUP_DATA.TestUsbEPTypeLockPolicy[10],
           prompt      = STRING_TOKEN(0x101E),
           help        = STRING_TOKEN(0x101F),
           option text = STRING_TOKEN(0x1261), value = 0, flags = DEFAULT | RESET_REQUIRED;
           option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
           option text = STRING_TOKEN(0x0004), value = 2, flags = RESET_REQUIRED;
        endoneof;

         oneof varid     = SETUP_DATA.TestUsbEPTypeLockPolicy[14],
           prompt      = STRING_TOKEN(0x1020),
           help        = STRING_TOKEN(0x1021),
           option text = STRING_TOKEN(0x1261), value = 0, flags = DEFAULT | RESET_REQUIRED;
           option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
           option text = STRING_TOKEN(0x0004), value = 2, flags = RESET_REQUIRED;
        endoneof;

         oneof varid     = SETUP_DATA.TestUsbEPTypeLockPolicy[11],
           prompt      = STRING_TOKEN(0x1022),
           help        = STRING_TOKEN(0x1023),
           option text = STRING_TOKEN(0x1261), value = 0, flags = DEFAULT | RESET_REQUIRED;
           option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
           option text = STRING_TOKEN(0x0004), value = 2, flags = RESET_REQUIRED;
        endoneof;

         oneof varid     = SETUP_DATA.TestUsbEPTypeLockPolicy[15],
           prompt      = STRING_TOKEN(0x1024),
           help        = STRING_TOKEN(0x1025),
           option text = STRING_TOKEN(0x1261), value = 0, flags = DEFAULT | RESET_REQUIRED;
           option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
           option text = STRING_TOKEN(0x0004), value = 2, flags = RESET_REQUIRED;
        endoneof;

         oneof varid     = SETUP_DATA.TestUsbEPTypeLockPolicy[12],
           prompt      = STRING_TOKEN(0x1026),
           help        = STRING_TOKEN(0x1027),
           option text = STRING_TOKEN(0x1261), value = 0, flags = DEFAULT | RESET_REQUIRED;
           option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
           option text = STRING_TOKEN(0x0004), value = 2, flags = RESET_REQUIRED;
        endoneof;

        subtitle text = STRING_TOKEN(0x1019);
        oneof varid     = SETUP_DATA.TestUsbEPTypeLockPolicy[17],
           prompt      = STRING_TOKEN(0x101A),
           help        = STRING_TOKEN(0x101B),
           option text = STRING_TOKEN(0x1261), value = 0, flags = DEFAULT | RESET_REQUIRED;
           option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
           option text = STRING_TOKEN(0x0004), value = 2, flags = RESET_REQUIRED;
        endoneof;

         oneof varid     = SETUP_DATA.TestUsbEPTypeLockPolicy[21],
           prompt      = STRING_TOKEN(0x101C),
           help        = STRING_TOKEN(0x101D),
           option text = STRING_TOKEN(0x1261), value = 0, flags = DEFAULT | RESET_REQUIRED;
           option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
           option text = STRING_TOKEN(0x0004), value = 2, flags = RESET_REQUIRED;
        endoneof;

         oneof varid     = SETUP_DATA.TestUsbEPTypeLockPolicy[18],
           prompt      = STRING_TOKEN(0x101E),
           help        = STRING_TOKEN(0x101F),
           option text = STRING_TOKEN(0x1261), value = 0, flags = DEFAULT | RESET_REQUIRED;
           option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
           option text = STRING_TOKEN(0x0004), value = 2, flags = RESET_REQUIRED;
        endoneof;

         oneof varid     = SETUP_DATA.TestUsbEPTypeLockPolicy[22],
           prompt      = STRING_TOKEN(0x1020),
           help        = STRING_TOKEN(0x1021),
           option text = STRING_TOKEN(0x1261), value = 0, flags = DEFAULT | RESET_REQUIRED;
           option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
           option text = STRING_TOKEN(0x0004), value = 2, flags = RESET_REQUIRED;
        endoneof;

         oneof varid     = SETUP_DATA.TestUsbEPTypeLockPolicy[19],
           prompt      = STRING_TOKEN(0x1022),
           help        = STRING_TOKEN(0x1023),
           option text = STRING_TOKEN(0x1261), value = 0, flags = DEFAULT | RESET_REQUIRED;
           option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
           option text = STRING_TOKEN(0x0004), value = 2, flags = RESET_REQUIRED;
        endoneof;

         oneof varid     = SETUP_DATA.TestUsbEPTypeLockPolicy[23],
           prompt      = STRING_TOKEN(0x1024),
           help        = STRING_TOKEN(0x1025),
           option text = STRING_TOKEN(0x1261), value = 0, flags = DEFAULT | RESET_REQUIRED;
           option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
           option text = STRING_TOKEN(0x0004), value = 2, flags = RESET_REQUIRED;
        endoneof;

         oneof varid     = SETUP_DATA.TestUsbEPTypeLockPolicy[20],
           prompt      = STRING_TOKEN(0x1026),
           help        = STRING_TOKEN(0x1027),
           option text = STRING_TOKEN(0x1261), value = 0, flags = DEFAULT | RESET_REQUIRED;
           option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
           option text = STRING_TOKEN(0x0004), value = 2, flags = RESET_REQUIRED;
        endoneof;


        goto 5302,
          prompt   = STRING_TOKEN(0x1028),
          help     = STRING_TOKEN(0x1028),
          flags   = 0,
          key     = 0;

        endif;
     endform;
   endif;

  suppressif NOT ideqval SETUP_DATA.FirmwareConfiguration == 5;
    form formid = 5302,
          title    = STRING_TOKEN(0x1028);

          oneof varid  = SETUP_DATA.TestRootPortPolicyControl[0],
            prompt   = STRING_TOKEN(0x1029),
            help     = STRING_TOKEN(0x103D),
            option text = STRING_TOKEN(0x103E), value = 0, flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN(0x103F), value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1040), value = 2, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x1041), value = 3, flags = RESET_REQUIRED;
          endoneof;


          oneof varid  = SETUP_DATA.TestRootPortPolicyControl[1],
            prompt   = STRING_TOKEN(0x102A),
            help     = STRING_TOKEN(0x103D),
             option text = STRING_TOKEN(0x103E), value = 0, flags = DEFAULT | RESET_REQUIRED;
             option text = STRING_TOKEN(0x103F), value = 1, flags = RESET_REQUIRED;
             option text = STRING_TOKEN(0x1040), value = 2, flags = RESET_REQUIRED;
             option text = STRING_TOKEN(0x1041), value = 3, flags = RESET_REQUIRED;
          endoneof;

          oneof varid  = SETUP_DATA.TestRootPortPolicyControl[2],
            prompt   = STRING_TOKEN(0x102B),
            help     = STRING_TOKEN(0x103D),
             option text = STRING_TOKEN(0x103E), value = 0, flags = DEFAULT | RESET_REQUIRED;
             option text = STRING_TOKEN(0x103F), value = 1, flags = RESET_REQUIRED;
             option text = STRING_TOKEN(0x1040), value = 2, flags = RESET_REQUIRED;
             option text = STRING_TOKEN(0x1041), value = 3, flags = RESET_REQUIRED;
          endoneof;

          oneof varid  = SETUP_DATA.TestRootPortPolicyControl[3],
            prompt   = STRING_TOKEN(0x102C),
            help     = STRING_TOKEN(0x103D),
             option text = STRING_TOKEN(0x103E), value = 0, flags = DEFAULT | RESET_REQUIRED;
             option text = STRING_TOKEN(0x103F), value = 1, flags = RESET_REQUIRED;
             option text = STRING_TOKEN(0x1040), value = 2, flags = RESET_REQUIRED;
             option text = STRING_TOKEN(0x1041), value = 3, flags = RESET_REQUIRED;
          endoneof;

          oneof varid  = SETUP_DATA.TestRootPortPolicyControl[4],
            prompt   = STRING_TOKEN(0x102D),
            help     = STRING_TOKEN(0x103D),
             option text = STRING_TOKEN(0x103E), value = 0, flags = DEFAULT | RESET_REQUIRED;
             option text = STRING_TOKEN(0x103F), value = 1, flags = RESET_REQUIRED;
             option text = STRING_TOKEN(0x1040), value = 2, flags = RESET_REQUIRED;
             option text = STRING_TOKEN(0x1041), value = 3, flags = RESET_REQUIRED;
          endoneof;

          oneof varid  = SETUP_DATA.TestRootPortPolicyControl[5],
            prompt   = STRING_TOKEN(0x102E),
            help     = STRING_TOKEN(0x103D),
             option text = STRING_TOKEN(0x103E), value = 0, flags = DEFAULT | RESET_REQUIRED;
             option text = STRING_TOKEN(0x103F), value = 1, flags = RESET_REQUIRED;
             option text = STRING_TOKEN(0x1040), value = 2, flags = RESET_REQUIRED;
             option text = STRING_TOKEN(0x1041), value = 3, flags = RESET_REQUIRED;
          endoneof;

          oneof varid  = SETUP_DATA.TestRootPortPolicyControl[6],
            prompt   = STRING_TOKEN(0x102F),
            help     = STRING_TOKEN(0x103D),
             option text = STRING_TOKEN(0x103E), value = 0, flags = DEFAULT | RESET_REQUIRED;
             option text = STRING_TOKEN(0x103F), value = 1, flags = RESET_REQUIRED;
             option text = STRING_TOKEN(0x1040), value = 2, flags = RESET_REQUIRED;
             option text = STRING_TOKEN(0x1041), value = 3, flags = RESET_REQUIRED;
          endoneof;

          oneof varid  = SETUP_DATA.TestRootPortPolicyControl[7],
            prompt   = STRING_TOKEN(0x1030),
            help     = STRING_TOKEN(0x103D),
             option text = STRING_TOKEN(0x103E), value = 0, flags = DEFAULT | RESET_REQUIRED;
             option text = STRING_TOKEN(0x103F), value = 1, flags = RESET_REQUIRED;
             option text = STRING_TOKEN(0x1040), value = 2, flags = RESET_REQUIRED;
             option text = STRING_TOKEN(0x1041), value = 3, flags = RESET_REQUIRED;
          endoneof;

          oneof varid  = SETUP_DATA.TestRootPortPolicyControl[8],
            prompt   = STRING_TOKEN(0x1031),
            help     = STRING_TOKEN(0x103D),
             option text = STRING_TOKEN(0x103E), value = 0, flags = DEFAULT | RESET_REQUIRED;
             option text = STRING_TOKEN(0x103F), value = 1, flags = RESET_REQUIRED;
             option text = STRING_TOKEN(0x1040), value = 2, flags = RESET_REQUIRED;
             option text = STRING_TOKEN(0x1041), value = 3, flags = RESET_REQUIRED;
          endoneof;

          oneof varid  = SETUP_DATA.TestRootPortPolicyControl[9],
            prompt   = STRING_TOKEN(0x1032),
            help     = STRING_TOKEN(0x103D),
             option text = STRING_TOKEN(0x103E), value = 0, flags = DEFAULT | RESET_REQUIRED;
             option text = STRING_TOKEN(0x103F), value = 1, flags = RESET_REQUIRED;
             option text = STRING_TOKEN(0x1040), value = 2, flags = RESET_REQUIRED;
             option text = STRING_TOKEN(0x1041), value = 3, flags = RESET_REQUIRED;
          endoneof;

          oneof varid  = SETUP_DATA.TestRootPortPolicyControl[10],
            prompt   = STRING_TOKEN(0x1033),
            help     = STRING_TOKEN(0x103D),
             option text = STRING_TOKEN(0x103E), value = 0, flags = DEFAULT | RESET_REQUIRED;
             option text = STRING_TOKEN(0x103F), value = 1, flags = RESET_REQUIRED;
             option text = STRING_TOKEN(0x1040), value = 2, flags = RESET_REQUIRED;
             option text = STRING_TOKEN(0x1041), value = 3, flags = RESET_REQUIRED;
          endoneof;

          oneof varid  = SETUP_DATA.TestRootPortPolicyControl[11],
            prompt   = STRING_TOKEN(0x1034),
            help     = STRING_TOKEN(0x103D),
             option text = STRING_TOKEN(0x103E), value = 0, flags = DEFAULT | RESET_REQUIRED;
             option text = STRING_TOKEN(0x103F), value = 1, flags = RESET_REQUIRED;
             option text = STRING_TOKEN(0x1040), value = 2, flags = RESET_REQUIRED;
             option text = STRING_TOKEN(0x1041), value = 3, flags = RESET_REQUIRED;
          endoneof;

          oneof varid  = SETUP_DATA.TestRootPortPolicyControl[12],
            prompt   = STRING_TOKEN(0x1035),
            help     = STRING_TOKEN(0x103D),
             option text = STRING_TOKEN(0x103E), value = 0, flags = DEFAULT | RESET_REQUIRED;
             option text = STRING_TOKEN(0x103F), value = 1, flags = RESET_REQUIRED;
             option text = STRING_TOKEN(0x1040), value = 2, flags = RESET_REQUIRED;
             option text = STRING_TOKEN(0x1041), value = 3, flags = RESET_REQUIRED;
          endoneof;

          oneof varid  = SETUP_DATA.TestRootPortPolicyControl[13],
            prompt   = STRING_TOKEN(0x1036),
            help     = STRING_TOKEN(0x103D),
             option text = STRING_TOKEN(0x103E), value = 0, flags = DEFAULT | RESET_REQUIRED;
             option text = STRING_TOKEN(0x103F), value = 1, flags = RESET_REQUIRED;
             option text = STRING_TOKEN(0x1040), value = 2, flags = RESET_REQUIRED;
             option text = STRING_TOKEN(0x1041), value = 3, flags = RESET_REQUIRED;
          endoneof;

          oneof varid  = SETUP_DATA.TestRootPortPolicyControl[14],
            prompt   = STRING_TOKEN(0x1037),
            help     = STRING_TOKEN(0x103D),
             option text = STRING_TOKEN(0x103E), value = 0, flags = DEFAULT | RESET_REQUIRED;
             option text = STRING_TOKEN(0x103F), value = 1, flags = RESET_REQUIRED;
             option text = STRING_TOKEN(0x1040), value = 2, flags = RESET_REQUIRED;
             option text = STRING_TOKEN(0x1041), value = 3, flags = RESET_REQUIRED;
          endoneof;

          oneof varid  = SETUP_DATA.TestRootPortPolicyControl[15],
            prompt   = STRING_TOKEN(0x1038),
            help     = STRING_TOKEN(0x103D),
             option text = STRING_TOKEN(0x103E), value = 0, flags = DEFAULT | RESET_REQUIRED;
             option text = STRING_TOKEN(0x103F), value = 1, flags = RESET_REQUIRED;
             option text = STRING_TOKEN(0x1040), value = 2, flags = RESET_REQUIRED;
             option text = STRING_TOKEN(0x1041), value = 3, flags = RESET_REQUIRED;
          endoneof;

          oneof varid  = SETUP_DATA.TestRootPortPolicyControl[16],
            prompt   = STRING_TOKEN(0x1039),
            help     = STRING_TOKEN(0x103D),
             option text = STRING_TOKEN(0x103E), value = 0, flags = DEFAULT | RESET_REQUIRED;
             option text = STRING_TOKEN(0x103F), value = 1, flags = RESET_REQUIRED;
             option text = STRING_TOKEN(0x1040), value = 2, flags = RESET_REQUIRED;
             option text = STRING_TOKEN(0x1041), value = 3, flags = RESET_REQUIRED;
          endoneof;

          oneof varid  = SETUP_DATA.TestRootPortPolicyControl[17],
            prompt   = STRING_TOKEN(0x103A),
            help     = STRING_TOKEN(0x103D),
             option text = STRING_TOKEN(0x103E), value = 0, flags = DEFAULT | RESET_REQUIRED;
             option text = STRING_TOKEN(0x103F), value = 1, flags = RESET_REQUIRED;
             option text = STRING_TOKEN(0x1040), value = 2, flags = RESET_REQUIRED;
             option text = STRING_TOKEN(0x1041), value = 3, flags = RESET_REQUIRED;
          endoneof;

          oneof varid  = SETUP_DATA.TestRootPortPolicyControl[18],
            prompt   = STRING_TOKEN(0x103B),
            help     = STRING_TOKEN(0x103D),
             option text = STRING_TOKEN(0x103E), value = 0, flags = DEFAULT | RESET_REQUIRED;
             option text = STRING_TOKEN(0x103F), value = 1, flags = RESET_REQUIRED;
             option text = STRING_TOKEN(0x1040), value = 2, flags = RESET_REQUIRED;
             option text = STRING_TOKEN(0x1041), value = 3, flags = RESET_REQUIRED;
          endoneof;

          oneof varid  = SETUP_DATA.TestRootPortPolicyControl[19],
            prompt   = STRING_TOKEN(0x103C),
            help     = STRING_TOKEN(0x103D),
             option text = STRING_TOKEN(0x103E), value = 0, flags = DEFAULT | RESET_REQUIRED;
             option text = STRING_TOKEN(0x103F), value = 1, flags = RESET_REQUIRED;
             option text = STRING_TOKEN(0x1040), value = 2, flags = RESET_REQUIRED;
             option text = STRING_TOKEN(0x1041), value = 3, flags = RESET_REQUIRED;
          endoneof;
    endform;
  endif;
#line 1491 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"
#line 1492 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"



  form formid = 4146,
    title  = STRING_TOKEN(0x1069);  

    subtitle text = STRING_TOKEN(0x1069);
    subtitle text = STRING_TOKEN(0x0002);

    oneof varid = PCH_SETUP.PchSata,
        prompt   = STRING_TOKEN(0x106B),
        help     = STRING_TOKEN(0x106C),
        default  = 1, defaultstore = MyStandardDefault,
        option text = STRING_TOKEN(0x0003), value = 1, flags =  RESET_REQUIRED;
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
    endoneof;

    suppressif ideqval PCH_SETUP.PchSata == 0;
      oneof varid       = PCH_SETUP.SataInterfaceMode,
        prompt   = STRING_TOKEN(0x106D),
        help     = STRING_TOKEN(0x106E),
        option text = STRING_TOKEN(0x106F),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid       = PCH_SETUP.SataTestMode,
        prompt   = STRING_TOKEN(0x1070),
        help     = STRING_TOKEN(0x1071),
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

    suppressif ideqvallist  PCH_SETUP.SataTestMode ==  1;
      goto 4147,
        prompt = STRING_TOKEN(0x1072),
        help = STRING_TOKEN(0x1073);

      oneof varid       = PCH_SETUP.SataSalp,
          prompt   = STRING_TOKEN(0x10CC),
          help     = STRING_TOKEN(0x10CD),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;
    endif;

    subtitle text = STRING_TOKEN(0x0002);

    text
      help   = STRING_TOKEN(0x0851),
      text   = STRING_TOKEN(0x109F),
      text   = STRING_TOKEN(0x10A0),
      flags  = 0,
      key    = 0;

    text
      help   = STRING_TOKEN(0x0851),
      text   = STRING_TOKEN(0x1135),
      text   = STRING_TOKEN(0x1136),
      flags  = 0,
      key    = 0;

    suppressif ideqvallist  PCH_SETUP.SataTestMode ==  1;
      oneof varid   = PCH_SETUP.SataPort[0],
        prompt      = STRING_TOKEN(0x10AF),
        help        = STRING_TOKEN(0x10B7),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;
    endif;

    suppressif ideqval PCH_SETUP.SataExternal[0] == 1;
      oneof varid   = PCH_SETUP.SataHotPlug[0],
        prompt      = STRING_TOKEN(0x10BA),
        help        = STRING_TOKEN(0x10C2),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

     text
        help   = STRING_TOKEN(0x0851),
        text   = STRING_TOKEN(0x10D7),
        text   = STRING_TOKEN(0x10D8),
        flags  = 0,
        key    = 0;
    endif;

    oneof varid   = PCH_SETUP.SataExternal[0],
      prompt      = STRING_TOKEN(0x10B8),
      help        = STRING_TOKEN(0x10B9),
      option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
    endoneof;

    suppressif ideqval PCH_SETUP.SataHotPlug[0] == 0;
      oneof varid   = PCH_SETUP.SataMechanicalSw[0],
        prompt      = STRING_TOKEN(0x10C3),
        help        = STRING_TOKEN(0x10CB),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = MANUFACTURING | RESET_REQUIRED;
      endoneof;
    endif;

    oneof varid   = PCH_SETUP.SataSpinUp[0],
      prompt      = STRING_TOKEN(0x10CE),
      help        = STRING_TOKEN(0x10D6),
      option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = PCH_SETUP.SataType[0],
      prompt      = STRING_TOKEN(0x10D9),
      help        = STRING_TOKEN(0x10E1),
      option text = STRING_TOKEN(0x10E2), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x10E3), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid = PCH_SETUP.SataTopology[0],
       prompt = STRING_TOKEN(0x10E4),
       help = STRING_TOKEN(0x10EC),
       option text = STRING_TOKEN(0x10ED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
       option text = STRING_TOKEN(0x10EE), value = 1, flags = RESET_REQUIRED;
       option text = STRING_TOKEN(0x10EF), value = 2, flags = RESET_REQUIRED;
       option text = STRING_TOKEN(0x10F0), value = 3, flags = RESET_REQUIRED;
       option text = STRING_TOKEN(0x10F1), value = 4, flags = RESET_REQUIRED;
endoneof;

    oneof varid   = PCH_SETUP.PxDevSlp[0],
      prompt      = STRING_TOKEN(0x1074),
      help        = STRING_TOKEN(0x1075),
      default     = 0, defaultstore = MyStandardDefault,
      option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = PCH_SETUP.EnableDitoConfig[0],
      prompt      = STRING_TOKEN(0x1084),
      help        = STRING_TOKEN(0x108C),
      option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
    endoneof;

    grayoutif ideqval PCH_SETUP.EnableDitoConfig[0] == 0;
      numeric varid = PCH_SETUP.DitoVal[0],
        prompt      = STRING_TOKEN(0x108D),
        help        = STRING_TOKEN(0x1095),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 1023,
        step        = 0,    
        default     = 625,  
      endnumeric;

      numeric varid   = PCH_SETUP.DmVal[0],
        prompt      = STRING_TOKEN(0x1096),
        help        = STRING_TOKEN(0x109E),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 15,
        step        = 0,    
        default     = 15,    
      endnumeric;
    endif;

    text
      help   = STRING_TOKEN(0x0851),
      text   = STRING_TOKEN(0x10A1),
      text   = STRING_TOKEN(0x10A2),
      flags  = 0,
      key    = 0;

    text
      help   = STRING_TOKEN(0x0851),
      text   = STRING_TOKEN(0x1135),
      text   = STRING_TOKEN(0x1137),
      flags  = 0,
      key    = 0;

    suppressif ideqvallist  PCH_SETUP.SataTestMode ==  1;
      oneof varid   = PCH_SETUP.SataPort[1],
        prompt      = STRING_TOKEN(0x10B0),
        help        = STRING_TOKEN(0x10B7),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;
    endif;

    suppressif ideqval PCH_SETUP.SataExternal[1] == 1;
      oneof varid   = PCH_SETUP.SataHotPlug[1],
        prompt      = STRING_TOKEN(0x10BB),
        help        = STRING_TOKEN(0x10C2),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      text
        help   = STRING_TOKEN(0x0851),
        text   = STRING_TOKEN(0x10D7),
        text   = STRING_TOKEN(0x10D8),
        flags  = 0,
        key    = 0;
    endif;

    oneof varid   = PCH_SETUP.SataExternal[1],
      prompt      = STRING_TOKEN(0x10B8),
      help        = STRING_TOKEN(0x10B9),
      option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
    endoneof;

    suppressif ideqval PCH_SETUP.SataHotPlug[1] == 0;
      oneof varid   = PCH_SETUP.SataMechanicalSw[1],
        prompt      = STRING_TOKEN(0x10C4),
        help        = STRING_TOKEN(0x10CB),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = MANUFACTURING | RESET_REQUIRED;
      endoneof;
    endif;

    oneof varid   = PCH_SETUP.SataSpinUp[1],
      prompt      = STRING_TOKEN(0x10CF),
      help        = STRING_TOKEN(0x10D6),
      option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = PCH_SETUP.SataType[1],
      prompt      = STRING_TOKEN(0x10DA),
      help        = STRING_TOKEN(0x10E1),
      option text = STRING_TOKEN(0x10E2), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x10E3), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid = PCH_SETUP.SataTopology[1],
       prompt = STRING_TOKEN(0x10E5),
       help = STRING_TOKEN(0x10EC),
       default = 0, defaultstore = MyStandardDefault,
       option text = STRING_TOKEN(0x10ED), value = 0, flags = RESET_REQUIRED;
       option text = STRING_TOKEN(0x10EE), value = 1, flags = RESET_REQUIRED;
       option text = STRING_TOKEN(0x10EF), value = 2, flags = RESET_REQUIRED;
       option text = STRING_TOKEN(0x10F0), value = 3, flags = RESET_REQUIRED;
       option text = STRING_TOKEN(0x10F1), value = 4, flags = RESET_REQUIRED;
endoneof;

    oneof varid   = PCH_SETUP.PxDevSlp[1],
      prompt      = STRING_TOKEN(0x1076),
      help        = STRING_TOKEN(0x1077),
      default     = 0, defaultstore = MyStandardDefault,
      option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = PCH_SETUP.EnableDitoConfig[1],
      prompt      = STRING_TOKEN(0x1085),
      help        = STRING_TOKEN(0x108C),
      option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
    endoneof;

    grayoutif ideqval PCH_SETUP.EnableDitoConfig[1] == 0;
      numeric varid = PCH_SETUP.DitoVal[1],
        prompt      = STRING_TOKEN(0x108E),
        help        = STRING_TOKEN(0x1095),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 1023,
        step        = 0,    
        default     = 625,  
      endnumeric;

      numeric varid   = PCH_SETUP.DmVal[1],
        prompt      = STRING_TOKEN(0x1097),
        help        = STRING_TOKEN(0x109E),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 15,
        step        = 0,    
        default     = 15,   
      endnumeric;
    endif;

    text
      help   = STRING_TOKEN(0x0851),
      text   = STRING_TOKEN(0x10A3),
      text   = STRING_TOKEN(0x10A4),
      flags  = 0,
      key    = 0;

    text
      help   = STRING_TOKEN(0x0851),
      text   = STRING_TOKEN(0x1135),
      text   = STRING_TOKEN(0x1138),
      flags  = 0,
      key    = 0;

    suppressif ideqvallist  PCH_SETUP.SataTestMode ==  1;
      oneof varid   = PCH_SETUP.SataPort[2],
        prompt      = STRING_TOKEN(0x10B1),
        help        = STRING_TOKEN(0x10B7),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;
    endif;

    suppressif ideqval PCH_SETUP.SataExternal[2] == 1;
      oneof varid   = PCH_SETUP.SataHotPlug[2],
        prompt      = STRING_TOKEN(0x10BC),
        help        = STRING_TOKEN(0x10C2),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      text
        help   = STRING_TOKEN(0x0851),
        text   = STRING_TOKEN(0x10D7),
        text   = STRING_TOKEN(0x10D8),
        flags  = 0,
        key    = 0;
    endif;

    oneof varid   = PCH_SETUP.SataExternal[2],
      prompt      = STRING_TOKEN(0x10B8),
      help        = STRING_TOKEN(0x10B9),
      option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
    endoneof;

    suppressif ideqval PCH_SETUP.SataHotPlug[2] == 0;
      oneof varid   = PCH_SETUP.SataMechanicalSw[2],
        prompt      = STRING_TOKEN(0x10C5),
        help        = STRING_TOKEN(0x10CB),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = MANUFACTURING | RESET_REQUIRED;
      endoneof;
    endif;

    oneof varid   = PCH_SETUP.SataSpinUp[2],
      prompt      = STRING_TOKEN(0x10D0),
      help        = STRING_TOKEN(0x10D6),
      option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = PCH_SETUP.SataType[2],
      prompt      = STRING_TOKEN(0x10DB),
      help        = STRING_TOKEN(0x10E1),
      option text = STRING_TOKEN(0x10E2), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x10E3), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid = PCH_SETUP.SataTopology[2],
       prompt = STRING_TOKEN(0x10E6),
       help = STRING_TOKEN(0x10EC),
       default = 0, defaultstore = MyStandardDefault,
       option text = STRING_TOKEN(0x10ED), value = 0, flags = RESET_REQUIRED;
       option text = STRING_TOKEN(0x10EE), value = 1, flags = RESET_REQUIRED;
       option text = STRING_TOKEN(0x10EF), value = 2, flags = RESET_REQUIRED;
       option text = STRING_TOKEN(0x10F0), value = 3, flags = RESET_REQUIRED;
       option text = STRING_TOKEN(0x10F1), value = 4, flags = RESET_REQUIRED;
endoneof;

    oneof varid   = PCH_SETUP.PxDevSlp[2],
      prompt      = STRING_TOKEN(0x1078),
      help        = STRING_TOKEN(0x1079),
      default     = 0, defaultstore = MyStandardDefault,
      option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = PCH_SETUP.EnableDitoConfig[2],
      prompt      = STRING_TOKEN(0x1086),
      help        = STRING_TOKEN(0x108C),
      option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
    endoneof;

    grayoutif ideqval PCH_SETUP.EnableDitoConfig[2] == 0;
      numeric varid = PCH_SETUP.DitoVal[2],
        prompt      = STRING_TOKEN(0x108F),
        help        = STRING_TOKEN(0x1095),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 1023,
        step        = 0,    
        default value = 625,
      endnumeric;

      numeric varid   = PCH_SETUP.DmVal[2],
        prompt      = STRING_TOKEN(0x1098),
        help        = STRING_TOKEN(0x109E),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 15,
        step        = 0,    
        default     = 15,   
      endnumeric;
    endif;

    
    
    
    suppressif NOT ideqval SETUP_VOLATILE_DATA.PlatformType == 0x1;
      text
        help   = STRING_TOKEN(0x0851),
        text   = STRING_TOKEN(0x10A5),
        text   = STRING_TOKEN(0x10A6),
        flags  = 0,
        key    = 0;

      text
        help   = STRING_TOKEN(0x0851),
        text   = STRING_TOKEN(0x1135),
        text   = STRING_TOKEN(0x1139),
        flags  = 0,
        key    = 0;

      suppressif ideqvallist  PCH_SETUP.SataTestMode ==  1;
        oneof varid   = PCH_SETUP.SataPort[3],
          prompt      = STRING_TOKEN(0x10B2),
          help        = STRING_TOKEN(0x10B7),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
      endif;

      suppressif ideqval PCH_SETUP.SataExternal[3] == 1;
        oneof varid   = PCH_SETUP.SataHotPlug[3],
          prompt      = STRING_TOKEN(0x10BD),
          help        = STRING_TOKEN(0x10C2),
          option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
        endoneof;

        text
          help   = STRING_TOKEN(0x0851),
          text   = STRING_TOKEN(0x10D7),
          text   = STRING_TOKEN(0x10D8),
          flags  = 0,
          key    = 0;
      endif;

      oneof varid   = PCH_SETUP.SataExternal[3],
        prompt      = STRING_TOKEN(0x10B8),
        help        = STRING_TOKEN(0x10B9),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      suppressif ideqval PCH_SETUP.SataHotPlug[3] == 0;
        oneof varid   = PCH_SETUP.SataMechanicalSw[3],
          prompt      = STRING_TOKEN(0x10C6),
          help        = STRING_TOKEN(0x10CB),
          option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = MANUFACTURING | RESET_REQUIRED;
        endoneof;
      endif;

      oneof varid   = PCH_SETUP.SataSpinUp[3],
        prompt      = STRING_TOKEN(0x10D1),
        help        = STRING_TOKEN(0x10D6),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.SataType[3],
        prompt      = STRING_TOKEN(0x10DC),
        help        = STRING_TOKEN(0x10E1),
        option text = STRING_TOKEN(0x10E2), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x10E3), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid = PCH_SETUP.SataTopology[3],
       prompt = STRING_TOKEN(0x10E7),
       help = STRING_TOKEN(0x10EC),
       default = 0, defaultstore = MyStandardDefault,
       option text = STRING_TOKEN(0x10ED), value = 0, flags = RESET_REQUIRED;
       option text = STRING_TOKEN(0x10EE), value = 1, flags = RESET_REQUIRED;
       option text = STRING_TOKEN(0x10EF), value = 2, flags = RESET_REQUIRED;
       option text = STRING_TOKEN(0x10F0), value = 3, flags = RESET_REQUIRED;
       option text = STRING_TOKEN(0x10F1), value = 4, flags = RESET_REQUIRED;
endoneof;

      oneof varid   = PCH_SETUP.PxDevSlp[3],
          prompt      = STRING_TOKEN(0x107A),
          help        = STRING_TOKEN(0x107B),
          option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
        endoneof;

      oneof varid   = PCH_SETUP.EnableDitoConfig[3],
        prompt      = STRING_TOKEN(0x1087),
        help        = STRING_TOKEN(0x108C),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      grayoutif ideqval PCH_SETUP.EnableDitoConfig[3] == 0;
        numeric varid = PCH_SETUP.DitoVal[3],
          prompt      = STRING_TOKEN(0x1090),
          help        = STRING_TOKEN(0x1095),
          flags       = RESET_REQUIRED,
          minimum     = 0,
          maximum     = 1023,
          step        = 0,    
          default     = 625,  
        endnumeric;

        numeric varid   = PCH_SETUP.DmVal[3],
          prompt      = STRING_TOKEN(0x1099),
          help        = STRING_TOKEN(0x109E),
          flags       = RESET_REQUIRED,
          minimum     = 0,
          maximum     = 15,
          step        = 0,    
         default     = 15,   
        endnumeric;
      endif;

      text
        help   = STRING_TOKEN(0x0851),
        text   = STRING_TOKEN(0x10A7),
        text   = STRING_TOKEN(0x10A8),
        flags  = 0,
        key    = 0;

      text
        help   = STRING_TOKEN(0x0851),
        text   = STRING_TOKEN(0x1135),
        text   = STRING_TOKEN(0x113A),
        flags  = 0,
        key    = 0;

      suppressif ideqvallist  PCH_SETUP.SataTestMode ==  1;
        oneof varid   = PCH_SETUP.SataPort[4],
          prompt      = STRING_TOKEN(0x10B3),
          help        = STRING_TOKEN(0x10B7),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
      endif;

      suppressif ideqval PCH_SETUP.SataExternal[4] == 1;
        oneof varid   = PCH_SETUP.SataHotPlug[4],
          prompt      = STRING_TOKEN(0x10BE),
          help        = STRING_TOKEN(0x10C2),
          option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
        endoneof;

        text
          help   = STRING_TOKEN(0x0851),
          text   = STRING_TOKEN(0x10D7),
          text   = STRING_TOKEN(0x10D8),
          flags  = 0,
          key    = 0;
      endif;

      oneof varid   = PCH_SETUP.SataExternal[4],
        prompt      = STRING_TOKEN(0x10B8),
        help        = STRING_TOKEN(0x10B9),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      suppressif ideqval PCH_SETUP.SataHotPlug[4] == 0;
        oneof varid   = PCH_SETUP.SataMechanicalSw[4],
          prompt      = STRING_TOKEN(0x10C7),
          help        = STRING_TOKEN(0x10CB),
          option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = MANUFACTURING | RESET_REQUIRED;
        endoneof;
      endif;

      oneof varid   = PCH_SETUP.SataSpinUp[4],
        prompt      = STRING_TOKEN(0x10D2),
        help        = STRING_TOKEN(0x10D6),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.SataType[4],
        prompt      = STRING_TOKEN(0x10DD),
        help        = STRING_TOKEN(0x10E1),
        option text = STRING_TOKEN(0x10E2), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x10E3), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.SataTopology[4],
       prompt = STRING_TOKEN(0x10E8),
       help = STRING_TOKEN(0x10EC),
       default = 0, defaultstore = MyStandardDefault,
       option text = STRING_TOKEN(0x10ED), value = 0, flags = RESET_REQUIRED;
       option text = STRING_TOKEN(0x10EE), value = 1, flags = RESET_REQUIRED;
       option text = STRING_TOKEN(0x10EF), value = 2, flags = RESET_REQUIRED;
       option text = STRING_TOKEN(0x10F0), value = 3, flags = RESET_REQUIRED;
       option text = STRING_TOKEN(0x10F1), value = 4, flags = RESET_REQUIRED;
      endoneof;

     oneof varid   = PCH_SETUP.PxDevSlp[4],
        prompt      = STRING_TOKEN(0x107C),
        help        = STRING_TOKEN(0x107D),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.EnableDitoConfig[4],
        prompt      = STRING_TOKEN(0x1088),
        help        = STRING_TOKEN(0x108C),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      grayoutif ideqval PCH_SETUP.EnableDitoConfig[4] == 0;
        numeric varid = PCH_SETUP.DitoVal[4],
          prompt      = STRING_TOKEN(0x1091),
          help        = STRING_TOKEN(0x1095),
          flags       = RESET_REQUIRED,
          minimum     = 0,
          maximum     = 1023,
          step        = 0,    
          default     = 625,  
        endnumeric;

        numeric varid   = PCH_SETUP.DmVal[4],
          prompt      = STRING_TOKEN(0x109A),
          help        = STRING_TOKEN(0x109E),
          flags       = RESET_REQUIRED,
          minimum     = 0,
          maximum     = 15,
          step        = 0,    
          default     = 15,   
        endnumeric;
      endif;

      text
        help   = STRING_TOKEN(0x0851),
        text   = STRING_TOKEN(0x10A9),
        text   = STRING_TOKEN(0x10AA),
        flags  = 0,
        key    = 0;

      text
        help   = STRING_TOKEN(0x0851),
        text   = STRING_TOKEN(0x1135),
        text   = STRING_TOKEN(0x113B),
        flags  = 0,
        key    = 0;

      suppressif ideqvallist  PCH_SETUP.SataTestMode ==  1;
        oneof varid   = PCH_SETUP.SataPort[5],
          prompt      = STRING_TOKEN(0x10B4),
          help        = STRING_TOKEN(0x10B7),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
      endif;

      suppressif ideqval PCH_SETUP.SataExternal[5] == 1;
        oneof varid   = PCH_SETUP.SataHotPlug[5],
          prompt      = STRING_TOKEN(0x10BF),
          help        = STRING_TOKEN(0x10C2),
          option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
        endoneof;

        text
          help   = STRING_TOKEN(0x0851),
          text   = STRING_TOKEN(0x10D7),
          text   = STRING_TOKEN(0x10D8),
          flags  = 0,
          key    = 0;
      endif;

      oneof varid   = PCH_SETUP.SataExternal[5],
        prompt      = STRING_TOKEN(0x10B8),
        help        = STRING_TOKEN(0x10B9),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      suppressif ideqval PCH_SETUP.SataHotPlug[5] == 0;
        oneof varid   = PCH_SETUP.SataMechanicalSw[5],
          prompt      = STRING_TOKEN(0x10C8),
          help        = STRING_TOKEN(0x10CB),
          option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = MANUFACTURING | RESET_REQUIRED;
        endoneof;
      endif;

      oneof varid   = PCH_SETUP.SataSpinUp[5],
        prompt      = STRING_TOKEN(0x10D3),
        help        = STRING_TOKEN(0x10D6),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.SataType[5],
        prompt      = STRING_TOKEN(0x10DE),
        help        = STRING_TOKEN(0x10E1),
        option text = STRING_TOKEN(0x10E2), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x10E3), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid = PCH_SETUP.SataTopology[5],
       prompt = STRING_TOKEN(0x10E9),
       help = STRING_TOKEN(0x10EC),
       option text = STRING_TOKEN(0x10ED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
       option text = STRING_TOKEN(0x10EE), value = 1, flags = RESET_REQUIRED;
       option text = STRING_TOKEN(0x10EF), value = 2, flags = RESET_REQUIRED;
       option text = STRING_TOKEN(0x10F0), value = 3, flags = RESET_REQUIRED;
       option text = STRING_TOKEN(0x10F1), value = 4, flags = RESET_REQUIRED;
endoneof;

     oneof varid    = PCH_SETUP.PxDevSlp[5],
        prompt      = STRING_TOKEN(0x107E),
        help        = STRING_TOKEN(0x107F),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.EnableDitoConfig[5],
        prompt      = STRING_TOKEN(0x1089),
        help        = STRING_TOKEN(0x108C),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      grayoutif ideqval PCH_SETUP.EnableDitoConfig[5] == 0;
        numeric varid = PCH_SETUP.DitoVal[5],
          prompt      = STRING_TOKEN(0x1092),
          help        = STRING_TOKEN(0x1095),
          flags       = RESET_REQUIRED,
          minimum     = 0,
          maximum     = 1023,
          step        = 0,    
          default     = 625,  
        endnumeric;

        numeric varid = PCH_SETUP.DmVal[5],
          prompt      = STRING_TOKEN(0x109B),
          help        = STRING_TOKEN(0x109E),
          flags       = RESET_REQUIRED,
          minimum     = 0,
          maximum     = 15,
          step        = 0,    
          default     = 15,   
        endnumeric;
      endif;

      text
        help   = STRING_TOKEN(0x0851),
        text   = STRING_TOKEN(0x10AB),
        text   = STRING_TOKEN(0x10AC),
        flags  = 0,
        key    = 0;

      text
        help   = STRING_TOKEN(0x0851),
        text   = STRING_TOKEN(0x1135),
        text   = STRING_TOKEN(0x113C),
        flags  = 0,
        key    = 0;

      suppressif ideqvallist  PCH_SETUP.SataTestMode == 1;
        oneof varid   = PCH_SETUP.SataPort[6],
          prompt      = STRING_TOKEN(0x10B5),
          help        = STRING_TOKEN(0x10B7),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
      endif;

      suppressif ideqval PCH_SETUP.SataExternal[6] == 1;
        oneof varid   = PCH_SETUP.SataHotPlug[6],
          prompt      = STRING_TOKEN(0x10C0),
          help        = STRING_TOKEN(0x10C2),
          option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
        endoneof;

        text
          help   = STRING_TOKEN(0x0851),
          text   = STRING_TOKEN(0x10D7),
          text   = STRING_TOKEN(0x10D8),
          flags  = 0,
          key    = 0;
      endif;

      oneof varid   = PCH_SETUP.SataExternal[6],
        prompt      = STRING_TOKEN(0x10B8),
        help        = STRING_TOKEN(0x10B9),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      suppressif ideqval PCH_SETUP.SataHotPlug[6] == 0;
        oneof varid   = PCH_SETUP.SataMechanicalSw[6],
          prompt      = STRING_TOKEN(0x10C9),
          help        = STRING_TOKEN(0x10CB),
          option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = MANUFACTURING | RESET_REQUIRED;
        endoneof;
      endif;

      oneof varid   = PCH_SETUP.SataSpinUp[6],
        prompt      = STRING_TOKEN(0x10D4),
        help        = STRING_TOKEN(0x10D6),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.SataType[6],
        prompt      = STRING_TOKEN(0x10DF),
        help        = STRING_TOKEN(0x10E1),
        option text = STRING_TOKEN(0x10E2), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x10E3), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid = PCH_SETUP.SataTopology[6],
       prompt = STRING_TOKEN(0x10EA),
       help = STRING_TOKEN(0x10EC),
       option text = STRING_TOKEN(0x10ED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
       option text = STRING_TOKEN(0x10EE), value = 1, flags = RESET_REQUIRED;
       option text = STRING_TOKEN(0x10EF), value = 2, flags = RESET_REQUIRED;
       option text = STRING_TOKEN(0x10F0), value = 3, flags = RESET_REQUIRED;
       option text = STRING_TOKEN(0x10F1), value = 4, flags = RESET_REQUIRED;
endoneof;

     oneof varid   = PCH_SETUP.PxDevSlp[6],
        prompt      = STRING_TOKEN(0x1080),
        help        = STRING_TOKEN(0x1081),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.EnableDitoConfig[6],
        prompt      = STRING_TOKEN(0x108A),
        help        = STRING_TOKEN(0x108C),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      grayoutif ideqval PCH_SETUP.EnableDitoConfig[6] == 0;
        numeric varid = PCH_SETUP.DitoVal[6],
          prompt      = STRING_TOKEN(0x1093),
          help        = STRING_TOKEN(0x1095),
          flags       = RESET_REQUIRED,
          minimum     = 0,
          maximum     = 1023,
          step        = 0,    
          default     = 625,  
        endnumeric;

        numeric varid = PCH_SETUP.DmVal[6],
          prompt      = STRING_TOKEN(0x109C),
          help        = STRING_TOKEN(0x109E),
          flags       = RESET_REQUIRED,
          minimum     = 0,
          maximum     = 15,
          step        = 0,    
          default     = 15,   
        endnumeric;
      endif;

      text
        help   = STRING_TOKEN(0x0851),
        text   = STRING_TOKEN(0x10AD),
        text   = STRING_TOKEN(0x10AE),
        flags  = 0,
        key    = 0;

      text
        help   = STRING_TOKEN(0x0851),
        text   = STRING_TOKEN(0x1135),
        text   = STRING_TOKEN(0x113D),
        flags  = 0,
        key    = 0;

      suppressif ideqvallist  PCH_SETUP.SataTestMode ==  1;
        oneof varid   = PCH_SETUP.SataPort[7],
          prompt      = STRING_TOKEN(0x10B6),
          help        = STRING_TOKEN(0x10B7),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
      endif;

      suppressif ideqval PCH_SETUP.SataExternal[7] == 1;
        oneof varid   = PCH_SETUP.SataHotPlug[7],
          prompt      = STRING_TOKEN(0x10C1),
          help        = STRING_TOKEN(0x10C2),
          option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
        endoneof;

        text
          help   = STRING_TOKEN(0x0851),
          text   = STRING_TOKEN(0x10D7),
          text   = STRING_TOKEN(0x10D8),
          flags  = 0,
          key    = 0;
      endif;

      oneof varid   = PCH_SETUP.SataExternal[7],
        prompt      = STRING_TOKEN(0x10B8),
        help        = STRING_TOKEN(0x10B9),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      suppressif ideqval PCH_SETUP.SataHotPlug[7] == 0;
        oneof varid   = PCH_SETUP.SataMechanicalSw[7],
          prompt      = STRING_TOKEN(0x10CA),
          help        = STRING_TOKEN(0x10CB),
          option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = MANUFACTURING | RESET_REQUIRED;
        endoneof;
      endif;

      oneof varid   = PCH_SETUP.SataSpinUp[7],
        prompt      = STRING_TOKEN(0x10D5),
        help        = STRING_TOKEN(0x10D6),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.SataType[7],
        prompt      = STRING_TOKEN(0x10E0),
        help        = STRING_TOKEN(0x10E1),
        option text = STRING_TOKEN(0x10E2), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x10E3), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid = PCH_SETUP.SataTopology[7],
       prompt = STRING_TOKEN(0x10EB),
       help = STRING_TOKEN(0x10EC),
       option text = STRING_TOKEN(0x10ED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
       option text = STRING_TOKEN(0x10EE), value = 1, flags = RESET_REQUIRED;
       option text = STRING_TOKEN(0x10EF), value = 2, flags = RESET_REQUIRED;
       option text = STRING_TOKEN(0x10F0), value = 3, flags = RESET_REQUIRED;
       option text = STRING_TOKEN(0x10F1), value = 4, flags = RESET_REQUIRED;
endoneof;

     oneof varid   = PCH_SETUP.PxDevSlp[7],
        prompt      = STRING_TOKEN(0x1082),
        help        = STRING_TOKEN(0x1083),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.EnableDitoConfig[7],
        prompt      = STRING_TOKEN(0x108B),
        help        = STRING_TOKEN(0x108C),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      grayoutif ideqval PCH_SETUP.EnableDitoConfig[7] == 0;
        numeric varid = PCH_SETUP.DitoVal[7],
          prompt      = STRING_TOKEN(0x1094),
          help        = STRING_TOKEN(0x1095),
          flags       = RESET_REQUIRED,
          minimum     = 0,
          maximum     = 1023,
          step        = 0,    
          default     = 625,  
        endnumeric;

        numeric varid   = PCH_SETUP.DmVal[7],
          prompt      = STRING_TOKEN(0x109D),
          help        = STRING_TOKEN(0x109E),
          flags       = RESET_REQUIRED,
          minimum     = 0,
          maximum     = 15,
          step        = 0,    
          default     = 15,   
        endnumeric;
      endif;
    endif; 
    endif; 



















#line 2490 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"
  endform;




#line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PcieEq.hfr"


































form formid = 4400,
  title     = STRING_TOKEN(0x0B36);
  checkbox varid  = PCH_SETUP.PcieEqOverrideDefault,
    prompt   = STRING_TOKEN(0x0B38),
    help     = STRING_TOKEN(0x0B39),
    default  = 0,
  endcheckbox;

  suppressif ideqval PCH_SETUP.PcieEqOverrideDefault == 0;
    oneof varid = PCH_SETUP.PcieEqMethod,
          prompt = STRING_TOKEN(0x0B3A),
          help = STRING_TOKEN(0x0B3B),
          option text = STRING_TOKEN(0x0B3C), value = 0, flags = RESET_REQUIRED | DEFAULT;
          option text = STRING_TOKEN(0x0B3D), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid = PCH_SETUP.PcieEqMode,
          prompt = STRING_TOKEN(0x0B3E),
          help = STRING_TOKEN(0x0B3F),
          option text = STRING_TOKEN(0x0B40), value = 0, flags = RESET_REQUIRED | DEFAULT;
          option text = STRING_TOKEN(0x0B41), value = 1, flags = RESET_REQUIRED;
    endoneof;

    numeric varid = PCH_SETUP.PcieEqPh1DownstreamPortTransmitterPreset,
          prompt = STRING_TOKEN(0x0B42),
          help = STRING_TOKEN(0x0B44),
          flags = RESET_REQUIRED,
          minimum = 0,
          maximum = 10,
          step = 1,
          default = 0,
    endnumeric;

    numeric varid = PCH_SETUP.PcieEqPh1UpstreamPortTransmitterPreset,
            prompt = STRING_TOKEN(0x0B43),
            help = STRING_TOKEN(0x0B44),
            flags = RESET_REQUIRED,
            minimum = 0,
            maximum = 10,
            step = 1,
            default = 0,
    endnumeric;

    checkbox varid = PCH_SETUP.PcieEqPh2LocalTransmitterOverrideEnable,
      prompt = STRING_TOKEN(0x0B69),
      help = STRING_TOKEN(0x0B6A),
      default = 0,
    endcheckbox;

    suppressif ideqval PCH_SETUP.PcieEqPh2LocalTransmitterOverrideEnable == 0;
      numeric varid = PCH_SETUP.PcieEqPh2LocalTransmitterOverridePreset,
              prompt = STRING_TOKEN(0x0B6B),
              help = STRING_TOKEN(0x0B6C),
              flags = RESET_REQUIRED,
              minimum = 0,
              maximum = 10,
              step = 1,
              default = 0,
      endnumeric;
    endif;

    numeric varid = PCH_SETUP.PcieEqPh3NumberOfPresetsOrCoefficients,
            prompt = STRING_TOKEN(0x0B45),
            help = STRING_TOKEN(0x0B46),
            flags = RESET_REQUIRED,
            minimum = 0,
            maximum = 11, 
            step = 1,
            default = 0,
    endnumeric;

    suppressif NOT ideqval PCH_SETUP.PcieEqMode == 0; 
      numeric varid = PCH_SETUP.PcieEqPh3PresetList[0],
              prompt = STRING_TOKEN(0x0B47),
              help = STRING_TOKEN(0x0B52),
              flags = RESET_REQUIRED,
              minimum = 0,
              maximum = 63, 
              step = 1,
              default = 0,
      endnumeric;

      numeric varid = PCH_SETUP.PcieEqPh3PresetList[1],
              prompt = STRING_TOKEN(0x0B48),
              help = STRING_TOKEN(0x0B52),
              flags = RESET_REQUIRED,
              minimum = 0,
              maximum = 63, 
              step = 1,
              default = 0,
      endnumeric;

      numeric varid = PCH_SETUP.PcieEqPh3PresetList[2],
              prompt = STRING_TOKEN(0x0B49),
              help = STRING_TOKEN(0x0B52),
              flags = RESET_REQUIRED,
              minimum = 0,
              maximum = 63, 
              step = 1,
              default = 0,
      endnumeric;

      numeric varid = PCH_SETUP.PcieEqPh3PresetList[3],
              prompt = STRING_TOKEN(0x0B4A),
              help = STRING_TOKEN(0x0B52),
              flags = RESET_REQUIRED,
              minimum = 0,
              maximum = 63, 
              step = 1,
              default = 0,
      endnumeric;

      numeric varid = PCH_SETUP.PcieEqPh3PresetList[4],
              prompt = STRING_TOKEN(0x0B4B),
              help = STRING_TOKEN(0x0B52),
              flags = RESET_REQUIRED,
              minimum = 0,
              maximum = 63, 
              step = 1,
              default = 0,
      endnumeric;

      numeric varid = PCH_SETUP.PcieEqPh3PresetList[5],
              prompt = STRING_TOKEN(0x0B4C),
              help = STRING_TOKEN(0x0B52),
              flags = RESET_REQUIRED,
              minimum = 0,
              maximum = 63, 
              step = 1,
              default = 0,
      endnumeric;

      numeric varid = PCH_SETUP.PcieEqPh3PresetList[6],
              prompt = STRING_TOKEN(0x0B4D),
              help = STRING_TOKEN(0x0B52),
              flags = RESET_REQUIRED,
              minimum = 0,
              maximum = 63, 
              step = 1,
              default = 0,
      endnumeric;

      numeric varid = PCH_SETUP.PcieEqPh3PresetList[7],
              prompt = STRING_TOKEN(0x0B4E),
              help = STRING_TOKEN(0x0B52),
              flags = RESET_REQUIRED,
              minimum = 0,
              maximum = 63, 
              step = 1,
              default = 0,
      endnumeric;

      numeric varid = PCH_SETUP.PcieEqPh3PresetList[8],
              prompt = STRING_TOKEN(0x0B4F),
              help = STRING_TOKEN(0x0B52),
              flags = RESET_REQUIRED,
              minimum = 0,
              maximum = 63, 
              step = 1,
              default = 0,
      endnumeric;

      numeric varid = PCH_SETUP.PcieEqPh3PresetList[9],
              prompt = STRING_TOKEN(0x0B50),
              help = STRING_TOKEN(0x0B52),
              flags = RESET_REQUIRED,
              minimum = 0,
              maximum = 63, 
              step = 1,
              default = 0,
      endnumeric;

      numeric varid = PCH_SETUP.PcieEqPh3PresetList[10],
              prompt = STRING_TOKEN(0x0B51),
              help = STRING_TOKEN(0x0B52),
              flags = RESET_REQUIRED,
              minimum = 0,
              maximum = 63, 
              step = 1,
              default = 0,
      endnumeric;
    endif;

    suppressif NOT ideqval PCH_SETUP.PcieEqMode == 1; 

      numeric varid = PCH_SETUP.PcieEqPh3PreCursorList[0],
              prompt = STRING_TOKEN(0x0B53),
              help = STRING_TOKEN(0x0B67),
              flags = RESET_REQUIRED,
              minimum = 0,
              maximum = 63,
              step = 1,
              default = 0,
      endnumeric;

      numeric varid = PCH_SETUP.PcieEqPh3PostCursorList[0],
              prompt = STRING_TOKEN(0x0B54),
              help = STRING_TOKEN(0x0B68),
              flags = RESET_REQUIRED,
              minimum = 0,
              maximum = 63,
              step = 1,
              default = 0,
      endnumeric;

      numeric varid = PCH_SETUP.PcieEqPh3PreCursorList[1],
              prompt = STRING_TOKEN(0x0B55),
              help = STRING_TOKEN(0x0B67),
              flags = RESET_REQUIRED,
              minimum = 0,
              maximum = 63,
              step = 1,
              default = 0,
      endnumeric;

      numeric varid = PCH_SETUP.PcieEqPh3PostCursorList[1],
              prompt = STRING_TOKEN(0x0B56),
              help = STRING_TOKEN(0x0B68),
              flags = RESET_REQUIRED,
              minimum = 0,
              maximum = 63,
              step = 1,
              default = 0,
      endnumeric;

      numeric varid = PCH_SETUP.PcieEqPh3PreCursorList[2],
              prompt = STRING_TOKEN(0x0B57),
              help = STRING_TOKEN(0x0B67),
              flags = RESET_REQUIRED,
              minimum = 0,
              maximum = 63,
              step = 1,
              default = 0,
      endnumeric;

      numeric varid = PCH_SETUP.PcieEqPh3PostCursorList[2],
              prompt = STRING_TOKEN(0x0B58),
              help = STRING_TOKEN(0x0B68),
              flags = RESET_REQUIRED,
              minimum = 0,
              maximum = 63,
              step = 1,
              default = 0,
      endnumeric;

      numeric varid = PCH_SETUP.PcieEqPh3PreCursorList[3],
              prompt = STRING_TOKEN(0x0B59),
              help = STRING_TOKEN(0x0B67),
              flags = RESET_REQUIRED,
              minimum = 0,
              maximum = 63,
              step = 1,
              default = 0,
      endnumeric;

      numeric varid = PCH_SETUP.PcieEqPh3PostCursorList[3],
              prompt = STRING_TOKEN(0x0B5A),
              help = STRING_TOKEN(0x0B68),
              flags = RESET_REQUIRED,
              minimum = 0,
              maximum = 63,
              step = 1,
              default = 0,
      endnumeric;

      numeric varid = PCH_SETUP.PcieEqPh3PreCursorList[4],
              prompt = STRING_TOKEN(0x0B5B),
              help = STRING_TOKEN(0x0B67),
              flags = RESET_REQUIRED,
              minimum = 0,
              maximum = 63,
              step = 1,
              default = 0,
      endnumeric;

      numeric varid = PCH_SETUP.PcieEqPh3PostCursorList[4],
              prompt = STRING_TOKEN(0x0B5C),
              help = STRING_TOKEN(0x0B68),
              flags = RESET_REQUIRED,
              minimum = 0,
              maximum = 63,
              step = 1,
              default = 0,
      endnumeric;

      numeric varid = PCH_SETUP.PcieEqPh3PreCursorList[5],
              prompt = STRING_TOKEN(0x0B5D),
              help = STRING_TOKEN(0x0B67),
              flags = RESET_REQUIRED,
              minimum = 0,
              maximum = 63,
              step = 1,
              default = 0,
      endnumeric;

      numeric varid = PCH_SETUP.PcieEqPh3PostCursorList[5],
              prompt = STRING_TOKEN(0x0B5E),
              help = STRING_TOKEN(0x0B68),
              flags = RESET_REQUIRED,
              minimum = 0,
              maximum = 63,
              step = 1,
              default = 0,
      endnumeric;

      numeric varid = PCH_SETUP.PcieEqPh3PreCursorList[6],
              prompt = STRING_TOKEN(0x0B5F),
              help = STRING_TOKEN(0x0B67),
              flags = RESET_REQUIRED,
              minimum = 0,
              maximum = 63,
              step = 1,
              default = 0,
      endnumeric;

      numeric varid = PCH_SETUP.PcieEqPh3PostCursorList[6],
              prompt = STRING_TOKEN(0x0B60),
              help = STRING_TOKEN(0x0B68),
              flags = RESET_REQUIRED,
              minimum = 0,
              maximum = 63,
              step = 1,
              default = 0,
      endnumeric;

      numeric varid = PCH_SETUP.PcieEqPh3PreCursorList[7],
              prompt = STRING_TOKEN(0x0B61),
              help = STRING_TOKEN(0x0B67),
              flags = RESET_REQUIRED,
              minimum = 0,
              maximum = 63,
              step = 1,
              default = 0,
      endnumeric;

      numeric varid = PCH_SETUP.PcieEqPh3PostCursorList[7],
              prompt = STRING_TOKEN(0x0B62),
              help = STRING_TOKEN(0x0B68),
              flags = RESET_REQUIRED,
              minimum = 0,
              maximum = 63,
              step = 1,
              default = 0,
      endnumeric;

      numeric varid = PCH_SETUP.PcieEqPh3PreCursorList[8],
              prompt = STRING_TOKEN(0x0B63),
              help = STRING_TOKEN(0x0B67),
              flags = RESET_REQUIRED,
              minimum = 0,
              maximum = 63,
              step = 1,
              default = 0,
      endnumeric;

      numeric varid = PCH_SETUP.PcieEqPh3PostCursorList[8],
              prompt = STRING_TOKEN(0x0B64),
              help = STRING_TOKEN(0x0B68),
              flags = RESET_REQUIRED,
              minimum = 0,
              maximum = 63,
              step = 1,
              default = 0,
      endnumeric;

      numeric varid = PCH_SETUP.PcieEqPh3PreCursorList[9],
              prompt = STRING_TOKEN(0x0B65),
              help = STRING_TOKEN(0x0B67),
              flags = RESET_REQUIRED,
              minimum = 0,
              maximum = 63,
              step = 1,
              default = 0,
      endnumeric;

      numeric varid = PCH_SETUP.PcieEqPh3PostCursorList[9],
              prompt = STRING_TOKEN(0x0B66),
              help = STRING_TOKEN(0x0B68),
              flags = RESET_REQUIRED,
              minimum = 0,
              maximum = 63,
              step = 1,
              default = 0,
      endnumeric;

    endif;

  endif;

endform;
#line 2496 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"








#line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"

































  form formid = 5500,
    title     = STRING_TOKEN(0x1044);

    oneof varid   = PCH_SETUP.PcieRootPortEn[0],
      prompt      = STRING_TOKEN(0x0C64),
      help        = STRING_TOKEN(0x0C80),
      option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    suppressif ideqval PCH_SETUP.PcieRootPortEn[0] == 0x0;
      grayoutif ideqval PCH_SETUP.PcieRootPortHPE[0] == 1;
        oneof varid   = PCH_SETUP.PcieRootPortSI[0],
          prompt      = STRING_TOKEN(0x110F),
          help        = STRING_TOKEN(0x112B),
          option text = STRING_TOKEN(0x112C), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x112D), value = 1, flags = DEFAULT | RESET_REQUIRED;
        endoneof;
      endif;

       
        oneof varid   = PCH_SETUP.PcieRootPortAspm[0],
          questionid  = 5600,
          prompt      = STRING_TOKEN(0x0B6D),
          help        = STRING_TOKEN(0x0BA5),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;



#line 64 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"
          option text = STRING_TOKEN(0x0BA7), value = 2, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x158F), value = 4, flags = RESET_REQUIRED;
#line 67 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"
        endoneof;

        oneof varid   = PCH_SETUP.PcieRootPortL1SubStates[0],
          questionid  = 5628,
          prompt      = STRING_TOKEN(0x0BA9),
          help        = STRING_TOKEN(0x0BC5),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0BC6), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0BC7), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
       

      oneof varid   = PCH_SETUP.PcieRootPortL1Low[0],
        prompt      = STRING_TOKEN(0x0BC8),
        help        = STRING_TOKEN(0x0BC9),
        option text = STRING_TOKEN(0x0004), value = 0, flags =  RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortACS[0],
        prompt      = STRING_TOKEN(0x0BCA),
        help        = STRING_TOKEN(0x0BE6),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

       
        oneof varid   = PCH_SETUP.PcieRootPortPTM[0],
          questionid  = 5656,
          prompt      = STRING_TOKEN(0x0BE8),
          help        = STRING_TOKEN(0x0C04),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
       

      oneof varid   = PCH_SETUP.PcieRootPortDPC[0],
        prompt      = STRING_TOKEN(0x0C05),
        help        = STRING_TOKEN(0x0C21),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortEDPC[0],
        prompt      = STRING_TOKEN(0x0C22),
        help        = STRING_TOKEN(0x0C3E),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortURE[0],
        prompt      = STRING_TOKEN(0x0C81),
        help        = STRING_TOKEN(0x0C9D),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortFEE[0],
        prompt      = STRING_TOKEN(0x0C9E),
        help        = STRING_TOKEN(0x0CBA),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortNFE[0],
        prompt      = STRING_TOKEN(0x0CBB),
        help        = STRING_TOKEN(0x0CD7),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortCEE[0],
        prompt      = STRING_TOKEN(0x0CD8),
        help        = STRING_TOKEN(0x0CF4),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSFE[0],
        prompt      = STRING_TOKEN(0x0D12),
        help        = STRING_TOKEN(0x0D2E),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSNE[0],
        prompt      = STRING_TOKEN(0x0D2F),
        help        = STRING_TOKEN(0x0D4B),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSCE[0],
        prompt      = STRING_TOKEN(0x0D4C),
        help        = STRING_TOKEN(0x0D68),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortPMCE[0],
        prompt      = STRING_TOKEN(0x0D69),
        help        = STRING_TOKEN(0x0D85),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      grayoutif ideqval PCH_SETUP.PcieRootPortSI[0] == 0;
        oneof varid   = PCH_SETUP.PcieRootPortHPE[0],
          prompt      = STRING_TOKEN(0x0D86),
          help        = STRING_TOKEN(0x0DA2),
          option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
        endoneof;
      endif;

      oneof varid   = PCH_SETUP.PcieRootPortAER[0],
        prompt      = STRING_TOKEN(0x0DA3),
        help        = STRING_TOKEN(0x0DBF),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSpeed[0],
        prompt   = STRING_TOKEN (0x0C43),
        help     = STRING_TOKEN (0x0C5F),
        option text = STRING_TOKEN (0x0006), value = 0, flags = RESET_REQUIRED | DEFAULT;
        option text = STRING_TOKEN (0x0C60), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x0C61), value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x0C62), value = 3, flags = RESET_REQUIRED;

        option text = STRING_TOKEN (0x0C63), value = 4, flags = RESET_REQUIRED;
#line 199 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortTHS[0],
        prompt      = STRING_TOKEN(0x0DE3),
        help        = STRING_TOKEN(0x0DFF),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      numeric varid = PCH_SETUP.PcieDetectTimeoutMs[0],
        prompt      = STRING_TOKEN (0x0E00),
        help        = STRING_TOKEN (0x0E1C),
        minimum     = 0,
        maximum     = 65535,
        step        = 1,
        default     = 0,
      endnumeric;

      numeric varid = PCH_SETUP.PcieExtraBusRsvd[0],
        prompt      = STRING_TOKEN (0x0E1D),
        help        = STRING_TOKEN (0x0E39),
        minimum     = 0,
        maximum     = 7,
        step        = 1,    
        default     = 0,    
      endnumeric;

      numeric varid = PCH_SETUP.PcieMemRsvd[0],
        prompt      = STRING_TOKEN (0x0E3A),
        help        = STRING_TOKEN (0x0E56),
        minimum     = 1,
        maximum     = 20,
        step        = 1,    
        default     = 10,   
      endnumeric;

      numeric varid = PCH_SETUP.PcieIoRsvd[0],
        prompt      = STRING_TOKEN (0x0E57),
        help        = STRING_TOKEN (0x0E73),
        minimum     = 4,
        maximum     = 20,
        step        = 4,    
        default     = 4,    
      endnumeric;

      subtitle text = STRING_TOKEN(0x0002);

      subtitle text = STRING_TOKEN(0x0E7A);
      oneof varid   = PCH_SETUP.PchPcieLtrEnable[0],
        prompt   = STRING_TOKEN (0x0E7B),
        help     = STRING_TOKEN (0x0E97),
        option text = STRING_TOKEN(0x0004),  value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      suppressif ideqval PCH_SETUP.PchPcieLtrEnable[0] == 0;
        oneof varid   = PCH_SETUP.PchPcieSnoopLatencyOverrideMode[0],
          prompt      = STRING_TOKEN (0x0E98),
          help        = STRING_TOKEN (0x0F5D),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x09F8),   value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x158F),     value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        suppressif NOT ideqval PCH_SETUP.PchPcieSnoopLatencyOverrideMode[0] == 1;
          numeric varid = PCH_SETUP.PchPcieSnoopLatencyOverrideValue[0],
            prompt      = STRING_TOKEN(0x0E9A),
            help        = STRING_TOKEN(0x0F5F),
            flags       = RESET_REQUIRED,
            minimum     = 0,
            maximum     = 1023,
            step        = 1,
            default     = 60,
          endnumeric;

          oneof varid   = PCH_SETUP.PchPcieSnoopLatencyOverrideMultiplier[0],
            prompt      = STRING_TOKEN(0x0E9B),
            help        = STRING_TOKEN(0x0F60),
            option text = STRING_TOKEN(0x0E74), value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E75), value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E76), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E77), value = 3, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E78), value = 4, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E79), value = 5, flags = RESET_REQUIRED;
          endoneof;
        endif;

        oneof varid   = PCH_SETUP.PchPcieNonSnoopLatencyOverrideMode[0],
          prompt      = STRING_TOKEN (0x0E99),
          help        = STRING_TOKEN (0x0F5E),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x09F8),   value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x158F),     value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        suppressif NOT ideqval PCH_SETUP.PchPcieNonSnoopLatencyOverrideMode[0] == 1;
          numeric varid = PCH_SETUP.PchPcieNonSnoopLatencyOverrideValue[0],
            prompt      = STRING_TOKEN(0x0E9C),
            help        = STRING_TOKEN(0x0F61),
            flags       = RESET_REQUIRED,
            minimum     = 0,
            maximum     = 1023,
            step        = 1,
            default     = 60,
          endnumeric;

          oneof varid   = PCH_SETUP.PchPcieNonSnoopLatencyOverrideMultiplier[0],
            prompt      = STRING_TOKEN(0x0E9D),
            help        = STRING_TOKEN(0x0F62),
            option text = STRING_TOKEN(0x0E74), value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E75), value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E76), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E77), value = 3, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E78), value = 4, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E79), value = 5, flags = RESET_REQUIRED;
          endoneof;
        endif;




        oneof varid  = PCH_SETUP.PchPcieForceLtrOverride[0],
          prompt      = STRING_TOKEN(0x0F40),
          help        = STRING_TOKEN(0x0F5C),
          option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
        endoneof;




      endif;

      subtitle text = STRING_TOKEN(0x0002);

      oneof varid   = PCH_SETUP.PchPcieLtrConfigLock[0],
        prompt   = STRING_TOKEN (0x0F63),
        help     = STRING_TOKEN (0x0F7F),
        option text = STRING_TOKEN(0x0004),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortPeerMemoryWriteEnable[0],
        prompt      = STRING_TOKEN(0x0DC4),
        help        = STRING_TOKEN(0x0DE0),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

    endif;
  endform; 
#line 2505 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"



#line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"

































  form formid = 4148,
    title     = STRING_TOKEN(0x1045);

    oneof varid   = PCH_SETUP.PcieRootPortEn[1],
      prompt      = STRING_TOKEN(0x0C65),
      help        = STRING_TOKEN(0x0C80),
      option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    suppressif ideqval PCH_SETUP.PcieRootPortEn[1] == 0x0;
      grayoutif ideqval PCH_SETUP.PcieRootPortHPE[1] == 1;
        oneof varid   = PCH_SETUP.PcieRootPortSI[1],
          prompt      = STRING_TOKEN(0x1110),
          help        = STRING_TOKEN(0x112B),
          option text = STRING_TOKEN(0x112C), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x112D), value = 1, flags = DEFAULT | RESET_REQUIRED;
        endoneof;
      endif;

       
        oneof varid   = PCH_SETUP.PcieRootPortAspm[1],
          questionid  = 5601,
          prompt      = STRING_TOKEN(0x0B6E),
          help        = STRING_TOKEN(0x0BA5),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;



#line 64 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"
          option text = STRING_TOKEN(0x0BA7), value = 2, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x158F), value = 4, flags = RESET_REQUIRED;
#line 67 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"
        endoneof;

        oneof varid   = PCH_SETUP.PcieRootPortL1SubStates[1],
          questionid  = 5629,
          prompt      = STRING_TOKEN(0x0BAA),
          help        = STRING_TOKEN(0x0BC5),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0BC6), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0BC7), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
       

      oneof varid   = PCH_SETUP.PcieRootPortL1Low[1],
        prompt      = STRING_TOKEN(0x0BC8),
        help        = STRING_TOKEN(0x0BC9),
        option text = STRING_TOKEN(0x0004), value = 0, flags =  RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortACS[1],
        prompt      = STRING_TOKEN(0x0BCB),
        help        = STRING_TOKEN(0x0BE6),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

       
        oneof varid   = PCH_SETUP.PcieRootPortPTM[1],
          questionid  = 5657,
          prompt      = STRING_TOKEN(0x0BE9),
          help        = STRING_TOKEN(0x0C04),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
       

      oneof varid   = PCH_SETUP.PcieRootPortDPC[1],
        prompt      = STRING_TOKEN(0x0C06),
        help        = STRING_TOKEN(0x0C21),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortEDPC[1],
        prompt      = STRING_TOKEN(0x0C23),
        help        = STRING_TOKEN(0x0C3E),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortURE[1],
        prompt      = STRING_TOKEN(0x0C82),
        help        = STRING_TOKEN(0x0C9D),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortFEE[1],
        prompt      = STRING_TOKEN(0x0C9F),
        help        = STRING_TOKEN(0x0CBA),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortNFE[1],
        prompt      = STRING_TOKEN(0x0CBC),
        help        = STRING_TOKEN(0x0CD7),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortCEE[1],
        prompt      = STRING_TOKEN(0x0CD9),
        help        = STRING_TOKEN(0x0CF4),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSFE[1],
        prompt      = STRING_TOKEN(0x0D13),
        help        = STRING_TOKEN(0x0D2E),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSNE[1],
        prompt      = STRING_TOKEN(0x0D30),
        help        = STRING_TOKEN(0x0D4B),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSCE[1],
        prompt      = STRING_TOKEN(0x0D4D),
        help        = STRING_TOKEN(0x0D68),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortPMCE[1],
        prompt      = STRING_TOKEN(0x0D6A),
        help        = STRING_TOKEN(0x0D85),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      grayoutif ideqval PCH_SETUP.PcieRootPortSI[1] == 0;
        oneof varid   = PCH_SETUP.PcieRootPortHPE[1],
          prompt      = STRING_TOKEN(0x0D87),
          help        = STRING_TOKEN(0x0DA2),
          option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
        endoneof;
      endif;

      oneof varid   = PCH_SETUP.PcieRootPortAER[1],
        prompt      = STRING_TOKEN(0x0DA4),
        help        = STRING_TOKEN(0x0DBF),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSpeed[1],
        prompt   = STRING_TOKEN (0x0C44),
        help     = STRING_TOKEN (0x0C5F),
        option text = STRING_TOKEN (0x0006), value = 0, flags = RESET_REQUIRED | DEFAULT;
        option text = STRING_TOKEN (0x0C60), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x0C61), value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x0C62), value = 3, flags = RESET_REQUIRED;

        option text = STRING_TOKEN (0x0C63), value = 4, flags = RESET_REQUIRED;
#line 199 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortTHS[1],
        prompt      = STRING_TOKEN(0x0DE4),
        help        = STRING_TOKEN(0x0DFF),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      numeric varid = PCH_SETUP.PcieDetectTimeoutMs[1],
        prompt      = STRING_TOKEN (0x0E01),
        help        = STRING_TOKEN (0x0E1C),
        minimum     = 0,
        maximum     = 65535,
        step        = 1,
        default     = 0,
      endnumeric;

      numeric varid = PCH_SETUP.PcieExtraBusRsvd[1],
        prompt      = STRING_TOKEN (0x0E1E),
        help        = STRING_TOKEN (0x0E39),
        minimum     = 0,
        maximum     = 7,
        step        = 1,    
        default     = 0,    
      endnumeric;

      numeric varid = PCH_SETUP.PcieMemRsvd[1],
        prompt      = STRING_TOKEN (0x0E3B),
        help        = STRING_TOKEN (0x0E56),
        minimum     = 1,
        maximum     = 20,
        step        = 1,    
        default     = 10,   
      endnumeric;

      numeric varid = PCH_SETUP.PcieIoRsvd[1],
        prompt      = STRING_TOKEN (0x0E58),
        help        = STRING_TOKEN (0x0E73),
        minimum     = 4,
        maximum     = 20,
        step        = 4,    
        default     = 4,    
      endnumeric;

      subtitle text = STRING_TOKEN(0x0002);

      subtitle text = STRING_TOKEN(0x0E7A);
      oneof varid   = PCH_SETUP.PchPcieLtrEnable[1],
        prompt   = STRING_TOKEN (0x0E7C),
        help     = STRING_TOKEN (0x0E97),
        option text = STRING_TOKEN(0x0004),  value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      suppressif ideqval PCH_SETUP.PchPcieLtrEnable[1] == 0;
        oneof varid   = PCH_SETUP.PchPcieSnoopLatencyOverrideMode[1],
          prompt      = STRING_TOKEN (0x0E9E),
          help        = STRING_TOKEN (0x0F5D),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x09F8),   value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x158F),     value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        suppressif NOT ideqval PCH_SETUP.PchPcieSnoopLatencyOverrideMode[1] == 1;
          numeric varid = PCH_SETUP.PchPcieSnoopLatencyOverrideValue[1],
            prompt      = STRING_TOKEN(0x0EA0),
            help        = STRING_TOKEN(0x0F5F),
            flags       = RESET_REQUIRED,
            minimum     = 0,
            maximum     = 1023,
            step        = 1,
            default     = 60,
          endnumeric;

          oneof varid   = PCH_SETUP.PchPcieSnoopLatencyOverrideMultiplier[1],
            prompt      = STRING_TOKEN(0x0EA1),
            help        = STRING_TOKEN(0x0F60),
            option text = STRING_TOKEN(0x0E74), value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E75), value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E76), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E77), value = 3, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E78), value = 4, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E79), value = 5, flags = RESET_REQUIRED;
          endoneof;
        endif;

        oneof varid   = PCH_SETUP.PchPcieNonSnoopLatencyOverrideMode[1],
          prompt      = STRING_TOKEN (0x0E9F),
          help        = STRING_TOKEN (0x0F5E),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x09F8),   value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x158F),     value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        suppressif NOT ideqval PCH_SETUP.PchPcieNonSnoopLatencyOverrideMode[1] == 1;
          numeric varid = PCH_SETUP.PchPcieNonSnoopLatencyOverrideValue[1],
            prompt      = STRING_TOKEN(0x0EA2),
            help        = STRING_TOKEN(0x0F61),
            flags       = RESET_REQUIRED,
            minimum     = 0,
            maximum     = 1023,
            step        = 1,
            default     = 60,
          endnumeric;

          oneof varid   = PCH_SETUP.PchPcieNonSnoopLatencyOverrideMultiplier[1],
            prompt      = STRING_TOKEN(0x0EA3),
            help        = STRING_TOKEN(0x0F62),
            option text = STRING_TOKEN(0x0E74), value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E75), value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E76), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E77), value = 3, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E78), value = 4, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E79), value = 5, flags = RESET_REQUIRED;
          endoneof;
        endif;




        oneof varid  = PCH_SETUP.PchPcieForceLtrOverride[1],
          prompt      = STRING_TOKEN(0x0F41),
          help        = STRING_TOKEN(0x0F5C),
          option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
        endoneof;




      endif;

      subtitle text = STRING_TOKEN(0x0002);

      oneof varid   = PCH_SETUP.PchPcieLtrConfigLock[1],
        prompt   = STRING_TOKEN (0x0F64),
        help     = STRING_TOKEN (0x0F7F),
        option text = STRING_TOKEN(0x0004),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortPeerMemoryWriteEnable[1],
        prompt      = STRING_TOKEN(0x0DC5),
        help        = STRING_TOKEN(0x0DE0),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

    endif;
  endform; 
#line 2509 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"



#line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"

































  form formid = 4149,
    title     = STRING_TOKEN(0x1046);

    oneof varid   = PCH_SETUP.PcieRootPortEn[2],
      prompt      = STRING_TOKEN(0x0C66),
      help        = STRING_TOKEN(0x0C80),
      option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    suppressif ideqval PCH_SETUP.PcieRootPortEn[2] == 0x0;
      grayoutif ideqval PCH_SETUP.PcieRootPortHPE[2] == 1;
        oneof varid   = PCH_SETUP.PcieRootPortSI[2],
          prompt      = STRING_TOKEN(0x1111),
          help        = STRING_TOKEN(0x112B),
          option text = STRING_TOKEN(0x112C), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x112D), value = 1, flags = DEFAULT | RESET_REQUIRED;
        endoneof;
      endif;

       
        oneof varid   = PCH_SETUP.PcieRootPortAspm[2],
          questionid  = 5602,
          prompt      = STRING_TOKEN(0x0B6F),
          help        = STRING_TOKEN(0x0BA5),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;



#line 64 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"
          option text = STRING_TOKEN(0x0BA7), value = 2, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x158F), value = 4, flags = RESET_REQUIRED;
#line 67 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"
        endoneof;

        oneof varid   = PCH_SETUP.PcieRootPortL1SubStates[2],
          questionid  = 5630,
          prompt      = STRING_TOKEN(0x0BAB),
          help        = STRING_TOKEN(0x0BC5),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0BC6), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0BC7), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
       

      oneof varid   = PCH_SETUP.PcieRootPortL1Low[2],
        prompt      = STRING_TOKEN(0x0BC8),
        help        = STRING_TOKEN(0x0BC9),
        option text = STRING_TOKEN(0x0004), value = 0, flags =  RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortACS[2],
        prompt      = STRING_TOKEN(0x0BCC),
        help        = STRING_TOKEN(0x0BE6),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

       
        oneof varid   = PCH_SETUP.PcieRootPortPTM[2],
          questionid  = 5658,
          prompt      = STRING_TOKEN(0x0BEA),
          help        = STRING_TOKEN(0x0C04),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
       

      oneof varid   = PCH_SETUP.PcieRootPortDPC[2],
        prompt      = STRING_TOKEN(0x0C07),
        help        = STRING_TOKEN(0x0C21),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortEDPC[2],
        prompt      = STRING_TOKEN(0x0C24),
        help        = STRING_TOKEN(0x0C3E),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortURE[2],
        prompt      = STRING_TOKEN(0x0C83),
        help        = STRING_TOKEN(0x0C9D),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortFEE[2],
        prompt      = STRING_TOKEN(0x0CA0),
        help        = STRING_TOKEN(0x0CBA),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortNFE[2],
        prompt      = STRING_TOKEN(0x0CBD),
        help        = STRING_TOKEN(0x0CD7),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortCEE[2],
        prompt      = STRING_TOKEN(0x0CDA),
        help        = STRING_TOKEN(0x0CF4),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSFE[2],
        prompt      = STRING_TOKEN(0x0D14),
        help        = STRING_TOKEN(0x0D2E),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSNE[2],
        prompt      = STRING_TOKEN(0x0D31),
        help        = STRING_TOKEN(0x0D4B),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSCE[2],
        prompt      = STRING_TOKEN(0x0D4E),
        help        = STRING_TOKEN(0x0D68),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortPMCE[2],
        prompt      = STRING_TOKEN(0x0D6B),
        help        = STRING_TOKEN(0x0D85),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      grayoutif ideqval PCH_SETUP.PcieRootPortSI[2] == 0;
        oneof varid   = PCH_SETUP.PcieRootPortHPE[2],
          prompt      = STRING_TOKEN(0x0D88),
          help        = STRING_TOKEN(0x0DA2),
          option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
        endoneof;
      endif;

      oneof varid   = PCH_SETUP.PcieRootPortAER[2],
        prompt      = STRING_TOKEN(0x0DA5),
        help        = STRING_TOKEN(0x0DBF),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSpeed[2],
        prompt   = STRING_TOKEN (0x0C45),
        help     = STRING_TOKEN (0x0C5F),
        option text = STRING_TOKEN (0x0006), value = 0, flags = RESET_REQUIRED | DEFAULT;
        option text = STRING_TOKEN (0x0C60), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x0C61), value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x0C62), value = 3, flags = RESET_REQUIRED;

        option text = STRING_TOKEN (0x0C63), value = 4, flags = RESET_REQUIRED;
#line 199 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortTHS[2],
        prompt      = STRING_TOKEN(0x0DE5),
        help        = STRING_TOKEN(0x0DFF),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      numeric varid = PCH_SETUP.PcieDetectTimeoutMs[2],
        prompt      = STRING_TOKEN (0x0E02),
        help        = STRING_TOKEN (0x0E1C),
        minimum     = 0,
        maximum     = 65535,
        step        = 1,
        default     = 0,
      endnumeric;

      numeric varid = PCH_SETUP.PcieExtraBusRsvd[2],
        prompt      = STRING_TOKEN (0x0E1F),
        help        = STRING_TOKEN (0x0E39),
        minimum     = 0,
        maximum     = 7,
        step        = 1,    
        default     = 0,    
      endnumeric;

      numeric varid = PCH_SETUP.PcieMemRsvd[2],
        prompt      = STRING_TOKEN (0x0E3C),
        help        = STRING_TOKEN (0x0E56),
        minimum     = 1,
        maximum     = 20,
        step        = 1,    
        default     = 10,   
      endnumeric;

      numeric varid = PCH_SETUP.PcieIoRsvd[2],
        prompt      = STRING_TOKEN (0x0E59),
        help        = STRING_TOKEN (0x0E73),
        minimum     = 4,
        maximum     = 20,
        step        = 4,    
        default     = 4,    
      endnumeric;

      subtitle text = STRING_TOKEN(0x0002);

      subtitle text = STRING_TOKEN(0x0E7A);
      oneof varid   = PCH_SETUP.PchPcieLtrEnable[2],
        prompt   = STRING_TOKEN (0x0E7D),
        help     = STRING_TOKEN (0x0E97),
        option text = STRING_TOKEN(0x0004),  value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      suppressif ideqval PCH_SETUP.PchPcieLtrEnable[2] == 0;
        oneof varid   = PCH_SETUP.PchPcieSnoopLatencyOverrideMode[2],
          prompt      = STRING_TOKEN (0x0EA4),
          help        = STRING_TOKEN (0x0F5D),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x09F8),   value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x158F),     value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        suppressif NOT ideqval PCH_SETUP.PchPcieSnoopLatencyOverrideMode[2] == 1;
          numeric varid = PCH_SETUP.PchPcieSnoopLatencyOverrideValue[2],
            prompt      = STRING_TOKEN(0x0EA6),
            help        = STRING_TOKEN(0x0F5F),
            flags       = RESET_REQUIRED,
            minimum     = 0,
            maximum     = 1023,
            step        = 1,
            default     = 60,
          endnumeric;

          oneof varid   = PCH_SETUP.PchPcieSnoopLatencyOverrideMultiplier[2],
            prompt      = STRING_TOKEN(0x0EA7),
            help        = STRING_TOKEN(0x0F60),
            option text = STRING_TOKEN(0x0E74), value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E75), value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E76), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E77), value = 3, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E78), value = 4, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E79), value = 5, flags = RESET_REQUIRED;
          endoneof;
        endif;

        oneof varid   = PCH_SETUP.PchPcieNonSnoopLatencyOverrideMode[2],
          prompt      = STRING_TOKEN (0x0EA5),
          help        = STRING_TOKEN (0x0F5E),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x09F8),   value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x158F),     value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        suppressif NOT ideqval PCH_SETUP.PchPcieNonSnoopLatencyOverrideMode[2] == 1;
          numeric varid = PCH_SETUP.PchPcieNonSnoopLatencyOverrideValue[2],
            prompt      = STRING_TOKEN(0x0EA8),
            help        = STRING_TOKEN(0x0F61),
            flags       = RESET_REQUIRED,
            minimum     = 0,
            maximum     = 1023,
            step        = 1,
            default     = 60,
          endnumeric;

          oneof varid   = PCH_SETUP.PchPcieNonSnoopLatencyOverrideMultiplier[2],
            prompt      = STRING_TOKEN(0x0EA9),
            help        = STRING_TOKEN(0x0F62),
            option text = STRING_TOKEN(0x0E74), value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E75), value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E76), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E77), value = 3, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E78), value = 4, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E79), value = 5, flags = RESET_REQUIRED;
          endoneof;
        endif;




        oneof varid  = PCH_SETUP.PchPcieForceLtrOverride[2],
          prompt      = STRING_TOKEN(0x0F42),
          help        = STRING_TOKEN(0x0F5C),
          option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
        endoneof;




      endif;

      subtitle text = STRING_TOKEN(0x0002);

      oneof varid   = PCH_SETUP.PchPcieLtrConfigLock[2],
        prompt   = STRING_TOKEN (0x0F65),
        help     = STRING_TOKEN (0x0F7F),
        option text = STRING_TOKEN(0x0004),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortPeerMemoryWriteEnable[2],
        prompt      = STRING_TOKEN(0x0DC6),
        help        = STRING_TOKEN(0x0DE0),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

    endif;
  endform; 
#line 2513 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"



#line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"

































  form formid = 4150,
    title     = STRING_TOKEN(0x1047);

    oneof varid   = PCH_SETUP.PcieRootPortEn[3],
      prompt      = STRING_TOKEN(0x0C67),
      help        = STRING_TOKEN(0x0C80),
      option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    suppressif ideqval PCH_SETUP.PcieRootPortEn[3] == 0x0;
      grayoutif ideqval PCH_SETUP.PcieRootPortHPE[3] == 1;
        oneof varid   = PCH_SETUP.PcieRootPortSI[3],
          prompt      = STRING_TOKEN(0x1112),
          help        = STRING_TOKEN(0x112B),
          option text = STRING_TOKEN(0x112C), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x112D), value = 1, flags = DEFAULT | RESET_REQUIRED;
        endoneof;
      endif;

       
        oneof varid   = PCH_SETUP.PcieRootPortAspm[3],
          questionid  = 5603,
          prompt      = STRING_TOKEN(0x0B70),
          help        = STRING_TOKEN(0x0BA5),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;



#line 64 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"
          option text = STRING_TOKEN(0x0BA7), value = 2, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x158F), value = 4, flags = RESET_REQUIRED;
#line 67 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"
        endoneof;

        oneof varid   = PCH_SETUP.PcieRootPortL1SubStates[3],
          questionid  = 5631,
          prompt      = STRING_TOKEN(0x0BAC),
          help        = STRING_TOKEN(0x0BC5),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0BC6), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0BC7), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
       

      oneof varid   = PCH_SETUP.PcieRootPortL1Low[3],
        prompt      = STRING_TOKEN(0x0BC8),
        help        = STRING_TOKEN(0x0BC9),
        option text = STRING_TOKEN(0x0004), value = 0, flags =  RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortACS[3],
        prompt      = STRING_TOKEN(0x0BCD),
        help        = STRING_TOKEN(0x0BE6),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

       
        oneof varid   = PCH_SETUP.PcieRootPortPTM[3],
          questionid  = 5659,
          prompt      = STRING_TOKEN(0x0BEB),
          help        = STRING_TOKEN(0x0C04),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
       

      oneof varid   = PCH_SETUP.PcieRootPortDPC[3],
        prompt      = STRING_TOKEN(0x0C08),
        help        = STRING_TOKEN(0x0C21),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortEDPC[3],
        prompt      = STRING_TOKEN(0x0C25),
        help        = STRING_TOKEN(0x0C3E),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortURE[3],
        prompt      = STRING_TOKEN(0x0C84),
        help        = STRING_TOKEN(0x0C9D),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortFEE[3],
        prompt      = STRING_TOKEN(0x0CA1),
        help        = STRING_TOKEN(0x0CBA),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortNFE[3],
        prompt      = STRING_TOKEN(0x0CBE),
        help        = STRING_TOKEN(0x0CD7),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortCEE[3],
        prompt      = STRING_TOKEN(0x0CDB),
        help        = STRING_TOKEN(0x0CF4),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSFE[3],
        prompt      = STRING_TOKEN(0x0D15),
        help        = STRING_TOKEN(0x0D2E),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSNE[3],
        prompt      = STRING_TOKEN(0x0D32),
        help        = STRING_TOKEN(0x0D4B),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSCE[3],
        prompt      = STRING_TOKEN(0x0D4F),
        help        = STRING_TOKEN(0x0D68),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortPMCE[3],
        prompt      = STRING_TOKEN(0x0D6C),
        help        = STRING_TOKEN(0x0D85),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      grayoutif ideqval PCH_SETUP.PcieRootPortSI[3] == 0;
        oneof varid   = PCH_SETUP.PcieRootPortHPE[3],
          prompt      = STRING_TOKEN(0x0D89),
          help        = STRING_TOKEN(0x0DA2),
          option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
        endoneof;
      endif;

      oneof varid   = PCH_SETUP.PcieRootPortAER[3],
        prompt      = STRING_TOKEN(0x0DA6),
        help        = STRING_TOKEN(0x0DBF),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSpeed[3],
        prompt   = STRING_TOKEN (0x0C46),
        help     = STRING_TOKEN (0x0C5F),
        option text = STRING_TOKEN (0x0006), value = 0, flags = RESET_REQUIRED | DEFAULT;
        option text = STRING_TOKEN (0x0C60), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x0C61), value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x0C62), value = 3, flags = RESET_REQUIRED;

        option text = STRING_TOKEN (0x0C63), value = 4, flags = RESET_REQUIRED;
#line 199 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortTHS[3],
        prompt      = STRING_TOKEN(0x0DE6),
        help        = STRING_TOKEN(0x0DFF),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      numeric varid = PCH_SETUP.PcieDetectTimeoutMs[3],
        prompt      = STRING_TOKEN (0x0E03),
        help        = STRING_TOKEN (0x0E1C),
        minimum     = 0,
        maximum     = 65535,
        step        = 1,
        default     = 0,
      endnumeric;

      numeric varid = PCH_SETUP.PcieExtraBusRsvd[3],
        prompt      = STRING_TOKEN (0x0E20),
        help        = STRING_TOKEN (0x0E39),
        minimum     = 0,
        maximum     = 7,
        step        = 1,    
        default     = 0,    
      endnumeric;

      numeric varid = PCH_SETUP.PcieMemRsvd[3],
        prompt      = STRING_TOKEN (0x0E3D),
        help        = STRING_TOKEN (0x0E56),
        minimum     = 1,
        maximum     = 20,
        step        = 1,    
        default     = 10,   
      endnumeric;

      numeric varid = PCH_SETUP.PcieIoRsvd[3],
        prompt      = STRING_TOKEN (0x0E5A),
        help        = STRING_TOKEN (0x0E73),
        minimum     = 4,
        maximum     = 20,
        step        = 4,    
        default     = 4,    
      endnumeric;

      subtitle text = STRING_TOKEN(0x0002);

      subtitle text = STRING_TOKEN(0x0E7A);
      oneof varid   = PCH_SETUP.PchPcieLtrEnable[3],
        prompt   = STRING_TOKEN (0x0E7E),
        help     = STRING_TOKEN (0x0E97),
        option text = STRING_TOKEN(0x0004),  value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      suppressif ideqval PCH_SETUP.PchPcieLtrEnable[3] == 0;
        oneof varid   = PCH_SETUP.PchPcieSnoopLatencyOverrideMode[3],
          prompt      = STRING_TOKEN (0x0EAA),
          help        = STRING_TOKEN (0x0F5D),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x09F8),   value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x158F),     value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        suppressif NOT ideqval PCH_SETUP.PchPcieSnoopLatencyOverrideMode[3] == 1;
          numeric varid = PCH_SETUP.PchPcieSnoopLatencyOverrideValue[3],
            prompt      = STRING_TOKEN(0x0EAC),
            help        = STRING_TOKEN(0x0F5F),
            flags       = RESET_REQUIRED,
            minimum     = 0,
            maximum     = 1023,
            step        = 1,
            default     = 60,
          endnumeric;

          oneof varid   = PCH_SETUP.PchPcieSnoopLatencyOverrideMultiplier[3],
            prompt      = STRING_TOKEN(0x0EAD),
            help        = STRING_TOKEN(0x0F60),
            option text = STRING_TOKEN(0x0E74), value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E75), value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E76), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E77), value = 3, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E78), value = 4, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E79), value = 5, flags = RESET_REQUIRED;
          endoneof;
        endif;

        oneof varid   = PCH_SETUP.PchPcieNonSnoopLatencyOverrideMode[3],
          prompt      = STRING_TOKEN (0x0EAB),
          help        = STRING_TOKEN (0x0F5E),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x09F8),   value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x158F),     value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        suppressif NOT ideqval PCH_SETUP.PchPcieNonSnoopLatencyOverrideMode[3] == 1;
          numeric varid = PCH_SETUP.PchPcieNonSnoopLatencyOverrideValue[3],
            prompt      = STRING_TOKEN(0x0EAE),
            help        = STRING_TOKEN(0x0F61),
            flags       = RESET_REQUIRED,
            minimum     = 0,
            maximum     = 1023,
            step        = 1,
            default     = 60,
          endnumeric;

          oneof varid   = PCH_SETUP.PchPcieNonSnoopLatencyOverrideMultiplier[3],
            prompt      = STRING_TOKEN(0x0EAF),
            help        = STRING_TOKEN(0x0F62),
            option text = STRING_TOKEN(0x0E74), value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E75), value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E76), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E77), value = 3, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E78), value = 4, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E79), value = 5, flags = RESET_REQUIRED;
          endoneof;
        endif;




        oneof varid  = PCH_SETUP.PchPcieForceLtrOverride[3],
          prompt      = STRING_TOKEN(0x0F43),
          help        = STRING_TOKEN(0x0F5C),
          option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
        endoneof;




      endif;

      subtitle text = STRING_TOKEN(0x0002);

      oneof varid   = PCH_SETUP.PchPcieLtrConfigLock[3],
        prompt   = STRING_TOKEN (0x0F66),
        help     = STRING_TOKEN (0x0F7F),
        option text = STRING_TOKEN(0x0004),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortPeerMemoryWriteEnable[3],
        prompt      = STRING_TOKEN(0x0DC7),
        help        = STRING_TOKEN(0x0DE0),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

    endif;
  endform; 
#line 2517 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"



#line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"

































  form formid = 4151,
    title     = STRING_TOKEN(0x1048);

    oneof varid   = PCH_SETUP.PcieRootPortEn[4],
      prompt      = STRING_TOKEN(0x0C68),
      help        = STRING_TOKEN(0x0C80),
      option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    suppressif ideqval PCH_SETUP.PcieRootPortEn[4] == 0x0;
      grayoutif ideqval PCH_SETUP.PcieRootPortHPE[4] == 1;
        oneof varid   = PCH_SETUP.PcieRootPortSI[4],
          prompt      = STRING_TOKEN(0x1113),
          help        = STRING_TOKEN(0x112B),
          option text = STRING_TOKEN(0x112C), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x112D), value = 1, flags = DEFAULT | RESET_REQUIRED;
        endoneof;
      endif;

       
        oneof varid   = PCH_SETUP.PcieRootPortAspm[4],
          questionid  = 5604,
          prompt      = STRING_TOKEN(0x0B71),
          help        = STRING_TOKEN(0x0BA5),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;



#line 64 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"
          option text = STRING_TOKEN(0x0BA7), value = 2, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x158F), value = 4, flags = RESET_REQUIRED;
#line 67 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"
        endoneof;

        oneof varid   = PCH_SETUP.PcieRootPortL1SubStates[4],
          questionid  = 5632,
          prompt      = STRING_TOKEN(0x0BAD),
          help        = STRING_TOKEN(0x0BC5),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0BC6), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0BC7), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
       

      oneof varid   = PCH_SETUP.PcieRootPortL1Low[4],
        prompt      = STRING_TOKEN(0x0BC8),
        help        = STRING_TOKEN(0x0BC9),
        option text = STRING_TOKEN(0x0004), value = 0, flags =  RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortACS[4],
        prompt      = STRING_TOKEN(0x0BCE),
        help        = STRING_TOKEN(0x0BE6),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

       
        oneof varid   = PCH_SETUP.PcieRootPortPTM[4],
          questionid  = 5660,
          prompt      = STRING_TOKEN(0x0BEC),
          help        = STRING_TOKEN(0x0C04),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
       

      oneof varid   = PCH_SETUP.PcieRootPortDPC[4],
        prompt      = STRING_TOKEN(0x0C09),
        help        = STRING_TOKEN(0x0C21),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortEDPC[4],
        prompt      = STRING_TOKEN(0x0C26),
        help        = STRING_TOKEN(0x0C3E),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortURE[4],
        prompt      = STRING_TOKEN(0x0C85),
        help        = STRING_TOKEN(0x0C9D),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortFEE[4],
        prompt      = STRING_TOKEN(0x0CA2),
        help        = STRING_TOKEN(0x0CBA),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortNFE[4],
        prompt      = STRING_TOKEN(0x0CBF),
        help        = STRING_TOKEN(0x0CD7),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortCEE[4],
        prompt      = STRING_TOKEN(0x0CDC),
        help        = STRING_TOKEN(0x0CF4),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSFE[4],
        prompt      = STRING_TOKEN(0x0D16),
        help        = STRING_TOKEN(0x0D2E),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSNE[4],
        prompt      = STRING_TOKEN(0x0D33),
        help        = STRING_TOKEN(0x0D4B),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSCE[4],
        prompt      = STRING_TOKEN(0x0D50),
        help        = STRING_TOKEN(0x0D68),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortPMCE[4],
        prompt      = STRING_TOKEN(0x0D6D),
        help        = STRING_TOKEN(0x0D85),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      grayoutif ideqval PCH_SETUP.PcieRootPortSI[4] == 0;
        oneof varid   = PCH_SETUP.PcieRootPortHPE[4],
          prompt      = STRING_TOKEN(0x0D8A),
          help        = STRING_TOKEN(0x0DA2),
          option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
        endoneof;
      endif;

      oneof varid   = PCH_SETUP.PcieRootPortAER[4],
        prompt      = STRING_TOKEN(0x0DA7),
        help        = STRING_TOKEN(0x0DBF),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSpeed[4],
        prompt   = STRING_TOKEN (0x0C47),
        help     = STRING_TOKEN (0x0C5F),
        option text = STRING_TOKEN (0x0006), value = 0, flags = RESET_REQUIRED | DEFAULT;
        option text = STRING_TOKEN (0x0C60), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x0C61), value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x0C62), value = 3, flags = RESET_REQUIRED;

        option text = STRING_TOKEN (0x0C63), value = 4, flags = RESET_REQUIRED;
#line 199 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortTHS[4],
        prompt      = STRING_TOKEN(0x0DE7),
        help        = STRING_TOKEN(0x0DFF),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      numeric varid = PCH_SETUP.PcieDetectTimeoutMs[4],
        prompt      = STRING_TOKEN (0x0E04),
        help        = STRING_TOKEN (0x0E1C),
        minimum     = 0,
        maximum     = 65535,
        step        = 1,
        default     = 0,
      endnumeric;

      numeric varid = PCH_SETUP.PcieExtraBusRsvd[4],
        prompt      = STRING_TOKEN (0x0E21),
        help        = STRING_TOKEN (0x0E39),
        minimum     = 0,
        maximum     = 7,
        step        = 1,    
        default     = 0,    
      endnumeric;

      numeric varid = PCH_SETUP.PcieMemRsvd[4],
        prompt      = STRING_TOKEN (0x0E3E),
        help        = STRING_TOKEN (0x0E56),
        minimum     = 1,
        maximum     = 20,
        step        = 1,    
        default     = 10,   
      endnumeric;

      numeric varid = PCH_SETUP.PcieIoRsvd[4],
        prompt      = STRING_TOKEN (0x0E5B),
        help        = STRING_TOKEN (0x0E73),
        minimum     = 4,
        maximum     = 20,
        step        = 4,    
        default     = 4,    
      endnumeric;

      subtitle text = STRING_TOKEN(0x0002);

      subtitle text = STRING_TOKEN(0x0E7A);
      oneof varid   = PCH_SETUP.PchPcieLtrEnable[4],
        prompt   = STRING_TOKEN (0x0E7F),
        help     = STRING_TOKEN (0x0E97),
        option text = STRING_TOKEN(0x0004),  value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      suppressif ideqval PCH_SETUP.PchPcieLtrEnable[4] == 0;
        oneof varid   = PCH_SETUP.PchPcieSnoopLatencyOverrideMode[4],
          prompt      = STRING_TOKEN (0x0EB0),
          help        = STRING_TOKEN (0x0F5D),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x09F8),   value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x158F),     value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        suppressif NOT ideqval PCH_SETUP.PchPcieSnoopLatencyOverrideMode[4] == 1;
          numeric varid = PCH_SETUP.PchPcieSnoopLatencyOverrideValue[4],
            prompt      = STRING_TOKEN(0x0EB2),
            help        = STRING_TOKEN(0x0F5F),
            flags       = RESET_REQUIRED,
            minimum     = 0,
            maximum     = 1023,
            step        = 1,
            default     = 60,
          endnumeric;

          oneof varid   = PCH_SETUP.PchPcieSnoopLatencyOverrideMultiplier[4],
            prompt      = STRING_TOKEN(0x0EB3),
            help        = STRING_TOKEN(0x0F60),
            option text = STRING_TOKEN(0x0E74), value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E75), value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E76), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E77), value = 3, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E78), value = 4, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E79), value = 5, flags = RESET_REQUIRED;
          endoneof;
        endif;

        oneof varid   = PCH_SETUP.PchPcieNonSnoopLatencyOverrideMode[4],
          prompt      = STRING_TOKEN (0x0EB1),
          help        = STRING_TOKEN (0x0F5E),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x09F8),   value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x158F),     value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        suppressif NOT ideqval PCH_SETUP.PchPcieNonSnoopLatencyOverrideMode[4] == 1;
          numeric varid = PCH_SETUP.PchPcieNonSnoopLatencyOverrideValue[4],
            prompt      = STRING_TOKEN(0x0EB4),
            help        = STRING_TOKEN(0x0F61),
            flags       = RESET_REQUIRED,
            minimum     = 0,
            maximum     = 1023,
            step        = 1,
            default     = 60,
          endnumeric;

          oneof varid   = PCH_SETUP.PchPcieNonSnoopLatencyOverrideMultiplier[4],
            prompt      = STRING_TOKEN(0x0EB5),
            help        = STRING_TOKEN(0x0F62),
            option text = STRING_TOKEN(0x0E74), value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E75), value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E76), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E77), value = 3, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E78), value = 4, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E79), value = 5, flags = RESET_REQUIRED;
          endoneof;
        endif;




        oneof varid  = PCH_SETUP.PchPcieForceLtrOverride[4],
          prompt      = STRING_TOKEN(0x0F44),
          help        = STRING_TOKEN(0x0F5C),
          option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
        endoneof;




      endif;

      subtitle text = STRING_TOKEN(0x0002);

      oneof varid   = PCH_SETUP.PchPcieLtrConfigLock[4],
        prompt   = STRING_TOKEN (0x0F67),
        help     = STRING_TOKEN (0x0F7F),
        option text = STRING_TOKEN(0x0004),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortPeerMemoryWriteEnable[4],
        prompt      = STRING_TOKEN(0x0DC8),
        help        = STRING_TOKEN(0x0DE0),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

    endif;
  endform; 
#line 2521 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"



#line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"

































  form formid = 4152,
    title     = STRING_TOKEN(0x1049);

    oneof varid   = PCH_SETUP.PcieRootPortEn[5],
      prompt      = STRING_TOKEN(0x0C69),
      help        = STRING_TOKEN(0x0C80),
      option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    suppressif ideqval PCH_SETUP.PcieRootPortEn[5] == 0x0;
      grayoutif ideqval PCH_SETUP.PcieRootPortHPE[5] == 1;
        oneof varid   = PCH_SETUP.PcieRootPortSI[5],
          prompt      = STRING_TOKEN(0x1114),
          help        = STRING_TOKEN(0x112B),
          option text = STRING_TOKEN(0x112C), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x112D), value = 1, flags = DEFAULT | RESET_REQUIRED;
        endoneof;
      endif;

       
        oneof varid   = PCH_SETUP.PcieRootPortAspm[5],
          questionid  = 5605,
          prompt      = STRING_TOKEN(0x0B72),
          help        = STRING_TOKEN(0x0BA5),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;



#line 64 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"
          option text = STRING_TOKEN(0x0BA7), value = 2, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x158F), value = 4, flags = RESET_REQUIRED;
#line 67 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"
        endoneof;

        oneof varid   = PCH_SETUP.PcieRootPortL1SubStates[5],
          questionid  = 5633,
          prompt      = STRING_TOKEN(0x0BAE),
          help        = STRING_TOKEN(0x0BC5),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0BC6), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0BC7), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
       

      oneof varid   = PCH_SETUP.PcieRootPortL1Low[5],
        prompt      = STRING_TOKEN(0x0BC8),
        help        = STRING_TOKEN(0x0BC9),
        option text = STRING_TOKEN(0x0004), value = 0, flags =  RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortACS[5],
        prompt      = STRING_TOKEN(0x0BCF),
        help        = STRING_TOKEN(0x0BE6),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

       
        oneof varid   = PCH_SETUP.PcieRootPortPTM[5],
          questionid  = 5661,
          prompt      = STRING_TOKEN(0x0BED),
          help        = STRING_TOKEN(0x0C04),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
       

      oneof varid   = PCH_SETUP.PcieRootPortDPC[5],
        prompt      = STRING_TOKEN(0x0C0A),
        help        = STRING_TOKEN(0x0C21),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortEDPC[5],
        prompt      = STRING_TOKEN(0x0C27),
        help        = STRING_TOKEN(0x0C3E),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortURE[5],
        prompt      = STRING_TOKEN(0x0C86),
        help        = STRING_TOKEN(0x0C9D),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortFEE[5],
        prompt      = STRING_TOKEN(0x0CA3),
        help        = STRING_TOKEN(0x0CBA),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortNFE[5],
        prompt      = STRING_TOKEN(0x0CC0),
        help        = STRING_TOKEN(0x0CD7),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortCEE[5],
        prompt      = STRING_TOKEN(0x0CDD),
        help        = STRING_TOKEN(0x0CF4),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSFE[5],
        prompt      = STRING_TOKEN(0x0D17),
        help        = STRING_TOKEN(0x0D2E),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSNE[5],
        prompt      = STRING_TOKEN(0x0D34),
        help        = STRING_TOKEN(0x0D4B),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSCE[5],
        prompt      = STRING_TOKEN(0x0D51),
        help        = STRING_TOKEN(0x0D68),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortPMCE[5],
        prompt      = STRING_TOKEN(0x0D6E),
        help        = STRING_TOKEN(0x0D85),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      grayoutif ideqval PCH_SETUP.PcieRootPortSI[5] == 0;
        oneof varid   = PCH_SETUP.PcieRootPortHPE[5],
          prompt      = STRING_TOKEN(0x0D8B),
          help        = STRING_TOKEN(0x0DA2),
          option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
        endoneof;
      endif;

      oneof varid   = PCH_SETUP.PcieRootPortAER[5],
        prompt      = STRING_TOKEN(0x0DA8),
        help        = STRING_TOKEN(0x0DBF),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSpeed[5],
        prompt   = STRING_TOKEN (0x0C48),
        help     = STRING_TOKEN (0x0C5F),
        option text = STRING_TOKEN (0x0006), value = 0, flags = RESET_REQUIRED | DEFAULT;
        option text = STRING_TOKEN (0x0C60), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x0C61), value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x0C62), value = 3, flags = RESET_REQUIRED;

        option text = STRING_TOKEN (0x0C63), value = 4, flags = RESET_REQUIRED;
#line 199 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortTHS[5],
        prompt      = STRING_TOKEN(0x0DE8),
        help        = STRING_TOKEN(0x0DFF),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      numeric varid = PCH_SETUP.PcieDetectTimeoutMs[5],
        prompt      = STRING_TOKEN (0x0E05),
        help        = STRING_TOKEN (0x0E1C),
        minimum     = 0,
        maximum     = 65535,
        step        = 1,
        default     = 0,
      endnumeric;

      numeric varid = PCH_SETUP.PcieExtraBusRsvd[5],
        prompt      = STRING_TOKEN (0x0E22),
        help        = STRING_TOKEN (0x0E39),
        minimum     = 0,
        maximum     = 7,
        step        = 1,    
        default     = 0,    
      endnumeric;

      numeric varid = PCH_SETUP.PcieMemRsvd[5],
        prompt      = STRING_TOKEN (0x0E3F),
        help        = STRING_TOKEN (0x0E56),
        minimum     = 1,
        maximum     = 20,
        step        = 1,    
        default     = 10,   
      endnumeric;

      numeric varid = PCH_SETUP.PcieIoRsvd[5],
        prompt      = STRING_TOKEN (0x0E5C),
        help        = STRING_TOKEN (0x0E73),
        minimum     = 4,
        maximum     = 20,
        step        = 4,    
        default     = 4,    
      endnumeric;

      subtitle text = STRING_TOKEN(0x0002);

      subtitle text = STRING_TOKEN(0x0E7A);
      oneof varid   = PCH_SETUP.PchPcieLtrEnable[5],
        prompt   = STRING_TOKEN (0x0E80),
        help     = STRING_TOKEN (0x0E97),
        option text = STRING_TOKEN(0x0004),  value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      suppressif ideqval PCH_SETUP.PchPcieLtrEnable[5] == 0;
        oneof varid   = PCH_SETUP.PchPcieSnoopLatencyOverrideMode[5],
          prompt      = STRING_TOKEN (0x0EB6),
          help        = STRING_TOKEN (0x0F5D),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x09F8),   value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x158F),     value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        suppressif NOT ideqval PCH_SETUP.PchPcieSnoopLatencyOverrideMode[5] == 1;
          numeric varid = PCH_SETUP.PchPcieSnoopLatencyOverrideValue[5],
            prompt      = STRING_TOKEN(0x0EB8),
            help        = STRING_TOKEN(0x0F5F),
            flags       = RESET_REQUIRED,
            minimum     = 0,
            maximum     = 1023,
            step        = 1,
            default     = 60,
          endnumeric;

          oneof varid   = PCH_SETUP.PchPcieSnoopLatencyOverrideMultiplier[5],
            prompt      = STRING_TOKEN(0x0EB9),
            help        = STRING_TOKEN(0x0F60),
            option text = STRING_TOKEN(0x0E74), value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E75), value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E76), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E77), value = 3, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E78), value = 4, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E79), value = 5, flags = RESET_REQUIRED;
          endoneof;
        endif;

        oneof varid   = PCH_SETUP.PchPcieNonSnoopLatencyOverrideMode[5],
          prompt      = STRING_TOKEN (0x0EB7),
          help        = STRING_TOKEN (0x0F5E),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x09F8),   value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x158F),     value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        suppressif NOT ideqval PCH_SETUP.PchPcieNonSnoopLatencyOverrideMode[5] == 1;
          numeric varid = PCH_SETUP.PchPcieNonSnoopLatencyOverrideValue[5],
            prompt      = STRING_TOKEN(0x0EBA),
            help        = STRING_TOKEN(0x0F61),
            flags       = RESET_REQUIRED,
            minimum     = 0,
            maximum     = 1023,
            step        = 1,
            default     = 60,
          endnumeric;

          oneof varid   = PCH_SETUP.PchPcieNonSnoopLatencyOverrideMultiplier[5],
            prompt      = STRING_TOKEN(0x0EBB),
            help        = STRING_TOKEN(0x0F62),
            option text = STRING_TOKEN(0x0E74), value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E75), value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E76), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E77), value = 3, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E78), value = 4, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E79), value = 5, flags = RESET_REQUIRED;
          endoneof;
        endif;




        oneof varid  = PCH_SETUP.PchPcieForceLtrOverride[5],
          prompt      = STRING_TOKEN(0x0F45),
          help        = STRING_TOKEN(0x0F5C),
          option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
        endoneof;




      endif;

      subtitle text = STRING_TOKEN(0x0002);

      oneof varid   = PCH_SETUP.PchPcieLtrConfigLock[5],
        prompt   = STRING_TOKEN (0x0F68),
        help     = STRING_TOKEN (0x0F7F),
        option text = STRING_TOKEN(0x0004),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortPeerMemoryWriteEnable[5],
        prompt      = STRING_TOKEN(0x0DC9),
        help        = STRING_TOKEN(0x0DE0),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

    endif;
  endform; 
#line 2525 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"



#line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"

































  form formid = 4153,
    title     = STRING_TOKEN(0x104A);

    oneof varid   = PCH_SETUP.PcieRootPortEn[6],
      prompt      = STRING_TOKEN(0x0C6A),
      help        = STRING_TOKEN(0x0C80),
      option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    suppressif ideqval PCH_SETUP.PcieRootPortEn[6] == 0x0;
      grayoutif ideqval PCH_SETUP.PcieRootPortHPE[6] == 1;
        oneof varid   = PCH_SETUP.PcieRootPortSI[6],
          prompt      = STRING_TOKEN(0x1115),
          help        = STRING_TOKEN(0x112B),
          option text = STRING_TOKEN(0x112C), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x112D), value = 1, flags = DEFAULT | RESET_REQUIRED;
        endoneof;
      endif;

       
        oneof varid   = PCH_SETUP.PcieRootPortAspm[6],
          questionid  = 5606,
          prompt      = STRING_TOKEN(0x0B73),
          help        = STRING_TOKEN(0x0BA5),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;



#line 64 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"
          option text = STRING_TOKEN(0x0BA7), value = 2, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x158F), value = 4, flags = RESET_REQUIRED;
#line 67 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"
        endoneof;

        oneof varid   = PCH_SETUP.PcieRootPortL1SubStates[6],
          questionid  = 5634,
          prompt      = STRING_TOKEN(0x0BAF),
          help        = STRING_TOKEN(0x0BC5),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0BC6), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0BC7), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
       

      oneof varid   = PCH_SETUP.PcieRootPortL1Low[6],
        prompt      = STRING_TOKEN(0x0BC8),
        help        = STRING_TOKEN(0x0BC9),
        option text = STRING_TOKEN(0x0004), value = 0, flags =  RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortACS[6],
        prompt      = STRING_TOKEN(0x0BD0),
        help        = STRING_TOKEN(0x0BE6),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

       
        oneof varid   = PCH_SETUP.PcieRootPortPTM[6],
          questionid  = 5662,
          prompt      = STRING_TOKEN(0x0BEE),
          help        = STRING_TOKEN(0x0C04),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
       

      oneof varid   = PCH_SETUP.PcieRootPortDPC[6],
        prompt      = STRING_TOKEN(0x0C0B),
        help        = STRING_TOKEN(0x0C21),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortEDPC[6],
        prompt      = STRING_TOKEN(0x0C28),
        help        = STRING_TOKEN(0x0C3E),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortURE[6],
        prompt      = STRING_TOKEN(0x0C87),
        help        = STRING_TOKEN(0x0C9D),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortFEE[6],
        prompt      = STRING_TOKEN(0x0CA4),
        help        = STRING_TOKEN(0x0CBA),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortNFE[6],
        prompt      = STRING_TOKEN(0x0CC1),
        help        = STRING_TOKEN(0x0CD7),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortCEE[6],
        prompt      = STRING_TOKEN(0x0CDE),
        help        = STRING_TOKEN(0x0CF4),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSFE[6],
        prompt      = STRING_TOKEN(0x0D18),
        help        = STRING_TOKEN(0x0D2E),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSNE[6],
        prompt      = STRING_TOKEN(0x0D35),
        help        = STRING_TOKEN(0x0D4B),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSCE[6],
        prompt      = STRING_TOKEN(0x0D52),
        help        = STRING_TOKEN(0x0D68),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortPMCE[6],
        prompt      = STRING_TOKEN(0x0D6F),
        help        = STRING_TOKEN(0x0D85),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      grayoutif ideqval PCH_SETUP.PcieRootPortSI[6] == 0;
        oneof varid   = PCH_SETUP.PcieRootPortHPE[6],
          prompt      = STRING_TOKEN(0x0D8C),
          help        = STRING_TOKEN(0x0DA2),
          option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
        endoneof;
      endif;

      oneof varid   = PCH_SETUP.PcieRootPortAER[6],
        prompt      = STRING_TOKEN(0x0DA9),
        help        = STRING_TOKEN(0x0DBF),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSpeed[6],
        prompt   = STRING_TOKEN (0x0C49),
        help     = STRING_TOKEN (0x0C5F),
        option text = STRING_TOKEN (0x0006), value = 0, flags = RESET_REQUIRED | DEFAULT;
        option text = STRING_TOKEN (0x0C60), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x0C61), value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x0C62), value = 3, flags = RESET_REQUIRED;

        option text = STRING_TOKEN (0x0C63), value = 4, flags = RESET_REQUIRED;
#line 199 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortTHS[6],
        prompt      = STRING_TOKEN(0x0DE9),
        help        = STRING_TOKEN(0x0DFF),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      numeric varid = PCH_SETUP.PcieDetectTimeoutMs[6],
        prompt      = STRING_TOKEN (0x0E06),
        help        = STRING_TOKEN (0x0E1C),
        minimum     = 0,
        maximum     = 65535,
        step        = 1,
        default     = 0,
      endnumeric;

      numeric varid = PCH_SETUP.PcieExtraBusRsvd[6],
        prompt      = STRING_TOKEN (0x0E23),
        help        = STRING_TOKEN (0x0E39),
        minimum     = 0,
        maximum     = 7,
        step        = 1,    
        default     = 0,    
      endnumeric;

      numeric varid = PCH_SETUP.PcieMemRsvd[6],
        prompt      = STRING_TOKEN (0x0E40),
        help        = STRING_TOKEN (0x0E56),
        minimum     = 1,
        maximum     = 20,
        step        = 1,    
        default     = 10,   
      endnumeric;

      numeric varid = PCH_SETUP.PcieIoRsvd[6],
        prompt      = STRING_TOKEN (0x0E5D),
        help        = STRING_TOKEN (0x0E73),
        minimum     = 4,
        maximum     = 20,
        step        = 4,    
        default     = 4,    
      endnumeric;

      subtitle text = STRING_TOKEN(0x0002);

      subtitle text = STRING_TOKEN(0x0E7A);
      oneof varid   = PCH_SETUP.PchPcieLtrEnable[6],
        prompt   = STRING_TOKEN (0x0E81),
        help     = STRING_TOKEN (0x0E97),
        option text = STRING_TOKEN(0x0004),  value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      suppressif ideqval PCH_SETUP.PchPcieLtrEnable[6] == 0;
        oneof varid   = PCH_SETUP.PchPcieSnoopLatencyOverrideMode[6],
          prompt      = STRING_TOKEN (0x0EBC),
          help        = STRING_TOKEN (0x0F5D),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x09F8),   value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x158F),     value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        suppressif NOT ideqval PCH_SETUP.PchPcieSnoopLatencyOverrideMode[6] == 1;
          numeric varid = PCH_SETUP.PchPcieSnoopLatencyOverrideValue[6],
            prompt      = STRING_TOKEN(0x0EBE),
            help        = STRING_TOKEN(0x0F5F),
            flags       = RESET_REQUIRED,
            minimum     = 0,
            maximum     = 1023,
            step        = 1,
            default     = 60,
          endnumeric;

          oneof varid   = PCH_SETUP.PchPcieSnoopLatencyOverrideMultiplier[6],
            prompt      = STRING_TOKEN(0x0EBF),
            help        = STRING_TOKEN(0x0F60),
            option text = STRING_TOKEN(0x0E74), value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E75), value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E76), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E77), value = 3, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E78), value = 4, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E79), value = 5, flags = RESET_REQUIRED;
          endoneof;
        endif;

        oneof varid   = PCH_SETUP.PchPcieNonSnoopLatencyOverrideMode[6],
          prompt      = STRING_TOKEN (0x0EBD),
          help        = STRING_TOKEN (0x0F5E),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x09F8),   value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x158F),     value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        suppressif NOT ideqval PCH_SETUP.PchPcieNonSnoopLatencyOverrideMode[6] == 1;
          numeric varid = PCH_SETUP.PchPcieNonSnoopLatencyOverrideValue[6],
            prompt      = STRING_TOKEN(0x0EC0),
            help        = STRING_TOKEN(0x0F61),
            flags       = RESET_REQUIRED,
            minimum     = 0,
            maximum     = 1023,
            step        = 1,
            default     = 60,
          endnumeric;

          oneof varid   = PCH_SETUP.PchPcieNonSnoopLatencyOverrideMultiplier[6],
            prompt      = STRING_TOKEN(0x0EC1),
            help        = STRING_TOKEN(0x0F62),
            option text = STRING_TOKEN(0x0E74), value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E75), value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E76), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E77), value = 3, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E78), value = 4, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E79), value = 5, flags = RESET_REQUIRED;
          endoneof;
        endif;




        oneof varid  = PCH_SETUP.PchPcieForceLtrOverride[6],
          prompt      = STRING_TOKEN(0x0F46),
          help        = STRING_TOKEN(0x0F5C),
          option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
        endoneof;




      endif;

      subtitle text = STRING_TOKEN(0x0002);

      oneof varid   = PCH_SETUP.PchPcieLtrConfigLock[6],
        prompt   = STRING_TOKEN (0x0F69),
        help     = STRING_TOKEN (0x0F7F),
        option text = STRING_TOKEN(0x0004),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortPeerMemoryWriteEnable[6],
        prompt      = STRING_TOKEN(0x0DCA),
        help        = STRING_TOKEN(0x0DE0),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

    endif;
  endform; 
#line 2529 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"



#line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"

































  form formid = 4154,
    title     = STRING_TOKEN(0x104B);

    oneof varid   = PCH_SETUP.PcieRootPortEn[7],
      prompt      = STRING_TOKEN(0x0C6B),
      help        = STRING_TOKEN(0x0C80),
      option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    suppressif ideqval PCH_SETUP.PcieRootPortEn[7] == 0x0;
      grayoutif ideqval PCH_SETUP.PcieRootPortHPE[7] == 1;
        oneof varid   = PCH_SETUP.PcieRootPortSI[7],
          prompt      = STRING_TOKEN(0x1116),
          help        = STRING_TOKEN(0x112B),
          option text = STRING_TOKEN(0x112C), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x112D), value = 1, flags = DEFAULT | RESET_REQUIRED;
        endoneof;
      endif;

       
        oneof varid   = PCH_SETUP.PcieRootPortAspm[7],
          questionid  = 5607,
          prompt      = STRING_TOKEN(0x0B74),
          help        = STRING_TOKEN(0x0BA5),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;



#line 64 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"
          option text = STRING_TOKEN(0x0BA7), value = 2, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x158F), value = 4, flags = RESET_REQUIRED;
#line 67 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"
        endoneof;

        oneof varid   = PCH_SETUP.PcieRootPortL1SubStates[7],
          questionid  = 5635,
          prompt      = STRING_TOKEN(0x0BB0),
          help        = STRING_TOKEN(0x0BC5),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0BC6), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0BC7), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
       

      oneof varid   = PCH_SETUP.PcieRootPortL1Low[7],
        prompt      = STRING_TOKEN(0x0BC8),
        help        = STRING_TOKEN(0x0BC9),
        option text = STRING_TOKEN(0x0004), value = 0, flags =  RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortACS[7],
        prompt      = STRING_TOKEN(0x0BD1),
        help        = STRING_TOKEN(0x0BE6),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

       
        oneof varid   = PCH_SETUP.PcieRootPortPTM[7],
          questionid  = 5663,
          prompt      = STRING_TOKEN(0x0BEF),
          help        = STRING_TOKEN(0x0C04),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
       

      oneof varid   = PCH_SETUP.PcieRootPortDPC[7],
        prompt      = STRING_TOKEN(0x0C0C),
        help        = STRING_TOKEN(0x0C21),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortEDPC[7],
        prompt      = STRING_TOKEN(0x0C29),
        help        = STRING_TOKEN(0x0C3E),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortURE[7],
        prompt      = STRING_TOKEN(0x0C88),
        help        = STRING_TOKEN(0x0C9D),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortFEE[7],
        prompt      = STRING_TOKEN(0x0CA5),
        help        = STRING_TOKEN(0x0CBA),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortNFE[7],
        prompt      = STRING_TOKEN(0x0CC2),
        help        = STRING_TOKEN(0x0CD7),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortCEE[7],
        prompt      = STRING_TOKEN(0x0CDF),
        help        = STRING_TOKEN(0x0CF4),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSFE[7],
        prompt      = STRING_TOKEN(0x0D19),
        help        = STRING_TOKEN(0x0D2E),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSNE[7],
        prompt      = STRING_TOKEN(0x0D36),
        help        = STRING_TOKEN(0x0D4B),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSCE[7],
        prompt      = STRING_TOKEN(0x0D53),
        help        = STRING_TOKEN(0x0D68),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortPMCE[7],
        prompt      = STRING_TOKEN(0x0D70),
        help        = STRING_TOKEN(0x0D85),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      grayoutif ideqval PCH_SETUP.PcieRootPortSI[7] == 0;
        oneof varid   = PCH_SETUP.PcieRootPortHPE[7],
          prompt      = STRING_TOKEN(0x0D8D),
          help        = STRING_TOKEN(0x0DA2),
          option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
        endoneof;
      endif;

      oneof varid   = PCH_SETUP.PcieRootPortAER[7],
        prompt      = STRING_TOKEN(0x0DAA),
        help        = STRING_TOKEN(0x0DBF),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSpeed[7],
        prompt   = STRING_TOKEN (0x0C4A),
        help     = STRING_TOKEN (0x0C5F),
        option text = STRING_TOKEN (0x0006), value = 0, flags = RESET_REQUIRED | DEFAULT;
        option text = STRING_TOKEN (0x0C60), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x0C61), value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x0C62), value = 3, flags = RESET_REQUIRED;

        option text = STRING_TOKEN (0x0C63), value = 4, flags = RESET_REQUIRED;
#line 199 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortTHS[7],
        prompt      = STRING_TOKEN(0x0DEA),
        help        = STRING_TOKEN(0x0DFF),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      numeric varid = PCH_SETUP.PcieDetectTimeoutMs[7],
        prompt      = STRING_TOKEN (0x0E07),
        help        = STRING_TOKEN (0x0E1C),
        minimum     = 0,
        maximum     = 65535,
        step        = 1,
        default     = 0,
      endnumeric;

      numeric varid = PCH_SETUP.PcieExtraBusRsvd[7],
        prompt      = STRING_TOKEN (0x0E24),
        help        = STRING_TOKEN (0x0E39),
        minimum     = 0,
        maximum     = 7,
        step        = 1,    
        default     = 0,    
      endnumeric;

      numeric varid = PCH_SETUP.PcieMemRsvd[7],
        prompt      = STRING_TOKEN (0x0E41),
        help        = STRING_TOKEN (0x0E56),
        minimum     = 1,
        maximum     = 20,
        step        = 1,    
        default     = 10,   
      endnumeric;

      numeric varid = PCH_SETUP.PcieIoRsvd[7],
        prompt      = STRING_TOKEN (0x0E5E),
        help        = STRING_TOKEN (0x0E73),
        minimum     = 4,
        maximum     = 20,
        step        = 4,    
        default     = 4,    
      endnumeric;

      subtitle text = STRING_TOKEN(0x0002);

      subtitle text = STRING_TOKEN(0x0E7A);
      oneof varid   = PCH_SETUP.PchPcieLtrEnable[7],
        prompt   = STRING_TOKEN (0x0E82),
        help     = STRING_TOKEN (0x0E97),
        option text = STRING_TOKEN(0x0004),  value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      suppressif ideqval PCH_SETUP.PchPcieLtrEnable[7] == 0;
        oneof varid   = PCH_SETUP.PchPcieSnoopLatencyOverrideMode[7],
          prompt      = STRING_TOKEN (0x0EC2),
          help        = STRING_TOKEN (0x0F5D),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x09F8),   value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x158F),     value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        suppressif NOT ideqval PCH_SETUP.PchPcieSnoopLatencyOverrideMode[7] == 1;
          numeric varid = PCH_SETUP.PchPcieSnoopLatencyOverrideValue[7],
            prompt      = STRING_TOKEN(0x0EC4),
            help        = STRING_TOKEN(0x0F5F),
            flags       = RESET_REQUIRED,
            minimum     = 0,
            maximum     = 1023,
            step        = 1,
            default     = 60,
          endnumeric;

          oneof varid   = PCH_SETUP.PchPcieSnoopLatencyOverrideMultiplier[7],
            prompt      = STRING_TOKEN(0x0EC5),
            help        = STRING_TOKEN(0x0F60),
            option text = STRING_TOKEN(0x0E74), value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E75), value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E76), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E77), value = 3, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E78), value = 4, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E79), value = 5, flags = RESET_REQUIRED;
          endoneof;
        endif;

        oneof varid   = PCH_SETUP.PchPcieNonSnoopLatencyOverrideMode[7],
          prompt      = STRING_TOKEN (0x0EC3),
          help        = STRING_TOKEN (0x0F5E),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x09F8),   value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x158F),     value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        suppressif NOT ideqval PCH_SETUP.PchPcieNonSnoopLatencyOverrideMode[7] == 1;
          numeric varid = PCH_SETUP.PchPcieNonSnoopLatencyOverrideValue[7],
            prompt      = STRING_TOKEN(0x0EC6),
            help        = STRING_TOKEN(0x0F61),
            flags       = RESET_REQUIRED,
            minimum     = 0,
            maximum     = 1023,
            step        = 1,
            default     = 60,
          endnumeric;

          oneof varid   = PCH_SETUP.PchPcieNonSnoopLatencyOverrideMultiplier[7],
            prompt      = STRING_TOKEN(0x0EC7),
            help        = STRING_TOKEN(0x0F62),
            option text = STRING_TOKEN(0x0E74), value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E75), value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E76), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E77), value = 3, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E78), value = 4, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E79), value = 5, flags = RESET_REQUIRED;
          endoneof;
        endif;




        oneof varid  = PCH_SETUP.PchPcieForceLtrOverride[7],
          prompt      = STRING_TOKEN(0x0F47),
          help        = STRING_TOKEN(0x0F5C),
          option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
        endoneof;




      endif;

      subtitle text = STRING_TOKEN(0x0002);

      oneof varid   = PCH_SETUP.PchPcieLtrConfigLock[7],
        prompt   = STRING_TOKEN (0x0F6A),
        help     = STRING_TOKEN (0x0F7F),
        option text = STRING_TOKEN(0x0004),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortPeerMemoryWriteEnable[7],
        prompt      = STRING_TOKEN(0x0DCB),
        help        = STRING_TOKEN(0x0DE0),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

    endif;
  endform; 
#line 2533 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"



#line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"

































  form formid = 4155,
    title     = STRING_TOKEN(0x104C);

    oneof varid   = PCH_SETUP.PcieRootPortEn[8],
      prompt      = STRING_TOKEN(0x0C6C),
      help        = STRING_TOKEN(0x0C80),
      option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    suppressif ideqval PCH_SETUP.PcieRootPortEn[8] == 0x0;
      grayoutif ideqval PCH_SETUP.PcieRootPortHPE[8] == 1;
        oneof varid   = PCH_SETUP.PcieRootPortSI[8],
          prompt      = STRING_TOKEN(0x1117),
          help        = STRING_TOKEN(0x112B),
          option text = STRING_TOKEN(0x112C), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x112D), value = 1, flags = DEFAULT | RESET_REQUIRED;
        endoneof;
      endif;

       
        oneof varid   = PCH_SETUP.PcieRootPortAspm[8],
          questionid  = 5608,
          prompt      = STRING_TOKEN(0x0B75),
          help        = STRING_TOKEN(0x0BA5),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;



#line 64 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"
          option text = STRING_TOKEN(0x0BA7), value = 2, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x158F), value = 4, flags = RESET_REQUIRED;
#line 67 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"
        endoneof;

        oneof varid   = PCH_SETUP.PcieRootPortL1SubStates[8],
          questionid  = 5636,
          prompt      = STRING_TOKEN(0x0BB1),
          help        = STRING_TOKEN(0x0BC5),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0BC6), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0BC7), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
       

      oneof varid   = PCH_SETUP.PcieRootPortL1Low[8],
        prompt      = STRING_TOKEN(0x0BC8),
        help        = STRING_TOKEN(0x0BC9),
        option text = STRING_TOKEN(0x0004), value = 0, flags =  RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortACS[8],
        prompt      = STRING_TOKEN(0x0BD2),
        help        = STRING_TOKEN(0x0BE6),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

       
        oneof varid   = PCH_SETUP.PcieRootPortPTM[8],
          questionid  = 5664,
          prompt      = STRING_TOKEN(0x0BF0),
          help        = STRING_TOKEN(0x0C04),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
       

      oneof varid   = PCH_SETUP.PcieRootPortDPC[8],
        prompt      = STRING_TOKEN(0x0C0D),
        help        = STRING_TOKEN(0x0C21),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortEDPC[8],
        prompt      = STRING_TOKEN(0x0C2A),
        help        = STRING_TOKEN(0x0C3E),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortURE[8],
        prompt      = STRING_TOKEN(0x0C89),
        help        = STRING_TOKEN(0x0C9D),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortFEE[8],
        prompt      = STRING_TOKEN(0x0CA6),
        help        = STRING_TOKEN(0x0CBA),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortNFE[8],
        prompt      = STRING_TOKEN(0x0CC3),
        help        = STRING_TOKEN(0x0CD7),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortCEE[8],
        prompt      = STRING_TOKEN(0x0CE0),
        help        = STRING_TOKEN(0x0CF4),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSFE[8],
        prompt      = STRING_TOKEN(0x0D1A),
        help        = STRING_TOKEN(0x0D2E),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSNE[8],
        prompt      = STRING_TOKEN(0x0D37),
        help        = STRING_TOKEN(0x0D4B),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSCE[8],
        prompt      = STRING_TOKEN(0x0D54),
        help        = STRING_TOKEN(0x0D68),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortPMCE[8],
        prompt      = STRING_TOKEN(0x0D71),
        help        = STRING_TOKEN(0x0D85),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      grayoutif ideqval PCH_SETUP.PcieRootPortSI[8] == 0;
        oneof varid   = PCH_SETUP.PcieRootPortHPE[8],
          prompt      = STRING_TOKEN(0x0D8E),
          help        = STRING_TOKEN(0x0DA2),
          option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
        endoneof;
      endif;

      oneof varid   = PCH_SETUP.PcieRootPortAER[8],
        prompt      = STRING_TOKEN(0x0DAB),
        help        = STRING_TOKEN(0x0DBF),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSpeed[8],
        prompt   = STRING_TOKEN (0x0C4B),
        help     = STRING_TOKEN (0x0C5F),
        option text = STRING_TOKEN (0x0006), value = 0, flags = RESET_REQUIRED | DEFAULT;
        option text = STRING_TOKEN (0x0C60), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x0C61), value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x0C62), value = 3, flags = RESET_REQUIRED;

        option text = STRING_TOKEN (0x0C63), value = 4, flags = RESET_REQUIRED;
#line 199 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortTHS[8],
        prompt      = STRING_TOKEN(0x0DEB),
        help        = STRING_TOKEN(0x0DFF),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      numeric varid = PCH_SETUP.PcieDetectTimeoutMs[8],
        prompt      = STRING_TOKEN (0x0E08),
        help        = STRING_TOKEN (0x0E1C),
        minimum     = 0,
        maximum     = 65535,
        step        = 1,
        default     = 0,
      endnumeric;

      numeric varid = PCH_SETUP.PcieExtraBusRsvd[8],
        prompt      = STRING_TOKEN (0x0E25),
        help        = STRING_TOKEN (0x0E39),
        minimum     = 0,
        maximum     = 7,
        step        = 1,    
        default     = 0,    
      endnumeric;

      numeric varid = PCH_SETUP.PcieMemRsvd[8],
        prompt      = STRING_TOKEN (0x0E42),
        help        = STRING_TOKEN (0x0E56),
        minimum     = 1,
        maximum     = 20,
        step        = 1,    
        default     = 10,   
      endnumeric;

      numeric varid = PCH_SETUP.PcieIoRsvd[8],
        prompt      = STRING_TOKEN (0x0E5F),
        help        = STRING_TOKEN (0x0E73),
        minimum     = 4,
        maximum     = 20,
        step        = 4,    
        default     = 4,    
      endnumeric;

      subtitle text = STRING_TOKEN(0x0002);

      subtitle text = STRING_TOKEN(0x0E7A);
      oneof varid   = PCH_SETUP.PchPcieLtrEnable[8],
        prompt   = STRING_TOKEN (0x0E83),
        help     = STRING_TOKEN (0x0E97),
        option text = STRING_TOKEN(0x0004),  value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      suppressif ideqval PCH_SETUP.PchPcieLtrEnable[8] == 0;
        oneof varid   = PCH_SETUP.PchPcieSnoopLatencyOverrideMode[8],
          prompt      = STRING_TOKEN (0x0EC8),
          help        = STRING_TOKEN (0x0F5D),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x09F8),   value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x158F),     value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        suppressif NOT ideqval PCH_SETUP.PchPcieSnoopLatencyOverrideMode[8] == 1;
          numeric varid = PCH_SETUP.PchPcieSnoopLatencyOverrideValue[8],
            prompt      = STRING_TOKEN(0x0ECA),
            help        = STRING_TOKEN(0x0F5F),
            flags       = RESET_REQUIRED,
            minimum     = 0,
            maximum     = 1023,
            step        = 1,
            default     = 60,
          endnumeric;

          oneof varid   = PCH_SETUP.PchPcieSnoopLatencyOverrideMultiplier[8],
            prompt      = STRING_TOKEN(0x0ECB),
            help        = STRING_TOKEN(0x0F60),
            option text = STRING_TOKEN(0x0E74), value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E75), value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E76), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E77), value = 3, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E78), value = 4, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E79), value = 5, flags = RESET_REQUIRED;
          endoneof;
        endif;

        oneof varid   = PCH_SETUP.PchPcieNonSnoopLatencyOverrideMode[8],
          prompt      = STRING_TOKEN (0x0EC9),
          help        = STRING_TOKEN (0x0F5E),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x09F8),   value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x158F),     value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        suppressif NOT ideqval PCH_SETUP.PchPcieNonSnoopLatencyOverrideMode[8] == 1;
          numeric varid = PCH_SETUP.PchPcieNonSnoopLatencyOverrideValue[8],
            prompt      = STRING_TOKEN(0x0ECC),
            help        = STRING_TOKEN(0x0F61),
            flags       = RESET_REQUIRED,
            minimum     = 0,
            maximum     = 1023,
            step        = 1,
            default     = 60,
          endnumeric;

          oneof varid   = PCH_SETUP.PchPcieNonSnoopLatencyOverrideMultiplier[8],
            prompt      = STRING_TOKEN(0x0ECD),
            help        = STRING_TOKEN(0x0F62),
            option text = STRING_TOKEN(0x0E74), value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E75), value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E76), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E77), value = 3, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E78), value = 4, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E79), value = 5, flags = RESET_REQUIRED;
          endoneof;
        endif;




        oneof varid  = PCH_SETUP.PchPcieForceLtrOverride[8],
          prompt      = STRING_TOKEN(0x0F48),
          help        = STRING_TOKEN(0x0F5C),
          option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
        endoneof;




      endif;

      subtitle text = STRING_TOKEN(0x0002);

      oneof varid   = PCH_SETUP.PchPcieLtrConfigLock[8],
        prompt   = STRING_TOKEN (0x0F6B),
        help     = STRING_TOKEN (0x0F7F),
        option text = STRING_TOKEN(0x0004),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortPeerMemoryWriteEnable[8],
        prompt      = STRING_TOKEN(0x0DCC),
        help        = STRING_TOKEN(0x0DE0),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

    endif;
  endform; 
#line 2537 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"



#line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"

































  form formid = 5101,
    title     = STRING_TOKEN(0x104D);

    oneof varid   = PCH_SETUP.PcieRootPortEn[9],
      prompt      = STRING_TOKEN(0x0C6D),
      help        = STRING_TOKEN(0x0C80),
      option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    suppressif ideqval PCH_SETUP.PcieRootPortEn[9] == 0x0;
      grayoutif ideqval PCH_SETUP.PcieRootPortHPE[9] == 1;
        oneof varid   = PCH_SETUP.PcieRootPortSI[9],
          prompt      = STRING_TOKEN(0x1118),
          help        = STRING_TOKEN(0x112B),
          option text = STRING_TOKEN(0x112C), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x112D), value = 1, flags = DEFAULT | RESET_REQUIRED;
        endoneof;
      endif;

       
        oneof varid   = PCH_SETUP.PcieRootPortAspm[9],
          questionid  = 5609,
          prompt      = STRING_TOKEN(0x0B76),
          help        = STRING_TOKEN(0x0BA5),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;



#line 64 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"
          option text = STRING_TOKEN(0x0BA7), value = 2, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x158F), value = 4, flags = RESET_REQUIRED;
#line 67 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"
        endoneof;

        oneof varid   = PCH_SETUP.PcieRootPortL1SubStates[9],
          questionid  = 5637,
          prompt      = STRING_TOKEN(0x0BB2),
          help        = STRING_TOKEN(0x0BC5),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0BC6), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0BC7), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
       

      oneof varid   = PCH_SETUP.PcieRootPortL1Low[9],
        prompt      = STRING_TOKEN(0x0BC8),
        help        = STRING_TOKEN(0x0BC9),
        option text = STRING_TOKEN(0x0004), value = 0, flags =  RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortACS[9],
        prompt      = STRING_TOKEN(0x0BD3),
        help        = STRING_TOKEN(0x0BE6),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

       
        oneof varid   = PCH_SETUP.PcieRootPortPTM[9],
          questionid  = 5665,
          prompt      = STRING_TOKEN(0x0BF1),
          help        = STRING_TOKEN(0x0C04),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
       

      oneof varid   = PCH_SETUP.PcieRootPortDPC[9],
        prompt      = STRING_TOKEN(0x0C0E),
        help        = STRING_TOKEN(0x0C21),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortEDPC[9],
        prompt      = STRING_TOKEN(0x0C2B),
        help        = STRING_TOKEN(0x0C3E),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortURE[9],
        prompt      = STRING_TOKEN(0x0C8A),
        help        = STRING_TOKEN(0x0C9D),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortFEE[9],
        prompt      = STRING_TOKEN(0x0CA7),
        help        = STRING_TOKEN(0x0CBA),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortNFE[9],
        prompt      = STRING_TOKEN(0x0CC4),
        help        = STRING_TOKEN(0x0CD7),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortCEE[9],
        prompt      = STRING_TOKEN(0x0CE1),
        help        = STRING_TOKEN(0x0CF4),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSFE[9],
        prompt      = STRING_TOKEN(0x0D1B),
        help        = STRING_TOKEN(0x0D2E),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSNE[9],
        prompt      = STRING_TOKEN(0x0D38),
        help        = STRING_TOKEN(0x0D4B),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSCE[9],
        prompt      = STRING_TOKEN(0x0D55),
        help        = STRING_TOKEN(0x0D68),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortPMCE[9],
        prompt      = STRING_TOKEN(0x0D72),
        help        = STRING_TOKEN(0x0D85),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      grayoutif ideqval PCH_SETUP.PcieRootPortSI[9] == 0;
        oneof varid   = PCH_SETUP.PcieRootPortHPE[9],
          prompt      = STRING_TOKEN(0x0D8F),
          help        = STRING_TOKEN(0x0DA2),
          option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
        endoneof;
      endif;

      oneof varid   = PCH_SETUP.PcieRootPortAER[9],
        prompt      = STRING_TOKEN(0x0DAC),
        help        = STRING_TOKEN(0x0DBF),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSpeed[9],
        prompt   = STRING_TOKEN (0x0C4C),
        help     = STRING_TOKEN (0x0C5F),
        option text = STRING_TOKEN (0x0006), value = 0, flags = RESET_REQUIRED | DEFAULT;
        option text = STRING_TOKEN (0x0C60), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x0C61), value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x0C62), value = 3, flags = RESET_REQUIRED;

        option text = STRING_TOKEN (0x0C63), value = 4, flags = RESET_REQUIRED;
#line 199 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortTHS[9],
        prompt      = STRING_TOKEN(0x0DEC),
        help        = STRING_TOKEN(0x0DFF),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      numeric varid = PCH_SETUP.PcieDetectTimeoutMs[9],
        prompt      = STRING_TOKEN (0x0E09),
        help        = STRING_TOKEN (0x0E1C),
        minimum     = 0,
        maximum     = 65535,
        step        = 1,
        default     = 0,
      endnumeric;

      numeric varid = PCH_SETUP.PcieExtraBusRsvd[9],
        prompt      = STRING_TOKEN (0x0E26),
        help        = STRING_TOKEN (0x0E39),
        minimum     = 0,
        maximum     = 7,
        step        = 1,    
        default     = 0,    
      endnumeric;

      numeric varid = PCH_SETUP.PcieMemRsvd[9],
        prompt      = STRING_TOKEN (0x0E43),
        help        = STRING_TOKEN (0x0E56),
        minimum     = 1,
        maximum     = 20,
        step        = 1,    
        default     = 10,   
      endnumeric;

      numeric varid = PCH_SETUP.PcieIoRsvd[9],
        prompt      = STRING_TOKEN (0x0E60),
        help        = STRING_TOKEN (0x0E73),
        minimum     = 4,
        maximum     = 20,
        step        = 4,    
        default     = 4,    
      endnumeric;

      subtitle text = STRING_TOKEN(0x0002);

      subtitle text = STRING_TOKEN(0x0E7A);
      oneof varid   = PCH_SETUP.PchPcieLtrEnable[9],
        prompt   = STRING_TOKEN (0x0E84),
        help     = STRING_TOKEN (0x0E97),
        option text = STRING_TOKEN(0x0004),  value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      suppressif ideqval PCH_SETUP.PchPcieLtrEnable[9] == 0;
        oneof varid   = PCH_SETUP.PchPcieSnoopLatencyOverrideMode[9],
          prompt      = STRING_TOKEN (0x0ECE),
          help        = STRING_TOKEN (0x0F5D),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x09F8),   value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x158F),     value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        suppressif NOT ideqval PCH_SETUP.PchPcieSnoopLatencyOverrideMode[9] == 1;
          numeric varid = PCH_SETUP.PchPcieSnoopLatencyOverrideValue[9],
            prompt      = STRING_TOKEN(0x0ED0),
            help        = STRING_TOKEN(0x0F5F),
            flags       = RESET_REQUIRED,
            minimum     = 0,
            maximum     = 1023,
            step        = 1,
            default     = 60,
          endnumeric;

          oneof varid   = PCH_SETUP.PchPcieSnoopLatencyOverrideMultiplier[9],
            prompt      = STRING_TOKEN(0x0ED1),
            help        = STRING_TOKEN(0x0F60),
            option text = STRING_TOKEN(0x0E74), value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E75), value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E76), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E77), value = 3, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E78), value = 4, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E79), value = 5, flags = RESET_REQUIRED;
          endoneof;
        endif;

        oneof varid   = PCH_SETUP.PchPcieNonSnoopLatencyOverrideMode[9],
          prompt      = STRING_TOKEN (0x0ECF),
          help        = STRING_TOKEN (0x0F5E),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x09F8),   value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x158F),     value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        suppressif NOT ideqval PCH_SETUP.PchPcieNonSnoopLatencyOverrideMode[9] == 1;
          numeric varid = PCH_SETUP.PchPcieNonSnoopLatencyOverrideValue[9],
            prompt      = STRING_TOKEN(0x0ED2),
            help        = STRING_TOKEN(0x0F61),
            flags       = RESET_REQUIRED,
            minimum     = 0,
            maximum     = 1023,
            step        = 1,
            default     = 60,
          endnumeric;

          oneof varid   = PCH_SETUP.PchPcieNonSnoopLatencyOverrideMultiplier[9],
            prompt      = STRING_TOKEN(0x0ED3),
            help        = STRING_TOKEN(0x0F62),
            option text = STRING_TOKEN(0x0E74), value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E75), value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E76), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E77), value = 3, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E78), value = 4, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E79), value = 5, flags = RESET_REQUIRED;
          endoneof;
        endif;




        oneof varid  = PCH_SETUP.PchPcieForceLtrOverride[9],
          prompt      = STRING_TOKEN(0x0F49),
          help        = STRING_TOKEN(0x0F5C),
          option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
        endoneof;




      endif;

      subtitle text = STRING_TOKEN(0x0002);

      oneof varid   = PCH_SETUP.PchPcieLtrConfigLock[9],
        prompt   = STRING_TOKEN (0x0F6C),
        help     = STRING_TOKEN (0x0F7F),
        option text = STRING_TOKEN(0x0004),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortPeerMemoryWriteEnable[9],
        prompt      = STRING_TOKEN(0x0DCD),
        help        = STRING_TOKEN(0x0DE0),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

    endif;
  endform; 
#line 2541 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"



#line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"

































  form formid = 5102,
    title     = STRING_TOKEN(0x104E);

    oneof varid   = PCH_SETUP.PcieRootPortEn[10],
      prompt      = STRING_TOKEN(0x0C6E),
      help        = STRING_TOKEN(0x0C80),
      option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    suppressif ideqval PCH_SETUP.PcieRootPortEn[10] == 0x0;
      grayoutif ideqval PCH_SETUP.PcieRootPortHPE[10] == 1;
        oneof varid   = PCH_SETUP.PcieRootPortSI[10],
          prompt      = STRING_TOKEN(0x1119),
          help        = STRING_TOKEN(0x112B),
          option text = STRING_TOKEN(0x112C), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x112D), value = 1, flags = DEFAULT | RESET_REQUIRED;
        endoneof;
      endif;

       
        oneof varid   = PCH_SETUP.PcieRootPortAspm[10],
          questionid  = 5610,
          prompt      = STRING_TOKEN(0x0B77),
          help        = STRING_TOKEN(0x0BA5),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;



#line 64 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"
          option text = STRING_TOKEN(0x0BA7), value = 2, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x158F), value = 4, flags = RESET_REQUIRED;
#line 67 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"
        endoneof;

        oneof varid   = PCH_SETUP.PcieRootPortL1SubStates[10],
          questionid  = 5638,
          prompt      = STRING_TOKEN(0x0BB3),
          help        = STRING_TOKEN(0x0BC5),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0BC6), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0BC7), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
       

      oneof varid   = PCH_SETUP.PcieRootPortL1Low[10],
        prompt      = STRING_TOKEN(0x0BC8),
        help        = STRING_TOKEN(0x0BC9),
        option text = STRING_TOKEN(0x0004), value = 0, flags =  RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortACS[10],
        prompt      = STRING_TOKEN(0x0BD4),
        help        = STRING_TOKEN(0x0BE6),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

       
        oneof varid   = PCH_SETUP.PcieRootPortPTM[10],
          questionid  = 5666,
          prompt      = STRING_TOKEN(0x0BF2),
          help        = STRING_TOKEN(0x0C04),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
       

      oneof varid   = PCH_SETUP.PcieRootPortDPC[10],
        prompt      = STRING_TOKEN(0x0C0F),
        help        = STRING_TOKEN(0x0C21),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortEDPC[10],
        prompt      = STRING_TOKEN(0x0C2C),
        help        = STRING_TOKEN(0x0C3E),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortURE[10],
        prompt      = STRING_TOKEN(0x0C8B),
        help        = STRING_TOKEN(0x0C9D),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortFEE[10],
        prompt      = STRING_TOKEN(0x0CA8),
        help        = STRING_TOKEN(0x0CBA),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortNFE[10],
        prompt      = STRING_TOKEN(0x0CC5),
        help        = STRING_TOKEN(0x0CD7),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortCEE[10],
        prompt      = STRING_TOKEN(0x0CE2),
        help        = STRING_TOKEN(0x0CF4),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSFE[10],
        prompt      = STRING_TOKEN(0x0D1C),
        help        = STRING_TOKEN(0x0D2E),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSNE[10],
        prompt      = STRING_TOKEN(0x0D39),
        help        = STRING_TOKEN(0x0D4B),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSCE[10],
        prompt      = STRING_TOKEN(0x0D56),
        help        = STRING_TOKEN(0x0D68),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortPMCE[10],
        prompt      = STRING_TOKEN(0x0D73),
        help        = STRING_TOKEN(0x0D85),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      grayoutif ideqval PCH_SETUP.PcieRootPortSI[10] == 0;
        oneof varid   = PCH_SETUP.PcieRootPortHPE[10],
          prompt      = STRING_TOKEN(0x0D90),
          help        = STRING_TOKEN(0x0DA2),
          option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
        endoneof;
      endif;

      oneof varid   = PCH_SETUP.PcieRootPortAER[10],
        prompt      = STRING_TOKEN(0x0DAD),
        help        = STRING_TOKEN(0x0DBF),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSpeed[10],
        prompt   = STRING_TOKEN (0x0C4D),
        help     = STRING_TOKEN (0x0C5F),
        option text = STRING_TOKEN (0x0006), value = 0, flags = RESET_REQUIRED | DEFAULT;
        option text = STRING_TOKEN (0x0C60), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x0C61), value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x0C62), value = 3, flags = RESET_REQUIRED;

        option text = STRING_TOKEN (0x0C63), value = 4, flags = RESET_REQUIRED;
#line 199 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortTHS[10],
        prompt      = STRING_TOKEN(0x0DED),
        help        = STRING_TOKEN(0x0DFF),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      numeric varid = PCH_SETUP.PcieDetectTimeoutMs[10],
        prompt      = STRING_TOKEN (0x0E0A),
        help        = STRING_TOKEN (0x0E1C),
        minimum     = 0,
        maximum     = 65535,
        step        = 1,
        default     = 0,
      endnumeric;

      numeric varid = PCH_SETUP.PcieExtraBusRsvd[10],
        prompt      = STRING_TOKEN (0x0E27),
        help        = STRING_TOKEN (0x0E39),
        minimum     = 0,
        maximum     = 7,
        step        = 1,    
        default     = 0,    
      endnumeric;

      numeric varid = PCH_SETUP.PcieMemRsvd[10],
        prompt      = STRING_TOKEN (0x0E44),
        help        = STRING_TOKEN (0x0E56),
        minimum     = 1,
        maximum     = 20,
        step        = 1,    
        default     = 10,   
      endnumeric;

      numeric varid = PCH_SETUP.PcieIoRsvd[10],
        prompt      = STRING_TOKEN (0x0E61),
        help        = STRING_TOKEN (0x0E73),
        minimum     = 4,
        maximum     = 20,
        step        = 4,    
        default     = 4,    
      endnumeric;

      subtitle text = STRING_TOKEN(0x0002);

      subtitle text = STRING_TOKEN(0x0E7A);
      oneof varid   = PCH_SETUP.PchPcieLtrEnable[10],
        prompt   = STRING_TOKEN (0x0E85),
        help     = STRING_TOKEN (0x0E97),
        option text = STRING_TOKEN(0x0004),  value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      suppressif ideqval PCH_SETUP.PchPcieLtrEnable[10] == 0;
        oneof varid   = PCH_SETUP.PchPcieSnoopLatencyOverrideMode[10],
          prompt      = STRING_TOKEN (0x0ED4),
          help        = STRING_TOKEN (0x0F5D),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x09F8),   value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x158F),     value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        suppressif NOT ideqval PCH_SETUP.PchPcieSnoopLatencyOverrideMode[10] == 1;
          numeric varid = PCH_SETUP.PchPcieSnoopLatencyOverrideValue[10],
            prompt      = STRING_TOKEN(0x0ED6),
            help        = STRING_TOKEN(0x0F5F),
            flags       = RESET_REQUIRED,
            minimum     = 0,
            maximum     = 1023,
            step        = 1,
            default     = 60,
          endnumeric;

          oneof varid   = PCH_SETUP.PchPcieSnoopLatencyOverrideMultiplier[10],
            prompt      = STRING_TOKEN(0x0ED7),
            help        = STRING_TOKEN(0x0F60),
            option text = STRING_TOKEN(0x0E74), value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E75), value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E76), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E77), value = 3, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E78), value = 4, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E79), value = 5, flags = RESET_REQUIRED;
          endoneof;
        endif;

        oneof varid   = PCH_SETUP.PchPcieNonSnoopLatencyOverrideMode[10],
          prompt      = STRING_TOKEN (0x0ED5),
          help        = STRING_TOKEN (0x0F5E),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x09F8),   value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x158F),     value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        suppressif NOT ideqval PCH_SETUP.PchPcieNonSnoopLatencyOverrideMode[10] == 1;
          numeric varid = PCH_SETUP.PchPcieNonSnoopLatencyOverrideValue[10],
            prompt      = STRING_TOKEN(0x0ED8),
            help        = STRING_TOKEN(0x0F61),
            flags       = RESET_REQUIRED,
            minimum     = 0,
            maximum     = 1023,
            step        = 1,
            default     = 60,
          endnumeric;

          oneof varid   = PCH_SETUP.PchPcieNonSnoopLatencyOverrideMultiplier[10],
            prompt      = STRING_TOKEN(0x0ED9),
            help        = STRING_TOKEN(0x0F62),
            option text = STRING_TOKEN(0x0E74), value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E75), value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E76), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E77), value = 3, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E78), value = 4, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E79), value = 5, flags = RESET_REQUIRED;
          endoneof;
        endif;




        oneof varid  = PCH_SETUP.PchPcieForceLtrOverride[10],
          prompt      = STRING_TOKEN(0x0F4A),
          help        = STRING_TOKEN(0x0F5C),
          option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
        endoneof;




      endif;

      subtitle text = STRING_TOKEN(0x0002);

      oneof varid   = PCH_SETUP.PchPcieLtrConfigLock[10],
        prompt   = STRING_TOKEN (0x0F6D),
        help     = STRING_TOKEN (0x0F7F),
        option text = STRING_TOKEN(0x0004),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortPeerMemoryWriteEnable[10],
        prompt      = STRING_TOKEN(0x0DCE),
        help        = STRING_TOKEN(0x0DE0),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

    endif;
  endform; 
#line 2545 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"



#line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"

































  form formid = 5103,
    title     = STRING_TOKEN(0x104F);

    oneof varid   = PCH_SETUP.PcieRootPortEn[11],
      prompt      = STRING_TOKEN(0x0C6F),
      help        = STRING_TOKEN(0x0C80),
      option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    suppressif ideqval PCH_SETUP.PcieRootPortEn[11] == 0x0;
      grayoutif ideqval PCH_SETUP.PcieRootPortHPE[11] == 1;
        oneof varid   = PCH_SETUP.PcieRootPortSI[11],
          prompt      = STRING_TOKEN(0x111A),
          help        = STRING_TOKEN(0x112B),
          option text = STRING_TOKEN(0x112C), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x112D), value = 1, flags = DEFAULT | RESET_REQUIRED;
        endoneof;
      endif;

       
        oneof varid   = PCH_SETUP.PcieRootPortAspm[11],
          questionid  = 5611,
          prompt      = STRING_TOKEN(0x0B78),
          help        = STRING_TOKEN(0x0BA5),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;



#line 64 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"
          option text = STRING_TOKEN(0x0BA7), value = 2, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x158F), value = 4, flags = RESET_REQUIRED;
#line 67 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"
        endoneof;

        oneof varid   = PCH_SETUP.PcieRootPortL1SubStates[11],
          questionid  = 5639,
          prompt      = STRING_TOKEN(0x0BB4),
          help        = STRING_TOKEN(0x0BC5),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0BC6), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0BC7), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
       

      oneof varid   = PCH_SETUP.PcieRootPortL1Low[11],
        prompt      = STRING_TOKEN(0x0BC8),
        help        = STRING_TOKEN(0x0BC9),
        option text = STRING_TOKEN(0x0004), value = 0, flags =  RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortACS[11],
        prompt      = STRING_TOKEN(0x0BD5),
        help        = STRING_TOKEN(0x0BE6),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

       
        oneof varid   = PCH_SETUP.PcieRootPortPTM[11],
          questionid  = 5667,
          prompt      = STRING_TOKEN(0x0BF3),
          help        = STRING_TOKEN(0x0C04),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
       

      oneof varid   = PCH_SETUP.PcieRootPortDPC[11],
        prompt      = STRING_TOKEN(0x0C10),
        help        = STRING_TOKEN(0x0C21),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortEDPC[11],
        prompt      = STRING_TOKEN(0x0C2D),
        help        = STRING_TOKEN(0x0C3E),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortURE[11],
        prompt      = STRING_TOKEN(0x0C8C),
        help        = STRING_TOKEN(0x0C9D),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortFEE[11],
        prompt      = STRING_TOKEN(0x0CA9),
        help        = STRING_TOKEN(0x0CBA),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortNFE[11],
        prompt      = STRING_TOKEN(0x0CC6),
        help        = STRING_TOKEN(0x0CD7),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortCEE[11],
        prompt      = STRING_TOKEN(0x0CE3),
        help        = STRING_TOKEN(0x0CF4),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSFE[11],
        prompt      = STRING_TOKEN(0x0D1D),
        help        = STRING_TOKEN(0x0D2E),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSNE[11],
        prompt      = STRING_TOKEN(0x0D3A),
        help        = STRING_TOKEN(0x0D4B),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSCE[11],
        prompt      = STRING_TOKEN(0x0D57),
        help        = STRING_TOKEN(0x0D68),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortPMCE[11],
        prompt      = STRING_TOKEN(0x0D74),
        help        = STRING_TOKEN(0x0D85),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      grayoutif ideqval PCH_SETUP.PcieRootPortSI[11] == 0;
        oneof varid   = PCH_SETUP.PcieRootPortHPE[11],
          prompt      = STRING_TOKEN(0x0D91),
          help        = STRING_TOKEN(0x0DA2),
          option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
        endoneof;
      endif;

      oneof varid   = PCH_SETUP.PcieRootPortAER[11],
        prompt      = STRING_TOKEN(0x0DAE),
        help        = STRING_TOKEN(0x0DBF),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSpeed[11],
        prompt   = STRING_TOKEN (0x0C4E),
        help     = STRING_TOKEN (0x0C5F),
        option text = STRING_TOKEN (0x0006), value = 0, flags = RESET_REQUIRED | DEFAULT;
        option text = STRING_TOKEN (0x0C60), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x0C61), value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x0C62), value = 3, flags = RESET_REQUIRED;

        option text = STRING_TOKEN (0x0C63), value = 4, flags = RESET_REQUIRED;
#line 199 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortTHS[11],
        prompt      = STRING_TOKEN(0x0DEE),
        help        = STRING_TOKEN(0x0DFF),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      numeric varid = PCH_SETUP.PcieDetectTimeoutMs[11],
        prompt      = STRING_TOKEN (0x0E0B),
        help        = STRING_TOKEN (0x0E1C),
        minimum     = 0,
        maximum     = 65535,
        step        = 1,
        default     = 0,
      endnumeric;

      numeric varid = PCH_SETUP.PcieExtraBusRsvd[11],
        prompt      = STRING_TOKEN (0x0E28),
        help        = STRING_TOKEN (0x0E39),
        minimum     = 0,
        maximum     = 7,
        step        = 1,    
        default     = 0,    
      endnumeric;

      numeric varid = PCH_SETUP.PcieMemRsvd[11],
        prompt      = STRING_TOKEN (0x0E45),
        help        = STRING_TOKEN (0x0E56),
        minimum     = 1,
        maximum     = 20,
        step        = 1,    
        default     = 10,   
      endnumeric;

      numeric varid = PCH_SETUP.PcieIoRsvd[11],
        prompt      = STRING_TOKEN (0x0E62),
        help        = STRING_TOKEN (0x0E73),
        minimum     = 4,
        maximum     = 20,
        step        = 4,    
        default     = 4,    
      endnumeric;

      subtitle text = STRING_TOKEN(0x0002);

      subtitle text = STRING_TOKEN(0x0E7A);
      oneof varid   = PCH_SETUP.PchPcieLtrEnable[11],
        prompt   = STRING_TOKEN (0x0E86),
        help     = STRING_TOKEN (0x0E97),
        option text = STRING_TOKEN(0x0004),  value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      suppressif ideqval PCH_SETUP.PchPcieLtrEnable[11] == 0;
        oneof varid   = PCH_SETUP.PchPcieSnoopLatencyOverrideMode[11],
          prompt      = STRING_TOKEN (0x0EDA),
          help        = STRING_TOKEN (0x0F5D),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x09F8),   value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x158F),     value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        suppressif NOT ideqval PCH_SETUP.PchPcieSnoopLatencyOverrideMode[11] == 1;
          numeric varid = PCH_SETUP.PchPcieSnoopLatencyOverrideValue[11],
            prompt      = STRING_TOKEN(0x0EDC),
            help        = STRING_TOKEN(0x0F5F),
            flags       = RESET_REQUIRED,
            minimum     = 0,
            maximum     = 1023,
            step        = 1,
            default     = 60,
          endnumeric;

          oneof varid   = PCH_SETUP.PchPcieSnoopLatencyOverrideMultiplier[11],
            prompt      = STRING_TOKEN(0x0EDD),
            help        = STRING_TOKEN(0x0F60),
            option text = STRING_TOKEN(0x0E74), value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E75), value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E76), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E77), value = 3, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E78), value = 4, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E79), value = 5, flags = RESET_REQUIRED;
          endoneof;
        endif;

        oneof varid   = PCH_SETUP.PchPcieNonSnoopLatencyOverrideMode[11],
          prompt      = STRING_TOKEN (0x0EDB),
          help        = STRING_TOKEN (0x0F5E),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x09F8),   value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x158F),     value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        suppressif NOT ideqval PCH_SETUP.PchPcieNonSnoopLatencyOverrideMode[11] == 1;
          numeric varid = PCH_SETUP.PchPcieNonSnoopLatencyOverrideValue[11],
            prompt      = STRING_TOKEN(0x0EDE),
            help        = STRING_TOKEN(0x0F61),
            flags       = RESET_REQUIRED,
            minimum     = 0,
            maximum     = 1023,
            step        = 1,
            default     = 60,
          endnumeric;

          oneof varid   = PCH_SETUP.PchPcieNonSnoopLatencyOverrideMultiplier[11],
            prompt      = STRING_TOKEN(0x0EDF),
            help        = STRING_TOKEN(0x0F62),
            option text = STRING_TOKEN(0x0E74), value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E75), value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E76), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E77), value = 3, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E78), value = 4, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E79), value = 5, flags = RESET_REQUIRED;
          endoneof;
        endif;




        oneof varid  = PCH_SETUP.PchPcieForceLtrOverride[11],
          prompt      = STRING_TOKEN(0x0F4B),
          help        = STRING_TOKEN(0x0F5C),
          option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
        endoneof;




      endif;

      subtitle text = STRING_TOKEN(0x0002);

      oneof varid   = PCH_SETUP.PchPcieLtrConfigLock[11],
        prompt   = STRING_TOKEN (0x0F6E),
        help     = STRING_TOKEN (0x0F7F),
        option text = STRING_TOKEN(0x0004),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortPeerMemoryWriteEnable[11],
        prompt      = STRING_TOKEN(0x0DCF),
        help        = STRING_TOKEN(0x0DE0),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

    endif;
  endform; 
#line 2549 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"



#line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"

































  form formid = 5104,
    title     = STRING_TOKEN(0x1050);

    oneof varid   = PCH_SETUP.PcieRootPortEn[12],
      prompt      = STRING_TOKEN(0x0C70),
      help        = STRING_TOKEN(0x0C80),
      option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    suppressif ideqval PCH_SETUP.PcieRootPortEn[12] == 0x0;
      grayoutif ideqval PCH_SETUP.PcieRootPortHPE[12] == 1;
        oneof varid   = PCH_SETUP.PcieRootPortSI[12],
          prompt      = STRING_TOKEN(0x111B),
          help        = STRING_TOKEN(0x112B),
          option text = STRING_TOKEN(0x112C), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x112D), value = 1, flags = DEFAULT | RESET_REQUIRED;
        endoneof;
      endif;

       
        oneof varid   = PCH_SETUP.PcieRootPortAspm[12],
          questionid  = 5612,
          prompt      = STRING_TOKEN(0x0B79),
          help        = STRING_TOKEN(0x0BA5),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;



#line 64 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"
          option text = STRING_TOKEN(0x0BA7), value = 2, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x158F), value = 4, flags = RESET_REQUIRED;
#line 67 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"
        endoneof;

        oneof varid   = PCH_SETUP.PcieRootPortL1SubStates[12],
          questionid  = 5640,
          prompt      = STRING_TOKEN(0x0BB5),
          help        = STRING_TOKEN(0x0BC5),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0BC6), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0BC7), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
       

      oneof varid   = PCH_SETUP.PcieRootPortL1Low[12],
        prompt      = STRING_TOKEN(0x0BC8),
        help        = STRING_TOKEN(0x0BC9),
        option text = STRING_TOKEN(0x0004), value = 0, flags =  RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortACS[12],
        prompt      = STRING_TOKEN(0x0BD6),
        help        = STRING_TOKEN(0x0BE6),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

       
        oneof varid   = PCH_SETUP.PcieRootPortPTM[12],
          questionid  = 5668,
          prompt      = STRING_TOKEN(0x0BF4),
          help        = STRING_TOKEN(0x0C04),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
       

      oneof varid   = PCH_SETUP.PcieRootPortDPC[12],
        prompt      = STRING_TOKEN(0x0C11),
        help        = STRING_TOKEN(0x0C21),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortEDPC[12],
        prompt      = STRING_TOKEN(0x0C2E),
        help        = STRING_TOKEN(0x0C3E),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortURE[12],
        prompt      = STRING_TOKEN(0x0C8D),
        help        = STRING_TOKEN(0x0C9D),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortFEE[12],
        prompt      = STRING_TOKEN(0x0CAA),
        help        = STRING_TOKEN(0x0CBA),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortNFE[12],
        prompt      = STRING_TOKEN(0x0CC7),
        help        = STRING_TOKEN(0x0CD7),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortCEE[12],
        prompt      = STRING_TOKEN(0x0CE4),
        help        = STRING_TOKEN(0x0CF4),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSFE[12],
        prompt      = STRING_TOKEN(0x0D1E),
        help        = STRING_TOKEN(0x0D2E),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSNE[12],
        prompt      = STRING_TOKEN(0x0D3B),
        help        = STRING_TOKEN(0x0D4B),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSCE[12],
        prompt      = STRING_TOKEN(0x0D58),
        help        = STRING_TOKEN(0x0D68),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortPMCE[12],
        prompt      = STRING_TOKEN(0x0D75),
        help        = STRING_TOKEN(0x0D85),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      grayoutif ideqval PCH_SETUP.PcieRootPortSI[12] == 0;
        oneof varid   = PCH_SETUP.PcieRootPortHPE[12],
          prompt      = STRING_TOKEN(0x0D92),
          help        = STRING_TOKEN(0x0DA2),
          option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
        endoneof;
      endif;

      oneof varid   = PCH_SETUP.PcieRootPortAER[12],
        prompt      = STRING_TOKEN(0x0DAF),
        help        = STRING_TOKEN(0x0DBF),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSpeed[12],
        prompt   = STRING_TOKEN (0x0C4F),
        help     = STRING_TOKEN (0x0C5F),
        option text = STRING_TOKEN (0x0006), value = 0, flags = RESET_REQUIRED | DEFAULT;
        option text = STRING_TOKEN (0x0C60), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x0C61), value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x0C62), value = 3, flags = RESET_REQUIRED;

        option text = STRING_TOKEN (0x0C63), value = 4, flags = RESET_REQUIRED;
#line 199 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortTHS[12],
        prompt      = STRING_TOKEN(0x0DEF),
        help        = STRING_TOKEN(0x0DFF),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      numeric varid = PCH_SETUP.PcieDetectTimeoutMs[12],
        prompt      = STRING_TOKEN (0x0E0C),
        help        = STRING_TOKEN (0x0E1C),
        minimum     = 0,
        maximum     = 65535,
        step        = 1,
        default     = 0,
      endnumeric;

      numeric varid = PCH_SETUP.PcieExtraBusRsvd[12],
        prompt      = STRING_TOKEN (0x0E29),
        help        = STRING_TOKEN (0x0E39),
        minimum     = 0,
        maximum     = 7,
        step        = 1,    
        default     = 0,    
      endnumeric;

      numeric varid = PCH_SETUP.PcieMemRsvd[12],
        prompt      = STRING_TOKEN (0x0E46),
        help        = STRING_TOKEN (0x0E56),
        minimum     = 1,
        maximum     = 20,
        step        = 1,    
        default     = 10,   
      endnumeric;

      numeric varid = PCH_SETUP.PcieIoRsvd[12],
        prompt      = STRING_TOKEN (0x0E63),
        help        = STRING_TOKEN (0x0E73),
        minimum     = 4,
        maximum     = 20,
        step        = 4,    
        default     = 4,    
      endnumeric;

      subtitle text = STRING_TOKEN(0x0002);

      subtitle text = STRING_TOKEN(0x0E7A);
      oneof varid   = PCH_SETUP.PchPcieLtrEnable[12],
        prompt   = STRING_TOKEN (0x0E87),
        help     = STRING_TOKEN (0x0E97),
        option text = STRING_TOKEN(0x0004),  value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      suppressif ideqval PCH_SETUP.PchPcieLtrEnable[12] == 0;
        oneof varid   = PCH_SETUP.PchPcieSnoopLatencyOverrideMode[12],
          prompt      = STRING_TOKEN (0x0EE0),
          help        = STRING_TOKEN (0x0F5D),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x09F8),   value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x158F),     value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        suppressif NOT ideqval PCH_SETUP.PchPcieSnoopLatencyOverrideMode[12] == 1;
          numeric varid = PCH_SETUP.PchPcieSnoopLatencyOverrideValue[12],
            prompt      = STRING_TOKEN(0x0EE2),
            help        = STRING_TOKEN(0x0F5F),
            flags       = RESET_REQUIRED,
            minimum     = 0,
            maximum     = 1023,
            step        = 1,
            default     = 60,
          endnumeric;

          oneof varid   = PCH_SETUP.PchPcieSnoopLatencyOverrideMultiplier[12],
            prompt      = STRING_TOKEN(0x0EE3),
            help        = STRING_TOKEN(0x0F60),
            option text = STRING_TOKEN(0x0E74), value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E75), value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E76), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E77), value = 3, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E78), value = 4, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E79), value = 5, flags = RESET_REQUIRED;
          endoneof;
        endif;

        oneof varid   = PCH_SETUP.PchPcieNonSnoopLatencyOverrideMode[12],
          prompt      = STRING_TOKEN (0x0EE1),
          help        = STRING_TOKEN (0x0F5E),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x09F8),   value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x158F),     value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        suppressif NOT ideqval PCH_SETUP.PchPcieNonSnoopLatencyOverrideMode[12] == 1;
          numeric varid = PCH_SETUP.PchPcieNonSnoopLatencyOverrideValue[12],
            prompt      = STRING_TOKEN(0x0EE4),
            help        = STRING_TOKEN(0x0F61),
            flags       = RESET_REQUIRED,
            minimum     = 0,
            maximum     = 1023,
            step        = 1,
            default     = 60,
          endnumeric;

          oneof varid   = PCH_SETUP.PchPcieNonSnoopLatencyOverrideMultiplier[12],
            prompt      = STRING_TOKEN(0x0EE5),
            help        = STRING_TOKEN(0x0F62),
            option text = STRING_TOKEN(0x0E74), value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E75), value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E76), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E77), value = 3, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E78), value = 4, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E79), value = 5, flags = RESET_REQUIRED;
          endoneof;
        endif;




        oneof varid  = PCH_SETUP.PchPcieForceLtrOverride[12],
          prompt      = STRING_TOKEN(0x0F4C),
          help        = STRING_TOKEN(0x0F5C),
          option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
        endoneof;




      endif;

      subtitle text = STRING_TOKEN(0x0002);

      oneof varid   = PCH_SETUP.PchPcieLtrConfigLock[12],
        prompt   = STRING_TOKEN (0x0F6F),
        help     = STRING_TOKEN (0x0F7F),
        option text = STRING_TOKEN(0x0004),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortPeerMemoryWriteEnable[12],
        prompt      = STRING_TOKEN(0x0DD0),
        help        = STRING_TOKEN(0x0DE0),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

    endif;
  endform; 
#line 2553 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"



#line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"

































  form formid = 5105,
    title     = STRING_TOKEN(0x1051);

    oneof varid   = PCH_SETUP.PcieRootPortEn[13],
      prompt      = STRING_TOKEN(0x0C71),
      help        = STRING_TOKEN(0x0C80),
      option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    suppressif ideqval PCH_SETUP.PcieRootPortEn[13] == 0x0;
      grayoutif ideqval PCH_SETUP.PcieRootPortHPE[13] == 1;
        oneof varid   = PCH_SETUP.PcieRootPortSI[13],
          prompt      = STRING_TOKEN(0x111C),
          help        = STRING_TOKEN(0x112B),
          option text = STRING_TOKEN(0x112C), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x112D), value = 1, flags = DEFAULT | RESET_REQUIRED;
        endoneof;
      endif;

       
        oneof varid   = PCH_SETUP.PcieRootPortAspm[13],
          questionid  = 5613,
          prompt      = STRING_TOKEN(0x0B7A),
          help        = STRING_TOKEN(0x0BA5),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;



#line 64 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"
          option text = STRING_TOKEN(0x0BA7), value = 2, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x158F), value = 4, flags = RESET_REQUIRED;
#line 67 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"
        endoneof;

        oneof varid   = PCH_SETUP.PcieRootPortL1SubStates[13],
          questionid  = 5641,
          prompt      = STRING_TOKEN(0x0BB6),
          help        = STRING_TOKEN(0x0BC5),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0BC6), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0BC7), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
       

      oneof varid   = PCH_SETUP.PcieRootPortL1Low[13],
        prompt      = STRING_TOKEN(0x0BC8),
        help        = STRING_TOKEN(0x0BC9),
        option text = STRING_TOKEN(0x0004), value = 0, flags =  RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortACS[13],
        prompt      = STRING_TOKEN(0x0BD7),
        help        = STRING_TOKEN(0x0BE6),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

       
        oneof varid   = PCH_SETUP.PcieRootPortPTM[13],
          questionid  = 5669,
          prompt      = STRING_TOKEN(0x0BF5),
          help        = STRING_TOKEN(0x0C04),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
       

      oneof varid   = PCH_SETUP.PcieRootPortDPC[13],
        prompt      = STRING_TOKEN(0x0C12),
        help        = STRING_TOKEN(0x0C21),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortEDPC[13],
        prompt      = STRING_TOKEN(0x0C2F),
        help        = STRING_TOKEN(0x0C3E),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortURE[13],
        prompt      = STRING_TOKEN(0x0C8E),
        help        = STRING_TOKEN(0x0C9D),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortFEE[13],
        prompt      = STRING_TOKEN(0x0CAB),
        help        = STRING_TOKEN(0x0CBA),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortNFE[13],
        prompt      = STRING_TOKEN(0x0CC8),
        help        = STRING_TOKEN(0x0CD7),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortCEE[13],
        prompt      = STRING_TOKEN(0x0CE5),
        help        = STRING_TOKEN(0x0CF4),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSFE[13],
        prompt      = STRING_TOKEN(0x0D1F),
        help        = STRING_TOKEN(0x0D2E),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSNE[13],
        prompt      = STRING_TOKEN(0x0D3C),
        help        = STRING_TOKEN(0x0D4B),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSCE[13],
        prompt      = STRING_TOKEN(0x0D59),
        help        = STRING_TOKEN(0x0D68),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortPMCE[13],
        prompt      = STRING_TOKEN(0x0D76),
        help        = STRING_TOKEN(0x0D85),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      grayoutif ideqval PCH_SETUP.PcieRootPortSI[13] == 0;
        oneof varid   = PCH_SETUP.PcieRootPortHPE[13],
          prompt      = STRING_TOKEN(0x0D93),
          help        = STRING_TOKEN(0x0DA2),
          option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
        endoneof;
      endif;

      oneof varid   = PCH_SETUP.PcieRootPortAER[13],
        prompt      = STRING_TOKEN(0x0DB0),
        help        = STRING_TOKEN(0x0DBF),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSpeed[13],
        prompt   = STRING_TOKEN (0x0C50),
        help     = STRING_TOKEN (0x0C5F),
        option text = STRING_TOKEN (0x0006), value = 0, flags = RESET_REQUIRED | DEFAULT;
        option text = STRING_TOKEN (0x0C60), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x0C61), value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x0C62), value = 3, flags = RESET_REQUIRED;

        option text = STRING_TOKEN (0x0C63), value = 4, flags = RESET_REQUIRED;
#line 199 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortTHS[13],
        prompt      = STRING_TOKEN(0x0DF0),
        help        = STRING_TOKEN(0x0DFF),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      numeric varid = PCH_SETUP.PcieDetectTimeoutMs[13],
        prompt      = STRING_TOKEN (0x0E0D),
        help        = STRING_TOKEN (0x0E1C),
        minimum     = 0,
        maximum     = 65535,
        step        = 1,
        default     = 0,
      endnumeric;

      numeric varid = PCH_SETUP.PcieExtraBusRsvd[13],
        prompt      = STRING_TOKEN (0x0E2A),
        help        = STRING_TOKEN (0x0E39),
        minimum     = 0,
        maximum     = 7,
        step        = 1,    
        default     = 0,    
      endnumeric;

      numeric varid = PCH_SETUP.PcieMemRsvd[13],
        prompt      = STRING_TOKEN (0x0E47),
        help        = STRING_TOKEN (0x0E56),
        minimum     = 1,
        maximum     = 20,
        step        = 1,    
        default     = 10,   
      endnumeric;

      numeric varid = PCH_SETUP.PcieIoRsvd[13],
        prompt      = STRING_TOKEN (0x0E64),
        help        = STRING_TOKEN (0x0E73),
        minimum     = 4,
        maximum     = 20,
        step        = 4,    
        default     = 4,    
      endnumeric;

      subtitle text = STRING_TOKEN(0x0002);

      subtitle text = STRING_TOKEN(0x0E7A);
      oneof varid   = PCH_SETUP.PchPcieLtrEnable[13],
        prompt   = STRING_TOKEN (0x0E88),
        help     = STRING_TOKEN (0x0E97),
        option text = STRING_TOKEN(0x0004),  value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      suppressif ideqval PCH_SETUP.PchPcieLtrEnable[13] == 0;
        oneof varid   = PCH_SETUP.PchPcieSnoopLatencyOverrideMode[13],
          prompt      = STRING_TOKEN (0x0EE6),
          help        = STRING_TOKEN (0x0F5D),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x09F8),   value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x158F),     value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        suppressif NOT ideqval PCH_SETUP.PchPcieSnoopLatencyOverrideMode[13] == 1;
          numeric varid = PCH_SETUP.PchPcieSnoopLatencyOverrideValue[13],
            prompt      = STRING_TOKEN(0x0EE8),
            help        = STRING_TOKEN(0x0F5F),
            flags       = RESET_REQUIRED,
            minimum     = 0,
            maximum     = 1023,
            step        = 1,
            default     = 60,
          endnumeric;

          oneof varid   = PCH_SETUP.PchPcieSnoopLatencyOverrideMultiplier[13],
            prompt      = STRING_TOKEN(0x0EE9),
            help        = STRING_TOKEN(0x0F60),
            option text = STRING_TOKEN(0x0E74), value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E75), value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E76), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E77), value = 3, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E78), value = 4, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E79), value = 5, flags = RESET_REQUIRED;
          endoneof;
        endif;

        oneof varid   = PCH_SETUP.PchPcieNonSnoopLatencyOverrideMode[13],
          prompt      = STRING_TOKEN (0x0EE7),
          help        = STRING_TOKEN (0x0F5E),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x09F8),   value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x158F),     value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        suppressif NOT ideqval PCH_SETUP.PchPcieNonSnoopLatencyOverrideMode[13] == 1;
          numeric varid = PCH_SETUP.PchPcieNonSnoopLatencyOverrideValue[13],
            prompt      = STRING_TOKEN(0x0EEA),
            help        = STRING_TOKEN(0x0F61),
            flags       = RESET_REQUIRED,
            minimum     = 0,
            maximum     = 1023,
            step        = 1,
            default     = 60,
          endnumeric;

          oneof varid   = PCH_SETUP.PchPcieNonSnoopLatencyOverrideMultiplier[13],
            prompt      = STRING_TOKEN(0x0EEB),
            help        = STRING_TOKEN(0x0F62),
            option text = STRING_TOKEN(0x0E74), value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E75), value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E76), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E77), value = 3, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E78), value = 4, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E79), value = 5, flags = RESET_REQUIRED;
          endoneof;
        endif;




        oneof varid  = PCH_SETUP.PchPcieForceLtrOverride[13],
          prompt      = STRING_TOKEN(0x0F4D),
          help        = STRING_TOKEN(0x0F5C),
          option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
        endoneof;




      endif;

      subtitle text = STRING_TOKEN(0x0002);

      oneof varid   = PCH_SETUP.PchPcieLtrConfigLock[13],
        prompt   = STRING_TOKEN (0x0F70),
        help     = STRING_TOKEN (0x0F7F),
        option text = STRING_TOKEN(0x0004),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortPeerMemoryWriteEnable[13],
        prompt      = STRING_TOKEN(0x0DD1),
        help        = STRING_TOKEN(0x0DE0),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

    endif;
  endform; 
#line 2557 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"



#line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"

































  form formid = 5106,
    title     = STRING_TOKEN(0x1052);

    oneof varid   = PCH_SETUP.PcieRootPortEn[14],
      prompt      = STRING_TOKEN(0x0C72),
      help        = STRING_TOKEN(0x0C80),
      option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    suppressif ideqval PCH_SETUP.PcieRootPortEn[14] == 0x0;
      grayoutif ideqval PCH_SETUP.PcieRootPortHPE[14] == 1;
        oneof varid   = PCH_SETUP.PcieRootPortSI[14],
          prompt      = STRING_TOKEN(0x111D),
          help        = STRING_TOKEN(0x112B),
          option text = STRING_TOKEN(0x112C), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x112D), value = 1, flags = DEFAULT | RESET_REQUIRED;
        endoneof;
      endif;

       
        oneof varid   = PCH_SETUP.PcieRootPortAspm[14],
          questionid  = 5614,
          prompt      = STRING_TOKEN(0x0B7B),
          help        = STRING_TOKEN(0x0BA5),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;



#line 64 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"
          option text = STRING_TOKEN(0x0BA7), value = 2, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x158F), value = 4, flags = RESET_REQUIRED;
#line 67 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"
        endoneof;

        oneof varid   = PCH_SETUP.PcieRootPortL1SubStates[14],
          questionid  = 5642,
          prompt      = STRING_TOKEN(0x0BB7),
          help        = STRING_TOKEN(0x0BC5),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0BC6), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0BC7), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
       

      oneof varid   = PCH_SETUP.PcieRootPortL1Low[14],
        prompt      = STRING_TOKEN(0x0BC8),
        help        = STRING_TOKEN(0x0BC9),
        option text = STRING_TOKEN(0x0004), value = 0, flags =  RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortACS[14],
        prompt      = STRING_TOKEN(0x0BD8),
        help        = STRING_TOKEN(0x0BE6),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

       
        oneof varid   = PCH_SETUP.PcieRootPortPTM[14],
          questionid  = 5670,
          prompt      = STRING_TOKEN(0x0BF6),
          help        = STRING_TOKEN(0x0C04),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
       

      oneof varid   = PCH_SETUP.PcieRootPortDPC[14],
        prompt      = STRING_TOKEN(0x0C13),
        help        = STRING_TOKEN(0x0C21),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortEDPC[14],
        prompt      = STRING_TOKEN(0x0C30),
        help        = STRING_TOKEN(0x0C3E),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortURE[14],
        prompt      = STRING_TOKEN(0x0C8F),
        help        = STRING_TOKEN(0x0C9D),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortFEE[14],
        prompt      = STRING_TOKEN(0x0CAC),
        help        = STRING_TOKEN(0x0CBA),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortNFE[14],
        prompt      = STRING_TOKEN(0x0CC9),
        help        = STRING_TOKEN(0x0CD7),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortCEE[14],
        prompt      = STRING_TOKEN(0x0CE6),
        help        = STRING_TOKEN(0x0CF4),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSFE[14],
        prompt      = STRING_TOKEN(0x0D20),
        help        = STRING_TOKEN(0x0D2E),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSNE[14],
        prompt      = STRING_TOKEN(0x0D3D),
        help        = STRING_TOKEN(0x0D4B),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSCE[14],
        prompt      = STRING_TOKEN(0x0D5A),
        help        = STRING_TOKEN(0x0D68),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortPMCE[14],
        prompt      = STRING_TOKEN(0x0D77),
        help        = STRING_TOKEN(0x0D85),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      grayoutif ideqval PCH_SETUP.PcieRootPortSI[14] == 0;
        oneof varid   = PCH_SETUP.PcieRootPortHPE[14],
          prompt      = STRING_TOKEN(0x0D94),
          help        = STRING_TOKEN(0x0DA2),
          option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
        endoneof;
      endif;

      oneof varid   = PCH_SETUP.PcieRootPortAER[14],
        prompt      = STRING_TOKEN(0x0DB1),
        help        = STRING_TOKEN(0x0DBF),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSpeed[14],
        prompt   = STRING_TOKEN (0x0C51),
        help     = STRING_TOKEN (0x0C5F),
        option text = STRING_TOKEN (0x0006), value = 0, flags = RESET_REQUIRED | DEFAULT;
        option text = STRING_TOKEN (0x0C60), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x0C61), value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x0C62), value = 3, flags = RESET_REQUIRED;

        option text = STRING_TOKEN (0x0C63), value = 4, flags = RESET_REQUIRED;
#line 199 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortTHS[14],
        prompt      = STRING_TOKEN(0x0DF1),
        help        = STRING_TOKEN(0x0DFF),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      numeric varid = PCH_SETUP.PcieDetectTimeoutMs[14],
        prompt      = STRING_TOKEN (0x0E0E),
        help        = STRING_TOKEN (0x0E1C),
        minimum     = 0,
        maximum     = 65535,
        step        = 1,
        default     = 0,
      endnumeric;

      numeric varid = PCH_SETUP.PcieExtraBusRsvd[14],
        prompt      = STRING_TOKEN (0x0E2B),
        help        = STRING_TOKEN (0x0E39),
        minimum     = 0,
        maximum     = 7,
        step        = 1,    
        default     = 0,    
      endnumeric;

      numeric varid = PCH_SETUP.PcieMemRsvd[14],
        prompt      = STRING_TOKEN (0x0E48),
        help        = STRING_TOKEN (0x0E56),
        minimum     = 1,
        maximum     = 20,
        step        = 1,    
        default     = 10,   
      endnumeric;

      numeric varid = PCH_SETUP.PcieIoRsvd[14],
        prompt      = STRING_TOKEN (0x0E65),
        help        = STRING_TOKEN (0x0E73),
        minimum     = 4,
        maximum     = 20,
        step        = 4,    
        default     = 4,    
      endnumeric;

      subtitle text = STRING_TOKEN(0x0002);

      subtitle text = STRING_TOKEN(0x0E7A);
      oneof varid   = PCH_SETUP.PchPcieLtrEnable[14],
        prompt   = STRING_TOKEN (0x0E89),
        help     = STRING_TOKEN (0x0E97),
        option text = STRING_TOKEN(0x0004),  value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      suppressif ideqval PCH_SETUP.PchPcieLtrEnable[14] == 0;
        oneof varid   = PCH_SETUP.PchPcieSnoopLatencyOverrideMode[14],
          prompt      = STRING_TOKEN (0x0EEC),
          help        = STRING_TOKEN (0x0F5D),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x09F8),   value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x158F),     value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        suppressif NOT ideqval PCH_SETUP.PchPcieSnoopLatencyOverrideMode[14] == 1;
          numeric varid = PCH_SETUP.PchPcieSnoopLatencyOverrideValue[14],
            prompt      = STRING_TOKEN(0x0EEE),
            help        = STRING_TOKEN(0x0F5F),
            flags       = RESET_REQUIRED,
            minimum     = 0,
            maximum     = 1023,
            step        = 1,
            default     = 60,
          endnumeric;

          oneof varid   = PCH_SETUP.PchPcieSnoopLatencyOverrideMultiplier[14],
            prompt      = STRING_TOKEN(0x0EEF),
            help        = STRING_TOKEN(0x0F60),
            option text = STRING_TOKEN(0x0E74), value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E75), value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E76), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E77), value = 3, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E78), value = 4, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E79), value = 5, flags = RESET_REQUIRED;
          endoneof;
        endif;

        oneof varid   = PCH_SETUP.PchPcieNonSnoopLatencyOverrideMode[14],
          prompt      = STRING_TOKEN (0x0EED),
          help        = STRING_TOKEN (0x0F5E),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x09F8),   value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x158F),     value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        suppressif NOT ideqval PCH_SETUP.PchPcieNonSnoopLatencyOverrideMode[14] == 1;
          numeric varid = PCH_SETUP.PchPcieNonSnoopLatencyOverrideValue[14],
            prompt      = STRING_TOKEN(0x0EF0),
            help        = STRING_TOKEN(0x0F61),
            flags       = RESET_REQUIRED,
            minimum     = 0,
            maximum     = 1023,
            step        = 1,
            default     = 60,
          endnumeric;

          oneof varid   = PCH_SETUP.PchPcieNonSnoopLatencyOverrideMultiplier[14],
            prompt      = STRING_TOKEN(0x0EF1),
            help        = STRING_TOKEN(0x0F62),
            option text = STRING_TOKEN(0x0E74), value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E75), value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E76), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E77), value = 3, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E78), value = 4, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E79), value = 5, flags = RESET_REQUIRED;
          endoneof;
        endif;




        oneof varid  = PCH_SETUP.PchPcieForceLtrOverride[14],
          prompt      = STRING_TOKEN(0x0F4E),
          help        = STRING_TOKEN(0x0F5C),
          option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
        endoneof;




      endif;

      subtitle text = STRING_TOKEN(0x0002);

      oneof varid   = PCH_SETUP.PchPcieLtrConfigLock[14],
        prompt   = STRING_TOKEN (0x0F71),
        help     = STRING_TOKEN (0x0F7F),
        option text = STRING_TOKEN(0x0004),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortPeerMemoryWriteEnable[14],
        prompt      = STRING_TOKEN(0x0DD2),
        help        = STRING_TOKEN(0x0DE0),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

    endif;
  endform; 
#line 2561 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"



#line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"

































  form formid = 5107,
    title     = STRING_TOKEN(0x1053);

    oneof varid   = PCH_SETUP.PcieRootPortEn[15],
      prompt      = STRING_TOKEN(0x0C73),
      help        = STRING_TOKEN(0x0C80),
      option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    suppressif ideqval PCH_SETUP.PcieRootPortEn[15] == 0x0;
      grayoutif ideqval PCH_SETUP.PcieRootPortHPE[15] == 1;
        oneof varid   = PCH_SETUP.PcieRootPortSI[15],
          prompt      = STRING_TOKEN(0x111E),
          help        = STRING_TOKEN(0x112B),
          option text = STRING_TOKEN(0x112C), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x112D), value = 1, flags = DEFAULT | RESET_REQUIRED;
        endoneof;
      endif;

       
        oneof varid   = PCH_SETUP.PcieRootPortAspm[15],
          questionid  = 5615,
          prompt      = STRING_TOKEN(0x0B7C),
          help        = STRING_TOKEN(0x0BA5),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;



#line 64 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"
          option text = STRING_TOKEN(0x0BA7), value = 2, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x158F), value = 4, flags = RESET_REQUIRED;
#line 67 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"
        endoneof;

        oneof varid   = PCH_SETUP.PcieRootPortL1SubStates[15],
          questionid  = 5643,
          prompt      = STRING_TOKEN(0x0BB8),
          help        = STRING_TOKEN(0x0BC5),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0BC6), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0BC7), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
       

      oneof varid   = PCH_SETUP.PcieRootPortL1Low[15],
        prompt      = STRING_TOKEN(0x0BC8),
        help        = STRING_TOKEN(0x0BC9),
        option text = STRING_TOKEN(0x0004), value = 0, flags =  RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortACS[15],
        prompt      = STRING_TOKEN(0x0BD9),
        help        = STRING_TOKEN(0x0BE6),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

       
        oneof varid   = PCH_SETUP.PcieRootPortPTM[15],
          questionid  = 5671,
          prompt      = STRING_TOKEN(0x0BF7),
          help        = STRING_TOKEN(0x0C04),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
       

      oneof varid   = PCH_SETUP.PcieRootPortDPC[15],
        prompt      = STRING_TOKEN(0x0C14),
        help        = STRING_TOKEN(0x0C21),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortEDPC[15],
        prompt      = STRING_TOKEN(0x0C31),
        help        = STRING_TOKEN(0x0C3E),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortURE[15],
        prompt      = STRING_TOKEN(0x0C90),
        help        = STRING_TOKEN(0x0C9D),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortFEE[15],
        prompt      = STRING_TOKEN(0x0CAD),
        help        = STRING_TOKEN(0x0CBA),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortNFE[15],
        prompt      = STRING_TOKEN(0x0CCA),
        help        = STRING_TOKEN(0x0CD7),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortCEE[15],
        prompt      = STRING_TOKEN(0x0CE7),
        help        = STRING_TOKEN(0x0CF4),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSFE[15],
        prompt      = STRING_TOKEN(0x0D21),
        help        = STRING_TOKEN(0x0D2E),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSNE[15],
        prompt      = STRING_TOKEN(0x0D3E),
        help        = STRING_TOKEN(0x0D4B),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSCE[15],
        prompt      = STRING_TOKEN(0x0D5B),
        help        = STRING_TOKEN(0x0D68),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortPMCE[15],
        prompt      = STRING_TOKEN(0x0D78),
        help        = STRING_TOKEN(0x0D85),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      grayoutif ideqval PCH_SETUP.PcieRootPortSI[15] == 0;
        oneof varid   = PCH_SETUP.PcieRootPortHPE[15],
          prompt      = STRING_TOKEN(0x0D95),
          help        = STRING_TOKEN(0x0DA2),
          option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
        endoneof;
      endif;

      oneof varid   = PCH_SETUP.PcieRootPortAER[15],
        prompt      = STRING_TOKEN(0x0DB2),
        help        = STRING_TOKEN(0x0DBF),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSpeed[15],
        prompt   = STRING_TOKEN (0x0C52),
        help     = STRING_TOKEN (0x0C5F),
        option text = STRING_TOKEN (0x0006), value = 0, flags = RESET_REQUIRED | DEFAULT;
        option text = STRING_TOKEN (0x0C60), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x0C61), value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x0C62), value = 3, flags = RESET_REQUIRED;

        option text = STRING_TOKEN (0x0C63), value = 4, flags = RESET_REQUIRED;
#line 199 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortTHS[15],
        prompt      = STRING_TOKEN(0x0DF2),
        help        = STRING_TOKEN(0x0DFF),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      numeric varid = PCH_SETUP.PcieDetectTimeoutMs[15],
        prompt      = STRING_TOKEN (0x0E0F),
        help        = STRING_TOKEN (0x0E1C),
        minimum     = 0,
        maximum     = 65535,
        step        = 1,
        default     = 0,
      endnumeric;

      numeric varid = PCH_SETUP.PcieExtraBusRsvd[15],
        prompt      = STRING_TOKEN (0x0E2C),
        help        = STRING_TOKEN (0x0E39),
        minimum     = 0,
        maximum     = 7,
        step        = 1,    
        default     = 0,    
      endnumeric;

      numeric varid = PCH_SETUP.PcieMemRsvd[15],
        prompt      = STRING_TOKEN (0x0E49),
        help        = STRING_TOKEN (0x0E56),
        minimum     = 1,
        maximum     = 20,
        step        = 1,    
        default     = 10,   
      endnumeric;

      numeric varid = PCH_SETUP.PcieIoRsvd[15],
        prompt      = STRING_TOKEN (0x0E66),
        help        = STRING_TOKEN (0x0E73),
        minimum     = 4,
        maximum     = 20,
        step        = 4,    
        default     = 4,    
      endnumeric;

      subtitle text = STRING_TOKEN(0x0002);

      subtitle text = STRING_TOKEN(0x0E7A);
      oneof varid   = PCH_SETUP.PchPcieLtrEnable[15],
        prompt   = STRING_TOKEN (0x0E8A),
        help     = STRING_TOKEN (0x0E97),
        option text = STRING_TOKEN(0x0004),  value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      suppressif ideqval PCH_SETUP.PchPcieLtrEnable[15] == 0;
        oneof varid   = PCH_SETUP.PchPcieSnoopLatencyOverrideMode[15],
          prompt      = STRING_TOKEN (0x0EF2),
          help        = STRING_TOKEN (0x0F5D),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x09F8),   value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x158F),     value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        suppressif NOT ideqval PCH_SETUP.PchPcieSnoopLatencyOverrideMode[15] == 1;
          numeric varid = PCH_SETUP.PchPcieSnoopLatencyOverrideValue[15],
            prompt      = STRING_TOKEN(0x0EF4),
            help        = STRING_TOKEN(0x0F5F),
            flags       = RESET_REQUIRED,
            minimum     = 0,
            maximum     = 1023,
            step        = 1,
            default     = 60,
          endnumeric;

          oneof varid   = PCH_SETUP.PchPcieSnoopLatencyOverrideMultiplier[15],
            prompt      = STRING_TOKEN(0x0EF5),
            help        = STRING_TOKEN(0x0F60),
            option text = STRING_TOKEN(0x0E74), value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E75), value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E76), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E77), value = 3, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E78), value = 4, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E79), value = 5, flags = RESET_REQUIRED;
          endoneof;
        endif;

        oneof varid   = PCH_SETUP.PchPcieNonSnoopLatencyOverrideMode[15],
          prompt      = STRING_TOKEN (0x0EF3),
          help        = STRING_TOKEN (0x0F5E),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x09F8),   value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x158F),     value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        suppressif NOT ideqval PCH_SETUP.PchPcieNonSnoopLatencyOverrideMode[15] == 1;
          numeric varid = PCH_SETUP.PchPcieNonSnoopLatencyOverrideValue[15],
            prompt      = STRING_TOKEN(0x0EF6),
            help        = STRING_TOKEN(0x0F61),
            flags       = RESET_REQUIRED,
            minimum     = 0,
            maximum     = 1023,
            step        = 1,
            default     = 60,
          endnumeric;

          oneof varid   = PCH_SETUP.PchPcieNonSnoopLatencyOverrideMultiplier[15],
            prompt      = STRING_TOKEN(0x0EF7),
            help        = STRING_TOKEN(0x0F62),
            option text = STRING_TOKEN(0x0E74), value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E75), value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E76), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E77), value = 3, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E78), value = 4, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E79), value = 5, flags = RESET_REQUIRED;
          endoneof;
        endif;




        oneof varid  = PCH_SETUP.PchPcieForceLtrOverride[15],
          prompt      = STRING_TOKEN(0x0F4F),
          help        = STRING_TOKEN(0x0F5C),
          option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
        endoneof;




      endif;

      subtitle text = STRING_TOKEN(0x0002);

      oneof varid   = PCH_SETUP.PchPcieLtrConfigLock[15],
        prompt   = STRING_TOKEN (0x0F72),
        help     = STRING_TOKEN (0x0F7F),
        option text = STRING_TOKEN(0x0004),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortPeerMemoryWriteEnable[15],
        prompt      = STRING_TOKEN(0x0DD3),
        help        = STRING_TOKEN(0x0DE0),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

    endif;
  endform; 
#line 2565 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"



#line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"

































  form formid = 5108,
    title     = STRING_TOKEN(0x1054);

    oneof varid   = PCH_SETUP.PcieRootPortEn[16],
      prompt      = STRING_TOKEN(0x0C74),
      help        = STRING_TOKEN(0x0C80),
      option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    suppressif ideqval PCH_SETUP.PcieRootPortEn[16] == 0x0;
      grayoutif ideqval PCH_SETUP.PcieRootPortHPE[16] == 1;
        oneof varid   = PCH_SETUP.PcieRootPortSI[16],
          prompt      = STRING_TOKEN(0x111F),
          help        = STRING_TOKEN(0x112B),
          option text = STRING_TOKEN(0x112C), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x112D), value = 1, flags = DEFAULT | RESET_REQUIRED;
        endoneof;
      endif;

       
        oneof varid   = PCH_SETUP.PcieRootPortAspm[16],
          questionid  = 5616,
          prompt      = STRING_TOKEN(0x0B7D),
          help        = STRING_TOKEN(0x0BA5),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;



#line 64 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"
          option text = STRING_TOKEN(0x0BA7), value = 2, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x158F), value = 4, flags = RESET_REQUIRED;
#line 67 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"
        endoneof;

        oneof varid   = PCH_SETUP.PcieRootPortL1SubStates[16],
          questionid  = 5644,
          prompt      = STRING_TOKEN(0x0BB9),
          help        = STRING_TOKEN(0x0BC5),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0BC6), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0BC7), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
       

      oneof varid   = PCH_SETUP.PcieRootPortL1Low[16],
        prompt      = STRING_TOKEN(0x0BC8),
        help        = STRING_TOKEN(0x0BC9),
        option text = STRING_TOKEN(0x0004), value = 0, flags =  RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortACS[16],
        prompt      = STRING_TOKEN(0x0BDA),
        help        = STRING_TOKEN(0x0BE6),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

       
        oneof varid   = PCH_SETUP.PcieRootPortPTM[16],
          questionid  = 5672,
          prompt      = STRING_TOKEN(0x0BF8),
          help        = STRING_TOKEN(0x0C04),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
       

      oneof varid   = PCH_SETUP.PcieRootPortDPC[16],
        prompt      = STRING_TOKEN(0x0C15),
        help        = STRING_TOKEN(0x0C21),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortEDPC[16],
        prompt      = STRING_TOKEN(0x0C32),
        help        = STRING_TOKEN(0x0C3E),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortURE[16],
        prompt      = STRING_TOKEN(0x0C91),
        help        = STRING_TOKEN(0x0C9D),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortFEE[16],
        prompt      = STRING_TOKEN(0x0CAE),
        help        = STRING_TOKEN(0x0CBA),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortNFE[16],
        prompt      = STRING_TOKEN(0x0CCB),
        help        = STRING_TOKEN(0x0CD7),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortCEE[16],
        prompt      = STRING_TOKEN(0x0CE8),
        help        = STRING_TOKEN(0x0CF4),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSFE[16],
        prompt      = STRING_TOKEN(0x0D22),
        help        = STRING_TOKEN(0x0D2E),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSNE[16],
        prompt      = STRING_TOKEN(0x0D3F),
        help        = STRING_TOKEN(0x0D4B),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSCE[16],
        prompt      = STRING_TOKEN(0x0D5C),
        help        = STRING_TOKEN(0x0D68),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortPMCE[16],
        prompt      = STRING_TOKEN(0x0D79),
        help        = STRING_TOKEN(0x0D85),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      grayoutif ideqval PCH_SETUP.PcieRootPortSI[16] == 0;
        oneof varid   = PCH_SETUP.PcieRootPortHPE[16],
          prompt      = STRING_TOKEN(0x0D96),
          help        = STRING_TOKEN(0x0DA2),
          option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
        endoneof;
      endif;

      oneof varid   = PCH_SETUP.PcieRootPortAER[16],
        prompt      = STRING_TOKEN(0x0DB3),
        help        = STRING_TOKEN(0x0DBF),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSpeed[16],
        prompt   = STRING_TOKEN (0x0C53),
        help     = STRING_TOKEN (0x0C5F),
        option text = STRING_TOKEN (0x0006), value = 0, flags = RESET_REQUIRED | DEFAULT;
        option text = STRING_TOKEN (0x0C60), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x0C61), value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x0C62), value = 3, flags = RESET_REQUIRED;

        option text = STRING_TOKEN (0x0C63), value = 4, flags = RESET_REQUIRED;
#line 199 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortTHS[16],
        prompt      = STRING_TOKEN(0x0DF3),
        help        = STRING_TOKEN(0x0DFF),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      numeric varid = PCH_SETUP.PcieDetectTimeoutMs[16],
        prompt      = STRING_TOKEN (0x0E10),
        help        = STRING_TOKEN (0x0E1C),
        minimum     = 0,
        maximum     = 65535,
        step        = 1,
        default     = 0,
      endnumeric;

      numeric varid = PCH_SETUP.PcieExtraBusRsvd[16],
        prompt      = STRING_TOKEN (0x0E2D),
        help        = STRING_TOKEN (0x0E39),
        minimum     = 0,
        maximum     = 7,
        step        = 1,    
        default     = 0,    
      endnumeric;

      numeric varid = PCH_SETUP.PcieMemRsvd[16],
        prompt      = STRING_TOKEN (0x0E4A),
        help        = STRING_TOKEN (0x0E56),
        minimum     = 1,
        maximum     = 20,
        step        = 1,    
        default     = 10,   
      endnumeric;

      numeric varid = PCH_SETUP.PcieIoRsvd[16],
        prompt      = STRING_TOKEN (0x0E67),
        help        = STRING_TOKEN (0x0E73),
        minimum     = 4,
        maximum     = 20,
        step        = 4,    
        default     = 4,    
      endnumeric;

      subtitle text = STRING_TOKEN(0x0002);

      subtitle text = STRING_TOKEN(0x0E7A);
      oneof varid   = PCH_SETUP.PchPcieLtrEnable[16],
        prompt   = STRING_TOKEN (0x0E8B),
        help     = STRING_TOKEN (0x0E97),
        option text = STRING_TOKEN(0x0004),  value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      suppressif ideqval PCH_SETUP.PchPcieLtrEnable[16] == 0;
        oneof varid   = PCH_SETUP.PchPcieSnoopLatencyOverrideMode[16],
          prompt      = STRING_TOKEN (0x0EF8),
          help        = STRING_TOKEN (0x0F5D),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x09F8),   value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x158F),     value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        suppressif NOT ideqval PCH_SETUP.PchPcieSnoopLatencyOverrideMode[16] == 1;
          numeric varid = PCH_SETUP.PchPcieSnoopLatencyOverrideValue[16],
            prompt      = STRING_TOKEN(0x0EFA),
            help        = STRING_TOKEN(0x0F5F),
            flags       = RESET_REQUIRED,
            minimum     = 0,
            maximum     = 1023,
            step        = 1,
            default     = 60,
          endnumeric;

          oneof varid   = PCH_SETUP.PchPcieSnoopLatencyOverrideMultiplier[16],
            prompt      = STRING_TOKEN(0x0EFB),
            help        = STRING_TOKEN(0x0F60),
            option text = STRING_TOKEN(0x0E74), value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E75), value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E76), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E77), value = 3, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E78), value = 4, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E79), value = 5, flags = RESET_REQUIRED;
          endoneof;
        endif;

        oneof varid   = PCH_SETUP.PchPcieNonSnoopLatencyOverrideMode[16],
          prompt      = STRING_TOKEN (0x0EF9),
          help        = STRING_TOKEN (0x0F5E),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x09F8),   value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x158F),     value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        suppressif NOT ideqval PCH_SETUP.PchPcieNonSnoopLatencyOverrideMode[16] == 1;
          numeric varid = PCH_SETUP.PchPcieNonSnoopLatencyOverrideValue[16],
            prompt      = STRING_TOKEN(0x0EFC),
            help        = STRING_TOKEN(0x0F61),
            flags       = RESET_REQUIRED,
            minimum     = 0,
            maximum     = 1023,
            step        = 1,
            default     = 60,
          endnumeric;

          oneof varid   = PCH_SETUP.PchPcieNonSnoopLatencyOverrideMultiplier[16],
            prompt      = STRING_TOKEN(0x0EFD),
            help        = STRING_TOKEN(0x0F62),
            option text = STRING_TOKEN(0x0E74), value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E75), value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E76), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E77), value = 3, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E78), value = 4, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E79), value = 5, flags = RESET_REQUIRED;
          endoneof;
        endif;




        oneof varid  = PCH_SETUP.PchPcieForceLtrOverride[16],
          prompt      = STRING_TOKEN(0x0F50),
          help        = STRING_TOKEN(0x0F5C),
          option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
        endoneof;




      endif;

      subtitle text = STRING_TOKEN(0x0002);

      oneof varid   = PCH_SETUP.PchPcieLtrConfigLock[16],
        prompt   = STRING_TOKEN (0x0F73),
        help     = STRING_TOKEN (0x0F7F),
        option text = STRING_TOKEN(0x0004),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortPeerMemoryWriteEnable[16],
        prompt      = STRING_TOKEN(0x0DD4),
        help        = STRING_TOKEN(0x0DE0),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

    endif;
  endform; 
#line 2569 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"



#line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"

































  form formid = 5109,
    title     = STRING_TOKEN(0x1055);

    oneof varid   = PCH_SETUP.PcieRootPortEn[17],
      prompt      = STRING_TOKEN(0x0C75),
      help        = STRING_TOKEN(0x0C80),
      option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    suppressif ideqval PCH_SETUP.PcieRootPortEn[17] == 0x0;
      grayoutif ideqval PCH_SETUP.PcieRootPortHPE[17] == 1;
        oneof varid   = PCH_SETUP.PcieRootPortSI[17],
          prompt      = STRING_TOKEN(0x1120),
          help        = STRING_TOKEN(0x112B),
          option text = STRING_TOKEN(0x112C), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x112D), value = 1, flags = DEFAULT | RESET_REQUIRED;
        endoneof;
      endif;

       
        oneof varid   = PCH_SETUP.PcieRootPortAspm[17],
          questionid  = 5617,
          prompt      = STRING_TOKEN(0x0B7E),
          help        = STRING_TOKEN(0x0BA5),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;



#line 64 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"
          option text = STRING_TOKEN(0x0BA7), value = 2, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x158F), value = 4, flags = RESET_REQUIRED;
#line 67 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"
        endoneof;

        oneof varid   = PCH_SETUP.PcieRootPortL1SubStates[17],
          questionid  = 5645,
          prompt      = STRING_TOKEN(0x0BBA),
          help        = STRING_TOKEN(0x0BC5),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0BC6), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0BC7), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
       

      oneof varid   = PCH_SETUP.PcieRootPortL1Low[17],
        prompt      = STRING_TOKEN(0x0BC8),
        help        = STRING_TOKEN(0x0BC9),
        option text = STRING_TOKEN(0x0004), value = 0, flags =  RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortACS[17],
        prompt      = STRING_TOKEN(0x0BDB),
        help        = STRING_TOKEN(0x0BE6),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

       
        oneof varid   = PCH_SETUP.PcieRootPortPTM[17],
          questionid  = 5673,
          prompt      = STRING_TOKEN(0x0BF9),
          help        = STRING_TOKEN(0x0C04),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
       

      oneof varid   = PCH_SETUP.PcieRootPortDPC[17],
        prompt      = STRING_TOKEN(0x0C16),
        help        = STRING_TOKEN(0x0C21),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortEDPC[17],
        prompt      = STRING_TOKEN(0x0C33),
        help        = STRING_TOKEN(0x0C3E),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortURE[17],
        prompt      = STRING_TOKEN(0x0C92),
        help        = STRING_TOKEN(0x0C9D),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortFEE[17],
        prompt      = STRING_TOKEN(0x0CAF),
        help        = STRING_TOKEN(0x0CBA),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortNFE[17],
        prompt      = STRING_TOKEN(0x0CCC),
        help        = STRING_TOKEN(0x0CD7),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortCEE[17],
        prompt      = STRING_TOKEN(0x0CE9),
        help        = STRING_TOKEN(0x0CF4),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSFE[17],
        prompt      = STRING_TOKEN(0x0D23),
        help        = STRING_TOKEN(0x0D2E),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSNE[17],
        prompt      = STRING_TOKEN(0x0D40),
        help        = STRING_TOKEN(0x0D4B),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSCE[17],
        prompt      = STRING_TOKEN(0x0D5D),
        help        = STRING_TOKEN(0x0D68),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortPMCE[17],
        prompt      = STRING_TOKEN(0x0D7A),
        help        = STRING_TOKEN(0x0D85),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      grayoutif ideqval PCH_SETUP.PcieRootPortSI[17] == 0;
        oneof varid   = PCH_SETUP.PcieRootPortHPE[17],
          prompt      = STRING_TOKEN(0x0D97),
          help        = STRING_TOKEN(0x0DA2),
          option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
        endoneof;
      endif;

      oneof varid   = PCH_SETUP.PcieRootPortAER[17],
        prompt      = STRING_TOKEN(0x0DB4),
        help        = STRING_TOKEN(0x0DBF),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSpeed[17],
        prompt   = STRING_TOKEN (0x0C54),
        help     = STRING_TOKEN (0x0C5F),
        option text = STRING_TOKEN (0x0006), value = 0, flags = RESET_REQUIRED | DEFAULT;
        option text = STRING_TOKEN (0x0C60), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x0C61), value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x0C62), value = 3, flags = RESET_REQUIRED;

        option text = STRING_TOKEN (0x0C63), value = 4, flags = RESET_REQUIRED;
#line 199 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortTHS[17],
        prompt      = STRING_TOKEN(0x0DF4),
        help        = STRING_TOKEN(0x0DFF),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      numeric varid = PCH_SETUP.PcieDetectTimeoutMs[17],
        prompt      = STRING_TOKEN (0x0E11),
        help        = STRING_TOKEN (0x0E1C),
        minimum     = 0,
        maximum     = 65535,
        step        = 1,
        default     = 0,
      endnumeric;

      numeric varid = PCH_SETUP.PcieExtraBusRsvd[17],
        prompt      = STRING_TOKEN (0x0E2E),
        help        = STRING_TOKEN (0x0E39),
        minimum     = 0,
        maximum     = 7,
        step        = 1,    
        default     = 0,    
      endnumeric;

      numeric varid = PCH_SETUP.PcieMemRsvd[17],
        prompt      = STRING_TOKEN (0x0E4B),
        help        = STRING_TOKEN (0x0E56),
        minimum     = 1,
        maximum     = 20,
        step        = 1,    
        default     = 10,   
      endnumeric;

      numeric varid = PCH_SETUP.PcieIoRsvd[17],
        prompt      = STRING_TOKEN (0x0E68),
        help        = STRING_TOKEN (0x0E73),
        minimum     = 4,
        maximum     = 20,
        step        = 4,    
        default     = 4,    
      endnumeric;

      subtitle text = STRING_TOKEN(0x0002);

      subtitle text = STRING_TOKEN(0x0E7A);
      oneof varid   = PCH_SETUP.PchPcieLtrEnable[17],
        prompt   = STRING_TOKEN (0x0E8C),
        help     = STRING_TOKEN (0x0E97),
        option text = STRING_TOKEN(0x0004),  value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      suppressif ideqval PCH_SETUP.PchPcieLtrEnable[17] == 0;
        oneof varid   = PCH_SETUP.PchPcieSnoopLatencyOverrideMode[17],
          prompt      = STRING_TOKEN (0x0EFE),
          help        = STRING_TOKEN (0x0F5D),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x09F8),   value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x158F),     value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        suppressif NOT ideqval PCH_SETUP.PchPcieSnoopLatencyOverrideMode[17] == 1;
          numeric varid = PCH_SETUP.PchPcieSnoopLatencyOverrideValue[17],
            prompt      = STRING_TOKEN(0x0F00),
            help        = STRING_TOKEN(0x0F5F),
            flags       = RESET_REQUIRED,
            minimum     = 0,
            maximum     = 1023,
            step        = 1,
            default     = 60,
          endnumeric;

          oneof varid   = PCH_SETUP.PchPcieSnoopLatencyOverrideMultiplier[17],
            prompt      = STRING_TOKEN(0x0F01),
            help        = STRING_TOKEN(0x0F60),
            option text = STRING_TOKEN(0x0E74), value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E75), value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E76), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E77), value = 3, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E78), value = 4, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E79), value = 5, flags = RESET_REQUIRED;
          endoneof;
        endif;

        oneof varid   = PCH_SETUP.PchPcieNonSnoopLatencyOverrideMode[17],
          prompt      = STRING_TOKEN (0x0EFF),
          help        = STRING_TOKEN (0x0F5E),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x09F8),   value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x158F),     value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        suppressif NOT ideqval PCH_SETUP.PchPcieNonSnoopLatencyOverrideMode[17] == 1;
          numeric varid = PCH_SETUP.PchPcieNonSnoopLatencyOverrideValue[17],
            prompt      = STRING_TOKEN(0x0F02),
            help        = STRING_TOKEN(0x0F61),
            flags       = RESET_REQUIRED,
            minimum     = 0,
            maximum     = 1023,
            step        = 1,
            default     = 60,
          endnumeric;

          oneof varid   = PCH_SETUP.PchPcieNonSnoopLatencyOverrideMultiplier[17],
            prompt      = STRING_TOKEN(0x0F03),
            help        = STRING_TOKEN(0x0F62),
            option text = STRING_TOKEN(0x0E74), value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E75), value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E76), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E77), value = 3, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E78), value = 4, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E79), value = 5, flags = RESET_REQUIRED;
          endoneof;
        endif;




        oneof varid  = PCH_SETUP.PchPcieForceLtrOverride[17],
          prompt      = STRING_TOKEN(0x0F51),
          help        = STRING_TOKEN(0x0F5C),
          option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
        endoneof;




      endif;

      subtitle text = STRING_TOKEN(0x0002);

      oneof varid   = PCH_SETUP.PchPcieLtrConfigLock[17],
        prompt   = STRING_TOKEN (0x0F74),
        help     = STRING_TOKEN (0x0F7F),
        option text = STRING_TOKEN(0x0004),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortPeerMemoryWriteEnable[17],
        prompt      = STRING_TOKEN(0x0DD5),
        help        = STRING_TOKEN(0x0DE0),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

    endif;
  endform; 
#line 2573 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"



#line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"

































  form formid = 5110,
    title     = STRING_TOKEN(0x1056);

    oneof varid   = PCH_SETUP.PcieRootPortEn[18],
      prompt      = STRING_TOKEN(0x0C76),
      help        = STRING_TOKEN(0x0C80),
      option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    suppressif ideqval PCH_SETUP.PcieRootPortEn[18] == 0x0;
      grayoutif ideqval PCH_SETUP.PcieRootPortHPE[18] == 1;
        oneof varid   = PCH_SETUP.PcieRootPortSI[18],
          prompt      = STRING_TOKEN(0x1121),
          help        = STRING_TOKEN(0x112B),
          option text = STRING_TOKEN(0x112C), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x112D), value = 1, flags = DEFAULT | RESET_REQUIRED;
        endoneof;
      endif;

       
        oneof varid   = PCH_SETUP.PcieRootPortAspm[18],
          questionid  = 5618,
          prompt      = STRING_TOKEN(0x0B7F),
          help        = STRING_TOKEN(0x0BA5),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;



#line 64 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"
          option text = STRING_TOKEN(0x0BA7), value = 2, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x158F), value = 4, flags = RESET_REQUIRED;
#line 67 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"
        endoneof;

        oneof varid   = PCH_SETUP.PcieRootPortL1SubStates[18],
          questionid  = 5646,
          prompt      = STRING_TOKEN(0x0BBB),
          help        = STRING_TOKEN(0x0BC5),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0BC6), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0BC7), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
       

      oneof varid   = PCH_SETUP.PcieRootPortL1Low[18],
        prompt      = STRING_TOKEN(0x0BC8),
        help        = STRING_TOKEN(0x0BC9),
        option text = STRING_TOKEN(0x0004), value = 0, flags =  RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortACS[18],
        prompt      = STRING_TOKEN(0x0BDC),
        help        = STRING_TOKEN(0x0BE6),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

       
        oneof varid   = PCH_SETUP.PcieRootPortPTM[18],
          questionid  = 5674,
          prompt      = STRING_TOKEN(0x0BFA),
          help        = STRING_TOKEN(0x0C04),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
       

      oneof varid   = PCH_SETUP.PcieRootPortDPC[18],
        prompt      = STRING_TOKEN(0x0C17),
        help        = STRING_TOKEN(0x0C21),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortEDPC[18],
        prompt      = STRING_TOKEN(0x0C34),
        help        = STRING_TOKEN(0x0C3E),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortURE[18],
        prompt      = STRING_TOKEN(0x0C93),
        help        = STRING_TOKEN(0x0C9D),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortFEE[18],
        prompt      = STRING_TOKEN(0x0CB0),
        help        = STRING_TOKEN(0x0CBA),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortNFE[18],
        prompt      = STRING_TOKEN(0x0CCD),
        help        = STRING_TOKEN(0x0CD7),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortCEE[18],
        prompt      = STRING_TOKEN(0x0CEA),
        help        = STRING_TOKEN(0x0CF4),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSFE[18],
        prompt      = STRING_TOKEN(0x0D24),
        help        = STRING_TOKEN(0x0D2E),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSNE[18],
        prompt      = STRING_TOKEN(0x0D41),
        help        = STRING_TOKEN(0x0D4B),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSCE[18],
        prompt      = STRING_TOKEN(0x0D5E),
        help        = STRING_TOKEN(0x0D68),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortPMCE[18],
        prompt      = STRING_TOKEN(0x0D7B),
        help        = STRING_TOKEN(0x0D85),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      grayoutif ideqval PCH_SETUP.PcieRootPortSI[18] == 0;
        oneof varid   = PCH_SETUP.PcieRootPortHPE[18],
          prompt      = STRING_TOKEN(0x0D98),
          help        = STRING_TOKEN(0x0DA2),
          option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
        endoneof;
      endif;

      oneof varid   = PCH_SETUP.PcieRootPortAER[18],
        prompt      = STRING_TOKEN(0x0DB5),
        help        = STRING_TOKEN(0x0DBF),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSpeed[18],
        prompt   = STRING_TOKEN (0x0C55),
        help     = STRING_TOKEN (0x0C5F),
        option text = STRING_TOKEN (0x0006), value = 0, flags = RESET_REQUIRED | DEFAULT;
        option text = STRING_TOKEN (0x0C60), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x0C61), value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x0C62), value = 3, flags = RESET_REQUIRED;

        option text = STRING_TOKEN (0x0C63), value = 4, flags = RESET_REQUIRED;
#line 199 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortTHS[18],
        prompt      = STRING_TOKEN(0x0DF5),
        help        = STRING_TOKEN(0x0DFF),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      numeric varid = PCH_SETUP.PcieDetectTimeoutMs[18],
        prompt      = STRING_TOKEN (0x0E12),
        help        = STRING_TOKEN (0x0E1C),
        minimum     = 0,
        maximum     = 65535,
        step        = 1,
        default     = 0,
      endnumeric;

      numeric varid = PCH_SETUP.PcieExtraBusRsvd[18],
        prompt      = STRING_TOKEN (0x0E2F),
        help        = STRING_TOKEN (0x0E39),
        minimum     = 0,
        maximum     = 7,
        step        = 1,    
        default     = 0,    
      endnumeric;

      numeric varid = PCH_SETUP.PcieMemRsvd[18],
        prompt      = STRING_TOKEN (0x0E4C),
        help        = STRING_TOKEN (0x0E56),
        minimum     = 1,
        maximum     = 20,
        step        = 1,    
        default     = 10,   
      endnumeric;

      numeric varid = PCH_SETUP.PcieIoRsvd[18],
        prompt      = STRING_TOKEN (0x0E69),
        help        = STRING_TOKEN (0x0E73),
        minimum     = 4,
        maximum     = 20,
        step        = 4,    
        default     = 4,    
      endnumeric;

      subtitle text = STRING_TOKEN(0x0002);

      subtitle text = STRING_TOKEN(0x0E7A);
      oneof varid   = PCH_SETUP.PchPcieLtrEnable[18],
        prompt   = STRING_TOKEN (0x0E8D),
        help     = STRING_TOKEN (0x0E97),
        option text = STRING_TOKEN(0x0004),  value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      suppressif ideqval PCH_SETUP.PchPcieLtrEnable[18] == 0;
        oneof varid   = PCH_SETUP.PchPcieSnoopLatencyOverrideMode[18],
          prompt      = STRING_TOKEN (0x0F04),
          help        = STRING_TOKEN (0x0F5D),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x09F8),   value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x158F),     value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        suppressif NOT ideqval PCH_SETUP.PchPcieSnoopLatencyOverrideMode[18] == 1;
          numeric varid = PCH_SETUP.PchPcieSnoopLatencyOverrideValue[18],
            prompt      = STRING_TOKEN(0x0F06),
            help        = STRING_TOKEN(0x0F5F),
            flags       = RESET_REQUIRED,
            minimum     = 0,
            maximum     = 1023,
            step        = 1,
            default     = 60,
          endnumeric;

          oneof varid   = PCH_SETUP.PchPcieSnoopLatencyOverrideMultiplier[18],
            prompt      = STRING_TOKEN(0x0F07),
            help        = STRING_TOKEN(0x0F60),
            option text = STRING_TOKEN(0x0E74), value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E75), value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E76), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E77), value = 3, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E78), value = 4, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E79), value = 5, flags = RESET_REQUIRED;
          endoneof;
        endif;

        oneof varid   = PCH_SETUP.PchPcieNonSnoopLatencyOverrideMode[18],
          prompt      = STRING_TOKEN (0x0F05),
          help        = STRING_TOKEN (0x0F5E),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x09F8),   value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x158F),     value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        suppressif NOT ideqval PCH_SETUP.PchPcieNonSnoopLatencyOverrideMode[18] == 1;
          numeric varid = PCH_SETUP.PchPcieNonSnoopLatencyOverrideValue[18],
            prompt      = STRING_TOKEN(0x0F08),
            help        = STRING_TOKEN(0x0F61),
            flags       = RESET_REQUIRED,
            minimum     = 0,
            maximum     = 1023,
            step        = 1,
            default     = 60,
          endnumeric;

          oneof varid   = PCH_SETUP.PchPcieNonSnoopLatencyOverrideMultiplier[18],
            prompt      = STRING_TOKEN(0x0F09),
            help        = STRING_TOKEN(0x0F62),
            option text = STRING_TOKEN(0x0E74), value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E75), value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E76), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E77), value = 3, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E78), value = 4, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E79), value = 5, flags = RESET_REQUIRED;
          endoneof;
        endif;




        oneof varid  = PCH_SETUP.PchPcieForceLtrOverride[18],
          prompt      = STRING_TOKEN(0x0F52),
          help        = STRING_TOKEN(0x0F5C),
          option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
        endoneof;




      endif;

      subtitle text = STRING_TOKEN(0x0002);

      oneof varid   = PCH_SETUP.PchPcieLtrConfigLock[18],
        prompt   = STRING_TOKEN (0x0F75),
        help     = STRING_TOKEN (0x0F7F),
        option text = STRING_TOKEN(0x0004),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortPeerMemoryWriteEnable[18],
        prompt      = STRING_TOKEN(0x0DD6),
        help        = STRING_TOKEN(0x0DE0),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

    endif;
  endform; 
#line 2577 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"



#line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"

































  form formid = 5111,
    title     = STRING_TOKEN(0x1057);

    oneof varid   = PCH_SETUP.PcieRootPortEn[19],
      prompt      = STRING_TOKEN(0x0C77),
      help        = STRING_TOKEN(0x0C80),
      option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    suppressif ideqval PCH_SETUP.PcieRootPortEn[19] == 0x0;
      grayoutif ideqval PCH_SETUP.PcieRootPortHPE[19] == 1;
        oneof varid   = PCH_SETUP.PcieRootPortSI[19],
          prompt      = STRING_TOKEN(0x1122),
          help        = STRING_TOKEN(0x112B),
          option text = STRING_TOKEN(0x112C), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x112D), value = 1, flags = DEFAULT | RESET_REQUIRED;
        endoneof;
      endif;

       
        oneof varid   = PCH_SETUP.PcieRootPortAspm[19],
          questionid  = 5619,
          prompt      = STRING_TOKEN(0x0B80),
          help        = STRING_TOKEN(0x0BA5),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;



#line 64 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"
          option text = STRING_TOKEN(0x0BA7), value = 2, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x158F), value = 4, flags = RESET_REQUIRED;
#line 67 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"
        endoneof;

        oneof varid   = PCH_SETUP.PcieRootPortL1SubStates[19],
          questionid  = 5647,
          prompt      = STRING_TOKEN(0x0BBC),
          help        = STRING_TOKEN(0x0BC5),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0BC6), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0BC7), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
       

      oneof varid   = PCH_SETUP.PcieRootPortL1Low[19],
        prompt      = STRING_TOKEN(0x0BC8),
        help        = STRING_TOKEN(0x0BC9),
        option text = STRING_TOKEN(0x0004), value = 0, flags =  RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortACS[19],
        prompt      = STRING_TOKEN(0x0BDD),
        help        = STRING_TOKEN(0x0BE6),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

       
        oneof varid   = PCH_SETUP.PcieRootPortPTM[19],
          questionid  = 5675,
          prompt      = STRING_TOKEN(0x0BFB),
          help        = STRING_TOKEN(0x0C04),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
       

      oneof varid   = PCH_SETUP.PcieRootPortDPC[19],
        prompt      = STRING_TOKEN(0x0C18),
        help        = STRING_TOKEN(0x0C21),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortEDPC[19],
        prompt      = STRING_TOKEN(0x0C35),
        help        = STRING_TOKEN(0x0C3E),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortURE[19],
        prompt      = STRING_TOKEN(0x0C94),
        help        = STRING_TOKEN(0x0C9D),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortFEE[19],
        prompt      = STRING_TOKEN(0x0CB1),
        help        = STRING_TOKEN(0x0CBA),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortNFE[19],
        prompt      = STRING_TOKEN(0x0CCE),
        help        = STRING_TOKEN(0x0CD7),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortCEE[19],
        prompt      = STRING_TOKEN(0x0CEB),
        help        = STRING_TOKEN(0x0CF4),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSFE[19],
        prompt      = STRING_TOKEN(0x0D25),
        help        = STRING_TOKEN(0x0D2E),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSNE[19],
        prompt      = STRING_TOKEN(0x0D42),
        help        = STRING_TOKEN(0x0D4B),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSCE[19],
        prompt      = STRING_TOKEN(0x0D5F),
        help        = STRING_TOKEN(0x0D68),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortPMCE[19],
        prompt      = STRING_TOKEN(0x0D7C),
        help        = STRING_TOKEN(0x0D85),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      grayoutif ideqval PCH_SETUP.PcieRootPortSI[19] == 0;
        oneof varid   = PCH_SETUP.PcieRootPortHPE[19],
          prompt      = STRING_TOKEN(0x0D99),
          help        = STRING_TOKEN(0x0DA2),
          option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
        endoneof;
      endif;

      oneof varid   = PCH_SETUP.PcieRootPortAER[19],
        prompt      = STRING_TOKEN(0x0DB6),
        help        = STRING_TOKEN(0x0DBF),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSpeed[19],
        prompt   = STRING_TOKEN (0x0C56),
        help     = STRING_TOKEN (0x0C5F),
        option text = STRING_TOKEN (0x0006), value = 0, flags = RESET_REQUIRED | DEFAULT;
        option text = STRING_TOKEN (0x0C60), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x0C61), value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x0C62), value = 3, flags = RESET_REQUIRED;

        option text = STRING_TOKEN (0x0C63), value = 4, flags = RESET_REQUIRED;
#line 199 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortTHS[19],
        prompt      = STRING_TOKEN(0x0DF6),
        help        = STRING_TOKEN(0x0DFF),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      numeric varid = PCH_SETUP.PcieDetectTimeoutMs[19],
        prompt      = STRING_TOKEN (0x0E13),
        help        = STRING_TOKEN (0x0E1C),
        minimum     = 0,
        maximum     = 65535,
        step        = 1,
        default     = 0,
      endnumeric;

      numeric varid = PCH_SETUP.PcieExtraBusRsvd[19],
        prompt      = STRING_TOKEN (0x0E30),
        help        = STRING_TOKEN (0x0E39),
        minimum     = 0,
        maximum     = 7,
        step        = 1,    
        default     = 0,    
      endnumeric;

      numeric varid = PCH_SETUP.PcieMemRsvd[19],
        prompt      = STRING_TOKEN (0x0E4D),
        help        = STRING_TOKEN (0x0E56),
        minimum     = 1,
        maximum     = 20,
        step        = 1,    
        default     = 10,   
      endnumeric;

      numeric varid = PCH_SETUP.PcieIoRsvd[19],
        prompt      = STRING_TOKEN (0x0E6A),
        help        = STRING_TOKEN (0x0E73),
        minimum     = 4,
        maximum     = 20,
        step        = 4,    
        default     = 4,    
      endnumeric;

      subtitle text = STRING_TOKEN(0x0002);

      subtitle text = STRING_TOKEN(0x0E7A);
      oneof varid   = PCH_SETUP.PchPcieLtrEnable[19],
        prompt   = STRING_TOKEN (0x0E8E),
        help     = STRING_TOKEN (0x0E97),
        option text = STRING_TOKEN(0x0004),  value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      suppressif ideqval PCH_SETUP.PchPcieLtrEnable[19] == 0;
        oneof varid   = PCH_SETUP.PchPcieSnoopLatencyOverrideMode[19],
          prompt      = STRING_TOKEN (0x0F0A),
          help        = STRING_TOKEN (0x0F5D),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x09F8),   value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x158F),     value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        suppressif NOT ideqval PCH_SETUP.PchPcieSnoopLatencyOverrideMode[19] == 1;
          numeric varid = PCH_SETUP.PchPcieSnoopLatencyOverrideValue[19],
            prompt      = STRING_TOKEN(0x0F0C),
            help        = STRING_TOKEN(0x0F5F),
            flags       = RESET_REQUIRED,
            minimum     = 0,
            maximum     = 1023,
            step        = 1,
            default     = 60,
          endnumeric;

          oneof varid   = PCH_SETUP.PchPcieSnoopLatencyOverrideMultiplier[19],
            prompt      = STRING_TOKEN(0x0F0D),
            help        = STRING_TOKEN(0x0F60),
            option text = STRING_TOKEN(0x0E74), value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E75), value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E76), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E77), value = 3, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E78), value = 4, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E79), value = 5, flags = RESET_REQUIRED;
          endoneof;
        endif;

        oneof varid   = PCH_SETUP.PchPcieNonSnoopLatencyOverrideMode[19],
          prompt      = STRING_TOKEN (0x0F0B),
          help        = STRING_TOKEN (0x0F5E),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x09F8),   value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x158F),     value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        suppressif NOT ideqval PCH_SETUP.PchPcieNonSnoopLatencyOverrideMode[19] == 1;
          numeric varid = PCH_SETUP.PchPcieNonSnoopLatencyOverrideValue[19],
            prompt      = STRING_TOKEN(0x0F0E),
            help        = STRING_TOKEN(0x0F61),
            flags       = RESET_REQUIRED,
            minimum     = 0,
            maximum     = 1023,
            step        = 1,
            default     = 60,
          endnumeric;

          oneof varid   = PCH_SETUP.PchPcieNonSnoopLatencyOverrideMultiplier[19],
            prompt      = STRING_TOKEN(0x0F0F),
            help        = STRING_TOKEN(0x0F62),
            option text = STRING_TOKEN(0x0E74), value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E75), value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E76), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E77), value = 3, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E78), value = 4, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E79), value = 5, flags = RESET_REQUIRED;
          endoneof;
        endif;




        oneof varid  = PCH_SETUP.PchPcieForceLtrOverride[19],
          prompt      = STRING_TOKEN(0x0F53),
          help        = STRING_TOKEN(0x0F5C),
          option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
        endoneof;




      endif;

      subtitle text = STRING_TOKEN(0x0002);

      oneof varid   = PCH_SETUP.PchPcieLtrConfigLock[19],
        prompt   = STRING_TOKEN (0x0F76),
        help     = STRING_TOKEN (0x0F7F),
        option text = STRING_TOKEN(0x0004),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortPeerMemoryWriteEnable[19],
        prompt      = STRING_TOKEN(0x0DD7),
        help        = STRING_TOKEN(0x0DE0),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

    endif;
  endform; 
#line 2581 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"



#line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"

































  form formid = 5112,
    title     = STRING_TOKEN(0x1058);

    oneof varid   = PCH_SETUP.PcieRootPortEn[20],
      prompt      = STRING_TOKEN(0x0C78),
      help        = STRING_TOKEN(0x0C80),
      option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    suppressif ideqval PCH_SETUP.PcieRootPortEn[20] == 0x0;
      grayoutif ideqval PCH_SETUP.PcieRootPortHPE[20] == 1;
        oneof varid   = PCH_SETUP.PcieRootPortSI[20],
          prompt      = STRING_TOKEN(0x1123),
          help        = STRING_TOKEN(0x112B),
          option text = STRING_TOKEN(0x112C), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x112D), value = 1, flags = DEFAULT | RESET_REQUIRED;
        endoneof;
      endif;

       
        oneof varid   = PCH_SETUP.PcieRootPortAspm[20],
          questionid  = 5620,
          prompt      = STRING_TOKEN(0x0B81),
          help        = STRING_TOKEN(0x0BA5),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;



#line 64 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"
          option text = STRING_TOKEN(0x0BA7), value = 2, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x158F), value = 4, flags = RESET_REQUIRED;
#line 67 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"
        endoneof;

        oneof varid   = PCH_SETUP.PcieRootPortL1SubStates[20],
          questionid  = 5648,
          prompt      = STRING_TOKEN(0x0BBD),
          help        = STRING_TOKEN(0x0BC5),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0BC6), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0BC7), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
       

      oneof varid   = PCH_SETUP.PcieRootPortL1Low[20],
        prompt      = STRING_TOKEN(0x0BC8),
        help        = STRING_TOKEN(0x0BC9),
        option text = STRING_TOKEN(0x0004), value = 0, flags =  RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortACS[20],
        prompt      = STRING_TOKEN(0x0BDE),
        help        = STRING_TOKEN(0x0BE6),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

       
        oneof varid   = PCH_SETUP.PcieRootPortPTM[20],
          questionid  = 5676,
          prompt      = STRING_TOKEN(0x0BFC),
          help        = STRING_TOKEN(0x0C04),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
       

      oneof varid   = PCH_SETUP.PcieRootPortDPC[20],
        prompt      = STRING_TOKEN(0x0C19),
        help        = STRING_TOKEN(0x0C21),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortEDPC[20],
        prompt      = STRING_TOKEN(0x0C36),
        help        = STRING_TOKEN(0x0C3E),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortURE[20],
        prompt      = STRING_TOKEN(0x0C95),
        help        = STRING_TOKEN(0x0C9D),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortFEE[20],
        prompt      = STRING_TOKEN(0x0CB2),
        help        = STRING_TOKEN(0x0CBA),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortNFE[20],
        prompt      = STRING_TOKEN(0x0CCF),
        help        = STRING_TOKEN(0x0CD7),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortCEE[20],
        prompt      = STRING_TOKEN(0x0CEC),
        help        = STRING_TOKEN(0x0CF4),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSFE[20],
        prompt      = STRING_TOKEN(0x0D26),
        help        = STRING_TOKEN(0x0D2E),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSNE[20],
        prompt      = STRING_TOKEN(0x0D43),
        help        = STRING_TOKEN(0x0D4B),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSCE[20],
        prompt      = STRING_TOKEN(0x0D60),
        help        = STRING_TOKEN(0x0D68),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortPMCE[20],
        prompt      = STRING_TOKEN(0x0D7D),
        help        = STRING_TOKEN(0x0D85),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      grayoutif ideqval PCH_SETUP.PcieRootPortSI[20] == 0;
        oneof varid   = PCH_SETUP.PcieRootPortHPE[20],
          prompt      = STRING_TOKEN(0x0D9A),
          help        = STRING_TOKEN(0x0DA2),
          option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
        endoneof;
      endif;

      oneof varid   = PCH_SETUP.PcieRootPortAER[20],
        prompt      = STRING_TOKEN(0x0DB7),
        help        = STRING_TOKEN(0x0DBF),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSpeed[20],
        prompt   = STRING_TOKEN (0x0C57),
        help     = STRING_TOKEN (0x0C5F),
        option text = STRING_TOKEN (0x0006), value = 0, flags = RESET_REQUIRED | DEFAULT;
        option text = STRING_TOKEN (0x0C60), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x0C61), value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x0C62), value = 3, flags = RESET_REQUIRED;

        option text = STRING_TOKEN (0x0C63), value = 4, flags = RESET_REQUIRED;
#line 199 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortTHS[20],
        prompt      = STRING_TOKEN(0x0DF7),
        help        = STRING_TOKEN(0x0DFF),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      numeric varid = PCH_SETUP.PcieDetectTimeoutMs[20],
        prompt      = STRING_TOKEN (0x0E14),
        help        = STRING_TOKEN (0x0E1C),
        minimum     = 0,
        maximum     = 65535,
        step        = 1,
        default     = 0,
      endnumeric;

      numeric varid = PCH_SETUP.PcieExtraBusRsvd[20],
        prompt      = STRING_TOKEN (0x0E31),
        help        = STRING_TOKEN (0x0E39),
        minimum     = 0,
        maximum     = 7,
        step        = 1,    
        default     = 0,    
      endnumeric;

      numeric varid = PCH_SETUP.PcieMemRsvd[20],
        prompt      = STRING_TOKEN (0x0E4E),
        help        = STRING_TOKEN (0x0E56),
        minimum     = 1,
        maximum     = 20,
        step        = 1,    
        default     = 10,   
      endnumeric;

      numeric varid = PCH_SETUP.PcieIoRsvd[20],
        prompt      = STRING_TOKEN (0x0E6B),
        help        = STRING_TOKEN (0x0E73),
        minimum     = 4,
        maximum     = 20,
        step        = 4,    
        default     = 4,    
      endnumeric;

      subtitle text = STRING_TOKEN(0x0002);

      subtitle text = STRING_TOKEN(0x0E7A);
      oneof varid   = PCH_SETUP.PchPcieLtrEnable[20],
        prompt   = STRING_TOKEN (0x0E8F),
        help     = STRING_TOKEN (0x0E97),
        option text = STRING_TOKEN(0x0004),  value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      suppressif ideqval PCH_SETUP.PchPcieLtrEnable[20] == 0;
        oneof varid   = PCH_SETUP.PchPcieSnoopLatencyOverrideMode[20],
          prompt      = STRING_TOKEN (0x0F10),
          help        = STRING_TOKEN (0x0F5D),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x09F8),   value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x158F),     value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        suppressif NOT ideqval PCH_SETUP.PchPcieSnoopLatencyOverrideMode[20] == 1;
          numeric varid = PCH_SETUP.PchPcieSnoopLatencyOverrideValue[20],
            prompt      = STRING_TOKEN(0x0F12),
            help        = STRING_TOKEN(0x0F5F),
            flags       = RESET_REQUIRED,
            minimum     = 0,
            maximum     = 1023,
            step        = 1,
            default     = 60,
          endnumeric;

          oneof varid   = PCH_SETUP.PchPcieSnoopLatencyOverrideMultiplier[20],
            prompt      = STRING_TOKEN(0x0F13),
            help        = STRING_TOKEN(0x0F60),
            option text = STRING_TOKEN(0x0E74), value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E75), value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E76), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E77), value = 3, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E78), value = 4, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E79), value = 5, flags = RESET_REQUIRED;
          endoneof;
        endif;

        oneof varid   = PCH_SETUP.PchPcieNonSnoopLatencyOverrideMode[20],
          prompt      = STRING_TOKEN (0x0F11),
          help        = STRING_TOKEN (0x0F5E),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x09F8),   value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x158F),     value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        suppressif NOT ideqval PCH_SETUP.PchPcieNonSnoopLatencyOverrideMode[20] == 1;
          numeric varid = PCH_SETUP.PchPcieNonSnoopLatencyOverrideValue[20],
            prompt      = STRING_TOKEN(0x0F14),
            help        = STRING_TOKEN(0x0F61),
            flags       = RESET_REQUIRED,
            minimum     = 0,
            maximum     = 1023,
            step        = 1,
            default     = 60,
          endnumeric;

          oneof varid   = PCH_SETUP.PchPcieNonSnoopLatencyOverrideMultiplier[20],
            prompt      = STRING_TOKEN(0x0F15),
            help        = STRING_TOKEN(0x0F62),
            option text = STRING_TOKEN(0x0E74), value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E75), value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E76), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E77), value = 3, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E78), value = 4, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E79), value = 5, flags = RESET_REQUIRED;
          endoneof;
        endif;




        oneof varid  = PCH_SETUP.PchPcieForceLtrOverride[20],
          prompt      = STRING_TOKEN(0x0F54),
          help        = STRING_TOKEN(0x0F5C),
          option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
        endoneof;




      endif;

      subtitle text = STRING_TOKEN(0x0002);

      oneof varid   = PCH_SETUP.PchPcieLtrConfigLock[20],
        prompt   = STRING_TOKEN (0x0F77),
        help     = STRING_TOKEN (0x0F7F),
        option text = STRING_TOKEN(0x0004),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortPeerMemoryWriteEnable[20],
        prompt      = STRING_TOKEN(0x0DD8),
        help        = STRING_TOKEN(0x0DE0),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

    endif;
  endform; 
#line 2585 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"



#line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"

































  form formid = 5501,
    title     = STRING_TOKEN(0x1059);

    oneof varid   = PCH_SETUP.PcieRootPortEn[21],
      prompt      = STRING_TOKEN(0x0C79),
      help        = STRING_TOKEN(0x0C80),
      option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    suppressif ideqval PCH_SETUP.PcieRootPortEn[21] == 0x0;
      grayoutif ideqval PCH_SETUP.PcieRootPortHPE[21] == 1;
        oneof varid   = PCH_SETUP.PcieRootPortSI[21],
          prompt      = STRING_TOKEN(0x1124),
          help        = STRING_TOKEN(0x112B),
          option text = STRING_TOKEN(0x112C), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x112D), value = 1, flags = DEFAULT | RESET_REQUIRED;
        endoneof;
      endif;

       
        oneof varid   = PCH_SETUP.PcieRootPortAspm[21],
          questionid  = 5621,
          prompt      = STRING_TOKEN(0x0B82),
          help        = STRING_TOKEN(0x0BA5),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;



#line 64 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"
          option text = STRING_TOKEN(0x0BA7), value = 2, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x158F), value = 4, flags = RESET_REQUIRED;
#line 67 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"
        endoneof;

        oneof varid   = PCH_SETUP.PcieRootPortL1SubStates[21],
          questionid  = 5649,
          prompt      = STRING_TOKEN(0x0BBE),
          help        = STRING_TOKEN(0x0BC5),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0BC6), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0BC7), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
       

      oneof varid   = PCH_SETUP.PcieRootPortL1Low[21],
        prompt      = STRING_TOKEN(0x0BC8),
        help        = STRING_TOKEN(0x0BC9),
        option text = STRING_TOKEN(0x0004), value = 0, flags =  RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortACS[21],
        prompt      = STRING_TOKEN(0x0BDF),
        help        = STRING_TOKEN(0x0BE6),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

       
        oneof varid   = PCH_SETUP.PcieRootPortPTM[21],
          questionid  = 5677,
          prompt      = STRING_TOKEN(0x0BFD),
          help        = STRING_TOKEN(0x0C04),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
       

      oneof varid   = PCH_SETUP.PcieRootPortDPC[21],
        prompt      = STRING_TOKEN(0x0C1A),
        help        = STRING_TOKEN(0x0C21),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortEDPC[21],
        prompt      = STRING_TOKEN(0x0C37),
        help        = STRING_TOKEN(0x0C3E),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortURE[21],
        prompt      = STRING_TOKEN(0x0C96),
        help        = STRING_TOKEN(0x0C9D),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortFEE[21],
        prompt      = STRING_TOKEN(0x0CB3),
        help        = STRING_TOKEN(0x0CBA),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortNFE[21],
        prompt      = STRING_TOKEN(0x0CD0),
        help        = STRING_TOKEN(0x0CD7),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortCEE[21],
        prompt      = STRING_TOKEN(0x0CED),
        help        = STRING_TOKEN(0x0CF4),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSFE[21],
        prompt      = STRING_TOKEN(0x0D27),
        help        = STRING_TOKEN(0x0D2E),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSNE[21],
        prompt      = STRING_TOKEN(0x0D44),
        help        = STRING_TOKEN(0x0D4B),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSCE[21],
        prompt      = STRING_TOKEN(0x0D61),
        help        = STRING_TOKEN(0x0D68),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortPMCE[21],
        prompt      = STRING_TOKEN(0x0D7E),
        help        = STRING_TOKEN(0x0D85),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      grayoutif ideqval PCH_SETUP.PcieRootPortSI[21] == 0;
        oneof varid   = PCH_SETUP.PcieRootPortHPE[21],
          prompt      = STRING_TOKEN(0x0D9B),
          help        = STRING_TOKEN(0x0DA2),
          option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
        endoneof;
      endif;

      oneof varid   = PCH_SETUP.PcieRootPortAER[21],
        prompt      = STRING_TOKEN(0x0DB8),
        help        = STRING_TOKEN(0x0DBF),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSpeed[21],
        prompt   = STRING_TOKEN (0x0C58),
        help     = STRING_TOKEN (0x0C5F),
        option text = STRING_TOKEN (0x0006), value = 0, flags = RESET_REQUIRED | DEFAULT;
        option text = STRING_TOKEN (0x0C60), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x0C61), value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x0C62), value = 3, flags = RESET_REQUIRED;

        option text = STRING_TOKEN (0x0C63), value = 4, flags = RESET_REQUIRED;
#line 199 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortTHS[21],
        prompt      = STRING_TOKEN(0x0DF8),
        help        = STRING_TOKEN(0x0DFF),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      numeric varid = PCH_SETUP.PcieDetectTimeoutMs[21],
        prompt      = STRING_TOKEN (0x0E15),
        help        = STRING_TOKEN (0x0E1C),
        minimum     = 0,
        maximum     = 65535,
        step        = 1,
        default     = 0,
      endnumeric;

      numeric varid = PCH_SETUP.PcieExtraBusRsvd[21],
        prompt      = STRING_TOKEN (0x0E32),
        help        = STRING_TOKEN (0x0E39),
        minimum     = 0,
        maximum     = 7,
        step        = 1,    
        default     = 0,    
      endnumeric;

      numeric varid = PCH_SETUP.PcieMemRsvd[21],
        prompt      = STRING_TOKEN (0x0E4F),
        help        = STRING_TOKEN (0x0E56),
        minimum     = 1,
        maximum     = 20,
        step        = 1,    
        default     = 10,   
      endnumeric;

      numeric varid = PCH_SETUP.PcieIoRsvd[21],
        prompt      = STRING_TOKEN (0x0E6C),
        help        = STRING_TOKEN (0x0E73),
        minimum     = 4,
        maximum     = 20,
        step        = 4,    
        default     = 4,    
      endnumeric;

      subtitle text = STRING_TOKEN(0x0002);

      subtitle text = STRING_TOKEN(0x0E7A);
      oneof varid   = PCH_SETUP.PchPcieLtrEnable[21],
        prompt   = STRING_TOKEN (0x0E90),
        help     = STRING_TOKEN (0x0E97),
        option text = STRING_TOKEN(0x0004),  value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      suppressif ideqval PCH_SETUP.PchPcieLtrEnable[21] == 0;
        oneof varid   = PCH_SETUP.PchPcieSnoopLatencyOverrideMode[21],
          prompt      = STRING_TOKEN (0x0F16),
          help        = STRING_TOKEN (0x0F5D),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x09F8),   value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x158F),     value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        suppressif NOT ideqval PCH_SETUP.PchPcieSnoopLatencyOverrideMode[21] == 1;
          numeric varid = PCH_SETUP.PchPcieSnoopLatencyOverrideValue[21],
            prompt      = STRING_TOKEN(0x0F18),
            help        = STRING_TOKEN(0x0F5F),
            flags       = RESET_REQUIRED,
            minimum     = 0,
            maximum     = 1023,
            step        = 1,
            default     = 60,
          endnumeric;

          oneof varid   = PCH_SETUP.PchPcieSnoopLatencyOverrideMultiplier[21],
            prompt      = STRING_TOKEN(0x0F19),
            help        = STRING_TOKEN(0x0F60),
            option text = STRING_TOKEN(0x0E74), value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E75), value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E76), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E77), value = 3, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E78), value = 4, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E79), value = 5, flags = RESET_REQUIRED;
          endoneof;
        endif;

        oneof varid   = PCH_SETUP.PchPcieNonSnoopLatencyOverrideMode[21],
          prompt      = STRING_TOKEN (0x0F17),
          help        = STRING_TOKEN (0x0F5E),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x09F8),   value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x158F),     value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        suppressif NOT ideqval PCH_SETUP.PchPcieNonSnoopLatencyOverrideMode[21] == 1;
          numeric varid = PCH_SETUP.PchPcieNonSnoopLatencyOverrideValue[21],
            prompt      = STRING_TOKEN(0x0F1A),
            help        = STRING_TOKEN(0x0F61),
            flags       = RESET_REQUIRED,
            minimum     = 0,
            maximum     = 1023,
            step        = 1,
            default     = 60,
          endnumeric;

          oneof varid   = PCH_SETUP.PchPcieNonSnoopLatencyOverrideMultiplier[21],
            prompt      = STRING_TOKEN(0x0F1B),
            help        = STRING_TOKEN(0x0F62),
            option text = STRING_TOKEN(0x0E74), value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E75), value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E76), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E77), value = 3, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E78), value = 4, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E79), value = 5, flags = RESET_REQUIRED;
          endoneof;
        endif;




        oneof varid  = PCH_SETUP.PchPcieForceLtrOverride[21],
          prompt      = STRING_TOKEN(0x0F55),
          help        = STRING_TOKEN(0x0F5C),
          option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
        endoneof;




      endif;

      subtitle text = STRING_TOKEN(0x0002);

      oneof varid   = PCH_SETUP.PchPcieLtrConfigLock[21],
        prompt   = STRING_TOKEN (0x0F78),
        help     = STRING_TOKEN (0x0F7F),
        option text = STRING_TOKEN(0x0004),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortPeerMemoryWriteEnable[21],
        prompt      = STRING_TOKEN(0x0DD9),
        help        = STRING_TOKEN(0x0DE0),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

    endif;
  endform; 
#line 2589 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"



#line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"

































  form formid = 5502,
    title     = STRING_TOKEN(0x105A);

    oneof varid   = PCH_SETUP.PcieRootPortEn[22],
      prompt      = STRING_TOKEN(0x0C7A),
      help        = STRING_TOKEN(0x0C80),
      option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    suppressif ideqval PCH_SETUP.PcieRootPortEn[22] == 0x0;
      grayoutif ideqval PCH_SETUP.PcieRootPortHPE[22] == 1;
        oneof varid   = PCH_SETUP.PcieRootPortSI[22],
          prompt      = STRING_TOKEN(0x1125),
          help        = STRING_TOKEN(0x112B),
          option text = STRING_TOKEN(0x112C), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x112D), value = 1, flags = DEFAULT | RESET_REQUIRED;
        endoneof;
      endif;

       
        oneof varid   = PCH_SETUP.PcieRootPortAspm[22],
          questionid  = 5622,
          prompt      = STRING_TOKEN(0x0B83),
          help        = STRING_TOKEN(0x0BA5),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;



#line 64 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"
          option text = STRING_TOKEN(0x0BA7), value = 2, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x158F), value = 4, flags = RESET_REQUIRED;
#line 67 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"
        endoneof;

        oneof varid   = PCH_SETUP.PcieRootPortL1SubStates[22],
          questionid  = 5650,
          prompt      = STRING_TOKEN(0x0BBF),
          help        = STRING_TOKEN(0x0BC5),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0BC6), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0BC7), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
       

      oneof varid   = PCH_SETUP.PcieRootPortL1Low[22],
        prompt      = STRING_TOKEN(0x0BC8),
        help        = STRING_TOKEN(0x0BC9),
        option text = STRING_TOKEN(0x0004), value = 0, flags =  RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortACS[22],
        prompt      = STRING_TOKEN(0x0BE0),
        help        = STRING_TOKEN(0x0BE6),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

       
        oneof varid   = PCH_SETUP.PcieRootPortPTM[22],
          questionid  = 5678,
          prompt      = STRING_TOKEN(0x0BFE),
          help        = STRING_TOKEN(0x0C04),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
       

      oneof varid   = PCH_SETUP.PcieRootPortDPC[22],
        prompt      = STRING_TOKEN(0x0C1B),
        help        = STRING_TOKEN(0x0C21),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortEDPC[22],
        prompt      = STRING_TOKEN(0x0C38),
        help        = STRING_TOKEN(0x0C3E),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortURE[22],
        prompt      = STRING_TOKEN(0x0C97),
        help        = STRING_TOKEN(0x0C9D),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortFEE[22],
        prompt      = STRING_TOKEN(0x0CB4),
        help        = STRING_TOKEN(0x0CBA),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortNFE[22],
        prompt      = STRING_TOKEN(0x0CD1),
        help        = STRING_TOKEN(0x0CD7),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortCEE[22],
        prompt      = STRING_TOKEN(0x0CEE),
        help        = STRING_TOKEN(0x0CF4),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSFE[22],
        prompt      = STRING_TOKEN(0x0D28),
        help        = STRING_TOKEN(0x0D2E),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSNE[22],
        prompt      = STRING_TOKEN(0x0D45),
        help        = STRING_TOKEN(0x0D4B),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSCE[22],
        prompt      = STRING_TOKEN(0x0D62),
        help        = STRING_TOKEN(0x0D68),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortPMCE[22],
        prompt      = STRING_TOKEN(0x0D7F),
        help        = STRING_TOKEN(0x0D85),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      grayoutif ideqval PCH_SETUP.PcieRootPortSI[22] == 0;
        oneof varid   = PCH_SETUP.PcieRootPortHPE[22],
          prompt      = STRING_TOKEN(0x0D9C),
          help        = STRING_TOKEN(0x0DA2),
          option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
        endoneof;
      endif;

      oneof varid   = PCH_SETUP.PcieRootPortAER[22],
        prompt      = STRING_TOKEN(0x0DB9),
        help        = STRING_TOKEN(0x0DBF),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSpeed[22],
        prompt   = STRING_TOKEN (0x0C59),
        help     = STRING_TOKEN (0x0C5F),
        option text = STRING_TOKEN (0x0006), value = 0, flags = RESET_REQUIRED | DEFAULT;
        option text = STRING_TOKEN (0x0C60), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x0C61), value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x0C62), value = 3, flags = RESET_REQUIRED;

        option text = STRING_TOKEN (0x0C63), value = 4, flags = RESET_REQUIRED;
#line 199 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortTHS[22],
        prompt      = STRING_TOKEN(0x0DF9),
        help        = STRING_TOKEN(0x0DFF),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      numeric varid = PCH_SETUP.PcieDetectTimeoutMs[22],
        prompt      = STRING_TOKEN (0x0E16),
        help        = STRING_TOKEN (0x0E1C),
        minimum     = 0,
        maximum     = 65535,
        step        = 1,
        default     = 0,
      endnumeric;

      numeric varid = PCH_SETUP.PcieExtraBusRsvd[22],
        prompt      = STRING_TOKEN (0x0E33),
        help        = STRING_TOKEN (0x0E39),
        minimum     = 0,
        maximum     = 7,
        step        = 1,    
        default     = 0,    
      endnumeric;

      numeric varid = PCH_SETUP.PcieMemRsvd[22],
        prompt      = STRING_TOKEN (0x0E50),
        help        = STRING_TOKEN (0x0E56),
        minimum     = 1,
        maximum     = 20,
        step        = 1,    
        default     = 10,   
      endnumeric;

      numeric varid = PCH_SETUP.PcieIoRsvd[22],
        prompt      = STRING_TOKEN (0x0E6D),
        help        = STRING_TOKEN (0x0E73),
        minimum     = 4,
        maximum     = 20,
        step        = 4,    
        default     = 4,    
      endnumeric;

      subtitle text = STRING_TOKEN(0x0002);

      subtitle text = STRING_TOKEN(0x0E7A);
      oneof varid   = PCH_SETUP.PchPcieLtrEnable[22],
        prompt   = STRING_TOKEN (0x0E91),
        help     = STRING_TOKEN (0x0E97),
        option text = STRING_TOKEN(0x0004),  value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      suppressif ideqval PCH_SETUP.PchPcieLtrEnable[22] == 0;
        oneof varid   = PCH_SETUP.PchPcieSnoopLatencyOverrideMode[22],
          prompt      = STRING_TOKEN (0x0F1C),
          help        = STRING_TOKEN (0x0F5D),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x09F8),   value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x158F),     value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        suppressif NOT ideqval PCH_SETUP.PchPcieSnoopLatencyOverrideMode[22] == 1;
          numeric varid = PCH_SETUP.PchPcieSnoopLatencyOverrideValue[22],
            prompt      = STRING_TOKEN(0x0F1E),
            help        = STRING_TOKEN(0x0F5F),
            flags       = RESET_REQUIRED,
            minimum     = 0,
            maximum     = 1023,
            step        = 1,
            default     = 60,
          endnumeric;

          oneof varid   = PCH_SETUP.PchPcieSnoopLatencyOverrideMultiplier[22],
            prompt      = STRING_TOKEN(0x0F1F),
            help        = STRING_TOKEN(0x0F60),
            option text = STRING_TOKEN(0x0E74), value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E75), value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E76), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E77), value = 3, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E78), value = 4, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E79), value = 5, flags = RESET_REQUIRED;
          endoneof;
        endif;

        oneof varid   = PCH_SETUP.PchPcieNonSnoopLatencyOverrideMode[22],
          prompt      = STRING_TOKEN (0x0F1D),
          help        = STRING_TOKEN (0x0F5E),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x09F8),   value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x158F),     value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        suppressif NOT ideqval PCH_SETUP.PchPcieNonSnoopLatencyOverrideMode[22] == 1;
          numeric varid = PCH_SETUP.PchPcieNonSnoopLatencyOverrideValue[22],
            prompt      = STRING_TOKEN(0x0F20),
            help        = STRING_TOKEN(0x0F61),
            flags       = RESET_REQUIRED,
            minimum     = 0,
            maximum     = 1023,
            step        = 1,
            default     = 60,
          endnumeric;

          oneof varid   = PCH_SETUP.PchPcieNonSnoopLatencyOverrideMultiplier[22],
            prompt      = STRING_TOKEN(0x0F21),
            help        = STRING_TOKEN(0x0F62),
            option text = STRING_TOKEN(0x0E74), value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E75), value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E76), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E77), value = 3, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E78), value = 4, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E79), value = 5, flags = RESET_REQUIRED;
          endoneof;
        endif;




        oneof varid  = PCH_SETUP.PchPcieForceLtrOverride[22],
          prompt      = STRING_TOKEN(0x0F56),
          help        = STRING_TOKEN(0x0F5C),
          option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
        endoneof;




      endif;

      subtitle text = STRING_TOKEN(0x0002);

      oneof varid   = PCH_SETUP.PchPcieLtrConfigLock[22],
        prompt   = STRING_TOKEN (0x0F79),
        help     = STRING_TOKEN (0x0F7F),
        option text = STRING_TOKEN(0x0004),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortPeerMemoryWriteEnable[22],
        prompt      = STRING_TOKEN(0x0DDA),
        help        = STRING_TOKEN(0x0DE0),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

    endif;
  endform; 
#line 2593 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"



#line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"

































  form formid = 5503,
    title     = STRING_TOKEN(0x105B);

    oneof varid   = PCH_SETUP.PcieRootPortEn[23],
      prompt      = STRING_TOKEN(0x0C7B),
      help        = STRING_TOKEN(0x0C80),
      option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    suppressif ideqval PCH_SETUP.PcieRootPortEn[23] == 0x0;
      grayoutif ideqval PCH_SETUP.PcieRootPortHPE[23] == 1;
        oneof varid   = PCH_SETUP.PcieRootPortSI[23],
          prompt      = STRING_TOKEN(0x1126),
          help        = STRING_TOKEN(0x112B),
          option text = STRING_TOKEN(0x112C), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x112D), value = 1, flags = DEFAULT | RESET_REQUIRED;
        endoneof;
      endif;

       
        oneof varid   = PCH_SETUP.PcieRootPortAspm[23],
          questionid  = 5623,
          prompt      = STRING_TOKEN(0x0B84),
          help        = STRING_TOKEN(0x0BA5),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;



#line 64 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"
          option text = STRING_TOKEN(0x0BA7), value = 2, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x158F), value = 4, flags = RESET_REQUIRED;
#line 67 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"
        endoneof;

        oneof varid   = PCH_SETUP.PcieRootPortL1SubStates[23],
          questionid  = 5651,
          prompt      = STRING_TOKEN(0x0BC0),
          help        = STRING_TOKEN(0x0BC5),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0BC6), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0BC7), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
       

      oneof varid   = PCH_SETUP.PcieRootPortL1Low[23],
        prompt      = STRING_TOKEN(0x0BC8),
        help        = STRING_TOKEN(0x0BC9),
        option text = STRING_TOKEN(0x0004), value = 0, flags =  RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortACS[23],
        prompt      = STRING_TOKEN(0x0BE1),
        help        = STRING_TOKEN(0x0BE6),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

       
        oneof varid   = PCH_SETUP.PcieRootPortPTM[23],
          questionid  = 5679,
          prompt      = STRING_TOKEN(0x0BFF),
          help        = STRING_TOKEN(0x0C04),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
       

      oneof varid   = PCH_SETUP.PcieRootPortDPC[23],
        prompt      = STRING_TOKEN(0x0C1C),
        help        = STRING_TOKEN(0x0C21),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortEDPC[23],
        prompt      = STRING_TOKEN(0x0C39),
        help        = STRING_TOKEN(0x0C3E),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortURE[23],
        prompt      = STRING_TOKEN(0x0C98),
        help        = STRING_TOKEN(0x0C9D),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortFEE[23],
        prompt      = STRING_TOKEN(0x0CB5),
        help        = STRING_TOKEN(0x0CBA),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortNFE[23],
        prompt      = STRING_TOKEN(0x0CD2),
        help        = STRING_TOKEN(0x0CD7),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortCEE[23],
        prompt      = STRING_TOKEN(0x0CEF),
        help        = STRING_TOKEN(0x0CF4),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSFE[23],
        prompt      = STRING_TOKEN(0x0D29),
        help        = STRING_TOKEN(0x0D2E),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSNE[23],
        prompt      = STRING_TOKEN(0x0D46),
        help        = STRING_TOKEN(0x0D4B),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSCE[23],
        prompt      = STRING_TOKEN(0x0D63),
        help        = STRING_TOKEN(0x0D68),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortPMCE[23],
        prompt      = STRING_TOKEN(0x0D80),
        help        = STRING_TOKEN(0x0D85),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      grayoutif ideqval PCH_SETUP.PcieRootPortSI[23] == 0;
        oneof varid   = PCH_SETUP.PcieRootPortHPE[23],
          prompt      = STRING_TOKEN(0x0D9D),
          help        = STRING_TOKEN(0x0DA2),
          option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
        endoneof;
      endif;

      oneof varid   = PCH_SETUP.PcieRootPortAER[23],
        prompt      = STRING_TOKEN(0x0DBA),
        help        = STRING_TOKEN(0x0DBF),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSpeed[23],
        prompt   = STRING_TOKEN (0x0C5A),
        help     = STRING_TOKEN (0x0C5F),
        option text = STRING_TOKEN (0x0006), value = 0, flags = RESET_REQUIRED | DEFAULT;
        option text = STRING_TOKEN (0x0C60), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x0C61), value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x0C62), value = 3, flags = RESET_REQUIRED;

        option text = STRING_TOKEN (0x0C63), value = 4, flags = RESET_REQUIRED;
#line 199 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortTHS[23],
        prompt      = STRING_TOKEN(0x0DFA),
        help        = STRING_TOKEN(0x0DFF),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      numeric varid = PCH_SETUP.PcieDetectTimeoutMs[23],
        prompt      = STRING_TOKEN (0x0E17),
        help        = STRING_TOKEN (0x0E1C),
        minimum     = 0,
        maximum     = 65535,
        step        = 1,
        default     = 0,
      endnumeric;

      numeric varid = PCH_SETUP.PcieExtraBusRsvd[23],
        prompt      = STRING_TOKEN (0x0E34),
        help        = STRING_TOKEN (0x0E39),
        minimum     = 0,
        maximum     = 7,
        step        = 1,    
        default     = 0,    
      endnumeric;

      numeric varid = PCH_SETUP.PcieMemRsvd[23],
        prompt      = STRING_TOKEN (0x0E51),
        help        = STRING_TOKEN (0x0E56),
        minimum     = 1,
        maximum     = 20,
        step        = 1,    
        default     = 10,   
      endnumeric;

      numeric varid = PCH_SETUP.PcieIoRsvd[23],
        prompt      = STRING_TOKEN (0x0E6E),
        help        = STRING_TOKEN (0x0E73),
        minimum     = 4,
        maximum     = 20,
        step        = 4,    
        default     = 4,    
      endnumeric;

      subtitle text = STRING_TOKEN(0x0002);

      subtitle text = STRING_TOKEN(0x0E7A);
      oneof varid   = PCH_SETUP.PchPcieLtrEnable[23],
        prompt   = STRING_TOKEN (0x0E92),
        help     = STRING_TOKEN (0x0E97),
        option text = STRING_TOKEN(0x0004),  value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      suppressif ideqval PCH_SETUP.PchPcieLtrEnable[23] == 0;
        oneof varid   = PCH_SETUP.PchPcieSnoopLatencyOverrideMode[23],
          prompt      = STRING_TOKEN (0x0F22),
          help        = STRING_TOKEN (0x0F5D),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x09F8),   value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x158F),     value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        suppressif NOT ideqval PCH_SETUP.PchPcieSnoopLatencyOverrideMode[23] == 1;
          numeric varid = PCH_SETUP.PchPcieSnoopLatencyOverrideValue[23],
            prompt      = STRING_TOKEN(0x0F24),
            help        = STRING_TOKEN(0x0F5F),
            flags       = RESET_REQUIRED,
            minimum     = 0,
            maximum     = 1023,
            step        = 1,
            default     = 60,
          endnumeric;

          oneof varid   = PCH_SETUP.PchPcieSnoopLatencyOverrideMultiplier[23],
            prompt      = STRING_TOKEN(0x0F25),
            help        = STRING_TOKEN(0x0F60),
            option text = STRING_TOKEN(0x0E74), value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E75), value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E76), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E77), value = 3, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E78), value = 4, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E79), value = 5, flags = RESET_REQUIRED;
          endoneof;
        endif;

        oneof varid   = PCH_SETUP.PchPcieNonSnoopLatencyOverrideMode[23],
          prompt      = STRING_TOKEN (0x0F23),
          help        = STRING_TOKEN (0x0F5E),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x09F8),   value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x158F),     value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        suppressif NOT ideqval PCH_SETUP.PchPcieNonSnoopLatencyOverrideMode[23] == 1;
          numeric varid = PCH_SETUP.PchPcieNonSnoopLatencyOverrideValue[23],
            prompt      = STRING_TOKEN(0x0F26),
            help        = STRING_TOKEN(0x0F61),
            flags       = RESET_REQUIRED,
            minimum     = 0,
            maximum     = 1023,
            step        = 1,
            default     = 60,
          endnumeric;

          oneof varid   = PCH_SETUP.PchPcieNonSnoopLatencyOverrideMultiplier[23],
            prompt      = STRING_TOKEN(0x0F27),
            help        = STRING_TOKEN(0x0F62),
            option text = STRING_TOKEN(0x0E74), value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E75), value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E76), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E77), value = 3, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E78), value = 4, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E79), value = 5, flags = RESET_REQUIRED;
          endoneof;
        endif;




        oneof varid  = PCH_SETUP.PchPcieForceLtrOverride[23],
          prompt      = STRING_TOKEN(0x0F57),
          help        = STRING_TOKEN(0x0F5C),
          option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
        endoneof;




      endif;

      subtitle text = STRING_TOKEN(0x0002);

      oneof varid   = PCH_SETUP.PchPcieLtrConfigLock[23],
        prompt   = STRING_TOKEN (0x0F7A),
        help     = STRING_TOKEN (0x0F7F),
        option text = STRING_TOKEN(0x0004),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortPeerMemoryWriteEnable[23],
        prompt      = STRING_TOKEN(0x0DDB),
        help        = STRING_TOKEN(0x0DE0),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

    endif;
  endform; 
#line 2597 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"




#line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"

































  form formid = 5511,
    title     = STRING_TOKEN(0x105C);

    oneof varid   = PCH_SETUP.PcieRootPortEn[24],
      prompt      = STRING_TOKEN(0x0C7C),
      help        = STRING_TOKEN(0x0C80),
      option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    suppressif ideqval PCH_SETUP.PcieRootPortEn[24] == 0x0;
      grayoutif ideqval PCH_SETUP.PcieRootPortHPE[24] == 1;
        oneof varid   = PCH_SETUP.PcieRootPortSI[24],
          prompt      = STRING_TOKEN(0x1127),
          help        = STRING_TOKEN(0x112B),
          option text = STRING_TOKEN(0x112C), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x112D), value = 1, flags = DEFAULT | RESET_REQUIRED;
        endoneof;
      endif;

       
        oneof varid   = PCH_SETUP.PcieRootPortAspm[24],
          questionid  = 5624,
          prompt      = STRING_TOKEN(0x0B85),
          help        = STRING_TOKEN(0x0BA5),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;



#line 64 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"
          option text = STRING_TOKEN(0x0BA7), value = 2, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x158F), value = 4, flags = RESET_REQUIRED;
#line 67 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"
        endoneof;

        oneof varid   = PCH_SETUP.PcieRootPortL1SubStates[24],
          questionid  = 5652,
          prompt      = STRING_TOKEN(0x0BC1),
          help        = STRING_TOKEN(0x0BC5),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0BC6), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0BC7), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
       

      oneof varid   = PCH_SETUP.PcieRootPortL1Low[24],
        prompt      = STRING_TOKEN(0x0BC8),
        help        = STRING_TOKEN(0x0BC9),
        option text = STRING_TOKEN(0x0004), value = 0, flags =  RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortACS[24],
        prompt      = STRING_TOKEN(0x0BE2),
        help        = STRING_TOKEN(0x0BE6),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

       
        oneof varid   = PCH_SETUP.PcieRootPortPTM[24],
          questionid  = 5680,
          prompt      = STRING_TOKEN(0x0C00),
          help        = STRING_TOKEN(0x0C04),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
       

      oneof varid   = PCH_SETUP.PcieRootPortDPC[24],
        prompt      = STRING_TOKEN(0x0C1D),
        help        = STRING_TOKEN(0x0C21),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortEDPC[24],
        prompt      = STRING_TOKEN(0x0C3A),
        help        = STRING_TOKEN(0x0C3E),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortURE[24],
        prompt      = STRING_TOKEN(0x0C99),
        help        = STRING_TOKEN(0x0C9D),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortFEE[24],
        prompt      = STRING_TOKEN(0x0CB6),
        help        = STRING_TOKEN(0x0CBA),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortNFE[24],
        prompt      = STRING_TOKEN(0x0CD3),
        help        = STRING_TOKEN(0x0CD7),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortCEE[24],
        prompt      = STRING_TOKEN(0x0CF0),
        help        = STRING_TOKEN(0x0CF4),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSFE[24],
        prompt      = STRING_TOKEN(0x0D2A),
        help        = STRING_TOKEN(0x0D2E),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSNE[24],
        prompt      = STRING_TOKEN(0x0D47),
        help        = STRING_TOKEN(0x0D4B),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSCE[24],
        prompt      = STRING_TOKEN(0x0D64),
        help        = STRING_TOKEN(0x0D68),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortPMCE[24],
        prompt      = STRING_TOKEN(0x0D81),
        help        = STRING_TOKEN(0x0D85),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      grayoutif ideqval PCH_SETUP.PcieRootPortSI[24] == 0;
        oneof varid   = PCH_SETUP.PcieRootPortHPE[24],
          prompt      = STRING_TOKEN(0x0D9E),
          help        = STRING_TOKEN(0x0DA2),
          option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
        endoneof;
      endif;

      oneof varid   = PCH_SETUP.PcieRootPortAER[24],
        prompt      = STRING_TOKEN(0x0DBB),
        help        = STRING_TOKEN(0x0DBF),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSpeed[24],
        prompt   = STRING_TOKEN (0x0C5B),
        help     = STRING_TOKEN (0x0C5F),
        option text = STRING_TOKEN (0x0006), value = 0, flags = RESET_REQUIRED | DEFAULT;
        option text = STRING_TOKEN (0x0C60), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x0C61), value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x0C62), value = 3, flags = RESET_REQUIRED;

        option text = STRING_TOKEN (0x0C63), value = 4, flags = RESET_REQUIRED;
#line 199 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortTHS[24],
        prompt      = STRING_TOKEN(0x0DFB),
        help        = STRING_TOKEN(0x0DFF),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      numeric varid = PCH_SETUP.PcieDetectTimeoutMs[24],
        prompt      = STRING_TOKEN (0x0E18),
        help        = STRING_TOKEN (0x0E1C),
        minimum     = 0,
        maximum     = 65535,
        step        = 1,
        default     = 0,
      endnumeric;

      numeric varid = PCH_SETUP.PcieExtraBusRsvd[24],
        prompt      = STRING_TOKEN (0x0E35),
        help        = STRING_TOKEN (0x0E39),
        minimum     = 0,
        maximum     = 7,
        step        = 1,    
        default     = 0,    
      endnumeric;

      numeric varid = PCH_SETUP.PcieMemRsvd[24],
        prompt      = STRING_TOKEN (0x0E52),
        help        = STRING_TOKEN (0x0E56),
        minimum     = 1,
        maximum     = 20,
        step        = 1,    
        default     = 10,   
      endnumeric;

      numeric varid = PCH_SETUP.PcieIoRsvd[24],
        prompt      = STRING_TOKEN (0x0E6F),
        help        = STRING_TOKEN (0x0E73),
        minimum     = 4,
        maximum     = 20,
        step        = 4,    
        default     = 4,    
      endnumeric;

      subtitle text = STRING_TOKEN(0x0002);

      subtitle text = STRING_TOKEN(0x0E7A);
      oneof varid   = PCH_SETUP.PchPcieLtrEnable[24],
        prompt   = STRING_TOKEN (0x0E93),
        help     = STRING_TOKEN (0x0E97),
        option text = STRING_TOKEN(0x0004),  value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      suppressif ideqval PCH_SETUP.PchPcieLtrEnable[24] == 0;
        oneof varid   = PCH_SETUP.PchPcieSnoopLatencyOverrideMode[24],
          prompt      = STRING_TOKEN (0x0F28),
          help        = STRING_TOKEN (0x0F5D),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x09F8),   value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x158F),     value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        suppressif NOT ideqval PCH_SETUP.PchPcieSnoopLatencyOverrideMode[24] == 1;
          numeric varid = PCH_SETUP.PchPcieSnoopLatencyOverrideValue[24],
            prompt      = STRING_TOKEN(0x0F2A),
            help        = STRING_TOKEN(0x0F5F),
            flags       = RESET_REQUIRED,
            minimum     = 0,
            maximum     = 1023,
            step        = 1,
            default     = 60,
          endnumeric;

          oneof varid   = PCH_SETUP.PchPcieSnoopLatencyOverrideMultiplier[24],
            prompt      = STRING_TOKEN(0x0F2B),
            help        = STRING_TOKEN(0x0F60),
            option text = STRING_TOKEN(0x0E74), value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E75), value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E76), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E77), value = 3, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E78), value = 4, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E79), value = 5, flags = RESET_REQUIRED;
          endoneof;
        endif;

        oneof varid   = PCH_SETUP.PchPcieNonSnoopLatencyOverrideMode[24],
          prompt      = STRING_TOKEN (0x0F29),
          help        = STRING_TOKEN (0x0F5E),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x09F8),   value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x158F),     value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        suppressif NOT ideqval PCH_SETUP.PchPcieNonSnoopLatencyOverrideMode[24] == 1;
          numeric varid = PCH_SETUP.PchPcieNonSnoopLatencyOverrideValue[24],
            prompt      = STRING_TOKEN(0x0F2C),
            help        = STRING_TOKEN(0x0F61),
            flags       = RESET_REQUIRED,
            minimum     = 0,
            maximum     = 1023,
            step        = 1,
            default     = 60,
          endnumeric;

          oneof varid   = PCH_SETUP.PchPcieNonSnoopLatencyOverrideMultiplier[24],
            prompt      = STRING_TOKEN(0x0F2D),
            help        = STRING_TOKEN(0x0F62),
            option text = STRING_TOKEN(0x0E74), value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E75), value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E76), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E77), value = 3, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E78), value = 4, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E79), value = 5, flags = RESET_REQUIRED;
          endoneof;
        endif;




        oneof varid  = PCH_SETUP.PchPcieForceLtrOverride[24],
          prompt      = STRING_TOKEN(0x0F58),
          help        = STRING_TOKEN(0x0F5C),
          option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
        endoneof;




      endif;

      subtitle text = STRING_TOKEN(0x0002);

      oneof varid   = PCH_SETUP.PchPcieLtrConfigLock[24],
        prompt   = STRING_TOKEN (0x0F7B),
        help     = STRING_TOKEN (0x0F7F),
        option text = STRING_TOKEN(0x0004),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortPeerMemoryWriteEnable[24],
        prompt      = STRING_TOKEN(0x0DDC),
        help        = STRING_TOKEN(0x0DE0),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

    endif;
  endform; 
#line 2602 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"



#line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"

































  form formid = 5512,
    title     = STRING_TOKEN(0x105D);

    oneof varid   = PCH_SETUP.PcieRootPortEn[25],
      prompt      = STRING_TOKEN(0x0C7D),
      help        = STRING_TOKEN(0x0C80),
      option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    suppressif ideqval PCH_SETUP.PcieRootPortEn[25] == 0x0;
      grayoutif ideqval PCH_SETUP.PcieRootPortHPE[25] == 1;
        oneof varid   = PCH_SETUP.PcieRootPortSI[25],
          prompt      = STRING_TOKEN(0x1128),
          help        = STRING_TOKEN(0x112B),
          option text = STRING_TOKEN(0x112C), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x112D), value = 1, flags = DEFAULT | RESET_REQUIRED;
        endoneof;
      endif;

       
        oneof varid   = PCH_SETUP.PcieRootPortAspm[25],
          questionid  = 5625,
          prompt      = STRING_TOKEN(0x0B86),
          help        = STRING_TOKEN(0x0BA5),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;



#line 64 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"
          option text = STRING_TOKEN(0x0BA7), value = 2, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x158F), value = 4, flags = RESET_REQUIRED;
#line 67 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"
        endoneof;

        oneof varid   = PCH_SETUP.PcieRootPortL1SubStates[25],
          questionid  = 5653,
          prompt      = STRING_TOKEN(0x0BC2),
          help        = STRING_TOKEN(0x0BC5),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0BC6), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0BC7), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
       

      oneof varid   = PCH_SETUP.PcieRootPortL1Low[25],
        prompt      = STRING_TOKEN(0x0BC8),
        help        = STRING_TOKEN(0x0BC9),
        option text = STRING_TOKEN(0x0004), value = 0, flags =  RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortACS[25],
        prompt      = STRING_TOKEN(0x0BE3),
        help        = STRING_TOKEN(0x0BE6),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

       
        oneof varid   = PCH_SETUP.PcieRootPortPTM[25],
          questionid  = 5681,
          prompt      = STRING_TOKEN(0x0C01),
          help        = STRING_TOKEN(0x0C04),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
       

      oneof varid   = PCH_SETUP.PcieRootPortDPC[25],
        prompt      = STRING_TOKEN(0x0C1E),
        help        = STRING_TOKEN(0x0C21),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortEDPC[25],
        prompt      = STRING_TOKEN(0x0C3B),
        help        = STRING_TOKEN(0x0C3E),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortURE[25],
        prompt      = STRING_TOKEN(0x0C9A),
        help        = STRING_TOKEN(0x0C9D),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortFEE[25],
        prompt      = STRING_TOKEN(0x0CB7),
        help        = STRING_TOKEN(0x0CBA),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortNFE[25],
        prompt      = STRING_TOKEN(0x0CD4),
        help        = STRING_TOKEN(0x0CD7),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortCEE[25],
        prompt      = STRING_TOKEN(0x0CF1),
        help        = STRING_TOKEN(0x0CF4),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSFE[25],
        prompt      = STRING_TOKEN(0x0D2B),
        help        = STRING_TOKEN(0x0D2E),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSNE[25],
        prompt      = STRING_TOKEN(0x0D48),
        help        = STRING_TOKEN(0x0D4B),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSCE[25],
        prompt      = STRING_TOKEN(0x0D65),
        help        = STRING_TOKEN(0x0D68),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortPMCE[25],
        prompt      = STRING_TOKEN(0x0D82),
        help        = STRING_TOKEN(0x0D85),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      grayoutif ideqval PCH_SETUP.PcieRootPortSI[25] == 0;
        oneof varid   = PCH_SETUP.PcieRootPortHPE[25],
          prompt      = STRING_TOKEN(0x0D9F),
          help        = STRING_TOKEN(0x0DA2),
          option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
        endoneof;
      endif;

      oneof varid   = PCH_SETUP.PcieRootPortAER[25],
        prompt      = STRING_TOKEN(0x0DBC),
        help        = STRING_TOKEN(0x0DBF),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSpeed[25],
        prompt   = STRING_TOKEN (0x0C5C),
        help     = STRING_TOKEN (0x0C5F),
        option text = STRING_TOKEN (0x0006), value = 0, flags = RESET_REQUIRED | DEFAULT;
        option text = STRING_TOKEN (0x0C60), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x0C61), value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x0C62), value = 3, flags = RESET_REQUIRED;

        option text = STRING_TOKEN (0x0C63), value = 4, flags = RESET_REQUIRED;
#line 199 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortTHS[25],
        prompt      = STRING_TOKEN(0x0DFC),
        help        = STRING_TOKEN(0x0DFF),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      numeric varid = PCH_SETUP.PcieDetectTimeoutMs[25],
        prompt      = STRING_TOKEN (0x0E19),
        help        = STRING_TOKEN (0x0E1C),
        minimum     = 0,
        maximum     = 65535,
        step        = 1,
        default     = 0,
      endnumeric;

      numeric varid = PCH_SETUP.PcieExtraBusRsvd[25],
        prompt      = STRING_TOKEN (0x0E36),
        help        = STRING_TOKEN (0x0E39),
        minimum     = 0,
        maximum     = 7,
        step        = 1,    
        default     = 0,    
      endnumeric;

      numeric varid = PCH_SETUP.PcieMemRsvd[25],
        prompt      = STRING_TOKEN (0x0E53),
        help        = STRING_TOKEN (0x0E56),
        minimum     = 1,
        maximum     = 20,
        step        = 1,    
        default     = 10,   
      endnumeric;

      numeric varid = PCH_SETUP.PcieIoRsvd[25],
        prompt      = STRING_TOKEN (0x0E70),
        help        = STRING_TOKEN (0x0E73),
        minimum     = 4,
        maximum     = 20,
        step        = 4,    
        default     = 4,    
      endnumeric;

      subtitle text = STRING_TOKEN(0x0002);

      subtitle text = STRING_TOKEN(0x0E7A);
      oneof varid   = PCH_SETUP.PchPcieLtrEnable[25],
        prompt   = STRING_TOKEN (0x0E94),
        help     = STRING_TOKEN (0x0E97),
        option text = STRING_TOKEN(0x0004),  value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      suppressif ideqval PCH_SETUP.PchPcieLtrEnable[25] == 0;
        oneof varid   = PCH_SETUP.PchPcieSnoopLatencyOverrideMode[25],
          prompt      = STRING_TOKEN (0x0F2E),
          help        = STRING_TOKEN (0x0F5D),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x09F8),   value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x158F),     value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        suppressif NOT ideqval PCH_SETUP.PchPcieSnoopLatencyOverrideMode[25] == 1;
          numeric varid = PCH_SETUP.PchPcieSnoopLatencyOverrideValue[25],
            prompt      = STRING_TOKEN(0x0F30),
            help        = STRING_TOKEN(0x0F5F),
            flags       = RESET_REQUIRED,
            minimum     = 0,
            maximum     = 1023,
            step        = 1,
            default     = 60,
          endnumeric;

          oneof varid   = PCH_SETUP.PchPcieSnoopLatencyOverrideMultiplier[25],
            prompt      = STRING_TOKEN(0x0F31),
            help        = STRING_TOKEN(0x0F60),
            option text = STRING_TOKEN(0x0E74), value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E75), value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E76), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E77), value = 3, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E78), value = 4, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E79), value = 5, flags = RESET_REQUIRED;
          endoneof;
        endif;

        oneof varid   = PCH_SETUP.PchPcieNonSnoopLatencyOverrideMode[25],
          prompt      = STRING_TOKEN (0x0F2F),
          help        = STRING_TOKEN (0x0F5E),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x09F8),   value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x158F),     value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        suppressif NOT ideqval PCH_SETUP.PchPcieNonSnoopLatencyOverrideMode[25] == 1;
          numeric varid = PCH_SETUP.PchPcieNonSnoopLatencyOverrideValue[25],
            prompt      = STRING_TOKEN(0x0F32),
            help        = STRING_TOKEN(0x0F61),
            flags       = RESET_REQUIRED,
            minimum     = 0,
            maximum     = 1023,
            step        = 1,
            default     = 60,
          endnumeric;

          oneof varid   = PCH_SETUP.PchPcieNonSnoopLatencyOverrideMultiplier[25],
            prompt      = STRING_TOKEN(0x0F33),
            help        = STRING_TOKEN(0x0F62),
            option text = STRING_TOKEN(0x0E74), value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E75), value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E76), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E77), value = 3, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E78), value = 4, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E79), value = 5, flags = RESET_REQUIRED;
          endoneof;
        endif;




        oneof varid  = PCH_SETUP.PchPcieForceLtrOverride[25],
          prompt      = STRING_TOKEN(0x0F59),
          help        = STRING_TOKEN(0x0F5C),
          option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
        endoneof;




      endif;

      subtitle text = STRING_TOKEN(0x0002);

      oneof varid   = PCH_SETUP.PchPcieLtrConfigLock[25],
        prompt   = STRING_TOKEN (0x0F7C),
        help     = STRING_TOKEN (0x0F7F),
        option text = STRING_TOKEN(0x0004),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortPeerMemoryWriteEnable[25],
        prompt      = STRING_TOKEN(0x0DDD),
        help        = STRING_TOKEN(0x0DE0),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

    endif;
  endform; 
#line 2606 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"



#line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"

































  form formid = 5513,
    title     = STRING_TOKEN(0x105E);

    oneof varid   = PCH_SETUP.PcieRootPortEn[26],
      prompt      = STRING_TOKEN(0x0C7E),
      help        = STRING_TOKEN(0x0C80),
      option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    suppressif ideqval PCH_SETUP.PcieRootPortEn[26] == 0x0;
      grayoutif ideqval PCH_SETUP.PcieRootPortHPE[26] == 1;
        oneof varid   = PCH_SETUP.PcieRootPortSI[26],
          prompt      = STRING_TOKEN(0x1129),
          help        = STRING_TOKEN(0x112B),
          option text = STRING_TOKEN(0x112C), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x112D), value = 1, flags = DEFAULT | RESET_REQUIRED;
        endoneof;
      endif;

       
        oneof varid   = PCH_SETUP.PcieRootPortAspm[26],
          questionid  = 5626,
          prompt      = STRING_TOKEN(0x0B87),
          help        = STRING_TOKEN(0x0BA5),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;



#line 64 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"
          option text = STRING_TOKEN(0x0BA7), value = 2, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x158F), value = 4, flags = RESET_REQUIRED;
#line 67 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"
        endoneof;

        oneof varid   = PCH_SETUP.PcieRootPortL1SubStates[26],
          questionid  = 5654,
          prompt      = STRING_TOKEN(0x0BC3),
          help        = STRING_TOKEN(0x0BC5),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0BC6), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0BC7), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
       

      oneof varid   = PCH_SETUP.PcieRootPortL1Low[26],
        prompt      = STRING_TOKEN(0x0BC8),
        help        = STRING_TOKEN(0x0BC9),
        option text = STRING_TOKEN(0x0004), value = 0, flags =  RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortACS[26],
        prompt      = STRING_TOKEN(0x0BE4),
        help        = STRING_TOKEN(0x0BE6),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

       
        oneof varid   = PCH_SETUP.PcieRootPortPTM[26],
          questionid  = 5682,
          prompt      = STRING_TOKEN(0x0C02),
          help        = STRING_TOKEN(0x0C04),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
       

      oneof varid   = PCH_SETUP.PcieRootPortDPC[26],
        prompt      = STRING_TOKEN(0x0C1F),
        help        = STRING_TOKEN(0x0C21),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortEDPC[26],
        prompt      = STRING_TOKEN(0x0C3C),
        help        = STRING_TOKEN(0x0C3E),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortURE[26],
        prompt      = STRING_TOKEN(0x0C9B),
        help        = STRING_TOKEN(0x0C9D),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortFEE[26],
        prompt      = STRING_TOKEN(0x0CB8),
        help        = STRING_TOKEN(0x0CBA),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortNFE[26],
        prompt      = STRING_TOKEN(0x0CD5),
        help        = STRING_TOKEN(0x0CD7),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortCEE[26],
        prompt      = STRING_TOKEN(0x0CF2),
        help        = STRING_TOKEN(0x0CF4),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSFE[26],
        prompt      = STRING_TOKEN(0x0D2C),
        help        = STRING_TOKEN(0x0D2E),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSNE[26],
        prompt      = STRING_TOKEN(0x0D49),
        help        = STRING_TOKEN(0x0D4B),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSCE[26],
        prompt      = STRING_TOKEN(0x0D66),
        help        = STRING_TOKEN(0x0D68),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortPMCE[26],
        prompt      = STRING_TOKEN(0x0D83),
        help        = STRING_TOKEN(0x0D85),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      grayoutif ideqval PCH_SETUP.PcieRootPortSI[26] == 0;
        oneof varid   = PCH_SETUP.PcieRootPortHPE[26],
          prompt      = STRING_TOKEN(0x0DA0),
          help        = STRING_TOKEN(0x0DA2),
          option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
        endoneof;
      endif;

      oneof varid   = PCH_SETUP.PcieRootPortAER[26],
        prompt      = STRING_TOKEN(0x0DBD),
        help        = STRING_TOKEN(0x0DBF),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSpeed[26],
        prompt   = STRING_TOKEN (0x0C5D),
        help     = STRING_TOKEN (0x0C5F),
        option text = STRING_TOKEN (0x0006), value = 0, flags = RESET_REQUIRED | DEFAULT;
        option text = STRING_TOKEN (0x0C60), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x0C61), value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x0C62), value = 3, flags = RESET_REQUIRED;

        option text = STRING_TOKEN (0x0C63), value = 4, flags = RESET_REQUIRED;
#line 199 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortTHS[26],
        prompt      = STRING_TOKEN(0x0DFD),
        help        = STRING_TOKEN(0x0DFF),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      numeric varid = PCH_SETUP.PcieDetectTimeoutMs[26],
        prompt      = STRING_TOKEN (0x0E1A),
        help        = STRING_TOKEN (0x0E1C),
        minimum     = 0,
        maximum     = 65535,
        step        = 1,
        default     = 0,
      endnumeric;

      numeric varid = PCH_SETUP.PcieExtraBusRsvd[26],
        prompt      = STRING_TOKEN (0x0E37),
        help        = STRING_TOKEN (0x0E39),
        minimum     = 0,
        maximum     = 7,
        step        = 1,    
        default     = 0,    
      endnumeric;

      numeric varid = PCH_SETUP.PcieMemRsvd[26],
        prompt      = STRING_TOKEN (0x0E54),
        help        = STRING_TOKEN (0x0E56),
        minimum     = 1,
        maximum     = 20,
        step        = 1,    
        default     = 10,   
      endnumeric;

      numeric varid = PCH_SETUP.PcieIoRsvd[26],
        prompt      = STRING_TOKEN (0x0E71),
        help        = STRING_TOKEN (0x0E73),
        minimum     = 4,
        maximum     = 20,
        step        = 4,    
        default     = 4,    
      endnumeric;

      subtitle text = STRING_TOKEN(0x0002);

      subtitle text = STRING_TOKEN(0x0E7A);
      oneof varid   = PCH_SETUP.PchPcieLtrEnable[26],
        prompt   = STRING_TOKEN (0x0E95),
        help     = STRING_TOKEN (0x0E97),
        option text = STRING_TOKEN(0x0004),  value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      suppressif ideqval PCH_SETUP.PchPcieLtrEnable[26] == 0;
        oneof varid   = PCH_SETUP.PchPcieSnoopLatencyOverrideMode[26],
          prompt      = STRING_TOKEN (0x0F34),
          help        = STRING_TOKEN (0x0F5D),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x09F8),   value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x158F),     value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        suppressif NOT ideqval PCH_SETUP.PchPcieSnoopLatencyOverrideMode[26] == 1;
          numeric varid = PCH_SETUP.PchPcieSnoopLatencyOverrideValue[26],
            prompt      = STRING_TOKEN(0x0F36),
            help        = STRING_TOKEN(0x0F5F),
            flags       = RESET_REQUIRED,
            minimum     = 0,
            maximum     = 1023,
            step        = 1,
            default     = 60,
          endnumeric;

          oneof varid   = PCH_SETUP.PchPcieSnoopLatencyOverrideMultiplier[26],
            prompt      = STRING_TOKEN(0x0F37),
            help        = STRING_TOKEN(0x0F60),
            option text = STRING_TOKEN(0x0E74), value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E75), value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E76), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E77), value = 3, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E78), value = 4, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E79), value = 5, flags = RESET_REQUIRED;
          endoneof;
        endif;

        oneof varid   = PCH_SETUP.PchPcieNonSnoopLatencyOverrideMode[26],
          prompt      = STRING_TOKEN (0x0F35),
          help        = STRING_TOKEN (0x0F5E),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x09F8),   value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x158F),     value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        suppressif NOT ideqval PCH_SETUP.PchPcieNonSnoopLatencyOverrideMode[26] == 1;
          numeric varid = PCH_SETUP.PchPcieNonSnoopLatencyOverrideValue[26],
            prompt      = STRING_TOKEN(0x0F38),
            help        = STRING_TOKEN(0x0F61),
            flags       = RESET_REQUIRED,
            minimum     = 0,
            maximum     = 1023,
            step        = 1,
            default     = 60,
          endnumeric;

          oneof varid   = PCH_SETUP.PchPcieNonSnoopLatencyOverrideMultiplier[26],
            prompt      = STRING_TOKEN(0x0F39),
            help        = STRING_TOKEN(0x0F62),
            option text = STRING_TOKEN(0x0E74), value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E75), value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E76), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E77), value = 3, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E78), value = 4, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E79), value = 5, flags = RESET_REQUIRED;
          endoneof;
        endif;




        oneof varid  = PCH_SETUP.PchPcieForceLtrOverride[26],
          prompt      = STRING_TOKEN(0x0F5A),
          help        = STRING_TOKEN(0x0F5C),
          option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
        endoneof;




      endif;

      subtitle text = STRING_TOKEN(0x0002);

      oneof varid   = PCH_SETUP.PchPcieLtrConfigLock[26],
        prompt   = STRING_TOKEN (0x0F7D),
        help     = STRING_TOKEN (0x0F7F),
        option text = STRING_TOKEN(0x0004),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortPeerMemoryWriteEnable[26],
        prompt      = STRING_TOKEN(0x0DDE),
        help        = STRING_TOKEN(0x0DE0),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

    endif;
  endform; 
#line 2610 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"



#line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"

































  form formid = 5514,
    title     = STRING_TOKEN(0x105F);

    oneof varid   = PCH_SETUP.PcieRootPortEn[27],
      prompt      = STRING_TOKEN(0x0C7F),
      help        = STRING_TOKEN(0x0C80),
      option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    suppressif ideqval PCH_SETUP.PcieRootPortEn[27] == 0x0;
      grayoutif ideqval PCH_SETUP.PcieRootPortHPE[27] == 1;
        oneof varid   = PCH_SETUP.PcieRootPortSI[27],
          prompt      = STRING_TOKEN(0x112A),
          help        = STRING_TOKEN(0x112B),
          option text = STRING_TOKEN(0x112C), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x112D), value = 1, flags = DEFAULT | RESET_REQUIRED;
        endoneof;
      endif;

       
        oneof varid   = PCH_SETUP.PcieRootPortAspm[27],
          questionid  = 5627,
          prompt      = STRING_TOKEN(0x0B88),
          help        = STRING_TOKEN(0x0BA5),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;



#line 64 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"
          option text = STRING_TOKEN(0x0BA7), value = 2, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x158F), value = 4, flags = RESET_REQUIRED;
#line 67 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"
        endoneof;

        oneof varid   = PCH_SETUP.PcieRootPortL1SubStates[27],
          questionid  = 5655,
          prompt      = STRING_TOKEN(0x0BC4),
          help        = STRING_TOKEN(0x0BC5),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0BC6), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0BC7), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
       

      oneof varid   = PCH_SETUP.PcieRootPortL1Low[27],
        prompt      = STRING_TOKEN(0x0BC8),
        help        = STRING_TOKEN(0x0BC9),
        option text = STRING_TOKEN(0x0004), value = 0, flags =  RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortACS[27],
        prompt      = STRING_TOKEN(0x0BE5),
        help        = STRING_TOKEN(0x0BE6),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

       
        oneof varid   = PCH_SETUP.PcieRootPortPTM[27],
          questionid  = 5683,
          prompt      = STRING_TOKEN(0x0C03),
          help        = STRING_TOKEN(0x0C04),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
       

      oneof varid   = PCH_SETUP.PcieRootPortDPC[27],
        prompt      = STRING_TOKEN(0x0C20),
        help        = STRING_TOKEN(0x0C21),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortEDPC[27],
        prompt      = STRING_TOKEN(0x0C3D),
        help        = STRING_TOKEN(0x0C3E),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortURE[27],
        prompt      = STRING_TOKEN(0x0C9C),
        help        = STRING_TOKEN(0x0C9D),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortFEE[27],
        prompt      = STRING_TOKEN(0x0CB9),
        help        = STRING_TOKEN(0x0CBA),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortNFE[27],
        prompt      = STRING_TOKEN(0x0CD6),
        help        = STRING_TOKEN(0x0CD7),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortCEE[27],
        prompt      = STRING_TOKEN(0x0CF3),
        help        = STRING_TOKEN(0x0CF4),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSFE[27],
        prompt      = STRING_TOKEN(0x0D2D),
        help        = STRING_TOKEN(0x0D2E),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSNE[27],
        prompt      = STRING_TOKEN(0x0D4A),
        help        = STRING_TOKEN(0x0D4B),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSCE[27],
        prompt      = STRING_TOKEN(0x0D67),
        help        = STRING_TOKEN(0x0D68),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortPMCE[27],
        prompt      = STRING_TOKEN(0x0D84),
        help        = STRING_TOKEN(0x0D85),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      grayoutif ideqval PCH_SETUP.PcieRootPortSI[27] == 0;
        oneof varid   = PCH_SETUP.PcieRootPortHPE[27],
          prompt      = STRING_TOKEN(0x0DA1),
          help        = STRING_TOKEN(0x0DA2),
          option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
        endoneof;
      endif;

      oneof varid   = PCH_SETUP.PcieRootPortAER[27],
        prompt      = STRING_TOKEN(0x0DBE),
        help        = STRING_TOKEN(0x0DBF),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortSpeed[27],
        prompt   = STRING_TOKEN (0x0C5E),
        help     = STRING_TOKEN (0x0C5F),
        option text = STRING_TOKEN (0x0006), value = 0, flags = RESET_REQUIRED | DEFAULT;
        option text = STRING_TOKEN (0x0C60), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x0C61), value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x0C62), value = 3, flags = RESET_REQUIRED;

        option text = STRING_TOKEN (0x0C63), value = 4, flags = RESET_REQUIRED;
#line 199 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchPcieSetupSinglePort.hfr"
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortTHS[27],
        prompt      = STRING_TOKEN(0x0DFE),
        help        = STRING_TOKEN(0x0DFF),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      numeric varid = PCH_SETUP.PcieDetectTimeoutMs[27],
        prompt      = STRING_TOKEN (0x0E1B),
        help        = STRING_TOKEN (0x0E1C),
        minimum     = 0,
        maximum     = 65535,
        step        = 1,
        default     = 0,
      endnumeric;

      numeric varid = PCH_SETUP.PcieExtraBusRsvd[27],
        prompt      = STRING_TOKEN (0x0E38),
        help        = STRING_TOKEN (0x0E39),
        minimum     = 0,
        maximum     = 7,
        step        = 1,    
        default     = 0,    
      endnumeric;

      numeric varid = PCH_SETUP.PcieMemRsvd[27],
        prompt      = STRING_TOKEN (0x0E55),
        help        = STRING_TOKEN (0x0E56),
        minimum     = 1,
        maximum     = 20,
        step        = 1,    
        default     = 10,   
      endnumeric;

      numeric varid = PCH_SETUP.PcieIoRsvd[27],
        prompt      = STRING_TOKEN (0x0E72),
        help        = STRING_TOKEN (0x0E73),
        minimum     = 4,
        maximum     = 20,
        step        = 4,    
        default     = 4,    
      endnumeric;

      subtitle text = STRING_TOKEN(0x0002);

      subtitle text = STRING_TOKEN(0x0E7A);
      oneof varid   = PCH_SETUP.PchPcieLtrEnable[27],
        prompt   = STRING_TOKEN (0x0E96),
        help     = STRING_TOKEN (0x0E97),
        option text = STRING_TOKEN(0x0004),  value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      suppressif ideqval PCH_SETUP.PchPcieLtrEnable[27] == 0;
        oneof varid   = PCH_SETUP.PchPcieSnoopLatencyOverrideMode[27],
          prompt      = STRING_TOKEN (0x0F3A),
          help        = STRING_TOKEN (0x0F5D),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x09F8),   value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x158F),     value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        suppressif NOT ideqval PCH_SETUP.PchPcieSnoopLatencyOverrideMode[27] == 1;
          numeric varid = PCH_SETUP.PchPcieSnoopLatencyOverrideValue[27],
            prompt      = STRING_TOKEN(0x0F3C),
            help        = STRING_TOKEN(0x0F5F),
            flags       = RESET_REQUIRED,
            minimum     = 0,
            maximum     = 1023,
            step        = 1,
            default     = 60,
          endnumeric;

          oneof varid   = PCH_SETUP.PchPcieSnoopLatencyOverrideMultiplier[27],
            prompt      = STRING_TOKEN(0x0F3D),
            help        = STRING_TOKEN(0x0F60),
            option text = STRING_TOKEN(0x0E74), value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E75), value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E76), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E77), value = 3, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E78), value = 4, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E79), value = 5, flags = RESET_REQUIRED;
          endoneof;
        endif;

        oneof varid   = PCH_SETUP.PchPcieNonSnoopLatencyOverrideMode[27],
          prompt      = STRING_TOKEN (0x0F3B),
          help        = STRING_TOKEN (0x0F5E),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x09F8),   value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x158F),     value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        suppressif NOT ideqval PCH_SETUP.PchPcieNonSnoopLatencyOverrideMode[27] == 1;
          numeric varid = PCH_SETUP.PchPcieNonSnoopLatencyOverrideValue[27],
            prompt      = STRING_TOKEN(0x0F3E),
            help        = STRING_TOKEN(0x0F61),
            flags       = RESET_REQUIRED,
            minimum     = 0,
            maximum     = 1023,
            step        = 1,
            default     = 60,
          endnumeric;

          oneof varid   = PCH_SETUP.PchPcieNonSnoopLatencyOverrideMultiplier[27],
            prompt      = STRING_TOKEN(0x0F3F),
            help        = STRING_TOKEN(0x0F62),
            option text = STRING_TOKEN(0x0E74), value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E75), value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E76), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E77), value = 3, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E78), value = 4, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0E79), value = 5, flags = RESET_REQUIRED;
          endoneof;
        endif;




        oneof varid  = PCH_SETUP.PchPcieForceLtrOverride[27],
          prompt      = STRING_TOKEN(0x0F5B),
          help        = STRING_TOKEN(0x0F5C),
          option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
        endoneof;




      endif;

      subtitle text = STRING_TOKEN(0x0002);

      oneof varid   = PCH_SETUP.PchPcieLtrConfigLock[27],
        prompt   = STRING_TOKEN (0x0F7E),
        help     = STRING_TOKEN (0x0F7F),
        option text = STRING_TOKEN(0x0004),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = PCH_SETUP.PcieRootPortPeerMemoryWriteEnable[27],
        prompt      = STRING_TOKEN(0x0DDF),
        help        = STRING_TOKEN(0x0DE0),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

    endif;
  endform; 
#line 2614 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"

#line 2616 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"
  form formid = 5504,
    title     = STRING_TOKEN(0x128B);

    oneof varid   = PCH_SETUP.PchPcieClockUsageOverride[0],
      prompt      = STRING_TOKEN(0x128F),
      help        = STRING_TOKEN(0x128D),
      option text = STRING_TOKEN(0x1261), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0004), value = 2, flags = RESET_REQUIRED;
    endoneof;
    oneof varid   = PCH_SETUP.PchPcieClkReqSupport[0],
      prompt      = STRING_TOKEN(0x12A1),
      help        = STRING_TOKEN(0x128E),
      option text = STRING_TOKEN(0x1261), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x0004), value = 0xFF, flags = RESET_REQUIRED;
    endoneof;
    oneof varid   = PCH_SETUP.PchPcieClockUsageOverride[1],
      prompt      = STRING_TOKEN(0x1290),
      help        = STRING_TOKEN(0x128D),
      option text = STRING_TOKEN(0x1261), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0004), value = 2, flags = RESET_REQUIRED;
    endoneof;
    oneof varid   = PCH_SETUP.PchPcieClkReqSupport[1],
      prompt      = STRING_TOKEN(0x12A2),
      help        = STRING_TOKEN(0x128E),
      option text = STRING_TOKEN(0x1261), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x0004), value = 0xFF, flags = RESET_REQUIRED;
    endoneof;
    oneof varid   = PCH_SETUP.PchPcieClockUsageOverride[2],
      prompt      = STRING_TOKEN(0x1291),
      help        = STRING_TOKEN(0x128D),
      option text = STRING_TOKEN(0x1261), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0004), value = 2, flags = RESET_REQUIRED;
    endoneof;
    oneof varid   = PCH_SETUP.PchPcieClkReqSupport[2],
      prompt      = STRING_TOKEN(0x12A3),
      help        = STRING_TOKEN(0x128E),
      option text = STRING_TOKEN(0x1261), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x0004), value = 0xFF, flags = RESET_REQUIRED;
    endoneof;
    oneof varid   = PCH_SETUP.PchPcieClockUsageOverride[3],
      prompt      = STRING_TOKEN(0x1292),
      help        = STRING_TOKEN(0x128D),
      option text = STRING_TOKEN(0x1261), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0004), value = 2, flags = RESET_REQUIRED;
    endoneof;
    oneof varid   = PCH_SETUP.PchPcieClkReqSupport[3],
      prompt      = STRING_TOKEN(0x12A4),
      help        = STRING_TOKEN(0x128E),
      option text = STRING_TOKEN(0x1261), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x0004), value = 0xFF, flags = RESET_REQUIRED;
    endoneof;
    oneof varid   = PCH_SETUP.PchPcieClockUsageOverride[4],
      prompt      = STRING_TOKEN(0x1293),
      help        = STRING_TOKEN(0x128D),
      option text = STRING_TOKEN(0x1261), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0004), value = 2, flags = RESET_REQUIRED;
    endoneof;
    oneof varid   = PCH_SETUP.PchPcieClkReqSupport[4],
      prompt      = STRING_TOKEN(0x12A5),
      help        = STRING_TOKEN(0x128E),
      option text = STRING_TOKEN(0x1261), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x0004), value = 0xFF, flags = RESET_REQUIRED;
    endoneof;
    oneof varid   = PCH_SETUP.PchPcieClockUsageOverride[5],
      prompt      = STRING_TOKEN(0x1294),
      help        = STRING_TOKEN(0x128D),
      option text = STRING_TOKEN(0x1261), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0004), value = 2, flags = RESET_REQUIRED;
    endoneof;
    oneof varid   = PCH_SETUP.PchPcieClkReqSupport[5],
      prompt      = STRING_TOKEN(0x12A6),
      help        = STRING_TOKEN(0x128E),
      option text = STRING_TOKEN(0x1261), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x0004), value = 0xFF, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = PCH_SETUP.PchPcieClockUsageOverride[6],
      prompt      = STRING_TOKEN(0x1295),
      help        = STRING_TOKEN(0x128D),
      option text = STRING_TOKEN(0x1261), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0004), value = 2, flags = RESET_REQUIRED;
    endoneof;
    oneof varid   = PCH_SETUP.PchPcieClkReqSupport[6],
      prompt      = STRING_TOKEN(0x12A7),
      help        = STRING_TOKEN(0x128E),
      option text = STRING_TOKEN(0x1261), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x0004), value = 0xFF, flags = RESET_REQUIRED;
    endoneof;
    oneof varid   = PCH_SETUP.PchPcieClockUsageOverride[7],
      prompt      = STRING_TOKEN(0x1296),
      help        = STRING_TOKEN(0x128D),
      option text = STRING_TOKEN(0x1261), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0004), value = 2, flags = RESET_REQUIRED;
    endoneof;
    oneof varid   = PCH_SETUP.PchPcieClkReqSupport[7],
      prompt      = STRING_TOKEN(0x12A8),
      help        = STRING_TOKEN(0x128E),
      option text = STRING_TOKEN(0x1261), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x0004), value = 0xFF, flags = RESET_REQUIRED;
    endoneof;
    oneof varid   = PCH_SETUP.PchPcieClockUsageOverride[8],
      prompt      = STRING_TOKEN(0x1297),
      help        = STRING_TOKEN(0x128D),
      option text = STRING_TOKEN(0x1261), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0004), value = 2, flags = RESET_REQUIRED;
    endoneof;
    oneof varid   = PCH_SETUP.PchPcieClkReqSupport[8],
      prompt      = STRING_TOKEN(0x12A9),
      help        = STRING_TOKEN(0x128E),
      option text = STRING_TOKEN(0x1261), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x0004), value = 0xFF, flags = RESET_REQUIRED;
    endoneof;
    oneof varid   = PCH_SETUP.PchPcieClockUsageOverride[9],
      prompt      = STRING_TOKEN(0x1298),
      help        = STRING_TOKEN(0x128D),
      option text = STRING_TOKEN(0x1261), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0004), value = 2, flags = RESET_REQUIRED;
    endoneof;
    oneof varid   = PCH_SETUP.PchPcieClkReqSupport[9],
      prompt      = STRING_TOKEN(0x12AA),
      help        = STRING_TOKEN(0x128E),
      option text = STRING_TOKEN(0x1261), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x0004), value = 0xFF, flags = RESET_REQUIRED;
    endoneof;
    suppressif ideqval SETUP_VOLATILE_DATA.PlatformType == 0x2;
      oneof varid   = PCH_SETUP.PchPcieClockUsageOverride[10],
        prompt      = STRING_TOKEN(0x1299),
        help        = STRING_TOKEN(0x128D),
        option text = STRING_TOKEN(0x1261), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0004), value = 2, flags = RESET_REQUIRED;
      endoneof;
      oneof varid   = PCH_SETUP.PchPcieClkReqSupport[10],
        prompt      = STRING_TOKEN(0x12AB),
        help        = STRING_TOKEN(0x128E),
        option text = STRING_TOKEN(0x1261), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0004), value = 0xFF, flags = RESET_REQUIRED;
      endoneof;
      oneof varid   = PCH_SETUP.PchPcieClockUsageOverride[11],
        prompt      = STRING_TOKEN(0x129A),
        help        = STRING_TOKEN(0x128D),
        option text = STRING_TOKEN(0x1261), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0004), value = 2, flags = RESET_REQUIRED;
      endoneof;
      oneof varid   = PCH_SETUP.PchPcieClkReqSupport[11],
        prompt      = STRING_TOKEN(0x12AC),
        help        = STRING_TOKEN(0x128E),
        option text = STRING_TOKEN(0x1261), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0004), value = 0xFF, flags = RESET_REQUIRED;
      endoneof;
      oneof varid   = PCH_SETUP.PchPcieClockUsageOverride[12],
        prompt      = STRING_TOKEN(0x129B),
        help        = STRING_TOKEN(0x128D),
        option text = STRING_TOKEN(0x1261), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0004), value = 2, flags = RESET_REQUIRED;
      endoneof;
      oneof varid   = PCH_SETUP.PchPcieClkReqSupport[12],
        prompt      = STRING_TOKEN(0x12AD),
        help        = STRING_TOKEN(0x128E),
        option text = STRING_TOKEN(0x1261), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0004), value = 0xFF, flags = RESET_REQUIRED;
      endoneof;
      oneof varid   = PCH_SETUP.PchPcieClockUsageOverride[13],
        prompt      = STRING_TOKEN(0x129C),
        help        = STRING_TOKEN(0x128D),
        option text = STRING_TOKEN(0x1261), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0004), value = 2, flags = RESET_REQUIRED;
      endoneof;
      oneof varid   = PCH_SETUP.PchPcieClkReqSupport[13],
        prompt      = STRING_TOKEN(0x12AE),
        help        = STRING_TOKEN(0x128E),
        option text = STRING_TOKEN(0x1261), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0004), value = 0xFF, flags = RESET_REQUIRED;
      endoneof;
      oneof varid   = PCH_SETUP.PchPcieClockUsageOverride[14],
        prompt      = STRING_TOKEN(0x129D),
        help        = STRING_TOKEN(0x128D),
        option text = STRING_TOKEN(0x1261), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0004), value = 2, flags = RESET_REQUIRED;
      endoneof;
      oneof varid   = PCH_SETUP.PchPcieClkReqSupport[14],
        prompt      = STRING_TOKEN(0x12AF),
        help        = STRING_TOKEN(0x128E),
        option text = STRING_TOKEN(0x1261), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0004), value = 0xFF, flags = RESET_REQUIRED;
      endoneof;
      oneof varid   = PCH_SETUP.PchPcieClockUsageOverride[15],
        prompt      = STRING_TOKEN(0x129E),
        help        = STRING_TOKEN(0x128D),
        option text = STRING_TOKEN(0x1261), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0004), value = 2, flags = RESET_REQUIRED;
      endoneof;
      oneof varid   = PCH_SETUP.PchPcieClkReqSupport[15],
        prompt      = STRING_TOKEN(0x12B0),
        help        = STRING_TOKEN(0x128E),
        option text = STRING_TOKEN(0x1261), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0004), value = 0xFF, flags = RESET_REQUIRED;
      endoneof;
      oneof varid   = PCH_SETUP.PchPcieClockUsageOverride[16],
        prompt      = STRING_TOKEN(0x129F),
        help        = STRING_TOKEN(0x128D),
        option text = STRING_TOKEN(0x1261), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0004), value = 2, flags = RESET_REQUIRED;
      endoneof;
      oneof varid   = PCH_SETUP.PchPcieClkReqSupport[16],
        prompt      = STRING_TOKEN(0x12B1),
        help        = STRING_TOKEN(0x128E),
        option text = STRING_TOKEN(0x1261), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0004), value = 0xFF, flags = RESET_REQUIRED;
      endoneof;
      oneof varid   = PCH_SETUP.PchPcieClockUsageOverride[17],
        prompt      = STRING_TOKEN(0x12A0),
        help        = STRING_TOKEN(0x128D),
        option text = STRING_TOKEN(0x1261), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0004), value = 2, flags = RESET_REQUIRED;
      endoneof;
      oneof varid   = PCH_SETUP.PchPcieClkReqSupport[17],
        prompt      = STRING_TOKEN(0x12B2),
        help        = STRING_TOKEN(0x128E),
        option text = STRING_TOKEN(0x1261), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0004), value = 0xFF, flags = RESET_REQUIRED;
      endoneof;
    endif;
  endform;

  form formid = 5422,
    title     = STRING_TOKEN(0x0AFD);

    suppressif ideqval SETUP_VOLATILE_DATA.ThcAvailable == 0;
      subtitle text = STRING_TOKEN(0x0AFE);
      subtitle text = STRING_TOKEN(0x0002);






#line 2871 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"

    #line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchThcStringPool.hfr"



















































































#line 2873 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"

    
      #line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchThcController.hfr"






































  oneof varid  = PCH_SETUP.ThcPort0Assignment,
#line 41 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchThcController.hfr"


#line 44 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchThcController.hfr"
    prompt   = STRING_TOKEN(0x0B00),
    help     = STRING_TOKEN(0x0B01),
    option text = STRING_TOKEN(0x0B02), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;

    option text = STRING_TOKEN(0x0B03), value = 1, flags = RESET_REQUIRED;
#line 50 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchThcController.hfr"


#line 53 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchThcController.hfr"
  endoneof;


  suppressif ideqval PCH_SETUP.ThcPort0Assignment == 0x0;
    oneof varid  = PCH_SETUP.ThcPort0Clock,
#line 59 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchThcController.hfr"



#line 63 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchThcController.hfr"

      prompt   = STRING_TOKEN(0x0B06),
      help     = STRING_TOKEN(0x0B05),
      option text = STRING_TOKEN(0x0B07), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x0B08), value = 1, flags = RESET_REQUIRED;
    endoneof;
    numeric varid  = PCH_SETUP.ThcActiveLtr[0],
      prompt   = STRING_TOKEN(0x0B0F),
      help     = STRING_TOKEN(0x0B10),
      flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
      minimum  = 0,
      maximum  = 0xFFFFFFFF,
      step     = 1,
      default  = 0xFFFFFFFF,
    endnumeric;
    numeric varid  = PCH_SETUP.ThcIdleLtr[0],
      prompt   = STRING_TOKEN(0x0B11),
      help     = STRING_TOKEN(0x0B12),
      flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
      minimum  = 0,
      maximum  = 0xFFFFFFFF,
      step     = 1,
      default  = 0xFFFFFFFF,
    endnumeric;
      numeric varid  = PCH_SETUP.ThcLimitPacketSize[0],
        prompt   = STRING_TOKEN(0x0B15),
        help     = STRING_TOKEN(0x0B16),
        flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
        minimum  = 0,
        maximum  = 0x1,
        step     = 1,
        default  = 0,
      endnumeric;
      numeric varid  = PCH_SETUP.ThcPerformanceLimitation[0],
        prompt   = STRING_TOKEN(0x0B17),
        help     = STRING_TOKEN(0x0B18),
        flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
        minimum  = 0,
        maximum  = 0xFFFF,
        step     = 1,
        default  = 0,
      endnumeric;

    oneof varid  = PCH_SETUP.ThcPort0WakeOnTouch,
#line 108 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchThcController.hfr"


#line 111 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchThcController.hfr"

     prompt   = STRING_TOKEN(0x0B09),
     help     = STRING_TOKEN(0x0B0A),
     option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
     option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
    endoneof;









#line 127 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchThcController.hfr"
    oneof varid  = PCH_SETUP.ThcMode[0],
      prompt   = STRING_TOKEN(0x0B0B),
      help     = STRING_TOKEN(0x0B0C),
      option text = STRING_TOKEN(0x0B0D), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x0B0E), value = 1, flags = RESET_REQUIRED;
    endoneof;
#line 134 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchThcController.hfr"
    suppressif ideqval PCH_SETUP.ThcMode[0] == 0x0;
      numeric varid  = PCH_SETUP.ThcHidConnectionSpeed[0],
        prompt   = STRING_TOKEN(0x0B13),
        help     = STRING_TOKEN(0x0B14),
        flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
        minimum  = 0,
        maximum  = 40000000,
        step     = 1,
        default  = 17000000,
      endnumeric;
      oneof varid  = PCH_SETUP.ThcHidFlags[0],
        prompt   = STRING_TOKEN(0x0B19),
        help     = STRING_TOKEN(0x0B1A),
        option text = STRING_TOKEN(0x0B1B), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0B1C), value = 0x4000, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0B1D), value = 0x8000, flags = RESET_REQUIRED;
      endoneof;
      numeric varid  = PCH_SETUP.ThcHidInputReportBodyAddress[0],
        prompt   = STRING_TOKEN(0x0B1E),
        help     = STRING_TOKEN(0x0B1F),
        flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
        minimum  = 0,
        maximum  = 0xFFFFFFFF,
        step     = 1,
        default  = 0,
      endnumeric;
      numeric varid  = PCH_SETUP.ThcHidInputReportHeaderAddress[0],
        prompt   = STRING_TOKEN(0x0B20),
        help     = STRING_TOKEN(0x0B21),
        flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
        minimum  = 0,
        maximum  = 0xFFFFFFFF,
        step     = 1,
        default  = 0,
      endnumeric;
      numeric varid  = PCH_SETUP.ThcHidOutputReportAddress[0],
        prompt   = STRING_TOKEN(0x0B22),
        help     = STRING_TOKEN(0x0B23),
        flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
        minimum  = 0,
        maximum  = 0xFFFFFFFF,
        step     = 1,
        default  = 0,
      endnumeric;
      numeric varid  = PCH_SETUP.ThcHidWriteOpcode[0],
        prompt   = STRING_TOKEN(0x0B24),
        help     = STRING_TOKEN(0x0B25),
        flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
        minimum  = 0,
        maximum  = 0xFFFFFFFF,
        step     = 1,
        default  = 0,
      endnumeric;
      numeric varid  = PCH_SETUP.ThcHidReadOpcode[0],
        prompt   = STRING_TOKEN(0x0B26),
        help     = STRING_TOKEN(0x0B27),
        flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
        minimum  = 0,
        maximum  = 0xFFFFFFFF,
        step     = 1,
        default  = 0,
      endnumeric;
      oneof varid  = PCH_SETUP.ThcHidResetPadTrigger[0],
        prompt   = STRING_TOKEN(0x0B28),
        help     = STRING_TOKEN(0x0B29),
        option text = STRING_TOKEN(0x0B2A), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0B2B), value = 1, flags = RESET_REQUIRED;
      endoneof;
    endif;
  endif;
#line 205 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchThcController.hfr"

#line 2876 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"
    

    
      #line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchThcController.hfr"







































#line 41 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchThcController.hfr"

  oneof varid  = PCH_SETUP.ThcPort1Assignment,
#line 44 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchThcController.hfr"
    prompt   = STRING_TOKEN(0x0B00),
    help     = STRING_TOKEN(0x0B01),
    option text = STRING_TOKEN(0x0B02), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;


#line 50 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchThcController.hfr"

    option text = STRING_TOKEN(0x0B04), value = 2, flags = RESET_REQUIRED;
#line 53 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchThcController.hfr"
  endoneof;




#line 59 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchThcController.hfr"

  suppressif ideqval PCH_SETUP.ThcPort1Assignment == 0x0;
    oneof varid  = PCH_SETUP.ThcPort1Clock,
#line 63 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchThcController.hfr"

      prompt   = STRING_TOKEN(0x0B06),
      help     = STRING_TOKEN(0x0B05),
      option text = STRING_TOKEN(0x0B07), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x0B08), value = 1, flags = RESET_REQUIRED;
    endoneof;
    numeric varid  = PCH_SETUP.ThcActiveLtr[1],
      prompt   = STRING_TOKEN(0x0B0F),
      help     = STRING_TOKEN(0x0B10),
      flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
      minimum  = 0,
      maximum  = 0xFFFFFFFF,
      step     = 1,
      default  = 0xFFFFFFFF,
    endnumeric;
    numeric varid  = PCH_SETUP.ThcIdleLtr[1],
      prompt   = STRING_TOKEN(0x0B11),
      help     = STRING_TOKEN(0x0B12),
      flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
      minimum  = 0,
      maximum  = 0xFFFFFFFF,
      step     = 1,
      default  = 0xFFFFFFFF,
    endnumeric;
      numeric varid  = PCH_SETUP.ThcLimitPacketSize[1],
        prompt   = STRING_TOKEN(0x0B15),
        help     = STRING_TOKEN(0x0B16),
        flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
        minimum  = 0,
        maximum  = 0x1,
        step     = 1,
        default  = 0,
      endnumeric;
      numeric varid  = PCH_SETUP.ThcPerformanceLimitation[1],
        prompt   = STRING_TOKEN(0x0B17),
        help     = STRING_TOKEN(0x0B18),
        flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
        minimum  = 0,
        maximum  = 0xFFFF,
        step     = 1,
        default  = 0,
      endnumeric;


#line 108 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchThcController.hfr"

    oneof varid  = PCH_SETUP.ThcPort1WakeOnTouch,
#line 111 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchThcController.hfr"

     prompt   = STRING_TOKEN(0x0B09),
     help     = STRING_TOKEN(0x0B0A),
     option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
     option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
    endoneof;









#line 127 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchThcController.hfr"
    oneof varid  = PCH_SETUP.ThcMode[1],
      prompt   = STRING_TOKEN(0x0B0B),
      help     = STRING_TOKEN(0x0B0C),
      option text = STRING_TOKEN(0x0B0D), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x0B0E), value = 1, flags = RESET_REQUIRED;
    endoneof;
#line 134 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchThcController.hfr"
    suppressif ideqval PCH_SETUP.ThcMode[1] == 0x0;
      numeric varid  = PCH_SETUP.ThcHidConnectionSpeed[1],
        prompt   = STRING_TOKEN(0x0B13),
        help     = STRING_TOKEN(0x0B14),
        flags    = RESET_REQUIRED | DISPLAY_UINT_DEC,
        minimum  = 0,
        maximum  = 40000000,
        step     = 1,
        default  = 17000000,
      endnumeric;
      oneof varid  = PCH_SETUP.ThcHidFlags[1],
        prompt   = STRING_TOKEN(0x0B19),
        help     = STRING_TOKEN(0x0B1A),
        option text = STRING_TOKEN(0x0B1B), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0B1C), value = 0x4000, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0B1D), value = 0x8000, flags = RESET_REQUIRED;
      endoneof;
      numeric varid  = PCH_SETUP.ThcHidInputReportBodyAddress[1],
        prompt   = STRING_TOKEN(0x0B1E),
        help     = STRING_TOKEN(0x0B1F),
        flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
        minimum  = 0,
        maximum  = 0xFFFFFFFF,
        step     = 1,
        default  = 0,
      endnumeric;
      numeric varid  = PCH_SETUP.ThcHidInputReportHeaderAddress[1],
        prompt   = STRING_TOKEN(0x0B20),
        help     = STRING_TOKEN(0x0B21),
        flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
        minimum  = 0,
        maximum  = 0xFFFFFFFF,
        step     = 1,
        default  = 0,
      endnumeric;
      numeric varid  = PCH_SETUP.ThcHidOutputReportAddress[1],
        prompt   = STRING_TOKEN(0x0B22),
        help     = STRING_TOKEN(0x0B23),
        flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
        minimum  = 0,
        maximum  = 0xFFFFFFFF,
        step     = 1,
        default  = 0,
      endnumeric;
      numeric varid  = PCH_SETUP.ThcHidWriteOpcode[1],
        prompt   = STRING_TOKEN(0x0B24),
        help     = STRING_TOKEN(0x0B25),
        flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
        minimum  = 0,
        maximum  = 0xFFFFFFFF,
        step     = 1,
        default  = 0,
      endnumeric;
      numeric varid  = PCH_SETUP.ThcHidReadOpcode[1],
        prompt   = STRING_TOKEN(0x0B26),
        help     = STRING_TOKEN(0x0B27),
        flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
        minimum  = 0,
        maximum  = 0xFFFFFFFF,
        step     = 1,
        default  = 0,
      endnumeric;
      oneof varid  = PCH_SETUP.ThcHidResetPadTrigger[1],
        prompt   = STRING_TOKEN(0x0B28),
        help     = STRING_TOKEN(0x0B29),
        option text = STRING_TOKEN(0x0B2A), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0B2B), value = 1, flags = RESET_REQUIRED;
      endoneof;
    endif;
  endif;
#line 205 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchThcController.hfr"

#line 2880 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"
    

    endif;

    suppressif ideqval SETUP_VOLATILE_DATA.ThcAvailable == 1;
      subtitle text = STRING_TOKEN(0x0AFF);
      subtitle text = STRING_TOKEN(0x0002);
    endif;

  endform; 

  form formid = 4156,
    title     = STRING_TOKEN(0x0A17);

    subtitle text = STRING_TOKEN(0x0A18);
    subtitle text = STRING_TOKEN(0x0002);






#line 2903 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"
    oneof varid  = PCH_SETUP.PchHdAudio,
      prompt   = STRING_TOKEN(0x0A1D),
      help     = STRING_TOKEN(0x0A1E),



#line 2910 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"
      option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
#line 2913 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"
    endoneof;



#line 2918 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"

    suppressif ideqval PCH_SETUP.PchHdAudio == 0x0;
      grayoutif ideqval SETUP_VOLATILE_DATA.AudioDspFusedOut == 0x1;
        oneof varid  = PCH_SETUP.PchHdAudioDsp,
          prompt   = STRING_TOKEN(0x0A1F),
          help     = STRING_TOKEN(0x0A20),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
      endif;

      suppressif ideqval PCH_SETUP.PchHdAudioDsp == 0x0 OR
                 ideqval SETUP_VOLATILE_DATA.AudioDspFusedOut == 0x1;
        oneof varid  = PCH_SETUP.PchHdAudioDspUaaCompliance,
          prompt   = STRING_TOKEN(0x0A21),
          help     = STRING_TOKEN(0x0A22),
          option text = STRING_TOKEN(0x0A23), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0A24), value = 1, flags = RESET_REQUIRED;
        endoneof;
      endif; 

      
      grayoutif ideqval PCH_SETUP.PchHdAudioSspLinkEnable[0] == 1 OR ideqval PCH_SETUP.PchHdAudioSndwLinkEnable[0] == 1;  
        suppressif ideqval SETUP_VOLATILE_DATA.AudioHdaLinkSupported == 0;
          oneof varid  = PCH_SETUP.PchHdAudioHdaLinkEnable,
            prompt   = STRING_TOKEN(0x0A26),
            help     = STRING_TOKEN(0x0A25),
            option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          endoneof;
        endif; 
      endif; 















































#line 2998 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"
      
      grayoutif ideqval PCH_SETUP.PchHdAudioSndwLinkEnable[3] == 1; 
        suppressif ideqval SETUP_VOLATILE_DATA.AudioDmicLinkSupported[0] == 0;
          oneof varid  = PCH_SETUP.PchHdAudioDmicLinkEnable[0],
            prompt   = STRING_TOKEN(0x0A27),
            help     = STRING_TOKEN(0x0A25),
            option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          endoneof;
          grayoutif ideqval PCH_SETUP.PchHdAudioSndwLinkEnable[1] == 1; 
            suppressif ideqval PCH_SETUP.PchHdAudioDmicLinkEnable[0] == 0;
              oneof varid  = PCH_SETUP.PchHdAudioDmicClockSelect[0],
                prompt   = STRING_TOKEN(0x0A50),
                help     = STRING_TOKEN(0x0A51),
                option text = STRING_TOKEN(0x0A52), value = 0, flags = RESET_REQUIRED;
                option text = STRING_TOKEN(0x0A53), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
                option text = STRING_TOKEN(0x0A54), value = 2, flags = RESET_REQUIRED;
              endoneof;
            endif; 
          endif; 
        endif; 
      endif; 

      
      grayoutif ideqval PCH_SETUP.PchHdAudioSndwLinkEnable[2] == 1; 
        suppressif ideqval SETUP_VOLATILE_DATA.AudioDmicLinkSupported[1] == 0;
          oneof varid  = PCH_SETUP.PchHdAudioDmicLinkEnable[1],
            prompt   = STRING_TOKEN(0x0A28),
            help     = STRING_TOKEN(0x0A25),
            option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          endoneof;
          grayoutif ideqval PCH_SETUP.PchHdAudioSndwLinkEnable[1] == 1; 
            suppressif ideqval PCH_SETUP.PchHdAudioDmicLinkEnable[1] == 0;
              oneof varid  = PCH_SETUP.PchHdAudioDmicClockSelect[1],
                prompt   = STRING_TOKEN(0x0A50),
                help     = STRING_TOKEN(0x0A51),
                option text = STRING_TOKEN(0x0A52), value = 0, flags = RESET_REQUIRED;
                option text = STRING_TOKEN(0x0A53), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
                option text = STRING_TOKEN(0x0A54), value = 2, flags = RESET_REQUIRED;
              endoneof;
            endif; 
          endif; 
        endif; 
      endif; 
#line 3044 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"

      
      grayoutif ideqval PCH_SETUP.PchHdAudioHdaLinkEnable == 1; 
        suppressif ideqval SETUP_VOLATILE_DATA.AudioSspLinkSupported[0] == 0;
          oneof varid  = PCH_SETUP.PchHdAudioSspLinkEnable[0],
            prompt   = STRING_TOKEN(0x0A29),
            help     = STRING_TOKEN(0x0A25),
            option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
          endoneof;
        endif; 
      endif; 

      
      suppressif ideqval SETUP_VOLATILE_DATA.AudioSspLinkSupported[1] == 0;
          oneof varid  = PCH_SETUP.PchHdAudioSspLinkEnable[1],
            prompt   = STRING_TOKEN(0x0A2A),
            help     = STRING_TOKEN(0x0A25),
            option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
          endoneof;
      endif; 

      
      suppressif ideqval SETUP_VOLATILE_DATA.AudioSspLinkSupported[2] == 0;
        grayoutif NOT match (stringref (STRING_TOKEN (0x0104)), stringref (STRING_TOKEN (0x0103)));
          oneof varid  = PCH_SETUP.PchHdAudioSspLinkEnable[2],
            prompt   = STRING_TOKEN(0x0A2B),
            help     = STRING_TOKEN(0x0A25),
            option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
          endoneof;
        endif;
      endif;

      
      suppressif ideqval SETUP_VOLATILE_DATA.AudioSspLinkSupported[3] == 0;
          oneof varid  = PCH_SETUP.PchHdAudioSspLinkEnable[3],
            prompt   = STRING_TOKEN(0x0A2C),
            help     = STRING_TOKEN(0x0A25),
            option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
          endoneof;
      endif;

      
      suppressif ideqval SETUP_VOLATILE_DATA.AudioSspLinkSupported[4] == 0;
          oneof varid  = PCH_SETUP.PchHdAudioSspLinkEnable[4],
            prompt   = STRING_TOKEN(0x0A2D),
            help     = STRING_TOKEN(0x0A25),
            option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
          endoneof;
      endif;

      
      suppressif ideqval SETUP_VOLATILE_DATA.AudioSspLinkSupported[5] == 0;
          oneof varid  = PCH_SETUP.PchHdAudioSspLinkEnable[5],
            prompt   = STRING_TOKEN(0x0A2E),
            help     = STRING_TOKEN(0x0A25),
            option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
          endoneof;
      endif;


















































#line 3159 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"
      
    grayoutif ideqval PCH_SETUP.PchHdAudioHdaLinkEnable == 1; 
      suppressif ideqval SETUP_VOLATILE_DATA.AudioSndwLinkSupported[0] == 0;
          oneof varid  = PCH_SETUP.PchHdAudioSndwLinkEnable[0],
            prompt   = STRING_TOKEN(0x0A30),
            help     = STRING_TOKEN(0x0A25),
            option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
          endoneof;
      endif; 
    endif; 

      
      grayoutif (((ideqval PCH_SETUP.PchHdAudioDmicLinkEnable[0] == 1) AND (ideqval PCH_SETUP.PchHdAudioDmicClockSelect[0] == 0)) OR 
                ((ideqval PCH_SETUP.PchHdAudioDmicLinkEnable[1] == 1) AND (ideqval PCH_SETUP.PchHdAudioDmicClockSelect[1] == 0)) OR 
                ((ideqval PCH_SETUP.PchHdAudioDmicLinkEnable[0] == 1) AND (ideqval PCH_SETUP.PchHdAudioDmicClockSelect[0] == 2)) OR 
                ((ideqval PCH_SETUP.PchHdAudioDmicLinkEnable[1] == 1) AND (ideqval PCH_SETUP.PchHdAudioDmicClockSelect[1] == 2))); 
        suppressif ideqval SETUP_VOLATILE_DATA.AudioSndwLinkSupported[1] == 0;
          oneof varid  = PCH_SETUP.PchHdAudioSndwLinkEnable[1],
            prompt   = STRING_TOKEN(0x0A31),
            help     = STRING_TOKEN(0x0A25),
            option text = STRING_TOKEN(0x0004), value = 0, flags =  DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
          endoneof;
        endif; 
      endif; 

      
     grayoutif ideqval PCH_SETUP.PchHdAudioDmicLinkEnable[1] == 1; 
        suppressif ideqval SETUP_VOLATILE_DATA.AudioSndwLinkSupported[2] == 0;
          oneof varid  = PCH_SETUP.PchHdAudioSndwLinkEnable[2],
            prompt   = STRING_TOKEN(0x0A32),
            help     = STRING_TOKEN(0x0A25),
            option text = STRING_TOKEN(0x0004), value = 0, flags =  DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
          endoneof;
        endif; 
      endif; 

      
      grayoutif ideqval PCH_SETUP.PchHdAudioDmicLinkEnable[0] == 1; 
        suppressif ideqval SETUP_VOLATILE_DATA.AudioSndwLinkSupported[3] == 0;
          oneof varid  = PCH_SETUP.PchHdAudioSndwLinkEnable[3],
            prompt   = STRING_TOKEN(0x0A33),
            help     = STRING_TOKEN(0x0A25),
            option text = STRING_TOKEN(0x0004), value = 0, flags =  DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
          endoneof;
        endif; 
      endif; 
#line 3210 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"

    goto 4159,
      prompt = STRING_TOKEN(0x0A19),
      help = STRING_TOKEN(0x0A1A);

    suppressif ideqval PCH_SETUP.PchHdAudioDsp == 0x0 OR
               ideqval SETUP_VOLATILE_DATA.AudioDspFusedOut == 0x1;
      goto 4160,
        prompt = STRING_TOKEN(0x0A1B),
        help = STRING_TOKEN(0x0A1C);
    endif; 
    endif; 

  
  
  
    oneof varid  = PCH_SETUP.AudioSubsystemIds,
      prompt   = STRING_TOKEN(0x0AB3),
      help     = STRING_TOKEN(0x0AB4),
      flags    = DISPLAY_UINT_HEX,
      option text = STRING_TOKEN(0x0AB5), value = 0x72708086, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x0AB6), value = 0x300010EC, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0AB7), value = 0x300210EC, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0AB8), value = 0x300410EC, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0AB9), value = 0x300610EC, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0ABA), value = 0x300810EC, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0ABB), value = 0x300A10EC, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0ABC), value = 0x300C10EC, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0ABD), value = 0x300E10EC, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0ABE), value = 0x301010EC, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0ABF), value = 0x301210EC, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0AC0), value = 0x301610EC, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0AC1), value = 0x301810EC, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0AC2), value = 0x301A10EC, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0AC3), value = 0x301C10EC, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0AC4), value = 0x301E10EC, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0AC5), value = 0x302010EC, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0AC6), value = 0x302210EC, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0AC7), value = 0x302410EC, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0AC8), value = 0x302610EC, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0AC9), value = 0x302810EC, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0ACA), value = 0x302A10EC, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0ACB), value = 0x302C10EC, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0ACC), value = 0x302E10EC, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0ACD), value = 0x303010EC, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0ACE), value = 0x304210EC, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0ACF), value = 0x304A10EC, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0AD0), value = 0x305410EC, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0AD2), value = 0x305610EC, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0AD1), value = 0x0A321028, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = PCH_SETUP.HdaVcType,
      prompt      = STRING_TOKEN(0x0AD3),
      help        = STRING_TOKEN(0x0AD4),
      option text = STRING_TOKEN(0x0AD5), value = 0, flags = DEFAULT | RESET_REQUIRED;
      option text = STRING_TOKEN(0x0AD6), value = 1, flags = RESET_REQUIRED;
    endoneof;
  
  
  












#line 3284 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"

  endform; 

  form formid = 4159,
    title     = STRING_TOKEN(0x0A19);

    subtitle text = STRING_TOKEN(0x0A1A);
    subtitle text = STRING_TOKEN(0x0002);

    oneof varid  = PCH_SETUP.PchHdaIDisplayCodecDisconnect,
      prompt   = STRING_TOKEN(0x0A55),
      help     = STRING_TOKEN(0x0A56),
      option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid  = PCH_SETUP.PchHdAudioCodecSxWakeCapability,
      prompt   = STRING_TOKEN(0x0A57),
      help     = STRING_TOKEN(0x0A58),
      option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid  = PCH_SETUP.PchHdAudioPme,
      prompt   = STRING_TOKEN(0x0A59),
      help     = STRING_TOKEN(0x0A5A),
      option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
    endoneof;

    text
       help   = STRING_TOKEN(0x0A5B),
       text   = STRING_TOKEN(0x0A5B),
       flags  = 0,
       key    = 0;

    oneof varid        = PCH_SETUP.PchHdaHdAudioLinkFreq,
           prompt      = STRING_TOKEN(0x0A5C),
           help        = STRING_TOKEN(0x0A5D),
           option text = STRING_TOKEN(0x0A60),  value = 0, flags = RESET_REQUIRED;
           option text = STRING_TOKEN(0x0A61), value = 1, flags = RESET_REQUIRED;
           option text = STRING_TOKEN(0x0A62), value = 2, flags = DEFAULT | RESET_REQUIRED;
    endoneof;

    oneof varid        = PCH_SETUP.PchHdaIDisplayLinkFreq,
           prompt      = STRING_TOKEN(0x0A5E),
           help        = STRING_TOKEN(0x0A5F),
           option text = STRING_TOKEN(0x0A63), value = 3, flags = RESET_REQUIRED;
           option text = STRING_TOKEN(0x0A64), value = 4, flags = DEFAULT | RESET_REQUIRED;
    endoneof;

    oneof varid  = PCH_SETUP.PchHdaIDisplayLinkTmode,
      prompt   = STRING_TOKEN(0x0A65),
      help     = STRING_TOKEN(0x0A66),
      option text = STRING_TOKEN(0x0A67), value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0A68), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0A69), value = 2, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0A6A), value = 3, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x0A6B), value = 4, flags = RESET_REQUIRED;
    endoneof;


























































































#line 3435 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"
    oneof varid  = PCH_SETUP.PchHdaAutonomousClockStopSndw[0],
      prompt   = STRING_TOKEN(0x0A35),
      help     = STRING_TOKEN(0x0A3A),
      option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid  = PCH_SETUP.PchHdaAutonomousClockStopSndw[1],
      prompt   = STRING_TOKEN(0x0A36),
      help     = STRING_TOKEN(0x0A3B),
      option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid  = PCH_SETUP.PchHdaAutonomousClockStopSndw[2],
      prompt   = STRING_TOKEN(0x0A37),
      help     = STRING_TOKEN(0x0A3C),
      option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid  = PCH_SETUP.PchHdaAutonomousClockStopSndw[3],
      prompt   = STRING_TOKEN(0x0A38),
      help     = STRING_TOKEN(0x0A3D),
      option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid  = PCH_SETUP.PchHdaDataOnActiveIntervalSelectSndw[0],
      prompt   = STRING_TOKEN(0x0A3F),
      help     = STRING_TOKEN(0x0A43),
      option text = STRING_TOKEN(0x0A44), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0A45), value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0A46), value = 2, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0A47), value = 3, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    oneof varid  = PCH_SETUP.PchHdaDataOnActiveIntervalSelectSndw[1],
      prompt   = STRING_TOKEN(0x0A40),
      help     = STRING_TOKEN(0x0A43),
      option text = STRING_TOKEN(0x0A44), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0A45), value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0A46), value = 2, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0A47), value = 3, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    oneof varid  = PCH_SETUP.PchHdaDataOnActiveIntervalSelectSndw[2],
      prompt   = STRING_TOKEN(0x0A41),
      help     = STRING_TOKEN(0x0A43),
      option text = STRING_TOKEN(0x0A44), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0A45), value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0A46), value = 2, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0A47), value = 3, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    oneof varid  = PCH_SETUP.PchHdaDataOnActiveIntervalSelectSndw[3],
      prompt   = STRING_TOKEN(0x0A42),
      help     = STRING_TOKEN(0x0A43),
      option text = STRING_TOKEN(0x0A44), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0A45), value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0A46), value = 2, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0A47), value = 3, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    oneof varid  = PCH_SETUP.PchHdaDataOnDelaySelectSndw[0],
      prompt   = STRING_TOKEN(0x0A49),
      help     = STRING_TOKEN(0x0A4D),
      option text = STRING_TOKEN(0x0A4E), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0A4F), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;
    oneof varid  = PCH_SETUP.PchHdaDataOnDelaySelectSndw[1],
      prompt   = STRING_TOKEN(0x0A4A),
      help     = STRING_TOKEN(0x0A4D),
      option text = STRING_TOKEN(0x0A4E), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0A4F), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;
    oneof varid  = PCH_SETUP.PchHdaDataOnDelaySelectSndw[2],
      prompt   = STRING_TOKEN(0x0A4B),
      help     = STRING_TOKEN(0x0A4D),
      option text = STRING_TOKEN(0x0A4E), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0A4F), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;
    oneof varid  = PCH_SETUP.PchHdaDataOnDelaySelectSndw[3],
      prompt   = STRING_TOKEN(0x0A4C),
      help     = STRING_TOKEN(0x0A4D),
      option text = STRING_TOKEN(0x0A4E), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0A4F), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;
#line 3524 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"




        oneof varid  = PCH_SETUP.PchHdaSndwDeviceConfiguration[0],
          prompt   = STRING_TOKEN(0x0AD7),
          help     = STRING_TOKEN(0x0AD8),
          option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
        endoneof;




  endform; 

  form formid = 4160,
    title     = STRING_TOKEN(0x0A1B);

    subtitle text = STRING_TOKEN(0x0A1C);
    subtitle text = STRING_TOKEN(0x0002);

    grayoutif NOT ideqval PCH_SETUP.PchHdAudioDspUaaCompliance == 0x0;
      
      text
         help   = STRING_TOKEN(0x0A6C),
         text   = STRING_TOKEN(0x0A6C),
         flags  = 0,
         key    = 0;

      grayoutif ideqval PCH_SETUP.PchHdAudioDmicLinkEnable[0] == 0 AND
                ideqval PCH_SETUP.PchHdAudioDmicLinkEnable[1] == 0;
        grayoutif ideqval NHLT_ENDPOINTS_TABLE_CONFIGURATION_VARIABLE.NhltConfigurationEnabled[1] == 1 OR
                  ideqval NHLT_ENDPOINTS_TABLE_CONFIGURATION_VARIABLE.NhltConfigurationEnabled[2] == 1 OR
                  ideqval NHLT_ENDPOINTS_TABLE_CONFIGURATION_VARIABLE.NhltConfigurationEnabled[5] == 1 OR
                  ideqval NHLT_ENDPOINTS_TABLE_CONFIGURATION_VARIABLE.NhltConfigurationEnabled[6] == 1 OR
                  ideqval NHLT_ENDPOINTS_TABLE_CONFIGURATION_VARIABLE.NhltConfigurationEnabled[7] == 1;
          oneof varid   = NHLT_ENDPOINTS_TABLE_CONFIGURATION_VARIABLE.NhltConfigurationEnabled[0],
            prompt      = STRING_TOKEN(0x0A6D),
            help        = STRING_TOKEN(0x0A6E),
            option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
          endoneof;
        endif;

        grayoutif ideqval NHLT_ENDPOINTS_TABLE_CONFIGURATION_VARIABLE.NhltConfigurationEnabled[0] == 1 OR
                  ideqval NHLT_ENDPOINTS_TABLE_CONFIGURATION_VARIABLE.NhltConfigurationEnabled[2] == 1 OR
                  ideqval NHLT_ENDPOINTS_TABLE_CONFIGURATION_VARIABLE.NhltConfigurationEnabled[5] == 1 OR
                  ideqval NHLT_ENDPOINTS_TABLE_CONFIGURATION_VARIABLE.NhltConfigurationEnabled[6] == 1 OR
                  ideqval NHLT_ENDPOINTS_TABLE_CONFIGURATION_VARIABLE.NhltConfigurationEnabled[7] == 1;
          oneof varid   = NHLT_ENDPOINTS_TABLE_CONFIGURATION_VARIABLE.NhltConfigurationEnabled[1],
            prompt      = STRING_TOKEN(0x0A6F),
            help        = STRING_TOKEN(0x0A70),
            option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
          endoneof;
        endif;

        grayoutif ideqval NHLT_ENDPOINTS_TABLE_CONFIGURATION_VARIABLE.NhltConfigurationEnabled[0] == 1 OR
                  ideqval NHLT_ENDPOINTS_TABLE_CONFIGURATION_VARIABLE.NhltConfigurationEnabled[1] == 1 OR
                  ideqval NHLT_ENDPOINTS_TABLE_CONFIGURATION_VARIABLE.NhltConfigurationEnabled[5] == 1 OR
                  ideqval NHLT_ENDPOINTS_TABLE_CONFIGURATION_VARIABLE.NhltConfigurationEnabled[6] == 1 OR
                  ideqval NHLT_ENDPOINTS_TABLE_CONFIGURATION_VARIABLE.NhltConfigurationEnabled[7] == 1;
          oneof varid   = NHLT_ENDPOINTS_TABLE_CONFIGURATION_VARIABLE.NhltConfigurationEnabled[2],
            prompt      = STRING_TOKEN(0x0A71),
            help        = STRING_TOKEN(0x0A72),
            option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
          endoneof;
        endif;

        grayoutif ideqval NHLT_ENDPOINTS_TABLE_CONFIGURATION_VARIABLE.NhltConfigurationEnabled[0] == 1 OR
                  ideqval NHLT_ENDPOINTS_TABLE_CONFIGURATION_VARIABLE.NhltConfigurationEnabled[1] == 1 OR
                  ideqval NHLT_ENDPOINTS_TABLE_CONFIGURATION_VARIABLE.NhltConfigurationEnabled[2] == 1 OR
                  ideqval NHLT_ENDPOINTS_TABLE_CONFIGURATION_VARIABLE.NhltConfigurationEnabled[6] == 1 OR
                  ideqval NHLT_ENDPOINTS_TABLE_CONFIGURATION_VARIABLE.NhltConfigurationEnabled[7] == 1;
          oneof varid   = NHLT_ENDPOINTS_TABLE_CONFIGURATION_VARIABLE.NhltConfigurationEnabled[5],
            prompt      = STRING_TOKEN(0x0A77),
            help        = STRING_TOKEN(0x0A78),
            option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
          endoneof;
        endif;

        grayoutif ideqval NHLT_ENDPOINTS_TABLE_CONFIGURATION_VARIABLE.NhltConfigurationEnabled[0] == 1 OR
                  ideqval NHLT_ENDPOINTS_TABLE_CONFIGURATION_VARIABLE.NhltConfigurationEnabled[1] == 1 OR
                  ideqval NHLT_ENDPOINTS_TABLE_CONFIGURATION_VARIABLE.NhltConfigurationEnabled[2] == 1 OR
                  ideqval NHLT_ENDPOINTS_TABLE_CONFIGURATION_VARIABLE.NhltConfigurationEnabled[5] == 1 OR
                  ideqval NHLT_ENDPOINTS_TABLE_CONFIGURATION_VARIABLE.NhltConfigurationEnabled[7] == 1;
          oneof varid   = NHLT_ENDPOINTS_TABLE_CONFIGURATION_VARIABLE.NhltConfigurationEnabled[6],
            prompt      = STRING_TOKEN(0x0A79),
            help        = STRING_TOKEN(0x0A7A),
            option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
          endoneof;
        endif;

        grayoutif ideqval NHLT_ENDPOINTS_TABLE_CONFIGURATION_VARIABLE.NhltConfigurationEnabled[0] == 1 OR
                  ideqval NHLT_ENDPOINTS_TABLE_CONFIGURATION_VARIABLE.NhltConfigurationEnabled[1] == 1 OR
                  ideqval NHLT_ENDPOINTS_TABLE_CONFIGURATION_VARIABLE.NhltConfigurationEnabled[2] == 1 OR
                  ideqval NHLT_ENDPOINTS_TABLE_CONFIGURATION_VARIABLE.NhltConfigurationEnabled[5] == 1 OR
                  ideqval NHLT_ENDPOINTS_TABLE_CONFIGURATION_VARIABLE.NhltConfigurationEnabled[6] == 1;
          oneof varid   = NHLT_ENDPOINTS_TABLE_CONFIGURATION_VARIABLE.NhltConfigurationEnabled[7],
            prompt      = STRING_TOKEN(0x0A7B),
            help        = STRING_TOKEN(0x0A7C),
            option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
          endoneof;
        endif;
      endif;

      grayoutif ideqval PCH_SETUP.PchHdAudioSspLinkEnable[0] == 0 AND
                ideqval PCH_SETUP.PchHdAudioSspLinkEnable[1] == 0 AND
                ideqval PCH_SETUP.PchHdAudioSspLinkEnable[2] == 0 AND
                ideqval PCH_SETUP.PchHdAudioSspLinkEnable[3] == 0 AND
                ideqval PCH_SETUP.PchHdAudioSspLinkEnable[4] == 0 AND
                ideqval PCH_SETUP.PchHdAudioSspLinkEnable[5] == 0 AND
                match (stringref (STRING_TOKEN (0x0104)), stringref (STRING_TOKEN (0x0103)));
        grayoutif ideqval NHLT_ENDPOINTS_TABLE_CONFIGURATION_VARIABLE.NhltConfigurationEnabled[8] == 1;
          oneof varid   = NHLT_ENDPOINTS_TABLE_CONFIGURATION_VARIABLE.NhltConfigurationEnabled[3],
            prompt      = STRING_TOKEN(0x0A73),
            help        = STRING_TOKEN(0x0A74),



#line 3650 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"
            option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
#line 3653 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"
          endoneof;
        endif;
        grayoutif ideqval NHLT_ENDPOINTS_TABLE_CONFIGURATION_VARIABLE.NhltConfigurationEnabled[3] == 1;
          oneof varid   = NHLT_ENDPOINTS_TABLE_CONFIGURATION_VARIABLE.NhltConfigurationEnabled[8],
            prompt      = STRING_TOKEN(0x0A7D),
            help        = STRING_TOKEN(0x0A7E),
            option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
          endoneof;
        endif;
      endif;

      grayoutif ideqval PCH_SETUP.PchHdAudioSspLinkEnable[0] == 0 AND
                ideqval PCH_SETUP.PchHdAudioSspLinkEnable[1] == 0 AND
                ideqval PCH_SETUP.PchHdAudioSspLinkEnable[2] == 0 AND
                ideqval PCH_SETUP.PchHdAudioSspLinkEnable[3] == 0 AND
                ideqval PCH_SETUP.PchHdAudioSspLinkEnable[4] == 0 AND
                ideqval PCH_SETUP.PchHdAudioSspLinkEnable[5] == 0;
        grayoutif ideqval NHLT_ENDPOINTS_TABLE_CONFIGURATION_VARIABLE.NhltConfigurationEnabled[9]  == 1 OR
                  ideqval NHLT_ENDPOINTS_TABLE_CONFIGURATION_VARIABLE.NhltConfigurationEnabled[10] == 1;
          oneof varid   = NHLT_ENDPOINTS_TABLE_CONFIGURATION_VARIABLE.NhltConfigurationEnabled[4],
            prompt      = STRING_TOKEN(0x0A75),
            help        = STRING_TOKEN(0x0A76),
            option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
          endoneof;
        endif;
        grayoutif ideqval NHLT_ENDPOINTS_TABLE_CONFIGURATION_VARIABLE.NhltConfigurationEnabled[4]  == 1 OR
                  ideqval NHLT_ENDPOINTS_TABLE_CONFIGURATION_VARIABLE.NhltConfigurationEnabled[10] == 1;
          oneof varid   = NHLT_ENDPOINTS_TABLE_CONFIGURATION_VARIABLE.NhltConfigurationEnabled[9],
            prompt      = STRING_TOKEN(0x0A7F),
            help        = STRING_TOKEN(0x0A80),
            option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
          endoneof;
        endif;
        grayoutif ideqval NHLT_ENDPOINTS_TABLE_CONFIGURATION_VARIABLE.NhltConfigurationEnabled[4] == 1 OR
                  ideqval NHLT_ENDPOINTS_TABLE_CONFIGURATION_VARIABLE.NhltConfigurationEnabled[9] == 1;
          oneof varid   = NHLT_ENDPOINTS_TABLE_CONFIGURATION_VARIABLE.NhltConfigurationEnabled[10],
            prompt      = STRING_TOKEN(0x0A81),
            help        = STRING_TOKEN(0x0A82),
            option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | RESET_REQUIRED;
            option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
          endoneof;
        endif;
        oneof varid  = PCH_SETUP.PchHdAudioI2sCodecSelect,
          prompt   = STRING_TOKEN(0x0A83),
          help     = STRING_TOKEN(0x0A84),
          option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0A85), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0A86), value = 2, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0A87), value = 3, flags = RESET_REQUIRED;
        endoneof;
        oneof varid  = PCH_SETUP.PchHdAudioI2sCodecBusNumber,
          prompt   = STRING_TOKEN(0x0A88),
          help     = STRING_TOKEN(0x0A89),
          option text = STRING_TOKEN(0x118E), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x118F), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1190), value = 2, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1191), value = 3, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1192), value = 4, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1193), value = 5, flags = RESET_REQUIRED;
        endoneof;
      endif;
    endif; 

    subtitle text = STRING_TOKEN(0x0002);
    
    text
       help   = STRING_TOKEN(0x0A8B),
       text   = STRING_TOKEN(0x0A8A),
       flags  = 0,
       key    = 0;

    
    checkbox varid  = PCH_SETUP. PchHdAudioFeatureV3[0],
      prompt   = STRING_TOKEN(0x0A8C),
      help     = STRING_TOKEN(0x0A8B),
      
      
      flags    = RESET_REQUIRED,
      default  = TRUE, defaultstore = MyStandardDefault,
    endcheckbox;

    
    checkbox varid  = PCH_SETUP. PchHdAudioFeatureV3[1],
      prompt   = STRING_TOKEN(0x0A8D),
      help     = STRING_TOKEN(0x0A8B),
      flags    = 0 | RESET_REQUIRED,
      default  = TRUE, defaultstore = MyStandardDefault,
    endcheckbox;

    grayoutif ideqval PCH_SETUP. PchHdAudioFeatureV3[1] == 0x0;
      
      checkbox varid  = PCH_SETUP. PchHdAudioFeatureV3[5],
        prompt   = STRING_TOKEN(0x0A8F),
        help     = STRING_TOKEN(0x0A8B),
        flags    = 0 | RESET_REQUIRED,
        default  = TRUE, defaultstore = MyStandardDefault,
      endcheckbox;

      
      checkbox varid  = PCH_SETUP. PchHdAudioFeatureV3[6],
        prompt   = STRING_TOKEN(0x0A90),
        help     = STRING_TOKEN(0x0A8B),
        flags    = 0 | RESET_REQUIRED,
        default  = TRUE, defaultstore = MyStandardDefault,
      endcheckbox;

    endif; 

    
    checkbox varid  = PCH_SETUP. PchHdAudioFeatureV3[9],
      prompt   = STRING_TOKEN(0x0A93),
      help     = STRING_TOKEN(0x0A8B),
      flags    = 0 | RESET_REQUIRED,
      key      = 0,
    endcheckbox;



    
    checkbox varid  = PCH_SETUP. PchHdAudioFeatureV3[10],
      prompt   = STRING_TOKEN(0x0A94),
      help     = STRING_TOKEN(0x0A8B),
      flags    = 0 | RESET_REQUIRED,
      key      = 0,
    endcheckbox;

    grayoutif ideqval PCH_SETUP. PchHdAudioFeatureV3[10] == 0x0;
      
      checkbox varid  = PCH_SETUP. PchHdAudioFeatureV3[11],
        prompt   = STRING_TOKEN(0x0A95),
        help     = STRING_TOKEN(0x0A8B),
        flags    = 0 | RESET_REQUIRED,
        key      = 0,
      endcheckbox;
    endif;




    
    checkbox varid  = PCH_SETUP. PchHdAudioFeatureV3[2],
      prompt   = STRING_TOKEN(0x0A8E),
      help     = STRING_TOKEN(0x0A8B),
      flags    = 0 | RESET_REQUIRED,
      key      = 0,
    endcheckbox;

    grayoutif ideqval PCH_SETUP. PchHdAudioFeatureV3[8] == 0x1;
      
      
      checkbox varid  = PCH_SETUP. PchHdAudioFeatureV3[7],
        prompt   = STRING_TOKEN(0x0A91),
        help     = STRING_TOKEN(0x0A8B),
        flags    = 0 | RESET_REQUIRED,
        key      = 0,
        default  = FALSE, defaultstore = MyStandardDefault,
      endcheckbox;
    endif; 

    
    oneof varid  = PCH_SETUP. PchHdAudioFeatureV3[8],
      prompt      = STRING_TOKEN(0x0A92),
      help        = STRING_TOKEN(0x0A8B),
      option text = STRING_TOKEN(0x0A96), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0A97), value = 1, flags = DEFAULT | RESET_REQUIRED;
    endoneof;

    subtitle text = STRING_TOKEN(0x0002);
    
    text
       help   = STRING_TOKEN(0x0A99),
       text   = STRING_TOKEN(0x0A98),
       flags  = 0,
       key    = 0;

    
    checkbox varid  = PCH_SETUP.PchHdAudioPostProcessingMod[0],
      prompt   = STRING_TOKEN(0x0A9A),
      help     = STRING_TOKEN(0x0A99),
      flags    = 0 | RESET_REQUIRED,
      key      = 0,
    endcheckbox;

    
    checkbox varid  = PCH_SETUP.PchHdAudioPostProcessingMod[1],
      prompt   = STRING_TOKEN(0x0A9B),
      help     = STRING_TOKEN(0x0A99),
      flags    = 0 | RESET_REQUIRED,
      key      = 0,
    endcheckbox;

    
    checkbox varid  = PCH_SETUP.PchHdAudioPostProcessingMod[2],
      prompt   = STRING_TOKEN(0x0A9C),
      help     = STRING_TOKEN(0x0A99),
      flags    = 0 | RESET_REQUIRED,
      key      = 0,
    endcheckbox;

    
    checkbox varid  = PCH_SETUP.PchHdAudioPostProcessingMod[3],
      prompt   = STRING_TOKEN(0x0A9D),
      help     = STRING_TOKEN(0x0A99),
      flags    = 0 | RESET_REQUIRED,
      key      = 0,
    endcheckbox;

    
    checkbox varid  = PCH_SETUP.PchHdAudioPostProcessingMod[4],
      prompt   = STRING_TOKEN(0x0A9E),
      help     = STRING_TOKEN(0x0A99),
      flags    = 0 | RESET_REQUIRED,
      key      = 0,
    endcheckbox;

    
    checkbox varid  = PCH_SETUP.PchHdAudioPostProcessingMod[5],
      prompt   = STRING_TOKEN(0x0A9F),
      help     = STRING_TOKEN(0x0A99),
      flags    = 0 | RESET_REQUIRED,
      key      = 0,
    endcheckbox;

    
    checkbox varid  = PCH_SETUP.PchHdAudioPostProcessingMod[6],
      prompt   = STRING_TOKEN(0x0AA0),
      help     = STRING_TOKEN(0x0A99),
      flags    = 0 | RESET_REQUIRED,
      key      = 0,
    endcheckbox;

    
    checkbox varid  = PCH_SETUP.PchHdAudioPostProcessingMod[7],
      prompt   = STRING_TOKEN(0x0AA1),
      help     = STRING_TOKEN(0x0A99),
      flags    = 0 | RESET_REQUIRED,
      key      = 0,
    endcheckbox;

    
    checkbox varid  = PCH_SETUP.PchHdAudioPostProcessingMod[9],
      prompt   = STRING_TOKEN(0x0AA2),
      help     = STRING_TOKEN(0x0A99),
      flags    = 0 | RESET_REQUIRED,
      key      = 0,
    endcheckbox;

    
    checkbox varid  = PCH_SETUP.PchHdAudioPostProcessingMod[10],
      prompt   = STRING_TOKEN(0x0AA3),
      help     = STRING_TOKEN(0x0A99),
      flags    = 0 | RESET_REQUIRED,
      key      = 0,
    endcheckbox;

    
    checkbox varid  = PCH_SETUP.PchHdAudioPostProcessingMod[11],
      prompt   = STRING_TOKEN(0x0AA4),
      help     = STRING_TOKEN(0x0A99),
      flags    = 0 | RESET_REQUIRED,
      key      = 0,
    endcheckbox;

    
    checkbox varid  = PCH_SETUP.PchHdAudioPostProcessingMod[12],
      prompt   = STRING_TOKEN(0x0AA5),
      help     = STRING_TOKEN(0x0A99),
      flags    = 0 | RESET_REQUIRED,
      key      = 0,
    endcheckbox;

    
    checkbox varid  = PCH_SETUP.PchHdAudioPostProcessingMod[13],
      prompt   = STRING_TOKEN(0x0AA6),
      help     = STRING_TOKEN(0x0A99),
      flags    = 0 | RESET_REQUIRED,
      key      = 0,
    endcheckbox;

    
    checkbox varid  = PCH_SETUP.PchHdAudioPostProcessingMod[14],
      prompt   = STRING_TOKEN(0x0AA7),
      help     = STRING_TOKEN(0x0A99),
      flags    = 0 | RESET_REQUIRED,
      key      = 0,
    endcheckbox;

    
    checkbox varid  = PCH_SETUP.PchHdAudioPostProcessingMod[15],
      prompt   = STRING_TOKEN(0x0AA8),
      help     = STRING_TOKEN(0x0A99),
      flags    = 0 | RESET_REQUIRED,
      key      = 0,
    endcheckbox;

    
    checkbox varid  = PCH_SETUP.PchHdAudioPostProcessingMod[16],
      prompt   = STRING_TOKEN(0x0AA9),
      help     = STRING_TOKEN(0x0A99),
      flags    = 0 | RESET_REQUIRED,
      key      = 0,
    endcheckbox;

    
    checkbox varid  = PCH_SETUP.PchHdAudioPostProcessingMod[17],
      prompt   = STRING_TOKEN(0x0AAA),
      help     = STRING_TOKEN(0x0A99),
      flags    = 0 | RESET_REQUIRED,
      key      = 0,
    endcheckbox;

    
    checkbox varid  = PCH_SETUP.PchHdAudioPostProcessingMod[18],
      prompt   = STRING_TOKEN(0x0AAB),
      help     = STRING_TOKEN(0x0A99),
      flags    = 0 | RESET_REQUIRED,
      key      = 0,
    endcheckbox;

    
    checkbox varid  = PCH_SETUP.PchHdAudioPostProcessingMod[29],
      prompt   = STRING_TOKEN(0x0AAC),
      help     = STRING_TOKEN(0x0A99),
      flags    = 0 | RESET_REQUIRED,
      key      = 0,
    endcheckbox;

    suppressif ideqval PCH_SETUP.PchHdAudioPostProcessingMod[29] == 0x0;
      string  varid   = PCH_SETUP.PchHdAudioPostProcessingModCustomGuid1,
              prompt  = STRING_TOKEN(0x0AAD),
              help    = STRING_TOKEN(0x0AB2),
              flags   = 0 | RESET_REQUIRED, 
              key     = 0,
              minsize = 36, 
              maxsize = 36,
      endstring;
    endif; 

    checkbox varid  = PCH_SETUP.PchHdAudioPostProcessingMod[30],
      prompt   = STRING_TOKEN(0x0AAE),
      help     = STRING_TOKEN(0x0A99),
      flags    = 0 | RESET_REQUIRED,
      key      = 0,
    endcheckbox;

    suppressif ideqval PCH_SETUP.PchHdAudioPostProcessingMod[30] == 0x0;
      string  varid   = PCH_SETUP.PchHdAudioPostProcessingModCustomGuid2,
              prompt  = STRING_TOKEN(0x0AAF),
              help    = STRING_TOKEN(0x0AB2),
              flags   = 0 | RESET_REQUIRED, 
              key     = 0,
              minsize = 36, 
              maxsize = 36,
      endstring;
    endif; 

    checkbox varid  = PCH_SETUP.PchHdAudioPostProcessingMod[31],
      prompt   = STRING_TOKEN(0x0AB0),
      help     = STRING_TOKEN(0x0A99),
      flags    = 0 | RESET_REQUIRED,
      key      = 0,
    endcheckbox;

    suppressif ideqval PCH_SETUP.PchHdAudioPostProcessingMod[31] == 0x0;
      string  varid   = PCH_SETUP.PchHdAudioPostProcessingModCustomGuid3,
              prompt  = STRING_TOKEN(0x0AB1),
              help    = STRING_TOKEN(0x0AB2),
              flags   = 0 | RESET_REQUIRED, 
              key     = 0,
              minsize = 36, 
              maxsize = 36,
      endstring;
    endif; 
  endform; 

  form formid = 4157,
    title     = STRING_TOKEN(0x0B2C);

    subtitle text = STRING_TOKEN(0x0B2C);
    subtitle text = STRING_TOKEN(0x0002);

    oneof varid  = PCH_SETUP.PchRtcMemoryLock,
      prompt   = STRING_TOKEN(0x0B2E),
      help     = STRING_TOKEN(0x0B2F),
      option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;



    suppressif ideqvallist SETUP_DATA.BiosGuard == 1;


#line 4050 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"
      oneof varid  = PCH_SETUP.PchBiosLock,
        prompt   = STRING_TOKEN(0x0B30),
        help     = STRING_TOKEN(0x0B31),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;
    endif;







#line 4065 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"

    oneof varid  = PCH_SETUP.UnlockGpioPads,
      prompt   = STRING_TOKEN(0x0B32),
      help     = STRING_TOKEN(0x0B33),
      option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
    endoneof;
  endform; 




form formid = 122,
    title     = STRING_TOKEN(0x1183);

    subtitle text = STRING_TOKEN(0x1183);

    
    
    
    grayoutif ideqval PCH_SETUP.PchSerialIoI2c[0x1] == 1 OR
              ideqval PCH_SETUP.PchSerialIoI2c[0x2] == 1 OR
              ideqval PCH_SETUP.PchSerialIoI2c[0x3] == 1;
      oneof varid  = PCH_SETUP.PchSerialIoI2c[0x0],
        prompt   = STRING_TOKEN(0x118E),
        help     = STRING_TOKEN(0x118A),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;
    endif;

    grayoutif ideqval PCH_SETUP.PchSerialIoI2c[0x0] == 0;
      oneof varid  = PCH_SETUP.PchSerialIoI2c[0x1],
        prompt   = STRING_TOKEN(0x118F),
        help     = STRING_TOKEN(0x118A),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;
    endif;

    grayoutif ideqval PCH_SETUP.PchSerialIoI2c[0x0] == 0;
      oneof varid  = PCH_SETUP.PchSerialIoI2c[0x2],
        prompt   = STRING_TOKEN(0x1190),
        help     = STRING_TOKEN(0x118A),
        default  = 1, defaultstore = MyStandardDefault,
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;
    endif;

    grayoutif ideqval PCH_SETUP.PchSerialIoI2c[0x0] == 0;
      oneof varid  = PCH_SETUP.PchSerialIoI2c[0x3],
        prompt   = STRING_TOKEN(0x1191),
        help     = STRING_TOKEN(0x118A),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;
    endif;

    oneof varid  = PCH_SETUP.PchSerialIoI2c[0x4],
      prompt   = STRING_TOKEN(0x1192),
      help     = STRING_TOKEN(0x118B),
      option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    oneof varid  = PCH_SETUP.PchSerialIoI2c[0x5],
      prompt   = STRING_TOKEN(0x1193),
      help     = STRING_TOKEN(0x118C),
      option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    oneof varid  = PCH_SETUP.PchSerialIoI2c[0x6],
      prompt   = STRING_TOKEN(0x1194),
      help     = STRING_TOKEN(0x118A),
      option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      suppressif NOT ideqval SETUP_VOLATILE_DATA.PlatformType == 0x2;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endif;
    endoneof;

    oneof varid  = PCH_SETUP.PchSerialIoI2c[0x7],
      prompt   = STRING_TOKEN(0x1195),
      help     = STRING_TOKEN(0x118A),
      option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      suppressif NOT ideqval SETUP_VOLATILE_DATA.PlatformType == 0x2;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endif;
    endoneof;

      oneof varid  = PCH_SETUP.PchSerialIoSpi[0x0],
        prompt   = STRING_TOKEN(0x1196),
        help     = STRING_TOKEN(0x118A),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid  = PCH_SETUP.PchSerialIoSpi[0x1],
        prompt   = STRING_TOKEN(0x1197),
        help     = STRING_TOKEN(0x118A),

        default  = 0, defaultstore = MyStandardDefault,


#line 4171 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

    oneof varid  = PCH_SETUP.PchSerialIoSpi[0x2],
      prompt   = STRING_TOKEN(0x1198),
      help     = STRING_TOKEN(0x118D),
      option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags =  RESET_REQUIRED;
    endoneof;

    oneof varid  = PCH_SETUP.PchSerialIoSpi[0x3],
      prompt   = STRING_TOKEN(0x1199),
      help     = STRING_TOKEN(0x118A),
      option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags =  RESET_REQUIRED;
    endoneof;

    suppressif NOT ideqval SETUP_VOLATILE_DATA.PlatformType == 0x2;
      oneof varid  = PCH_SETUP.PchSerialIoSpi[0x4],
        prompt   = STRING_TOKEN(0x119A),
        help     = STRING_TOKEN(0x118A),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags =  RESET_REQUIRED;
      endoneof;
    endif;

    suppressif NOT ideqval SETUP_VOLATILE_DATA.PlatformType == 0x2;
      oneof varid  = PCH_SETUP.PchSerialIoSpi[0x5],
        prompt   = STRING_TOKEN(0x119B),
        help     = STRING_TOKEN(0x118A),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags =  RESET_REQUIRED;
      endoneof;
    endif;

    suppressif NOT ideqval SETUP_VOLATILE_DATA.PlatformType == 0x2;
      oneof varid  = PCH_SETUP.PchSerialIoSpi[0x6],
        prompt   = STRING_TOKEN(0x119C),
        help     = STRING_TOKEN(0x118A),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags =  RESET_REQUIRED;
      endoneof;
    endif;
#line 4216 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"
    
    
    
    
    
    
    
    
    


    
    
    
    
    
    
    grayoutif (ideqvallist PCH_SETUP.PchHdAudioI2sCodecSelect == 1 2 3)
    
    
    
              OR (ideqval PCH_SETUP.CnviMode == 1  AND 
              ideqval SETUP_DATA.TestCnviBtUartType == 0)
    
    
    
      ;
      oneof varid  = PCH_SETUP.PchSerialIoUart[0x0],
        prompt   = STRING_TOKEN(0x119F),
        help     = STRING_TOKEN(0x118A),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x11A6), value = 3, flags = RESET_REQUIRED;
      endoneof;
    endif;














#line 4266 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"
    oneof varid  = PCH_SETUP.PchSerialIoUart[0x1],
        prompt   = STRING_TOKEN(0x11A0),
        help     = STRING_TOKEN(0x118A),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x11A6), value = 3, flags = RESET_REQUIRED;
    endoneof;

    suppressif ideqval PCH_SETUP.OsDebugPort == 3;
      oneof varid  = PCH_SETUP.PchSerialIoUart[0x2],
        prompt   = STRING_TOKEN(0x11A1),
        help     = STRING_TOKEN(0x11A7),




        option text = STRING_TOKEN(0x1262), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
#line 4284 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"
        option text = STRING_TOKEN(0x11A6), value = 3, flags = RESET_REQUIRED;
      endoneof;
    endif;










#line 4298 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"


    oneof varid  = PCH_SETUP.PchSerialIoUart[0x3],
        prompt   = STRING_TOKEN(0x11A2),
        help     = STRING_TOKEN(0x118A),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x11A6), value = 3, flags = RESET_REQUIRED;
    endoneof;

    oneof varid  = PCH_SETUP.PchSerialIoUart[0x4],
        prompt   = STRING_TOKEN(0x11A3),
        help     = STRING_TOKEN(0x118A),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x11A6), value = 3, flags = RESET_REQUIRED;
    endoneof;

    oneof varid  = PCH_SETUP.PchSerialIoUart[0x5],
        prompt   = STRING_TOKEN(0x11A4),
        help     = STRING_TOKEN(0x118A),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x11A6), value = 3, flags = RESET_REQUIRED;
    endoneof;

    oneof varid  = PCH_SETUP.PchSerialIoUart[0x6],
        prompt   = STRING_TOKEN(0x11A5),
        help     = STRING_TOKEN(0x118A),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x11A6), value = 3, flags = RESET_REQUIRED;
    endoneof;
#line 4332 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"
    suppressif NOT ideqval PCH_SETUP.OsDebugPort == 3;
      text
        help   = STRING_TOKEN(0x0851),
        text   = STRING_TOKEN(0x11A1),
        text   = STRING_TOKEN(0x11ED),
        flags = 0, key = 0;
    endif;

    
    
    
    oneof varid  = PCH_SETUP.PchGpioIrqRoute,
      prompt   = STRING_TOKEN(0x1157),
      help     = STRING_TOKEN(0x1158),
      option text = STRING_TOKEN(0x1159), value = 14, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x115A), value = 15, flags = RESET_REQUIRED;
    endoneof;


    subtitle text = STRING_TOKEN(0x0002);

    suppressif ideqval PCH_SETUP.PchSerialIoI2c[0x0] == 0;
        goto 128,
          prompt = STRING_TOKEN(0x11D2),
          help = STRING_TOKEN(0x11D1);
    endif;
    suppressif ideqval PCH_SETUP.PchSerialIoI2c[0x1] == 0;
        goto 129,
          prompt = STRING_TOKEN(0x11D3),
          help = STRING_TOKEN(0x11D1);
    endif;

    suppressif ideqval PCH_SETUP.PchSerialIoI2c[0x2] == 0;
        goto 135,
          prompt = STRING_TOKEN(0x11D4),
          help = STRING_TOKEN(0x11D1);
    endif;
    suppressif ideqval PCH_SETUP.PchSerialIoI2c[0x3] == 0;
        goto 136,
          prompt = STRING_TOKEN(0x11D5),
          help = STRING_TOKEN(0x11D1);
    endif;

    suppressif ideqval PCH_SETUP.PchSerialIoI2c[0x4] == 0 OR
               ideqval PCH_SETUP.PchSerialIoDeviceI2C4Support == 1;
        goto 137,
          prompt = STRING_TOKEN(0x11D6),
          help = STRING_TOKEN(0x11D1);
    endif;
    suppressif ideqval PCH_SETUP.PchSerialIoI2c[0x5] == 0;
        goto 138,
          prompt = STRING_TOKEN(0x11D7),
          help = STRING_TOKEN(0x11D1);
    endif;
    suppressif ideqval PCH_SETUP.PchSerialIoI2c[0x6] == 0;
        goto 153,
          prompt = STRING_TOKEN(0x11D8),
          help = STRING_TOKEN(0x11D1);
    endif;
    suppressif ideqval PCH_SETUP.PchSerialIoI2c[0x7] == 0;
        goto 154,
          prompt = STRING_TOKEN(0x11D9),
          help = STRING_TOKEN(0x11D1);
    endif;

    suppressif ideqval PCH_SETUP.PchSerialIoSpi[0x0] == 0;
        goto 130,
          prompt = STRING_TOKEN(0x11DA),
          help = STRING_TOKEN(0x11D1);
    endif;
    suppressif ideqval PCH_SETUP.PchSerialIoSpi[0x1] == 0;
        goto 131,
          prompt = STRING_TOKEN(0x11DB),
          help = STRING_TOKEN(0x11D1);
    endif;
    suppressif ideqval PCH_SETUP.PchSerialIoSpi[0x2] == 0;
        goto 140,
          prompt = STRING_TOKEN(0x11DC),
          help = STRING_TOKEN(0x11D1);
    endif;
    suppressif ideqval PCH_SETUP.PchSerialIoUart[0x0] == 0 OR
               ideqval PCH_SETUP.OsDebugPort == 1;
        goto 132,
          prompt = STRING_TOKEN(0x11DF),
          help = STRING_TOKEN(0x11D1);
    endif;
    suppressif ideqval PCH_SETUP.PchSerialIoUart[0x1] == 0 OR
               ideqval PCH_SETUP.OsDebugPort == 2;
        goto 133,
          prompt = STRING_TOKEN(0x11E0),
          help = STRING_TOKEN(0x11D1);
    endif;
    suppressif ideqval PCH_SETUP.PchSerialIoUart[0x2] == 0;
        goto 139,
          prompt = STRING_TOKEN(0x11E1),
          help = STRING_TOKEN(0x11D1);
    endif;

    subtitle text = STRING_TOKEN(0x0002);

    oneof varid  = SETUP_DATA.PchI2cWittDevice,
      prompt   = STRING_TOKEN(0x11A9),
      help     = STRING_TOKEN(0x11AA),
      option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x11E2), value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x11E3), value = 2, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x11E4), value = 3, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x11E5), value = 4, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x11E6), value = 5, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x11E7), value = 6, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x11E8), value = 7, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x11E9), value = 8, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x11EA), value = 9, flags = RESET_REQUIRED;
    endoneof;

    suppressif ideqval SETUP_DATA.PchI2cWittDevice == 0;
      oneof varid  = SETUP_DATA.PchI2cWittVersion,
        prompt   = STRING_TOKEN(0x11AB),
        help     = STRING_TOKEN(0x11AC),
        option text = STRING_TOKEN(0x11EB), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x11EC), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;
    endif;
    oneof varid  = SETUP_DATA.PchUartUtkDevice,
      prompt   = STRING_TOKEN(0x119D),
      help     = STRING_TOKEN(0x119E),
      option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x1187), value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x1188), value = 2, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x1189), value = 3, flags = RESET_REQUIRED;
    endoneof;
    checkbox varid  = PCH_SETUP.PchAdditionalSerialIoDevices,
      prompt      = STRING_TOKEN(0x11DD),
      help        = STRING_TOKEN(0x11DE),
      flags   = RESET_REQUIRED, key = 0,
    endcheckbox;

    checkbox varid  = SETUP_DATA.PchSerialIoUseTimingParameters,
      prompt        = STRING_TOKEN(0x11CA),
      help          = STRING_TOKEN(0x11CB),
      flags         = RESET_REQUIRED, key = 0,
    endcheckbox;

endform; 

  form formid = 128,
    title     = STRING_TOKEN(0x11D2);
    subtitle text = STRING_TOKEN(0x11D2);

    suppressif TRUE;
      numeric varid = SETUP_DATA.PchI2cSensorDevicePort[0x0],
        prompt      = STRING_TOKEN(0x1209),
        help        = STRING_TOKEN(0x120A),
        minimum  = 0,
        maximum  = 0xFF,
        default  = 0,
      endnumeric;
    endif;

    subtitle text = STRING_TOKEN(0x0002);

    suppressif NOT ideqvallist SETUP_DATA.PchI2cSensorDevicePort[0x0] == 1 3 5 7; 
        goto 4382,
          prompt = STRING_TOKEN(0x11F3),
          help = STRING_TOKEN(0x11F5);
    endif;
    suppressif NOT ideqvallist SETUP_DATA.PchI2cSensorDevicePort[0x0] == 2 3 6 7; 
        goto 4383,
          prompt = STRING_TOKEN(0x11F8),
          help = STRING_TOKEN(0x11FA);
    endif;

    subtitle text = STRING_TOKEN(0x0002);

    suppressif ideqval SETUP_DATA.PchSerialIoUseTimingParameters == 0;
      subtitle text = STRING_TOKEN(0x11CC);
      numeric varid = SETUP_DATA.PchSerialIoTimingSSH0,
        prompt = STRING_TOKEN (0x11AD), help = STRING_TOKEN (0x11AE), minimum = 0, maximum = 65535, default = 612,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingSSL0,
        prompt = STRING_TOKEN (0x11B1), help = STRING_TOKEN (0x11B2), minimum = 0, maximum = 65535, default = 706,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingSSD0,
        prompt = STRING_TOKEN (0x11AF), help = STRING_TOKEN (0x11B0), minimum = 0, maximum = 65535, default = 30,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingFMH0,
        prompt = STRING_TOKEN (0x11B3), help = STRING_TOKEN (0x11B4), minimum = 0, maximum = 65535, default = 110,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingFML0,
        prompt = STRING_TOKEN (0x11B7), help = STRING_TOKEN (0x11B8), minimum = 0, maximum = 65535, default = 207,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingFMD0,
        prompt = STRING_TOKEN (0x11B5), help = STRING_TOKEN (0x11B6), minimum = 0, maximum = 65535, default = 30,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingFPH0,
        prompt = STRING_TOKEN (0x11B9), help = STRING_TOKEN (0x11BA), minimum = 0, maximum = 65535, default = 43,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingFPL0,
        prompt = STRING_TOKEN (0x11BD), help = STRING_TOKEN (0x11BE), minimum = 0, maximum = 65535, default = 76,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingFPD0,
        prompt = STRING_TOKEN (0x11BB), help = STRING_TOKEN (0x11BC), minimum = 0, maximum = 65535, default = 30,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingHSH0,
        prompt = STRING_TOKEN (0x11BF), help = STRING_TOKEN (0x11C0), minimum = 0, maximum = 65535, default = 11,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingHSL0,
        prompt = STRING_TOKEN (0x11C3), help = STRING_TOKEN (0x11C4), minimum = 0, maximum = 65535, default = 22,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingHSD0,
        prompt = STRING_TOKEN (0x11C1), help = STRING_TOKEN (0x11C2), minimum = 0, maximum = 65535, default = 5,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingM0C0,
        prompt = STRING_TOKEN (0x11C5), help = STRING_TOKEN (0x11C6), minimum = 1, maximum = 10000, default = 200,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingM1C0,
        prompt = STRING_TOKEN (0x11C7), help = STRING_TOKEN (0x11C8), minimum = 1, maximum = 10000, default = 2000,
      endnumeric;
    endif;
    suppressif ideqval SETUP_DATA.PchSerialIoUseTimingParameters == 1;
      subtitle text = STRING_TOKEN(0x11CD);
    endif;

 endform;


  form formid = 129,
    title     = STRING_TOKEN(0x11D3);
    subtitle text = STRING_TOKEN(0x11D3);

    suppressif TRUE;
      numeric varid = SETUP_DATA.PchI2cSensorDevicePort[0x1],
        prompt      = STRING_TOKEN(0x1209),
        help        = STRING_TOKEN(0x120A),
        minimum  = 0,
        maximum  = 0xFF,
        default  = 0,
      endnumeric;
    endif;

    subtitle text = STRING_TOKEN(0x0002);

    suppressif NOT ideqvallist SETUP_DATA.PchI2cSensorDevicePort[0x1] == 1 3 5 7;
        goto 4382,
          prompt = STRING_TOKEN(0x11F3),
          help = STRING_TOKEN(0x11F5);
    endif;

    suppressif NOT ideqvallist SETUP_DATA.PchI2cSensorDevicePort[0x1] == 2 3 6 7;
        goto 4383,
          prompt = STRING_TOKEN(0x11F8),
          help = STRING_TOKEN(0x11FA);
    endif;

    subtitle text = STRING_TOKEN(0x0002);

    suppressif ideqval SETUP_DATA.PchSerialIoUseTimingParameters == 0;
      subtitle text = STRING_TOKEN(0x11CC);
      numeric varid = SETUP_DATA.PchSerialIoTimingSSH1,
        prompt = STRING_TOKEN (0x11AD), help = STRING_TOKEN (0x11AE), minimum = 0, maximum = 65535, default = 612,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingSSL1,
        prompt = STRING_TOKEN (0x11B1), help = STRING_TOKEN (0x11B2), minimum = 0, maximum = 65535, default = 706,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingSSD1,
        prompt = STRING_TOKEN (0x11AF), help = STRING_TOKEN (0x11B0), minimum = 0, maximum = 65535, default = 30,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingFMH1,
        prompt = STRING_TOKEN (0x11B3), help = STRING_TOKEN (0x11B4), minimum = 0, maximum = 65535, default = 110,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingFML1,
        prompt = STRING_TOKEN (0x11B7), help = STRING_TOKEN (0x11B8), minimum = 0, maximum = 65535, default = 207,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingFMD1,
        prompt = STRING_TOKEN (0x11B5), help = STRING_TOKEN (0x11B6), minimum = 0, maximum = 65535, default = 30,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingFPH1,
        prompt = STRING_TOKEN (0x11B9), help = STRING_TOKEN (0x11BA), minimum = 0, maximum = 65535, default = 43,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingFPL1,
        prompt = STRING_TOKEN (0x11BD), help = STRING_TOKEN (0x11BE), minimum = 0, maximum = 65535, default = 76,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingFPD1,
        prompt = STRING_TOKEN (0x11BB), help = STRING_TOKEN (0x11BC), minimum = 0, maximum = 65535, default = 30,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingHSH1,
        prompt = STRING_TOKEN (0x11BF), help = STRING_TOKEN (0x11C0), minimum = 0, maximum = 65535, default = 11,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingHSL1,
        prompt = STRING_TOKEN (0x11C3), help = STRING_TOKEN (0x11C4), minimum = 0, maximum = 65535, default = 22,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingHSD1,
        prompt = STRING_TOKEN (0x11C1), help = STRING_TOKEN (0x11C2), minimum = 0, maximum = 65535, default = 5,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingM0C1,
        prompt = STRING_TOKEN (0x11C5), help = STRING_TOKEN (0x11C6), minimum = 1, maximum = 10000, default = 200,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingM1C1,
        prompt = STRING_TOKEN (0x11C7), help = STRING_TOKEN (0x11C8), minimum = 1, maximum = 10000, default = 2000,
      endnumeric;
    endif;
    suppressif ideqval SETUP_DATA.PchSerialIoUseTimingParameters == 1;
      subtitle text = STRING_TOKEN(0x11CD);
    endif;

 endform;


  form formid = 135,
    title     = STRING_TOKEN(0x11D4);
    subtitle text = STRING_TOKEN(0x11D4);

    suppressif TRUE;
      numeric varid = SETUP_DATA.PchI2cSensorDevicePort[0x2],
        prompt      = STRING_TOKEN(0x1209),
        help        = STRING_TOKEN(0x120A),
        minimum  = 0,
        maximum  = 0xFF,
        default  = 0,
      endnumeric;
    endif;

    subtitle text = STRING_TOKEN(0x0002);

    suppressif NOT ideqvallist SETUP_DATA.PchI2cSensorDevicePort[0x2] == 1 3 5 7;
        goto 4382,
          prompt = STRING_TOKEN(0x11F3),
          help = STRING_TOKEN(0x11F5);
    endif;
    suppressif NOT ideqvallist SETUP_DATA.PchI2cSensorDevicePort[0x2] == 2 3 6 7;
        goto 4383,
          prompt = STRING_TOKEN(0x11F8),
          help = STRING_TOKEN(0x11FA);
    endif;

    subtitle text = STRING_TOKEN(0x0002);

    suppressif ideqval SETUP_DATA.PchSerialIoUseTimingParameters == 0;
      subtitle text = STRING_TOKEN(0x11CC);
      numeric varid = SETUP_DATA.PchSerialIoTimingSSH2,
        prompt = STRING_TOKEN (0x11AD), help = STRING_TOKEN (0x11AE), minimum = 0, maximum = 65535, default = 612,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingSSL2,
        prompt = STRING_TOKEN (0x11B1), help = STRING_TOKEN (0x11B2), minimum = 0, maximum = 65535, default = 706,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingSSD2,
        prompt = STRING_TOKEN (0x11AF), help = STRING_TOKEN (0x11B0), minimum = 0, maximum = 65535, default = 30,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingFMH2,
        prompt = STRING_TOKEN (0x11B3), help = STRING_TOKEN (0x11B4), minimum = 0, maximum = 65535, default = 110,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingFML2,
        prompt = STRING_TOKEN (0x11B7), help = STRING_TOKEN (0x11B8), minimum = 0, maximum = 65535, default = 207,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingFMD2,
        prompt = STRING_TOKEN (0x11B5), help = STRING_TOKEN (0x11B6), minimum = 0, maximum = 65535, default = 30,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingFPH2,
        prompt = STRING_TOKEN (0x11B9), help = STRING_TOKEN (0x11BA), minimum = 0, maximum = 65535, default = 43,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingFPL2,
        prompt = STRING_TOKEN (0x11BD), help = STRING_TOKEN (0x11BE), minimum = 0, maximum = 65535, default = 76,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingFPD2,
        prompt = STRING_TOKEN (0x11BB), help = STRING_TOKEN (0x11BC), minimum = 0, maximum = 65535, default = 30,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingHSH2,
        prompt = STRING_TOKEN (0x11BF), help = STRING_TOKEN (0x11C0), minimum = 0, maximum = 65535, default = 11,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingHSL2,
        prompt = STRING_TOKEN (0x11C3), help = STRING_TOKEN (0x11C4), minimum = 0, maximum = 65535, default = 22,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingHSD2,
        prompt = STRING_TOKEN (0x11C1), help = STRING_TOKEN (0x11C2), minimum = 0, maximum = 65535, default = 5,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingM0C2,
        prompt = STRING_TOKEN (0x11C5), help = STRING_TOKEN (0x11C6), minimum = 1, maximum = 10000, default = 200,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingM1C2,
        prompt = STRING_TOKEN (0x11C7), help = STRING_TOKEN (0x11C8), minimum = 1, maximum = 10000, default = 2000,
      endnumeric;
    endif;
    suppressif ideqval SETUP_DATA.PchSerialIoUseTimingParameters == 1;
      subtitle text = STRING_TOKEN(0x11CD);
    endif;

endform;


  form formid = 136,
    title     = STRING_TOKEN(0x11D5);
    subtitle text = STRING_TOKEN(0x11D5);

    suppressif TRUE;
      numeric varid = SETUP_DATA.PchI2cSensorDevicePort[0x3],
        prompt      = STRING_TOKEN(0x1209),
        help        = STRING_TOKEN(0x120A),
        minimum  = 0,
        maximum  = 0xFF,
        default  = 0,
      endnumeric;
    endif;

    subtitle text = STRING_TOKEN(0x0002);

    suppressif NOT ideqvallist SETUP_DATA.PchI2cSensorDevicePort[0x3] == 1 3 5 7;
        goto 4382,
          prompt = STRING_TOKEN(0x11F3),
          help = STRING_TOKEN(0x11F5);
    endif;
    suppressif NOT ideqvallist SETUP_DATA.PchI2cSensorDevicePort[0x3] == 2 3 6 7;
        goto 4383,
          prompt = STRING_TOKEN(0x11F8),
          help = STRING_TOKEN(0x11FA);
    endif;

    subtitle text = STRING_TOKEN(0x0002);

    suppressif ideqval SETUP_DATA.PchSerialIoUseTimingParameters == 0;
      subtitle text = STRING_TOKEN(0x11CC);
      numeric varid = SETUP_DATA.PchSerialIoTimingSSH3,
        prompt = STRING_TOKEN (0x11AD), help = STRING_TOKEN (0x11AE), minimum = 0, maximum = 65535, default = 612,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingSSL3,
        prompt = STRING_TOKEN (0x11B1), help = STRING_TOKEN (0x11B2), minimum = 0, maximum = 65535, default = 706,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingSSD3,
        prompt = STRING_TOKEN (0x11AF), help = STRING_TOKEN (0x11B0), minimum = 0, maximum = 65535, default = 30,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingFMH3,
        prompt = STRING_TOKEN (0x11B3), help = STRING_TOKEN (0x11B4), minimum = 0, maximum = 65535, default = 110,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingFML3,
        prompt = STRING_TOKEN (0x11B7), help = STRING_TOKEN (0x11B8), minimum = 0, maximum = 65535, default = 207,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingFMD3,
        prompt = STRING_TOKEN (0x11B5), help = STRING_TOKEN (0x11B6), minimum = 0, maximum = 65535, default = 30,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingFPH3,
        prompt = STRING_TOKEN (0x11B9), help = STRING_TOKEN (0x11BA), minimum = 0, maximum = 65535, default = 43,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingFPL3,
        prompt = STRING_TOKEN (0x11BD), help = STRING_TOKEN (0x11BE), minimum = 0, maximum = 65535, default = 76,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingFPD3,
        prompt = STRING_TOKEN (0x11BB), help = STRING_TOKEN (0x11BC), minimum = 0, maximum = 65535, default = 30,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingHSH3,
        prompt = STRING_TOKEN (0x11BF), help = STRING_TOKEN (0x11C0), minimum = 0, maximum = 65535, default = 11,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingHSL3,
        prompt = STRING_TOKEN (0x11C3), help = STRING_TOKEN (0x11C4), minimum = 0, maximum = 65535, default = 22,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingHSD3,
        prompt = STRING_TOKEN (0x11C1), help = STRING_TOKEN (0x11C2), minimum = 0, maximum = 65535, default = 5,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingM0C3,
        prompt = STRING_TOKEN (0x11C5), help = STRING_TOKEN (0x11C6), minimum = 1, maximum = 10000, default = 200,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingM1C3,
        prompt = STRING_TOKEN (0x11C7), help = STRING_TOKEN (0x11C8), minimum = 1, maximum = 10000, default = 2000,
      endnumeric;
    endif;
    suppressif ideqval SETUP_DATA.PchSerialIoUseTimingParameters == 1;
      subtitle text = STRING_TOKEN(0x11CD);
    endif;

 endform;


  form formid = 137,
    title     = STRING_TOKEN(0x11D6);
    subtitle text = STRING_TOKEN(0x11D6);

    suppressif ideqval SETUP_DATA.PchSerialIoUseTimingParameters == 0;
      subtitle text = STRING_TOKEN(0x11CC);
      numeric varid = SETUP_DATA.PchSerialIoTimingSSH4,
        prompt = STRING_TOKEN (0x11AD), help = STRING_TOKEN (0x11AE), minimum = 0, maximum = 65535, default = 612,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingSSL4,
        prompt = STRING_TOKEN (0x11B1), help = STRING_TOKEN (0x11B2), minimum = 0, maximum = 65535, default = 706,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingSSD4,
        prompt = STRING_TOKEN (0x11AF), help = STRING_TOKEN (0x11B0), minimum = 0, maximum = 65535, default = 30,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingFMH4,
        prompt = STRING_TOKEN (0x11B3), help = STRING_TOKEN (0x11B4), minimum = 0, maximum = 65535, default = 110,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingFML4,
        prompt = STRING_TOKEN (0x11B7), help = STRING_TOKEN (0x11B8), minimum = 0, maximum = 65535, default = 207,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingFMD4,
        prompt = STRING_TOKEN (0x11B5), help = STRING_TOKEN (0x11B6), minimum = 0, maximum = 65535, default = 30,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingFPH4,
        prompt = STRING_TOKEN (0x11B9), help = STRING_TOKEN (0x11BA), minimum = 0, maximum = 65535, default = 43,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingFPL4,
        prompt = STRING_TOKEN (0x11BD), help = STRING_TOKEN (0x11BE), minimum = 0, maximum = 65535, default = 76,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingFPD4,
        prompt = STRING_TOKEN (0x11BB), help = STRING_TOKEN (0x11BC), minimum = 0, maximum = 65535, default = 30,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingHSH4,
        prompt = STRING_TOKEN (0x11BF), help = STRING_TOKEN (0x11C0), minimum = 0, maximum = 65535, default = 11,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingHSL4,
        prompt = STRING_TOKEN (0x11C3), help = STRING_TOKEN (0x11C4), minimum = 0, maximum = 65535, default = 22,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingHSD4,
        prompt = STRING_TOKEN (0x11C1), help = STRING_TOKEN (0x11C2), minimum = 0, maximum = 65535, default = 5,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingM0C4,
        prompt = STRING_TOKEN (0x11C5), help = STRING_TOKEN (0x11C6), minimum = 1, maximum = 10000, default = 200,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingM1C4,
        prompt = STRING_TOKEN (0x11C7), help = STRING_TOKEN (0x11C8), minimum = 1, maximum = 10000, default = 2000,
      endnumeric;
    endif;
    suppressif ideqval SETUP_DATA.PchSerialIoUseTimingParameters == 1;
      subtitle text = STRING_TOKEN(0x11CD);
    endif;

 endform;


  form formid = 138,
    title     = STRING_TOKEN(0x11D7);
    subtitle text = STRING_TOKEN(0x11D7);

    suppressif ideqval SETUP_DATA.PchSerialIoUseTimingParameters == 0;
      subtitle text = STRING_TOKEN(0x11CC);
      numeric varid = SETUP_DATA.PchSerialIoTimingSSH5,
        prompt = STRING_TOKEN (0x11AD), help = STRING_TOKEN (0x11AE), minimum = 0, maximum = 65535, default = 706,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingSSL5,
        prompt = STRING_TOKEN (0x11B1), help = STRING_TOKEN (0x11B2), minimum = 0, maximum = 65535, default = 612,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingSSD5,
        prompt = STRING_TOKEN (0x11AF), help = STRING_TOKEN (0x11B0), minimum = 0, maximum = 65535, default = 30,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingFMH5,
        prompt = STRING_TOKEN (0x11B3), help = STRING_TOKEN (0x11B4), minimum = 0, maximum = 65535, default = 110,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingFML5,
        prompt = STRING_TOKEN (0x11B7), help = STRING_TOKEN (0x11B8), minimum = 0, maximum = 65535, default = 207,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingFMD5,
        prompt = STRING_TOKEN (0x11B5), help = STRING_TOKEN (0x11B6), minimum = 0, maximum = 65535, default = 30,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingFPH5,
        prompt = STRING_TOKEN (0x11B9), help = STRING_TOKEN (0x11BA), minimum = 0, maximum = 65535, default = 43,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingFPL5,
        prompt = STRING_TOKEN (0x11BD), help = STRING_TOKEN (0x11BE), minimum = 0, maximum = 65535, default = 76,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingFPD5,
        prompt = STRING_TOKEN (0x11BB), help = STRING_TOKEN (0x11BC), minimum = 0, maximum = 65535, default = 30,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingHSH5,
        prompt = STRING_TOKEN (0x11BF), help = STRING_TOKEN (0x11C0), minimum = 0, maximum = 65535, default = 11,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingHSL5,
        prompt = STRING_TOKEN (0x11C3), help = STRING_TOKEN (0x11C4), minimum = 0, maximum = 65535, default = 22,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingHSD5,
        prompt = STRING_TOKEN (0x11C1), help = STRING_TOKEN (0x11C2), minimum = 0, maximum = 65535, default = 5,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingM0C5,
        prompt = STRING_TOKEN (0x11C5), help = STRING_TOKEN (0x11C6), minimum = 1, maximum = 10000, default = 200,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingM1C5,
        prompt = STRING_TOKEN (0x11C7), help = STRING_TOKEN (0x11C8), minimum = 1, maximum = 10000, default = 2000,
      endnumeric;
    endif;
    suppressif ideqval SETUP_DATA.PchSerialIoUseTimingParameters == 1;
      subtitle text = STRING_TOKEN(0x11CD);
    endif;

 endform;

  form formid = 153,
    title     = STRING_TOKEN(0x11D8);
    subtitle text = STRING_TOKEN(0x11D8);

    suppressif ideqval SETUP_DATA.PchSerialIoUseTimingParameters == 0;
      subtitle text = STRING_TOKEN(0x11CC);
      numeric varid = SETUP_DATA.PchSerialIoTimingSSH6,
        prompt = STRING_TOKEN (0x11AD), help = STRING_TOKEN (0x11AE), minimum = 0, maximum = 65535, default = 706,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingSSL6,
        prompt = STRING_TOKEN (0x11B1), help = STRING_TOKEN (0x11B2), minimum = 0, maximum = 65535, default = 612,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingSSD6,
        prompt = STRING_TOKEN (0x11AF), help = STRING_TOKEN (0x11B0), minimum = 0, maximum = 65535, default = 30,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingFMH6,
        prompt = STRING_TOKEN (0x11B3), help = STRING_TOKEN (0x11B4), minimum = 0, maximum = 65535, default = 110,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingFML6,
        prompt = STRING_TOKEN (0x11B7), help = STRING_TOKEN (0x11B8), minimum = 0, maximum = 65535, default = 207,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingFMD6,
        prompt = STRING_TOKEN (0x11B5), help = STRING_TOKEN (0x11B6), minimum = 0, maximum = 65535, default = 30,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingFPH6,
        prompt = STRING_TOKEN (0x11B9), help = STRING_TOKEN (0x11BA), minimum = 0, maximum = 65535, default = 43,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingFPL6,
        prompt = STRING_TOKEN (0x11BD), help = STRING_TOKEN (0x11BE), minimum = 0, maximum = 65535, default = 76,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingFPD6,
        prompt = STRING_TOKEN (0x11BB), help = STRING_TOKEN (0x11BC), minimum = 0, maximum = 65535, default = 30,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingHSH6,
        prompt = STRING_TOKEN (0x11BF), help = STRING_TOKEN (0x11C0), minimum = 0, maximum = 65535, default = 11,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingHSL6,
        prompt = STRING_TOKEN (0x11C3), help = STRING_TOKEN (0x11C4), minimum = 0, maximum = 65535, default = 22,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingHSD6,
        prompt = STRING_TOKEN (0x11C1), help = STRING_TOKEN (0x11C2), minimum = 0, maximum = 65535, default = 5,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingM0CC,
        prompt = STRING_TOKEN (0x11C5), help = STRING_TOKEN (0x11C6), minimum = 1, maximum = 10000, default = 200,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingM1CC,
        prompt = STRING_TOKEN (0x11C7), help = STRING_TOKEN (0x11C8), minimum = 1, maximum = 10000, default = 2000,
      endnumeric;
    endif;
    suppressif ideqval SETUP_DATA.PchSerialIoUseTimingParameters == 1;
      subtitle text = STRING_TOKEN(0x11CD);
    endif;

 endform;

  form formid = 154,
    title     = STRING_TOKEN(0x11D9);
    subtitle text = STRING_TOKEN(0x11D9);

    suppressif ideqval SETUP_DATA.PchSerialIoUseTimingParameters == 0;
      subtitle text = STRING_TOKEN(0x11CC);
      numeric varid = SETUP_DATA.PchSerialIoTimingSSH7,
        prompt = STRING_TOKEN (0x11AD), help = STRING_TOKEN (0x11AE), minimum = 0, maximum = 65535, default = 706,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingSSL7,
        prompt = STRING_TOKEN (0x11B1), help = STRING_TOKEN (0x11B2), minimum = 0, maximum = 65535, default = 612,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingSSD7,
        prompt = STRING_TOKEN (0x11AF), help = STRING_TOKEN (0x11B0), minimum = 0, maximum = 65535, default = 30,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingFMH7,
        prompt = STRING_TOKEN (0x11B3), help = STRING_TOKEN (0x11B4), minimum = 0, maximum = 65535, default = 110,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingFML7,
        prompt = STRING_TOKEN (0x11B7), help = STRING_TOKEN (0x11B8), minimum = 0, maximum = 65535, default = 207,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingFMD7,
        prompt = STRING_TOKEN (0x11B5), help = STRING_TOKEN (0x11B6), minimum = 0, maximum = 65535, default = 30,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingFPH7,
        prompt = STRING_TOKEN (0x11B9), help = STRING_TOKEN (0x11BA), minimum = 0, maximum = 65535, default = 43,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingFPL7,
        prompt = STRING_TOKEN (0x11BD), help = STRING_TOKEN (0x11BE), minimum = 0, maximum = 65535, default = 76,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingFPD7,
        prompt = STRING_TOKEN (0x11BB), help = STRING_TOKEN (0x11BC), minimum = 0, maximum = 65535, default = 30,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingHSH7,
        prompt = STRING_TOKEN (0x11BF), help = STRING_TOKEN (0x11C0), minimum = 0, maximum = 65535, default = 11,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingHSL7,
        prompt = STRING_TOKEN (0x11C3), help = STRING_TOKEN (0x11C4), minimum = 0, maximum = 65535, default = 22,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingHSD7,
        prompt = STRING_TOKEN (0x11C1), help = STRING_TOKEN (0x11C2), minimum = 0, maximum = 65535, default = 5,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingM0CD,
        prompt = STRING_TOKEN (0x11C5), help = STRING_TOKEN (0x11C6), minimum = 1, maximum = 10000, default = 200,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingM1CD,
        prompt = STRING_TOKEN (0x11C7), help = STRING_TOKEN (0x11C8), minimum = 1, maximum = 10000, default = 2000,
      endnumeric;
    endif;
    suppressif ideqval SETUP_DATA.PchSerialIoUseTimingParameters == 1;
      subtitle text = STRING_TOKEN(0x11CD);
    endif;

 endform;

  form formid = 130,
    title     = STRING_TOKEN(0x11DA);
    subtitle text = STRING_TOKEN(0x11DA);

    oneof varid  = PCH_SETUP.PchSpiCsPolarity[0],
      prompt   = STRING_TOKEN(0x11EE),
      help     = STRING_TOKEN(0x11F0),
      option text = STRING_TOKEN(0x11F1), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x11F2), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    oneof varid  = PCH_SETUP.PchSpiCsPolarity[1],
      prompt   = STRING_TOKEN(0x11EF),
      help     = STRING_TOKEN(0x11F0),
      option text = STRING_TOKEN(0x11F1), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x11F2), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    subtitle text = STRING_TOKEN(0x0002);

    suppressif ideqval SETUP_DATA.PchSerialIoUseTimingParameters == 0;
      subtitle text = STRING_TOKEN(0x11CC);
      numeric varid = SETUP_DATA.PchSerialIoTimingM0C6,
        prompt = STRING_TOKEN (0x11C5), help = STRING_TOKEN (0x11C6), minimum = 1, maximum = 10000, default = 200,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingM1C6,
        prompt = STRING_TOKEN (0x11C7), help = STRING_TOKEN (0x11C8), minimum = 1, maximum = 10000, default = 2000,
      endnumeric;
    endif;
    suppressif ideqval SETUP_DATA.PchSerialIoUseTimingParameters == 1;
      subtitle text = STRING_TOKEN(0x11CD);
    endif;

 endform;


  form formid = 131,
    title     = STRING_TOKEN(0x11DB);
    subtitle text = STRING_TOKEN(0x11DB);

    oneof varid  = PCH_SETUP.PchSpiCsPolarity[2],
      prompt   = STRING_TOKEN(0x11EE),
      help     = STRING_TOKEN(0x11F0),
      option text = STRING_TOKEN(0x11F1), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x11F2), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    oneof varid  = PCH_SETUP.PchSpiCsPolarity[3],
      prompt   = STRING_TOKEN(0x11EF),
      help     = STRING_TOKEN(0x11F0),
      option text = STRING_TOKEN(0x11F1), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x11F2), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    suppressif TRUE;
      numeric varid = SETUP_DATA.PchSpiSensorDevicePort[0x1],
        prompt      = STRING_TOKEN(0x1208),
        help        = STRING_TOKEN(0x120A),
        minimum  = 0,
        maximum  = 0xFF,
        default  = 0,
      endnumeric;
    endif;

    subtitle text = STRING_TOKEN(0x0002);

    suppressif NOT ideqvallist SETUP_DATA.PchSpiSensorDevicePort[0x1] == 0x1;
        goto 4384,
          prompt = STRING_TOKEN(0x11FD),
          help = STRING_TOKEN(0x11FF);
    endif;

  endform;


  form formid = 140,
    title     = STRING_TOKEN(0x11DC);
    subtitle text = STRING_TOKEN(0x11DC);

    oneof varid  = PCH_SETUP.PchSpiCsPolarity[4],
      prompt   = STRING_TOKEN(0x11EE),
      help     = STRING_TOKEN(0x11F0),
      option text = STRING_TOKEN(0x11F1), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x11F2), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    oneof varid  = PCH_SETUP.PchSpiCsPolarity[5],
      prompt   = STRING_TOKEN(0x11EF),
      help     = STRING_TOKEN(0x11F0),
      option text = STRING_TOKEN(0x11F1), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x11F2), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    suppressif TRUE;
      numeric varid = SETUP_DATA.PchSpiSensorDevicePort[0x2],
        prompt      = STRING_TOKEN(0x1208),
        help        = STRING_TOKEN(0x120A),
        minimum  = 0,
        maximum  = 0xFF,
        default  = 0,
      endnumeric;
    endif;

    subtitle text = STRING_TOKEN(0x0002);

    suppressif NOT ideqvallist SETUP_DATA.PchSpiSensorDevicePort[0x2] == 0x1;
        goto 4384,
          prompt = STRING_TOKEN(0x11FD),
          help = STRING_TOKEN(0x11FF);
    endif;

  endform;


  form formid = 132,
    title     = STRING_TOKEN(0x11DF);
    subtitle text = STRING_TOKEN(0x11DF);

    oneof varid  = PCH_SETUP.PchUartHwFlowCtrl[0],
      prompt   = STRING_TOKEN(0x1259),
      help     = STRING_TOKEN(0x125A),
      option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    suppressif NOT ideqval PCH_SETUP.PchUartDmaEnable[0] == 1;
      oneof varid  = PCH_SETUP.PchUartDmaEnable[0],
        prompt   = STRING_TOKEN(0x125D),
        help     = STRING_TOKEN(0x125E),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;
    endif;

    suppressif NOT ideqval PCH_SETUP.PchSerialIoUart[0] == 3;
      oneof varid  = PCH_SETUP.PchUartPowerGating[0],
        prompt   = STRING_TOKEN(0x125B),
        help     = STRING_TOKEN(0x125C),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0006),     value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;
    endif;

    subtitle text = STRING_TOKEN(0x0002);

    suppressif ideqval SETUP_DATA.PchSerialIoUseTimingParameters == 0;
      subtitle text = STRING_TOKEN(0x11CC);
      numeric varid = SETUP_DATA.PchSerialIoTimingM0C9,
        prompt = STRING_TOKEN (0x11C5), help = STRING_TOKEN (0x11C6), minimum = 1, maximum = 10000, default = 200,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingM1C9,
        prompt = STRING_TOKEN (0x11C7), help = STRING_TOKEN (0x11C9), minimum = 1, maximum = 10000, default = 200,
      endnumeric;
    endif;
    suppressif ideqval SETUP_DATA.PchSerialIoUseTimingParameters == 1;
      subtitle text = STRING_TOKEN(0x11CD);
    endif;
 endform;




  form formid = 133,
    title     = STRING_TOKEN(0x11E0);
    subtitle text = STRING_TOKEN(0x11E0);

    oneof varid  = PCH_SETUP.PchUartHwFlowCtrl[1],
      prompt   = STRING_TOKEN(0x1259),
      help     = STRING_TOKEN(0x125A),
      option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    suppressif NOT ideqval PCH_SETUP.PchUartDmaEnable[1] == 1;
      oneof varid  = PCH_SETUP.PchUartDmaEnable[1],
        prompt   = STRING_TOKEN(0x125D),
        help     = STRING_TOKEN(0x125E),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;
    endif;

    suppressif NOT ideqval PCH_SETUP.PchSerialIoUart[1] == 3;
      oneof varid  = PCH_SETUP.PchUartPowerGating[1],
        prompt   = STRING_TOKEN(0x125B),
        help     = STRING_TOKEN(0x125C),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0006),     value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;
    endif;

    subtitle text = STRING_TOKEN(0x0002);

    suppressif ideqval SETUP_DATA.PchSerialIoUseTimingParameters == 0;
      subtitle text = STRING_TOKEN(0x11CC);
      numeric varid = SETUP_DATA.PchSerialIoTimingM0CA,
        prompt = STRING_TOKEN (0x11C5), help = STRING_TOKEN (0x11C6), minimum = 1, maximum = 10000, default = 200,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingM1CA,
        prompt = STRING_TOKEN (0x11C7), help = STRING_TOKEN (0x11C9), minimum = 1, maximum = 10000, default = 200,
      endnumeric;
    endif;
    suppressif ideqval SETUP_DATA.PchSerialIoUseTimingParameters == 1;
      subtitle text = STRING_TOKEN(0x11CD);
    endif;

   endform;




  form formid = 139,
    title     = STRING_TOKEN(0x11E1);
    subtitle text = STRING_TOKEN(0x11E1);

    oneof varid  = PCH_SETUP.PchUartHwFlowCtrl[2],
      prompt   = STRING_TOKEN(0x1259),
      help     = STRING_TOKEN(0x125A),
      option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    suppressif NOT ideqval PCH_SETUP.PchUartDmaEnable[2] == 1;
      oneof varid  = PCH_SETUP.PchUartDmaEnable[2],
        prompt   = STRING_TOKEN(0x125D),
        help     = STRING_TOKEN(0x125E),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;
    endif;

    suppressif NOT ideqval PCH_SETUP.PchSerialIoUart[2] == 3;
      oneof varid  = PCH_SETUP.PchUartPowerGating[2],
        prompt   = STRING_TOKEN(0x125B),
        help     = STRING_TOKEN(0x125C),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0006),     value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;
    endif;

    subtitle text = STRING_TOKEN(0x0002);

    suppressif ideqval SETUP_DATA.PchSerialIoUseTimingParameters == 0;
      subtitle text = STRING_TOKEN(0x11CC);
      numeric varid = SETUP_DATA.PchSerialIoTimingM0CB,
        prompt = STRING_TOKEN (0x11C5), help = STRING_TOKEN (0x11C6), minimum = 1, maximum = 10000, default = 200,
      endnumeric;
      numeric varid = SETUP_DATA.PchSerialIoTimingM1CB,
        prompt = STRING_TOKEN (0x11C7), help = STRING_TOKEN (0x11C9), minimum = 1, maximum = 10000, default = 200,
      endnumeric;
    endif;
    suppressif ideqval SETUP_DATA.PchSerialIoUseTimingParameters == 1;
      subtitle text = STRING_TOKEN(0x11CD);
    endif;
  endform; 














































#line 5328 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"

  form formid = 5046,
    title = STRING_TOKEN(0x116B);

    suppressif ideqval SETUP_VOLATILE_DATA.IshAvailable == 0;
      oneof varid  = PCH_SETUP.PchIshEnable,
        prompt   = STRING_TOKEN(0x116E),
        help     = STRING_TOKEN(0x116F),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      suppressif ideqval PCH_SETUP.PchIshEnable == 0;
        checkbox varid  = PCH_SETUP.PchIshPdtUnlock,
          prompt   = STRING_TOKEN(0x1170),
          help     = STRING_TOKEN(0x1171),
          flags    = 0 | RESET_REQUIRED,
          key      = 0,
        endcheckbox;


      
      
      
      
      #line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchIshStringPool.hfr"

























#line 5354 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"
      text
        help   = STRING_TOKEN(0x1173),
        text   = STRING_TOKEN(0x1172),
        flags  = 0,
        key    = 0;

        
        
        
        #line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetupIshSpi.hfr"

































    checkbox varid  = PCH_SETUP.PchIshSpiEnable[0],
      prompt   = STRING_TOKEN(0x1174),
      help     = STRING_TOKEN(0x1173),
      flags    = 0 | RESET_REQUIRED,
      key      = 0,
    endcheckbox;

    suppressif ideqval PCH_SETUP.PchIshSpiEnable[0] == 0;
      checkbox varid  = PCH_SETUP.PchIshSpiCs0Enable[0],
        prompt   = STRING_TOKEN(0x1175),
        help     = STRING_TOKEN(0x1173),
        flags    = 0 | RESET_REQUIRED,
        key      = 0,
      endcheckbox;
    endif;
#line 5364 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"
        
        
        

        
        
        #line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetupIshUart.hfr"

































checkbox varid  = PCH_SETUP.PchIshUartEnable[0],
  prompt   = STRING_TOKEN(0x1176),
  help     = STRING_TOKEN(0x1173),
  flags    = 0 | RESET_REQUIRED,
  key      = 0,
endcheckbox;
#line 5371 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"
        
        

        
        
        #line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetupIshUart.hfr"

































checkbox varid  = PCH_SETUP.PchIshUartEnable[1],
  prompt   = STRING_TOKEN(0x1177),
  help     = STRING_TOKEN(0x1173),
  flags    = 0 | RESET_REQUIRED,
  key      = 0,
endcheckbox;
#line 5377 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"
        
        

        
        
        #line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetupIshI2c.hfr"

































checkbox varid  = PCH_SETUP.PchIshI2cEnable[0],
  prompt   = STRING_TOKEN(0x1178),
  help     = STRING_TOKEN(0x1173),
  flags    = CHECKBOX_DEFAULT | RESET_REQUIRED,
  key      = 0,
endcheckbox;
#line 5383 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"
        
        

        
        
        #line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetupIshI2c.hfr"

































checkbox varid  = PCH_SETUP.PchIshI2cEnable[1],
  prompt   = STRING_TOKEN(0x1179),
  help     = STRING_TOKEN(0x1173),
  flags    = CHECKBOX_DEFAULT | RESET_REQUIRED,
  key      = 0,
endcheckbox;
#line 5389 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"
        
        

        
        
        #line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetupIshI2c.hfr"

































checkbox varid  = PCH_SETUP.PchIshI2cEnable[2],
  prompt   = STRING_TOKEN(0x117A),
  help     = STRING_TOKEN(0x1173),
  flags    = CHECKBOX_DEFAULT | RESET_REQUIRED,
  key      = 0,
endcheckbox;
#line 5395 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"
        
        

        
        
        
        #line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetupIshGp.hfr"

































checkbox varid  = PCH_SETUP.PchIshGpEnable[0],
  prompt   = STRING_TOKEN(0x117B),
  help     = STRING_TOKEN(0x1173),
  flags    = CHECKBOX_DEFAULT | RESET_REQUIRED,
  key      = 0,
endcheckbox;
#line 5402 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"
        
        
        

        
        
        
        #line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetupIshGp.hfr"

































checkbox varid  = PCH_SETUP.PchIshGpEnable[1],
  prompt   = STRING_TOKEN(0x117C),
  help     = STRING_TOKEN(0x1173),
  flags    = CHECKBOX_DEFAULT | RESET_REQUIRED,
  key      = 0,
endcheckbox;
#line 5410 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"
        
        
        

        
        
        
        #line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetupIshGp.hfr"

































checkbox varid  = PCH_SETUP.PchIshGpEnable[2],
  prompt   = STRING_TOKEN(0x117D),
  help     = STRING_TOKEN(0x1173),
  flags    = CHECKBOX_DEFAULT | RESET_REQUIRED,
  key      = 0,
endcheckbox;
#line 5418 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"
        
        
        

        
        
        
        #line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetupIshGp.hfr"

































checkbox varid  = PCH_SETUP.PchIshGpEnable[3],
  prompt   = STRING_TOKEN(0x117E),
  help     = STRING_TOKEN(0x1173),
  flags    = CHECKBOX_DEFAULT | RESET_REQUIRED,
  key      = 0,
endcheckbox;
#line 5426 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"
        
        
        

        
        
        
        #line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetupIshGp.hfr"

































checkbox varid  = PCH_SETUP.PchIshGpEnable[4],
  prompt   = STRING_TOKEN(0x117F),
  help     = STRING_TOKEN(0x1173),
  flags    = CHECKBOX_DEFAULT | RESET_REQUIRED,
  key      = 0,
endcheckbox;
#line 5434 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"
        
        
        

        
        
        
        #line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetupIshGp.hfr"

































checkbox varid  = PCH_SETUP.PchIshGpEnable[5],
  prompt   = STRING_TOKEN(0x1180),
  help     = STRING_TOKEN(0x1173),
  flags    = CHECKBOX_DEFAULT | RESET_REQUIRED,
  key      = 0,
endcheckbox;
#line 5442 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"
        
        
        

        
        
        
        #line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetupIshGp.hfr"

































checkbox varid  = PCH_SETUP.PchIshGpEnable[6],
  prompt   = STRING_TOKEN(0x1181),
  help     = STRING_TOKEN(0x1173),
  flags    = CHECKBOX_DEFAULT | RESET_REQUIRED,
  key      = 0,
endcheckbox;
#line 5450 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"
        
        
        

        
        
        
        #line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetupIshGp.hfr"

































checkbox varid  = PCH_SETUP.PchIshGpEnable[7],
  prompt   = STRING_TOKEN(0x1182),
  help     = STRING_TOKEN(0x1173),
  flags    = 0 | RESET_REQUIRED,
  key      = 0,
endcheckbox;
#line 5458 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"
        
        
        

      endif; 
    endif; 

    suppressif ideqval SETUP_VOLATILE_DATA.IshAvailable == 1;
      subtitle text = STRING_TOKEN(0x116D);
      subtitle text = STRING_TOKEN(0x0002);
    endif;
  endform; 

  form formid = 5054,
    title = STRING_TOKEN(0x1210);
      oneof varid  = PCH_SETUP.PchTtLevelSuggestSet,
        prompt   = STRING_TOKEN(0x122C),
        help     = STRING_TOKEN(0x122D),
        option text = STRING_TOKEN(0x1232), value = 1, flags = DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1064), value = 0, flags = RESET_REQUIRED;
      endoneof;

      suppressif ideqval PCH_SETUP.PchTtLevelSuggestSet == 1;
        checkbox varid  = PCH_SETUP.PchThrmTtEnable,
         prompt   = STRING_TOKEN(0x1211),
         help     = STRING_TOKEN(0x1212),
         
         
         flags    = 0 | RESET_REQUIRED,
         key      = 0,
        endcheckbox;

        checkbox varid  = PCH_SETUP.PchThrmTtState13Enable,
         prompt   = STRING_TOKEN(0x1219),
         help     = STRING_TOKEN(0x121A),
         
         
         flags    = 0 | RESET_REQUIRED,
         key      = 0,
        endcheckbox;

        checkbox varid  = PCH_SETUP.PchThrmTtLock,
         prompt   = STRING_TOKEN(0x121B),
         help     = STRING_TOKEN(0x121C),
         
         
         flags    = 0 | RESET_REQUIRED,
         key      = 0,
        endcheckbox;

        numeric varid = PCH_SETUP.PchThrmT0Level,
         prompt    = STRING_TOKEN(0x1213),
         help      = STRING_TOKEN(0x1214),
         flags     = RESET_REQUIRED,
         minimum   = 0,
         maximum   = 65535,
         step      = 1,
         default   = 0,
        endnumeric;

        numeric varid = PCH_SETUP.PchThrmT1Level,
         prompt    = STRING_TOKEN(0x1215),
         help      = STRING_TOKEN(0x1216),
         flags     = RESET_REQUIRED,
         minimum   = 0,
         maximum   = 65535,
         step      = 1,
         default   = 0,
        endnumeric;

        numeric varid = PCH_SETUP.PchThrmT2Level,
         prompt    = STRING_TOKEN(0x1217),
         help      = STRING_TOKEN(0x1218),
         flags     = RESET_REQUIRED,
         minimum   = 0,
         maximum   = 65535,
         step      = 1,
         default   = 0,
        endnumeric;
      endif;

      oneof varid  = PCH_SETUP.PchDmiTsSuggestSet,
         prompt   = STRING_TOKEN(0x122E),
         help     = STRING_TOKEN(0x122F),
         option text = STRING_TOKEN(0x1232), value = 1, flags = DEFAULT | RESET_REQUIRED;
         option text = STRING_TOKEN(0x1064), value = 0, flags = RESET_REQUIRED;
      endoneof;

      suppressif ideqval PCH_SETUP.PchDmiTsSuggestSet == 1;
        checkbox varid  = PCH_SETUP.PchDmiTsawEn,
         prompt   = STRING_TOKEN(0x121D),
         help     = STRING_TOKEN(0x121E),
         
         
         flags    = 0 | RESET_REQUIRED,
         key      = 0,
        endcheckbox;

        oneof varid  = PCH_SETUP.PchTs0Width,
         prompt   = STRING_TOKEN(0x121F),
         help     = STRING_TOKEN(0x1220),
         option text = STRING_TOKEN(0x1227), value = 0, flags = RESET_REQUIRED;
         option text = STRING_TOKEN(0x1228), value = 1, flags = RESET_REQUIRED;
         option text = STRING_TOKEN(0x1229), value = 2, flags = RESET_REQUIRED;
         option text = STRING_TOKEN(0x122A), value = 3, flags = DEFAULT | RESET_REQUIRED;
         option text = STRING_TOKEN(0x122B), value = 4, flags = RESET_REQUIRED;
        endoneof;

        oneof varid  = PCH_SETUP.PchTs1Width,
          prompt   = STRING_TOKEN(0x1221),
          help     = STRING_TOKEN(0x1222),
          option text = STRING_TOKEN(0x1227), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1228), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1229), value = 2, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x122A), value = 3, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x122B), value = 4, flags = RESET_REQUIRED;
        endoneof;

        oneof varid  = PCH_SETUP.PchTs2Width,
          prompt   = STRING_TOKEN(0x1223),
          help     = STRING_TOKEN(0x1224),
          option text = STRING_TOKEN(0x1227), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1228), value = 1, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1229), value = 2, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x122A), value = 3, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x122B), value = 4, flags = RESET_REQUIRED;
        endoneof;

        oneof varid  = PCH_SETUP.PchTs3Width,
          prompt   = STRING_TOKEN(0x1225),
          help     = STRING_TOKEN(0x1226),
          option text = STRING_TOKEN(0x1227), value = 0, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1228), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1229), value = 2, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x122A), value = 3, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x122B), value = 4, flags = RESET_REQUIRED;
        endoneof;
      endif;

      oneof varid  = PCH_SETUP.PchSataTsSuggestSet,
         prompt   = STRING_TOKEN(0x1230),
         help     = STRING_TOKEN(0x1231),
         option text = STRING_TOKEN(0x1232), value = 1, flags = DEFAULT | RESET_REQUIRED;
         option text = STRING_TOKEN(0x1064), value = 0, flags = RESET_REQUIRED;
      endoneof;

      suppressif ideqval PCH_SETUP.PchSataTsSuggestSet == 1;
        subtitle text = STRING_TOKEN(0x120E);
        oneof varid  = PCH_SETUP.PchP0T1M,
          prompt   = STRING_TOKEN(0x1233),
          help     = STRING_TOKEN(0x1235),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1227), value = 1, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1228), value = 2, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1229), value = 3, flags = RESET_REQUIRED;
        endoneof;

        oneof varid  = PCH_SETUP.PchP0T2M,
          prompt   = STRING_TOKEN(0x1236),
          help     = STRING_TOKEN(0x1238),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1227), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1228), value = 2, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1229), value = 3, flags = RESET_REQUIRED;
        endoneof;

        oneof varid  = PCH_SETUP.PchP0T3M,
          prompt   = STRING_TOKEN(0x1239),
          help     = STRING_TOKEN(0x123B),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1227), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1228), value = 2, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1229), value = 3, flags = DEFAULT | RESET_REQUIRED;
        endoneof;

        checkbox varid  = PCH_SETUP.PchP0TDispFinit,
          prompt   = STRING_TOKEN(0x1242),
          help     = STRING_TOKEN(0x1244),
          
          
          flags    = 0 | RESET_REQUIRED,
          key      = 0,
        endcheckbox;
      endif;

      suppressif ideqval PCH_SETUP.PchP0TDispFinit == 0 OR ideqval PCH_SETUP.PchSataTsSuggestSet == 1;
        oneof varid  = PCH_SETUP.PchP0TDisp,
          prompt   = STRING_TOKEN(0x123C),
          help     = STRING_TOKEN(0x123E),
          option text = STRING_TOKEN(0x1248), value = 0, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1249), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x124A), value = 3, flags = RESET_REQUIRED;
        endoneof;

        oneof varid  = PCH_SETUP.PchP0Tinact,
          prompt   = STRING_TOKEN(0x123F),
          help     = STRING_TOKEN(0x1241),
          option text = STRING_TOKEN(0x1248), value = 0, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1249), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x124A), value = 3, flags = RESET_REQUIRED;
        endoneof;
      endif;

      suppressif ideqval PCH_SETUP.PchP0TDispFinit == 1 OR ideqval PCH_SETUP.PchSataTsSuggestSet == 1;
        oneof varid  = PCH_SETUP.PchP0TDisp,
          prompt   = STRING_TOKEN(0x123C),
          help     = STRING_TOKEN(0x123E),
          option text = STRING_TOKEN(0x1245), value = 0, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1246), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1247), value = 3, flags = RESET_REQUIRED;
        endoneof;

        oneof varid  = PCH_SETUP.PchP0Tinact,
          prompt   = STRING_TOKEN(0x123F),
          help     = STRING_TOKEN(0x1241),
          option text = STRING_TOKEN(0x1245), value = 0, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1246), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1247), value = 3, flags = RESET_REQUIRED;
        endoneof;
      endif;

      suppressif ideqval PCH_SETUP.PchSataTsSuggestSet == 1;
        subtitle text = STRING_TOKEN(0x120F);
        oneof varid  = PCH_SETUP.PchP1T1M,
          prompt   = STRING_TOKEN(0x1234),
          help     = STRING_TOKEN(0x1235),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1227), value = 1, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1228), value = 2, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1229), value = 3, flags = RESET_REQUIRED;
        endoneof;

        oneof varid  = PCH_SETUP.PchP1T2M,
          prompt   = STRING_TOKEN(0x1237),
          help     = STRING_TOKEN(0x1238),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1227), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1228), value = 2, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1229), value = 3, flags = RESET_REQUIRED;
        endoneof;

        oneof varid  = PCH_SETUP.PchP1T3M,
          prompt   = STRING_TOKEN(0x123A),
          help     = STRING_TOKEN(0x123B),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1227), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1228), value = 2, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1229), value = 3, flags = DEFAULT | RESET_REQUIRED;
        endoneof;

        checkbox varid  = PCH_SETUP.PchP1TDispFinit,
          prompt   = STRING_TOKEN(0x1243),
          help     = STRING_TOKEN(0x1244),
          
          
          flags    = 0 | RESET_REQUIRED,
          key      = 0,
        endcheckbox;
      endif;

      suppressif ideqval PCH_SETUP.PchP1TDispFinit == 0 OR ideqval PCH_SETUP.PchSataTsSuggestSet == 1;
        oneof varid  = PCH_SETUP.PchP1TDisp,
          prompt   = STRING_TOKEN(0x123D),
          help     = STRING_TOKEN(0x123E),
          option text = STRING_TOKEN(0x1248), value = 0, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1249), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x124A), value = 3, flags = RESET_REQUIRED;
        endoneof;

        oneof varid  = PCH_SETUP.PchP1Tinact,
          prompt   = STRING_TOKEN(0x1240),
          help     = STRING_TOKEN(0x1241),
          option text = STRING_TOKEN(0x1248), value = 0, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1249), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x124A), value = 3, flags = RESET_REQUIRED;
        endoneof;
      endif;

      suppressif ideqval PCH_SETUP.PchP1TDispFinit == 1 OR ideqval PCH_SETUP.PchSataTsSuggestSet == 1;
        oneof varid  = PCH_SETUP.PchP1TDisp,
          prompt   = STRING_TOKEN(0x123D),
          help     = STRING_TOKEN(0x123E),
          option text = STRING_TOKEN(0x1245), value = 0, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1246), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1247), value = 3, flags = RESET_REQUIRED;
        endoneof;

        oneof varid  = PCH_SETUP.PchP1Tinact,
          prompt   = STRING_TOKEN(0x1240),
          help     = STRING_TOKEN(0x1241),
          option text = STRING_TOKEN(0x1245), value = 0, flags = DEFAULT | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1246), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1247), value = 3, flags = RESET_REQUIRED;
        endoneof;
      endif;

    endform; 

  form formid = 4382,
    title     = STRING_TOKEN(0x11F3);

    oneof varid  = SETUP_DATA.PchI2cTouchPadType,
        prompt   = STRING_TOKEN(0x11F4),
        help     = STRING_TOKEN(0x11F5),
        option text = STRING_TOKEN(0x0004),                         value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x11CE), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x120B),           value = 2, flags = RESET_REQUIRED;
        
        option text = STRING_TOKEN(0x11CF),      value = 6, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x11D0),                value = 7, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x120C),              value = 8, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x120D),                value = 9, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1251),      value = 5, flags = RESET_REQUIRED;
    endoneof;

    suppressif ideqval SETUP_DATA.PchI2cTouchPadType == 0 OR (
               ideqval SETUP_DATA.PchI2cSensorDevicePort[0x0] == 0x1 AND (
               ideqval SETUP_DATA.PchI2cTouchPadType == 3 OR
               ideqval SETUP_DATA.PchI2cTouchPadType == 4 ));
      oneof varid  = SETUP_DATA.PchI2cTouchPadIrqMode,
        prompt    = STRING_TOKEN(0x11F6),
        help      = STRING_TOKEN(0x11F7),
        option text = STRING_TOKEN(0x1186), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1185), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;
    endif;

    suppressif NOT ideqval SETUP_DATA.PchI2cTouchPadType == 5;
      numeric varid = SETUP_DATA.PchI2cTouchPadBusAddress,
        prompt      = STRING_TOKEN(0x1252),
        help        = STRING_TOKEN(0x1258),
        flags       = RESET_REQUIRED | DISPLAY_UINT_HEX,
        minimum  = 0,
        maximum  = 0x7F,
        step     = 1,
        default  = 0,
      endnumeric;

      numeric varid = SETUP_DATA.PchI2cTouchPadHidAddress,
        prompt      = STRING_TOKEN(0x1253),
        help        = STRING_TOKEN(0x1258),
        flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
        minimum  = 0,
        maximum  = 0xFFFF,
        step     = 1,
        default  = 0,
      endnumeric;

      oneof varid  = SETUP_DATA.PchI2cTouchPadSpeed,
        prompt   = STRING_TOKEN(0x1254),
        help     = STRING_TOKEN(0x1258),
        option text = STRING_TOKEN(0x1255), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1256), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1257),   value = 2, flags = RESET_REQUIRED;
      endoneof;
    endif;

  endform;


  form formid = 4383,
    title     = STRING_TOKEN(0x11F8);

    oneof varid  = SETUP_DATA.PchI2cTouchPanelType,
        prompt   = STRING_TOKEN(0x11F9),
        help     = STRING_TOKEN(0x11FA),
        option text = STRING_TOKEN(0x0004),                          value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x124B),     value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x124C),     value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x124D),      value = 3, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x124E), value = 4, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x124F),   value = 5, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1250),         value = 6, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1251),       value = 7, flags = RESET_REQUIRED;
      endoneof;

    suppressif ideqval SETUP_DATA.PchI2cTouchPanelType == 0;
      oneof varid  = SETUP_DATA.PchI2cTouchPanelIrqMode,
        prompt   = STRING_TOKEN(0x11FB),
        help     = STRING_TOKEN(0x11FC),
        option text = STRING_TOKEN(0x1186), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x1185), value = 1, flags = RESET_REQUIRED;
      endoneof;
    endif;

    suppressif NOT ideqval SETUP_DATA.PchI2cTouchPanelType == 7;
      numeric varid = SETUP_DATA.PchI2cTouchPanelBusAddress,
        prompt      = STRING_TOKEN(0x1252),
        help        = STRING_TOKEN(0x1258),
        flags       = RESET_REQUIRED | DISPLAY_UINT_HEX,
        minimum  = 0,
        maximum  = 0x7F,
        step     = 1,
        default  = 0,
      endnumeric;

      numeric varid = SETUP_DATA.PchI2cTouchPanelHidAddress,
        prompt      = STRING_TOKEN(0x1253),
        help        = STRING_TOKEN(0x1258),
        flags    = RESET_REQUIRED | DISPLAY_UINT_HEX,
        minimum  = 0,
        maximum  = 0xFFFF,
        step     = 1,
        default  = 0,
      endnumeric;
    endif;

    suppressif NOT ideqval SETUP_DATA.PchI2cTouchPanelType >= 6;
      oneof varid  = SETUP_DATA.PchI2cTouchPanelSpeed,
        prompt   = STRING_TOKEN(0x1254),
        help     = STRING_TOKEN(0x1258),
      suppressif NOT ideqval SETUP_DATA.PchI2cTouchPanelType == 7;
        option text = STRING_TOKEN(0x1255), value = 0, flags = RESET_REQUIRED;
      endif;
          option text = STRING_TOKEN(0x1256), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1257),   value = 2, flags = RESET_REQUIRED;
      endoneof;
    endif;

  endform;


  form formid = 4384,
    title     = STRING_TOKEN(0x11FD);

    oneof varid  = SETUP_DATA.PchSpiFingerPrintType,
        prompt   = STRING_TOKEN(0x11FE),
        help     = STRING_TOKEN(0x11FF),
        default = 0, defaultstore = MyStandardDefault,
        option text = STRING_TOKEN(0x0004),                  value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1202),  value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1203),  value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1205), value = 3, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1206), value = 4, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1207), value = 5, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1204),  value = 6, flags = RESET_REQUIRED;
      endoneof;

    suppressif ideqval SETUP_DATA.PchSpiFingerPrintType == 0;
      oneof varid  = SETUP_DATA.PchSpiSensorIrqMode,
        prompt   = STRING_TOKEN(0x1200),
        help     = STRING_TOKEN(0x1201),
        option text = STRING_TOKEN(0x1186), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x1185), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;
    endif;

      subtitle text = STRING_TOKEN(0x0002);

      suppressif ideqval SETUP_DATA.PchSerialIoUseTimingParameters == 0;
        subtitle text = STRING_TOKEN(0x11CC);
        numeric varid = SETUP_DATA.PchSerialIoTimingM0C7,
          prompt = STRING_TOKEN (0x11C5), help = STRING_TOKEN (0x11C6), minimum = 1, maximum = 10000, default = 200,
        endnumeric;
        numeric varid = SETUP_DATA.PchSerialIoTimingM1C7,
          prompt = STRING_TOKEN (0x11C7), help = STRING_TOKEN (0x11C8), minimum = 1, maximum = 10000, default = 2000,
        endnumeric;
      endif;
      suppressif ideqval SETUP_DATA.PchSerialIoUseTimingParameters == 1;
        subtitle text = STRING_TOKEN(0x11CD);
      endif;

   suppressif ideqval SETUP_DATA.PchSerialIoUseTimingParameters == 0;
     subtitle text = STRING_TOKEN(0x11CC);
     numeric varid = SETUP_DATA.PchSerialIoTimingM0C8,
       prompt = STRING_TOKEN (0x11C5), help = STRING_TOKEN (0x11C6), minimum = 1, maximum = 10000, default = 200,
     endnumeric;
     numeric varid = SETUP_DATA.PchSerialIoTimingM1C8,
       prompt = STRING_TOKEN (0x11C7), help = STRING_TOKEN (0x11C8), minimum = 1, maximum = 10000, default = 2000,
     endnumeric;
   endif;
   suppressif ideqval SETUP_DATA.PchSerialIoUseTimingParameters == 1;
     subtitle text = STRING_TOKEN(0x11CD);
   endif;

  endform;

  

#line 5938 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"
    
  #line 5940 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"
   #line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PmcFivrSetup.hfr"

































form formid = 5089,
  title = STRING_TOKEN(0x12B3);
  



































































































































































#line 201 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PmcFivrSetup.hfr"

  text
    help   = STRING_TOKEN(0x12C8),
    text   = STRING_TOKEN(0x12C8),
    flags  = 0,
    key    = 0;

  





























#line 239 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PmcFivrSetup.hfr"

  numeric varid = PCH_SETUP.PchOffToHighCurModeVolTranTime,
    prompt    = STRING_TOKEN(0x12CF),
    help      = STRING_TOKEN(0x12D0),
    flags     = RESET_REQUIRED,
    minimum   = 0,
    maximum   = 2047,
    step      = 1,
    default   = 0x96,
  endnumeric;

  








#line 260 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PmcFivrSetup.hfr"

  








#line 271 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PmcFivrSetup.hfr"
endform; 
#line 5941 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"
  

form formid = 5090,
  title = STRING_TOKEN (0x12D7);

  goto 5091,
      prompt = STRING_TOKEN(0x12D9),
      help   = STRING_TOKEN(0x12D9);

endform;

form formid = 5091,
  title = STRING_TOKEN (0x12D9);

  oneof varid     = PCH_SETUP.PmcAdrEn,
      prompt       = STRING_TOKEN(0x12DA),
      help         = STRING_TOKEN(0x12DB),
      option text = STRING_TOKEN(0x1261), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x1591), value = 2, flags = RESET_REQUIRED;
  endoneof;

  suppressif ideqval PCH_SETUP.PmcAdrEn == 2;
   oneof varid     = PCH_SETUP.PmcAdrHostPartitionReset,
       prompt      = STRING_TOKEN(0x12DE),
       help        = STRING_TOKEN(0x12DF),
       option text = STRING_TOKEN(0x1261), value = 0, flags =  RESET_REQUIRED;
       option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
       option text = STRING_TOKEN(0x1591), value = 2, flags = RESET_REQUIRED;
   endoneof;

    numeric
      varid     = PCH_SETUP.PmcAdrTimer1Val,
      prompt      = STRING_TOKEN(0x12DC),
      help        = STRING_TOKEN(0x12DD),
      minimum     = 1,
      maximum     = 0xFF,
      default     = 32,
    endnumeric;

    oneof varid     = PCH_SETUP.PmcAdrMultiplier1Val,
      prompt      = STRING_TOKEN(0x12E0),
      help        = STRING_TOKEN(0x12E1),
      option text = STRING_TOKEN(0x12E2),  value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x12E3),  value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x12E4), value = 2, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x12E5), value = 3, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x12E6), value = 4, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x12E7), value = 5, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x12E8), value = 6, flags = DEFAULT | RESET_REQUIRED;
      option text = STRING_TOKEN(0x12E9), value = 7, flags = RESET_REQUIRED;
    endoneof;
  endif;
endform;



#line 5999 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PchSetup.hfr"
#line 476 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\Advanced.vfr"
  #line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\MeSetup.hfr"

































form formid = 4158,
  title     = STRING_TOKEN(0x07AE);

  
  
  
  suppressif TRUE;
   text
         help  = STRING_TOKEN(0x0005),
         text  = STRING_TOKEN(0x0005),
         flags = INTERACTIVE,
         key   = 5068;
  endif;

  text
    help  = STRING_TOKEN(0x07B0),
    text  = STRING_TOKEN(0x07B1),
    text  = STRING_TOKEN(0x07B2),
    flags = 0,
    key   = 0;

  suppressif NOT ideqval ME_SETUP.MeFirmwareInfo == 0xFF;
    text help = STRING_TOKEN(0x0002), text = STRING_TOKEN(0x07B4), text = STRING_TOKEN(0x07B6), flags = 0, key = 0;
    text help = STRING_TOKEN(0x0002), text = STRING_TOKEN(0x07B4), text = STRING_TOKEN(0x07BA), flags = 0, key = 0;
    text help = STRING_TOKEN(0x0002), text = STRING_TOKEN(0x07B4), text = STRING_TOKEN(0x07B8), flags = 0, key = 0;
    text help = STRING_TOKEN(0x0002), text = STRING_TOKEN(0x07B4), text = STRING_TOKEN(0x07B9), flags = 0, key = 0;
    text help = STRING_TOKEN(0x0002), text = STRING_TOKEN(0x07B4), text = STRING_TOKEN(0x07B7), flags = 0, key = 0;
  endif; 

  text
    help  = STRING_TOKEN(0x07B3),
    text  = STRING_TOKEN(0x07B4),
    text  = STRING_TOKEN(0x07B5),
    flags = 0,
    key   = 0;

  text
    help  = STRING_TOKEN(0x07BB),
    text  = STRING_TOKEN(0x07BC),
    text  = STRING_TOKEN(0x07BD),
    flags = 0,
    key   = 0;

  text
    help  = STRING_TOKEN(0x07BE),
    text  = STRING_TOKEN(0x07BF),
    text  = STRING_TOKEN(0x07C0),
    flags = 0,
    key   = 0;

  text
    help  = STRING_TOKEN(0x07C1),
    text  = STRING_TOKEN(0x07C2),
    text  = STRING_TOKEN(0x07C3),
    flags = 0,
    key   = 0;

  text
    help  = STRING_TOKEN(0x07C4),
    text  = STRING_TOKEN(0x07C5),
    text  = STRING_TOKEN(0x07C6),
    flags = 0,
    key   = 0;

   text
    help  = STRING_TOKEN(0x07C7),
    text  = STRING_TOKEN(0x07C8),
    text  = STRING_TOKEN(0x07C9),
    flags = 0,
    key   = 0;

   text
    help  = STRING_TOKEN(0x07CA),
    text  = STRING_TOKEN(0x07CB),
    text  = STRING_TOKEN(0x07CC),
    flags = 0,
    key   = 0;

  text
    help  = STRING_TOKEN(0x07CD),
    text  = STRING_TOKEN(0x07CE),
    text  = STRING_TOKEN(0x07CF),
    flags = 0,
    key   = 0;

  subtitle text = STRING_TOKEN(0x0002);

  grayoutif ideqval ME_SETUP_STORAGE.RemoteSessionActive == 0x1 OR
            ideqval ME_SETUP_STORAGE.AfterEoP == 0x1;
    oneof varid   = ME_SETUP_STORAGE.MeStateControl,
      prompt      = STRING_TOKEN(0x07D0),
      help        = STRING_TOKEN(0x07D1),
      option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;
  endif;

  suppressif ideqval ME_SETUP_STORAGE.MeStateControl == 0;

    suppressif NOT ideqval ME_SETUP.MeImageType == 0x04 OR
               NOT ideqval ME_SETUP.MeFirmwareInfo == 0x00 OR
               ideqval ME_SETUP_STORAGE.AmtState == 0;
      grayoutif ideqval ME_SETUP_STORAGE.RemoteSessionActive == 0x1;

        grayoutif ideqval ME_SETUP_STORAGE.AfterEoP == 0x1;
          oneof varid   = ME_SETUP_STORAGE.MngState,
            questionid  = 5070,
            prompt      = STRING_TOKEN(0x07D2),
            help        = STRING_TOKEN(0x07D3),
            option text = STRING_TOKEN(0x0004), value = 0, flags = INTERACTIVE | RESET_REQUIRED;
            option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | INTERACTIVE | RESET_REQUIRED;
          endoneof;
        endif;

        suppressif ideqval ME_SETUP_STORAGE.MngState == 0;
          grayoutif ideqval ME_SETUP_STORAGE.AfterEoP == 0x1;
            oneof varid   = ME_SETUP.Amt,
              prompt      = STRING_TOKEN(0x07D4),
              help        = STRING_TOKEN(0x07D5),
              option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
              option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | RESET_REQUIRED;
            endoneof;
          endif;

          grayoutif ideqval ME_SETUP.Amt == 0;
              goto 4340,
                prompt = STRING_TOKEN(0x00AC),
                help   = STRING_TOKEN(0x00AD);
          endif;

        endif; 

      endif; 
    endif; 
#line 169 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\MeSetup.hfr"

  






#line 178 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\MeSetup.hfr"

    suppressif NOT ideqval ME_SETUP.UnconfigOnRtcAvailable == 1;
      oneof varid   = ME_SETUP.MeUnconfigOnRtcClear,
        prompt      = STRING_TOKEN (0x07D6),
        help        = STRING_TOKEN (0x07D7),
        option text = STRING_TOKEN (0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;
    endif; 

    oneof varid   = ME_SETUP.CommsHubEnable,
      prompt      = STRING_TOKEN (0x07D8),
      help        = STRING_TOKEN (0x07D9),
      option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003),  value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = ME_SETUP.MeJhiSupport,
      prompt      = STRING_TOKEN(0x07DA),
      help        = STRING_TOKEN(0x07DB),
      option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003),  value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = ME_SETUP.CoreBiosDoneEnabled,
      prompt      = STRING_TOKEN(0x07DE),
      help        = STRING_TOKEN(0x07DF),
      option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;













#line 222 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\MeSetup.hfr"




    subtitle text = STRING_TOKEN(0x0002);

    goto 4163,
      prompt = STRING_TOKEN(0x07E5),
      help   = STRING_TOKEN(0x07E6);

    goto 4161,
      prompt = STRING_TOKEN(0x07EB),
      help   = STRING_TOKEN(0x07EC);

    goto 4181,
      prompt = STRING_TOKEN(0x07F9),
      help   = STRING_TOKEN(0x07FA);

    suppressif NOT ideqval ME_SETUP.MeImageType == 0x04;
      grayoutif ideqval ME_SETUP_STORAGE.UpidSupport == 0x0;
        goto 4184,
          prompt = STRING_TOKEN(0x080D),
          help   = STRING_TOKEN(0x080E);
      endif; 
    endif; 

    goto 4162,
      prompt = STRING_TOKEN(0x07E0),
      help   = STRING_TOKEN(0x07E1);

    goto 4164,
      prompt = STRING_TOKEN(0x0801),
      help   = STRING_TOKEN(0x0802);

  endif; 


  grayoutif (ideqval TCG_SETUP.dTpm12Present == 0 AND
             ideqval TCG_SETUP.dTpm20Present == 0 AND
             ideqval TCG_SETUP.PttPresent    == 0);
    oneof varid   = ME_SETUP.ExtendMeMeasuredBoot,
      prompt      = STRING_TOKEN (0x07DC),
      help        = STRING_TOKEN (0x07DD),
      option text = STRING_TOKEN (0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN (0x0003),  value = 1, flags = RESET_REQUIRED;
    endoneof;
  endif;
#line 270 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\MeSetup.hfr"
endform; 

form formid = 4161,
  title     = STRING_TOKEN(0x07EB);

  
  
  
  suppressif TRUE;
   text
         help  = STRING_TOKEN(0x0005),
         text  = STRING_TOKEN(0x0005),
         flags = INTERACTIVE,
         key   = 5069;
  endif;

  text
    help  = STRING_TOKEN(0x07EF),
    text  = STRING_TOKEN(0x07ED),
    text  = STRING_TOKEN(0x07EE),
    flags = 0,
    key   = 0;

  subtitle text = STRING_TOKEN(0x0002);

  
  
  
  suppressif TRUE;
    oneof varid   = ME_SETUP.ChangeEps,
      prompt      = STRING_TOKEN (0x07F2),
      help        = STRING_TOKEN (0x07F3),
      option text = STRING_TOKEN (0x07F5), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN (0x07F4),      value = 1, flags = RESET_REQUIRED;
    endoneof;
  endif;
  
  
  

  grayoutif ideqval ME_SETUP_STORAGE.AfterEoP == 0x1;

    suppressif ideqval ME_SETUP_STORAGE.BootGuardSupport == 0 OR

               ideqval TCG_SETUP.dTpm12Present == 0 OR
#line 316 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\MeSetup.hfr"
               ideqval ME_SETUP_STORAGE.MeasureBoot == 0;
      oneof varid   = ME_SETUP_STORAGE.TpmDeactivate,
        prompt      = STRING_TOKEN(0x07F0),
        help        = STRING_TOKEN(0x07F1),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = RESET_REQUIRED;
      endoneof;
    endif; 
  endif; 

endform; 

form formid = 4163,
  title     = STRING_TOKEN(0x07E5);

  oneof varid   = ME_SETUP.MeFwDowngrade,
    prompt      = STRING_TOKEN(0x07E7),
    help        = STRING_TOKEN(0x07E8),
    option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    option text = STRING_TOKEN(0x0003),  value = 1, flags = RESET_REQUIRED;
  endoneof;

  grayoutif ideqval ME_SETUP_STORAGE.AfterEoP == 0x1;
    oneof varid   = ME_SETUP_STORAGE.FwUpdEnabled,
      prompt      = STRING_TOKEN(0x07E9),
      help        = STRING_TOKEN(0x07EA),
      option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;
  endif; 

endform; 

form formid = 4184,
  title     = STRING_TOKEN(0x080D);

  text
    help  = STRING_TOKEN(0x0813),
    text  = STRING_TOKEN(0x0813),
    text  = STRING_TOKEN(0x0814),
    flags = 0,
    key   = 0;

  text
    help  = STRING_TOKEN(0x0815),
    text  = STRING_TOKEN(0x0815),
    text  = STRING_TOKEN(0x0816),
    flags = 0,
    key   = 0;

  subtitle text = STRING_TOKEN(0x0002);

  grayoutif ideqval ME_SETUP_STORAGE.AfterEoP == 0x1;
    oneof varid   = ME_SETUP_STORAGE.UpidState,
      prompt      = STRING_TOKEN(0x080F),
      help        = STRING_TOKEN(0x0810),
      option text = STRING_TOKEN(0x0004), value = 0, flags = MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003),  value = 1, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = ME_SETUP_STORAGE.UpidOsControlState,
      prompt      = STRING_TOKEN(0x0811),
      help        = STRING_TOKEN(0x0812),
      option text = STRING_TOKEN(0x0004), value = 0, flags = MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003),  value = 1, flags = RESET_REQUIRED;
    endoneof;
  endif; 

endform; 

form formid = 4162,
  title     = STRING_TOKEN(0x07E0);

  suppressif ideqval ME_SETUP.HeciCommunication == 2; 
  checkbox varid    = ME_SETUP.HeciTimeouts,
    prompt   = STRING_TOKEN(0x0817),
    help     = STRING_TOKEN(0x0818),
    
    
    flags    = CHECKBOX_DEFAULT | RESET_REQUIRED,
    key      = 0,
  endcheckbox;
  endif; 

  subtitle text = STRING_TOKEN(0x0002);

  oneof varid = ME_SETUP.DidInitStat,
    prompt   = STRING_TOKEN(0x0819),
    help     = STRING_TOKEN(0x081A),
    option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | RESET_REQUIRED;
    option text = STRING_TOKEN(0x081B), value = 1, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(0x081C), value = 2, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(0x081D), value = 3, flags = RESET_REQUIRED;
  endoneof;

  oneof varid    = ME_SETUP.DisableCpuReplacedPolling,
    prompt   = STRING_TOKEN(0x081E),
    help     = STRING_TOKEN(0x081F),
    option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | RESET_REQUIRED;
    option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
  endoneof;

  oneof varid    = ME_SETUP.DisableMessageCheck,
    prompt   = STRING_TOKEN(0x0820),
    help     = STRING_TOKEN(0x0821),
    option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | RESET_REQUIRED;
    option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
  endoneof;

  oneof varid    = ME_SETUP.SkipMbpHob,
    prompt   = STRING_TOKEN(0x0822),
    help     = STRING_TOKEN(0x0823),
    option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | RESET_REQUIRED;
    option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
  endoneof;

  suppressif ideqval ME_SETUP.HeciCommunication == 2; 
  checkbox varid = ME_SETUP.HeciCommunication2,
    prompt = STRING_TOKEN(0x0824),
    help   = STRING_TOKEN(0x0825),
    
    
    flags  = RESET_REQUIRED,
    key    = 0,
  endcheckbox;
  endif;                                                            

  checkbox varid = ME_SETUP.KtDeviceEnable,
    prompt = STRING_TOKEN(0x0826),
    help   = STRING_TOKEN(0x0827),
    
    
    flags  = CHECKBOX_DEFAULT | RESET_REQUIRED,
    key    = 0,
  endcheckbox;

  oneof varid = ME_SETUP.EndOfPostMessage,
    prompt = STRING_TOKEN(0x07E2),
    help = STRING_TOKEN(0x07E3),
    option text = STRING_TOKEN(0x0004),                value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(0x07E4), value = 2, flags = DEFAULT | RESET_REQUIRED;
  endoneof;

  oneof varid    = ME_SETUP.DisableD0I3SettingForHeci,
    prompt   = STRING_TOKEN(0x0828),
    help     = STRING_TOKEN(0x0829),
    option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | RESET_REQUIRED;
    option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
  endoneof;

  oneof varid    = ME_SETUP.MctpBroadcastCycle,
    prompt   = STRING_TOKEN(0x082A),
    help     = STRING_TOKEN(0x082B),
    option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | RESET_REQUIRED;
    option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
  endoneof;


  goto 4165,
    prompt  = STRING_TOKEN(0x082E),
    help    = STRING_TOKEN(0x082F);
#line 478 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\MeSetup.hfr"

endform; 





form formid = 4165,
  title     = STRING_TOKEN(0x082E);

  checkbox varid  = ME_SETUP.BiosReflash,
    prompt   = STRING_TOKEN(0x0830),
    help     = STRING_TOKEN(0x0831),
    
    
    flags    = CHECKBOX_DEFAULT | RESET_REQUIRED,
    key      = 0,
  endcheckbox;

  checkbox varid  = ME_SETUP.BiosSetup,
    prompt   = STRING_TOKEN(0x0832),
    help     = STRING_TOKEN(0x0833),
    
    
    flags    = CHECKBOX_DEFAULT | RESET_REQUIRED,
    key      = 0,
  endcheckbox;

  checkbox varid  = ME_SETUP.BiosPause,
    prompt   = STRING_TOKEN(0x0834),
    help     = STRING_TOKEN(0x0835),
    
    
    flags    = RESET_REQUIRED,
    key      = 0,
  endcheckbox;

  checkbox varid  = ME_SETUP.SecureBootExposureToFw,
    prompt   = STRING_TOKEN(0x0836),
    help     = STRING_TOKEN(0x0837),
    
    
    flags    = CHECKBOX_DEFAULT | RESET_REQUIRED,
    key      = 0,
  endcheckbox;

  suppressif NOT ideqval ME_SETUP.MeImageType == 0x04;
    checkbox varid  = ME_SETUP.vProTbtDock,
      prompt   = STRING_TOKEN(0x0838),
      help     = STRING_TOKEN(0x0839),
      
      
      flags    = CHECKBOX_DEFAULT | RESET_REQUIRED,
      key      = 0,
    endcheckbox;
  endif; 

endform; 
#line 537 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\MeSetup.hfr"

form formid = 4181,
  title     = STRING_TOKEN(0x07F6);

  oneof varid   = ME_SETUP_STORAGE.FipsModeSelect,
    prompt      = STRING_TOKEN(0x07F7),
    help        = STRING_TOKEN(0x07F8),
    option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    option text = STRING_TOKEN(0x0003),  value = 1, flags = RESET_REQUIRED;
  endoneof;

  text
    help  = STRING_TOKEN(0x07FC),
    text  = STRING_TOKEN(0x07FB),
    text  = STRING_TOKEN(0x07FD),
    flags = 0,
    key   = 0;

  text
    help  = STRING_TOKEN(0x07FF),
    text  = STRING_TOKEN(0x07FE),
    text  = STRING_TOKEN(0x0800),
    flags = 0,
    key   = 0;

endform; 

form formid = 4164,
  title     = STRING_TOKEN(0x0801);

  text
    help  = STRING_TOKEN(0x0804),
    text  = STRING_TOKEN(0x0803),
    text  = STRING_TOKEN(0x0805),
    flags = 0,
    key   = 0;

  text
    help  = STRING_TOKEN(0x0807),
    text  = STRING_TOKEN(0x0806),
    text  = STRING_TOKEN(0x0808),
    flags = 0,
    key   = 0;

  grayoutif ideqval ME_SETUP_STORAGE.AfterEoP == 0x1;
    oneof varid   = ME_SETUP.AutoArbSvnCommit,
      prompt      = STRING_TOKEN(0x0809),
      help        = STRING_TOKEN(0x080A),
      option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003),  value = 1, flags = RESET_REQUIRED;
    endoneof;

    suppressif ideqval ME_SETUP.AutoArbSvnCommit == 1;
      oneof varid   = ME_SETUP_STORAGE.InvokeArbSvnCommit,
        prompt      = STRING_TOKEN(0x080B),
        help        = STRING_TOKEN(0x080C),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | INTERACTIVE;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = INTERACTIVE;
      endoneof;
    endif; 
  endif; 

endform; 

























































































#line 690 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\MeSetup.hfr"


#line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\AmtSetup.hfr"

































form formid = 4340,
  title     = STRING_TOKEN(0x00AC);

  
  
  
  suppressif TRUE;
   text
         help  = STRING_TOKEN(0x0005),
         text  = STRING_TOKEN(0x0005),
         flags = INTERACTIVE,
         key   = 5072;
  endif;

  oneof varid   = ME_SETUP.UsbProvision,
    prompt      = STRING_TOKEN(0x00AE),
    help        = STRING_TOKEN(0x00AF),
    option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    option text = STRING_TOKEN(0x0003),  value = 1, flags = RESET_REQUIRED;
  endoneof;

  oneof varid   = ME_SETUP.MacPassThrough,
    prompt      = STRING_TOKEN(0x00CC),
    help        = STRING_TOKEN(0x00CD),
    option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    option text = STRING_TOKEN(0x0003),  value = 1, flags = RESET_REQUIRED;
  endoneof;

  suppressif ideqval ME_SETUP_STORAGE.EnhancedFeature == 0;
    grayoutif ideqval ME_SETUP_STORAGE.AfterEoP == 0x1;
      oneof varid   = ME_SETUP_STORAGE.ActiveLanInterface,
        prompt      = STRING_TOKEN(0x00FA),
        help        = STRING_TOKEN(0x00FB),
        option text = STRING_TOKEN(0x00FC),    value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x00FD), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x00FE),   value = 2, flags = RESET_REQUIRED;
      endoneof;
    endif;
  endif;



  checkbox varid = ME_SETUP.AmtCiraRequest,
    prompt       = STRING_TOKEN(0x00B4),
    help         = STRING_TOKEN(0x00B5),
    
    
    flags        = 0 | RESET_REQUIRED,
    key          = 0,
  endcheckbox;

   checkbox varid = ME_SETUP.UnConfigureMe,
    prompt       = STRING_TOKEN(0x00B0),
    help         = STRING_TOKEN(0x00B1),
    flags        = 0 | RESET_REQUIRED,
    key          = 0,
  endcheckbox;








#line 100 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\AmtSetup.hfr"




  goto 4342,
    prompt = STRING_TOKEN(0x00B8),
    help   = STRING_TOKEN(0x00B9);

  goto 4351,
    prompt = STRING_TOKEN(0x00C4),
    help   = STRING_TOKEN(0x00C5);












#line 124 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\AmtSetup.hfr"




  goto 4402,
    prompt = STRING_TOKEN(0x00E8),
    help   = STRING_TOKEN(0x00E9);
#line 132 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\AmtSetup.hfr"


  suppressif ideqval SETUP_DATA.IsRpeSupported == 0x0;
    goto 4405,
      prompt = STRING_TOKEN(0x00F2),
      help   = STRING_TOKEN(0x00F3);
  endif;
#line 140 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\AmtSetup.hfr"

endform; 


form formid = 4342,
  title     = STRING_TOKEN(0x00B8);

      oneof varid   = ME_SETUP.FwProgress,
        prompt      = STRING_TOKEN(0x00BA),
        help        = STRING_TOKEN(0x00BB),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = ME_SETUP.WatchDogEnabled,
        prompt      = STRING_TOKEN(0x00BC),
        help        = STRING_TOKEN(0x00BD),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = RESET_REQUIRED;
      endoneof;

    grayoutif ideqval ME_SETUP.WatchDogEnabled == 0;
      numeric varid = ME_SETUP.WatchDogTimerOs,
        prompt      = STRING_TOKEN (0x00BE),
        help        = STRING_TOKEN (0x00BF),
        minimum     = 0,
        maximum     = 65535,
        step        = 1,
        default     = 0,
      endnumeric;

      numeric varid = ME_SETUP.WatchDogTimerBios,
        prompt      = STRING_TOKEN (0x00C0),
        help        = STRING_TOKEN (0x00C1),
        minimum     = 0,
        maximum     = 65535,
        step        = 1,
        default     = 0,
      endnumeric;
    endif; 

    oneof varid   = ME_SETUP.AsfSensorsTable,
      prompt      = STRING_TOKEN(0x00C2),
      help        = STRING_TOKEN(0x00C3),
      option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003),  value = 1, flags = RESET_REQUIRED;
    endoneof;

endform; 

form formid = 4351,
  title = STRING_TOKEN(0x00C4);

  oneof varid   = SETUP_DATA.SecureEraseModeRealMode,
    prompt      = STRING_TOKEN(0x00C6),
    help        = STRING_TOKEN(0x00C7),
    option text = STRING_TOKEN(0x00C8), value = 0, flags = DEFAULT;
    option text = STRING_TOKEN(0x00C9),      value = 1, flags = 0;
  endoneof;

  oneof varid   = SETUP_DATA.ForceSecureErase,
    prompt      = STRING_TOKEN(0x00CA),
    help        = STRING_TOKEN(0x00CB),
    option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | RESET_REQUIRED;
    option text = STRING_TOKEN(0x0003),  value = 1, flags = RESET_REQUIRED;
  endoneof;

endform;







































































































#line 312 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\AmtSetup.hfr"




form formid = 4402,
  title     = STRING_TOKEN(0x00E8);

  suppressif ideqval SETUP_VOLATILE_DATA.OcrBootHttpsSupported == 0;
    oneof varid   = ME_SETUP.OcrBootHttps,
      prompt      = STRING_TOKEN(0x00EA),
      help        = STRING_TOKEN(0x00EB),
      option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;
  endif;

  suppressif ideqval SETUP_VOLATILE_DATA.OcrBootPbaSupported == 0;
    oneof varid   = ME_SETUP.OcrBootPba,
      prompt      = STRING_TOKEN(0x00EC),
      help        = STRING_TOKEN(0x00ED),
      option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;
  endif;

  suppressif ideqval SETUP_VOLATILE_DATA.OcrBootWinReSupported == 0;
    oneof varid   = ME_SETUP.OcrBootWinRe,
      prompt      = STRING_TOKEN(0x00EE),
      help        = STRING_TOKEN(0x00EF),
      option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;
  endif;

  suppressif ideqval SETUP_VOLATILE_DATA.OcrAmtDisSecBootSupported == 0;
    oneof varid   = ME_SETUP.OcrAmtDisSecBoot,
      prompt      = STRING_TOKEN(0x00F0),
      help        = STRING_TOKEN(0x00F1),
      option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;
  endif;

endform; 




form formid = 4405,
title = STRING_TOKEN(0x00F2);

  oneof varid   = ME_SETUP.EnableRpe,
    prompt      = STRING_TOKEN(0x00F8),
    help        = STRING_TOKEN(0x00F9),
    option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
  endoneof;

  grayoutif ideqval ME_SETUP.EnableRpe == 0;
    oneof varid   = ME_SETUP.RpeSsdEraseRealMode,
      prompt      = STRING_TOKEN(0x00F4),
      help        = STRING_TOKEN(0x00F5),
      option text = STRING_TOKEN(0x00F6), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x00F7), value = 1, flags = RESET_REQUIRED;
    endoneof;
  endif; 

endform; 
#line 693 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\MeSetup.hfr"
#line 694 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\MeSetup.hfr"
#line 477 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\Advanced.vfr"
  #line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PlatformSetup.hfr"
































    
    
    

    form formid = 4166,
    title = STRING_TOKEN(0x138C);

      subtitle text = STRING_TOKEN(0x138C);
      subtitle text = STRING_TOKEN(0x0002);

      oneof varid    = CPU_SETUP.EnableAllThermalFunctions,
        questionid = 5423,
        prompt      = STRING_TOKEN(0x138A),
        help        = STRING_TOKEN(0x138B),
        flags       = INTERACTIVE,
        default     = 1, defaultstore = MyStandardDefault,
        option text = STRING_TOKEN(0x0004),  value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags =  RESET_REQUIRED;
      endoneof;

      goto 4167,
        prompt = STRING_TOKEN(0x132E),
        help = STRING_TOKEN(0x132F);

      goto 4169,
        prompt = STRING_TOKEN(0x132C),
        help = STRING_TOKEN(0x132D);

      goto 4348,
        prompt = STRING_TOKEN(0x1330),
        help = STRING_TOKEN(0x1331);

      goto 4222,
        prompt  = STRING_TOKEN(0x0789),
        help    = STRING_TOKEN(0x078A);
    endform;

    form formid = 4167,
    title = STRING_TOKEN(0x141F);

      subtitle text = STRING_TOKEN(0x141F);
      subtitle text = STRING_TOKEN(0x0002);

        text
          help  = STRING_TOKEN(0x1423),
          text  = STRING_TOKEN(0x1421),
          text  = STRING_TOKEN(0x1420),
          flags = 0,
          key   = 0;

      numeric varid = CPU_SETUP.TCCActivationOffset,
        prompt      = STRING_TOKEN(0x1422),
        help        = STRING_TOKEN(0x1423),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 0x3F,
        step        = 0,
        default     = 0,
      endnumeric;

      oneof varid   = CPU_SETUP.TccOffsetTimeWindow,
         prompt   = STRING_TOKEN (0x1424),
         help     = STRING_TOKEN (0x1425),
         option text = STRING_TOKEN(0x0004),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
         option text = STRING_TOKEN(0x059D),  value = 5, flags = RESET_REQUIRED;
         option text = STRING_TOKEN(0x05A1),  value = 10, flags = RESET_REQUIRED;
         option text = STRING_TOKEN(0x05A2),  value = 55, flags = RESET_REQUIRED;
         option text = STRING_TOKEN(0x05A3),  value = 156, flags = RESET_REQUIRED;
         option text = STRING_TOKEN(0x05A4),  value = 375, flags = RESET_REQUIRED;
         option text = STRING_TOKEN(0x05A5),  value = 500, flags = RESET_REQUIRED;
         option text = STRING_TOKEN(0x05A6),  value = 750, flags = RESET_REQUIRED;
         option text = STRING_TOKEN(0x05A7),  value = 1000, flags = RESET_REQUIRED;
         option text = STRING_TOKEN(0x05A8),  value = 2000, flags = RESET_REQUIRED;
         option text = STRING_TOKEN(0x05A9),  value = 3000, flags = RESET_REQUIRED;
         option text = STRING_TOKEN(0x05AA),  value = 4000, flags = RESET_REQUIRED;
         option text = STRING_TOKEN(0x05AB),  value = 5000, flags = RESET_REQUIRED;
         option text = STRING_TOKEN(0x05AC),  value = 6000, flags = RESET_REQUIRED;
         option text = STRING_TOKEN(0x05AD),  value = 7000, flags = RESET_REQUIRED;
         option text = STRING_TOKEN(0x05AE),  value = 8000, flags = RESET_REQUIRED;
         option text = STRING_TOKEN(0x05AF),  value = 10000, flags = RESET_REQUIRED;
         option text = STRING_TOKEN(0x05B0),  value = 12000, flags = RESET_REQUIRED;
         option text = STRING_TOKEN(0x05B1),  value = 14000, flags = RESET_REQUIRED;
         option text = STRING_TOKEN(0x05B2),  value = 16000, flags = RESET_REQUIRED;
         option text = STRING_TOKEN(0x05B3),  value = 20000, flags = RESET_REQUIRED;
         option text = STRING_TOKEN(0x05B4),  value = 24000, flags = RESET_REQUIRED;
         option text = STRING_TOKEN(0x05B5),  value = 28000, flags = RESET_REQUIRED;
         option text = STRING_TOKEN(0x05B6),  value = 32000, flags = RESET_REQUIRED;
         option text = STRING_TOKEN(0x05B7),  value = 40000, flags = RESET_REQUIRED;
         option text = STRING_TOKEN(0x05B8),  value = 48000, flags = RESET_REQUIRED;
         option text = STRING_TOKEN(0x05B9),  value = 56000, flags = RESET_REQUIRED;
         option text = STRING_TOKEN(0x05BA),  value = 64000, flags = RESET_REQUIRED;
         option text = STRING_TOKEN(0x05BB),  value = 80000, flags = RESET_REQUIRED;
         option text = STRING_TOKEN(0x05BC),  value = 96000, flags = RESET_REQUIRED;
         option text = STRING_TOKEN(0x05BD),  value = 112000, flags = RESET_REQUIRED;
         option text = STRING_TOKEN(0x05BE),  value = 128000, flags = RESET_REQUIRED;
         option text = STRING_TOKEN(0x05BF),  value = 160000, flags = RESET_REQUIRED;
         option text = STRING_TOKEN(0x05C0),  value = 192000, flags = RESET_REQUIRED;
         option text = STRING_TOKEN(0x05C1),  value = 224000, flags = RESET_REQUIRED;
         option text = STRING_TOKEN(0x05C2),  value = 256000, flags = RESET_REQUIRED;
         option text = STRING_TOKEN(0x05C3),  value = 320000, flags = RESET_REQUIRED;
         option text = STRING_TOKEN(0x05C4),  value = 384000, flags = RESET_REQUIRED;
         option text = STRING_TOKEN(0x05C5),  value = 448000, flags = RESET_REQUIRED;
       endoneof;

       oneof varid   = CPU_SETUP.TccOffsetClamp,
           prompt      = STRING_TOKEN(0x1426),
           help        = STRING_TOKEN(0x1427),
           option text = STRING_TOKEN(0x0004),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
           option text = STRING_TOKEN(0x0003),  value = 1, flags = RESET_REQUIRED;
       endoneof;

       oneof varid   = CPU_SETUP.TccOffsetLock,
           prompt      = STRING_TOKEN(0x1428),
           help        = STRING_TOKEN(0x1429),
           option text = STRING_TOKEN(0x0004),  value = 0, flags = MANUFACTURING | RESET_REQUIRED;
           option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | RESET_REQUIRED;
       endoneof;

      oneof varid   = CPU_SETUP.EnableProcHot,
        prompt      = STRING_TOKEN(0x142A),
        help        = STRING_TOKEN(0x142B),
        option text = STRING_TOKEN(0x0004),  value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      suppressif ideqval CPU_SETUP.EnableProcHot == 0x0;
        oneof varid   = CPU_SETUP.DisableProcHotOut,
          prompt      = STRING_TOKEN(0x142C),
          help        = STRING_TOKEN(0x142D),
          option text = STRING_TOKEN(0x0004),  value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003),  value = 1,  flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
      endif;

      oneof varid     = CPU_SETUP.DisableVrThermalAlert,
          prompt      = STRING_TOKEN(0x1430),
          help        = STRING_TOKEN(0x1431),
          option text = STRING_TOKEN(0x0004),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003),  value = 1,  flags = RESET_REQUIRED;
      endoneof;

      oneof varid     = CPU_SETUP.ProcHotResponse,
          prompt      = STRING_TOKEN(0x1432),
          help        = STRING_TOKEN(0x1433),
          option text = STRING_TOKEN(0x0004),  value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003),  value = 1,  flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

       oneof varid    = CPU_SETUP.ProcHotLock,
          prompt      = STRING_TOKEN(0x142E),
          help        = STRING_TOKEN(0x142F),
          option text = STRING_TOKEN(0x0004),  value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003),  value = 1,  flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      checkbox varid  = CPU_SETUP.TStatesEnable,
        prompt        = STRING_TOKEN (0x1434),
        help          = STRING_TOKEN (0x1435),
        
        flags         = RESET_REQUIRED,
        default       = FALSE, defaultstore = MyStandardDefault,
      endcheckbox;

    endform; 

    form formid = 4169,
    title = STRING_TOKEN(0x132C);

      subtitle text = STRING_TOKEN(0x132C);
      subtitle text = STRING_TOKEN(0x0002);

    suppressif ideqval CPU_SETUP.EnableAllThermalFunctions == 0;
      oneof varid    = SETUP_DATA.CriticalThermalTripPoint,
        prompt   = STRING_TOKEN (0x1394),
        help     = STRING_TOKEN (0x1395),
        flags    = 0 | RESET_REQUIRED,
        default  = 119, defaultstore = MyStandardDefault,
        option text = STRING_TOKEN (0x1396), value = 15, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x1397), value = 23, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x1398), value = 31, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x1399), value = 39, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x139A), value = 47, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x139B), value = 55, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x139C), value = 63, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x139D), value = 71, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x139E), value = 79, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x139F), value = 87, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x13A0), value = 95, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x13A1), value = 100, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x13A2), value = 103, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x13A3), value = 111, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x13A4), value = 119, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x13A5), value = 127, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x13A6), value = 130, flags = RESET_REQUIRED;
      endoneof;
    endif;

        oneof varid     = SETUP_DATA.Ac0TripPoint,
          prompt    = STRING_TOKEN(0x1390),
          help      = STRING_TOKEN(0x1391),
          option text = STRING_TOKEN (0x0004), value = 127, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x1396), value = 15, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x1397), value = 23, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x1398), value = 31, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x1399), value = 39, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x139A), value = 47, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x139B), value = 55, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x139C), value = 63, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x139D), value = 71, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
          option text = STRING_TOKEN (0x139E), value = 79, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x139F), value = 87, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x13A0), value = 95, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x13A2), value = 103, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x13A3), value = 111, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x13A4), value = 119, flags = RESET_REQUIRED;
        endoneof;


      numeric varid = SETUP_DATA.Ac0FanSpeed,
        prompt    = STRING_TOKEN(0x13AD),
        help      = STRING_TOKEN(0x13AE),
        minimum = 0,
        maximum = 100,
        step    = 1,
        default = 100,
      endnumeric;

      oneof varid     = SETUP_DATA.Ac1TripPoint,
        prompt    = STRING_TOKEN(0x138E),
        help      = STRING_TOKEN(0x138F),
        option text = STRING_TOKEN (0x0004), value = 127, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x1396), value = 15, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x1397), value = 23, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x1398), value = 31, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x1399), value = 39, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x139A), value = 47, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x139B), value = 55, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
        option text = STRING_TOKEN (0x139C), value = 63, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x139D), value = 71, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x139E), value = 79, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x139F), value = 87, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x13A0), value = 95, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x13A2), value = 103, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x13A3), value = 111, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x13A4), value = 119, flags = RESET_REQUIRED;
      endoneof;

      numeric varid = SETUP_DATA.Ac1FanSpeed,
        prompt    = STRING_TOKEN(0x13AF),
        help      = STRING_TOKEN(0x13B0),
        minimum = 0,
        maximum = 100,
        step    = 1,
        default = 75,
      endnumeric;


      oneof varid    = SETUP_DATA.PassiveThermalTripPoint,
        prompt    = STRING_TOKEN (0x1392),
        help      = STRING_TOKEN (0x1393),
        default   = 95, defaultstore = MyStandardDefault,
        option text = STRING_TOKEN (0x0004), value = 127, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x1396), value = 15, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x1397), value = 23, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x1398), value = 31, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x1399), value = 39, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x139A), value = 47, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x139B), value = 55, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x139C), value = 63, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x139D), value = 71, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x139E), value = 79, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x139F), value = 87, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x13A0), value = 95, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x13A2), value = 103, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x13A3), value = 111, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x13A4), value = 119, flags = RESET_REQUIRED;
      endoneof;


      numeric varid = SETUP_DATA.PassiveTc1Value,
        prompt  = STRING_TOKEN (0x13B1),
        help    = STRING_TOKEN (0x13B2),
        minimum = 1,
        maximum = 16,
        step    = 1,
        default = 1,
      endnumeric;

      numeric varid = SETUP_DATA.PassiveTc2Value,
        prompt  = STRING_TOKEN (0x13B3),
        help    = STRING_TOKEN (0x13B4),
        minimum = 1,
        maximum = 16,
        step    = 1,
        default = 5,
      endnumeric;

      numeric varid = SETUP_DATA.PassiveTspValue,
        prompt  = STRING_TOKEN (0x13B5),
        help    = STRING_TOKEN (0x13B6),
        minimum = 2,
        maximum = 32,
        step    = 2,
        default = 10,
      endnumeric;

      subtitle text = STRING_TOKEN(0x0002);
      oneof varid    = SETUP_DATA.DisableActiveTripPoints,
        prompt      = STRING_TOKEN(0x13B7),
        help        = STRING_TOKEN(0x13B8),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;
      oneof varid    = SETUP_DATA.DisablePassiveTripPoints,
        prompt      = STRING_TOKEN(0x13B9),
        help        = STRING_TOKEN(0x13BA),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = RESET_REQUIRED;
      endoneof;
      oneof varid    = SETUP_DATA.DisableCriticalTripPoints,
        prompt      = STRING_TOKEN(0x13BB),
        help        = STRING_TOKEN(0x13BC),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;
      subtitle text = STRING_TOKEN(0x0002);

      checkbox varid  = SETUP_DATA.PCHTempReadEnable,
        prompt   = STRING_TOKEN (0x13C7),
        help     = STRING_TOKEN (0x13C8),
        
        
        flags    = CHECKBOX_DEFAULT | RESET_REQUIRED,
        key      = 0,
      endcheckbox;

      checkbox varid  = SETUP_DATA.CPUEnergyReadEnable,
        prompt   = STRING_TOKEN (0x13C5),
        help     = STRING_TOKEN (0x13C6),
        
        
        flags    = CHECKBOX_DEFAULT | RESET_REQUIRED,
        key      = 0,
      endcheckbox;

      checkbox varid  = SETUP_DATA.CPUTempReadEnable,
        prompt   = STRING_TOKEN (0x13C3),
        help     = STRING_TOKEN (0x13C4),
        
        
        flags    = CHECKBOX_DEFAULT | RESET_REQUIRED,
        key      = 0,
      endcheckbox;

      oneof varid     = SETUP_DATA.AlertEnableLock,
        prompt      = STRING_TOKEN(0x13BD),
        help        = STRING_TOKEN(0x13BE),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;

      suppressif ideqval SETUP_DATA.AlertEnableLock == 0x0;
        oneof varid     = SETUP_DATA.PchAlert,
          prompt      = STRING_TOKEN(0x13BF),
          help        = STRING_TOKEN(0x13C0),
          option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
        endoneof;

        oneof varid     = SETUP_DATA.DimmAlert,
           prompt      = STRING_TOKEN(0x13C1),
          help        = STRING_TOKEN(0x13C2),
           option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
           option text = STRING_TOKEN(0x0003), value = 1, flags =   RESET_REQUIRED;
        endoneof;
      endif;

      numeric varid = SETUP_DATA.CpuTemp,
        prompt  = STRING_TOKEN (0x13C9),
        help    = STRING_TOKEN (0x13CA),
        minimum = 1,
        maximum = 110,
        step    = 1,
        default value = 72,
      endnumeric;

      numeric varid = SETUP_DATA.CpuFanSpeed,
        prompt  = STRING_TOKEN (0x13CB),
        help    = STRING_TOKEN (0x13CC),
        minimum = 1,
        maximum = 100,
        step    = 1,
        default = 65,
      endnumeric;

      
      
      
      oneof varid   = SETUP_DATA.EcFanControl,
        prompt      = STRING_TOKEN (0x13CD),
        help        = STRING_TOKEN (0x13CE),
        option text = STRING_TOKEN (0x0004),  value = 0, flags = DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN (0x13CF),  value = 75, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (0x13D0),  value = 100, flags = RESET_REQUIRED;
      endoneof;
      
      
      
    endform;

    form formid = 4348,
    title = STRING_TOKEN(0x1330);

      subtitle text = STRING_TOKEN(0x1330);
      subtitle text = STRING_TOKEN(0x0002);

      grayoutif ideqval CPU_SETUP.DualTauBoost == 1;
        oneof varid    = SETUP_DATA.EnableDptf,
          prompt      = STRING_TOKEN(0x13D1),
          help        = STRING_TOKEN(0x13D2),
          default     = 1, defaultstore = MyStandardDefault,
          option text = STRING_TOKEN(0x0004),  value = 0, flags = 0;
          option text = STRING_TOKEN(0x0003),  value = 1, flags = RESET_REQUIRED;
        endoneof;
      endif;

      suppressif ideqval SETUP_DATA.EnableDptf == 0;

      
      
      
      oneof varid   = SETUP_DATA.EnableInt3400Device,
        prompt      = STRING_TOKEN(0x13EC),
        help        = STRING_TOKEN(0x13ED),
        option text = STRING_TOKEN(0x0004),  value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

        
        
        
        oneof varid    = SETUP_DATA.EnableSaDevice,
          prompt      = STRING_TOKEN(0x13D5),
          help        = STRING_TOKEN(0x13D6),
          option text = STRING_TOKEN(0x0004),  value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x13D7),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

      suppressif ideqval SETUP_DATA.EnableSaDevice == 0;
        oneof varid     = SETUP_DATA.PpccStepSize,
          prompt      = STRING_TOKEN(0x13A7),
          help        = STRING_TOKEN(0x13A8),
          option text = STRING_TOKEN (0x13A9), value = 500, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
          option text = STRING_TOKEN (0x13AA), value = 1000, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x13AB), value = 1500, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (0x13AC), value = 2000, flags = RESET_REQUIRED;
        endoneof;
      endif;

        numeric varid     = SETUP_DATA.EnableDCFG,
          prompt   = STRING_TOKEN (0x13D3),
          help     = STRING_TOKEN (0x13D4),
          flags   = RESET_REQUIRED,
          minimum = 0,
          maximum = 255,
          step    = 1,
          default = 0,
        endnumeric;

        
        
        
        grayoutif ideqval SETUP_DATA.DetectEcFan[0] == 0;
          oneof varid    = SETUP_DATA.EnableFan1Device,
            prompt      = STRING_TOKEN(0x13D9),
            help        = STRING_TOKEN(0x13DA),
            option text = STRING_TOKEN(0x0004),  value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0003),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          endoneof;
        endif;

        grayoutif ideqval SETUP_DATA.DetectEcFan[1] == 0;
          oneof varid    = SETUP_DATA.EnableFan2Device,
            prompt      = STRING_TOKEN(0x13DB),
            help        = STRING_TOKEN(0x13DC),
            option text = STRING_TOKEN(0x0004),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(0x0003),  value = 1, flags = RESET_REQUIRED;
          endoneof;
        endif;

        grayoutif ideqval SETUP_DATA.DetectEcFan[2] == 0;
          oneof varid    = SETUP_DATA.EnableFan3Device,
            prompt      = STRING_TOKEN(0x13DD),
            help        = STRING_TOKEN(0x13DE),
            option text = STRING_TOKEN(0x0004),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(0x0003),  value = 1, flags = RESET_REQUIRED;
          endoneof;
        endif;

        
        
        
        oneof varid     = SETUP_DATA.EnableChargerParticipant,
          prompt      = STRING_TOKEN(0x1410),
          help        = STRING_TOKEN(0x1411),
          option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
        endoneof;

        
        
        
        oneof varid     = SETUP_DATA.EnablePowerParticipant,
          prompt      = STRING_TOKEN(0x13E6),
          help        = STRING_TOKEN(0x13E7),
          option text = STRING_TOKEN(0x0004),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003),  value = 1, flags = RESET_REQUIRED;
        endoneof;


      
      
      
      oneof varid   = SETUP_DATA.EnableBatteryParticipant,
        prompt      = STRING_TOKEN(0x13EA),
        help        = STRING_TOKEN(0x13EB),
        option text = STRING_TOKEN(0x0004),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = RESET_REQUIRED;
      endoneof;

      suppressif ideqval SETUP_DATA.EnableBatteryParticipant == 0;
        numeric varid     = SETUP_DATA.PowerParticipantPollingRate,
          prompt      = STRING_TOKEN(0x13E8),
          help        = STRING_TOKEN(0x13E9),
          flags   = RESET_REQUIRED,
          minimum = 0,
          maximum = 1000,
          step    = 1,
          default = 0,
        endnumeric;
      endif; 

      
      
      
      oneof varid   = SETUP_DATA.EnablePchFivrParticipant,
        prompt      = STRING_TOKEN(0x1412),
        help        = STRING_TOKEN(0x1413),
        option text = STRING_TOKEN(0x0004),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = RESET_REQUIRED;
      endoneof;

      subtitle text = STRING_TOKEN(0x0002);
      grayoutif ideqval SETUP_DATA.DetectEcSensors[0] == 0;
        oneof varid    = SETUP_DATA.EnableSen1Participant,  
          prompt      = STRING_TOKEN(0x1414),
          help        = STRING_TOKEN(0x13D8),
          option text = STRING_TOKEN(0x0004),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003),  value = 1, flags = RESET_REQUIRED;
        endoneof;
      endif;

      grayoutif ideqval SETUP_DATA.DetectEcSensors[1] == 0;
        oneof varid    = SETUP_DATA.EnableSen2Participant,  
          prompt      = STRING_TOKEN(0x1415),
          help        = STRING_TOKEN(0x141B),
          option text = STRING_TOKEN(0x0004),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003),  value = 1, flags = RESET_REQUIRED;
        endoneof;
      endif;

      grayoutif ideqval SETUP_DATA.DetectEcSensors[2] == 0;
        oneof varid    = SETUP_DATA.EnableSen3Participant,  
          prompt      = STRING_TOKEN(0x1416),
          help        = STRING_TOKEN(0x141C),
          option text = STRING_TOKEN(0x0004),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003),  value = 1, flags = RESET_REQUIRED;
        endoneof;
      endif;

      grayoutif ideqval SETUP_DATA.DetectEcSensors[3] == 0;
        oneof varid    = SETUP_DATA.EnableSen4Participant,  
          prompt      = STRING_TOKEN(0x1417),
          help        = STRING_TOKEN(0x141D),
          option text = STRING_TOKEN(0x0004),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003),  value = 1, flags = RESET_REQUIRED;
        endoneof;
      endif;

      grayoutif ideqval SETUP_DATA.DetectEcSensors[4] == 0;
        oneof varid    = SETUP_DATA.EnableSen5Participant,  
          prompt      = STRING_TOKEN(0x1418),
          help        = STRING_TOKEN(0x141E),
          option text = STRING_TOKEN(0x0004),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003),  value = 1, flags = RESET_REQUIRED;
        endoneof;
      endif;

    suppressif NOT ideqval SETUP_DATA.AdlSAepBoard == 1 AND
               NOT ideqval SETUP_DATA.RplSAepBoard == 1;
      oneof varid    = SETUP_DATA.EnableDgpuParticipant,
        prompt      = STRING_TOKEN(0x1419),
        help        = STRING_TOKEN(0x141A),
        option text = STRING_TOKEN(0x0004),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = RESET_REQUIRED;
      endoneof;
    endif;
      endif; 

      suppressif ideqval SETUP_DATA.EnableDptf == 0;
       goto 4170,
       prompt = STRING_TOKEN(0x1332),
       help = STRING_TOKEN(0x1333);
      endif;

    endform; 


    form formid = 4170,
    title = STRING_TOKEN(0x1332);

      subtitle text = STRING_TOKEN(0x1332);

        numeric varid    = SETUP_DATA.OemDesignVariable0,
          prompt   = STRING_TOKEN (0x13DF),
          help     = STRING_TOKEN (0x13E5),
          minimum = 0,
          maximum = 255,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid    = SETUP_DATA.OemDesignVariable1,
          prompt   = STRING_TOKEN (0x13E0),
          help     = STRING_TOKEN (0x13E5),
          minimum = 0,
          maximum = 255,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid    = SETUP_DATA.OemDesignVariable2,
          prompt   = STRING_TOKEN (0x13E1),
          help     = STRING_TOKEN (0x13E5),
          minimum = 0,
          maximum = 255,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid    = SETUP_DATA.OemDesignVariable3,
          prompt   = STRING_TOKEN (0x13E2),
          help     = STRING_TOKEN (0x13E5),
          minimum = 0,
          maximum = 255,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid    = SETUP_DATA.OemDesignVariable4,
          prompt   = STRING_TOKEN (0x13E3),
          help     = STRING_TOKEN (0x13E5),
          minimum = 0,
          maximum = 255,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid    = SETUP_DATA.OemDesignVariable5,
          prompt   = STRING_TOKEN (0x13E4),
          help     = STRING_TOKEN (0x13E5),
          minimum = 0,
          maximum = 255,
          step    = 1,
          default = 0,
        endnumeric;

      subtitle text = STRING_TOKEN(0x0002);

        oneof varid   = SETUP_DATA.PpccObject,
          prompt      = STRING_TOKEN(0x13EE),
          help        = STRING_TOKEN(0x13EF),
          option text = STRING_TOKEN(0x0004), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        oneof varid   = SETUP_DATA.ArtgObject,
          prompt      = STRING_TOKEN(0x13F0),
          help        = STRING_TOKEN(0x13F1),
          option text = STRING_TOKEN(0x0004), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        oneof varid   = SETUP_DATA.PmaxObject,
          prompt      = STRING_TOKEN(0x13F2),
          help        = STRING_TOKEN(0x13F3),
          option text = STRING_TOKEN(0x0004), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

suppressif (NOT ideqval SETUP_VOLATILE_DATA.PlatformFlavor == 0x1) AND
           (NOT ideqval SETUP_VOLATILE_DATA.PlatformFlavor == 0x6);
        oneof varid   = SETUP_DATA.PmaxDevice,
          prompt      = STRING_TOKEN(0x13F4),
          help        = STRING_TOKEN(0x13F5),
          option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        suppressif ideqval SETUP_DATA.PmaxDevice == 0;
          oneof varid   = SETUP_DATA.PmaxAudioCodec,
            prompt      = STRING_TOKEN(0x13F6),
            help        = STRING_TOKEN(0x13F7),
            option text = STRING_TOKEN(0x0004), value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0003), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          endoneof;

          oneof varid   = SETUP_DATA.PmaxWfCamera,
            prompt      = STRING_TOKEN(0x13F8),
            help        = STRING_TOKEN(0x13F9),
            option text = STRING_TOKEN(0x0004), value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0003), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          endoneof;

          oneof varid   = SETUP_DATA.PmaxUfCamera,
            prompt      = STRING_TOKEN(0x13FA),
            help        = STRING_TOKEN(0x13FB),
            option text = STRING_TOKEN(0x0004), value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0003), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          endoneof;

          oneof varid   = SETUP_DATA.PmaxFlashDevice,
            prompt      = STRING_TOKEN(0x13FC),
            help        = STRING_TOKEN(0x13FD),
            option text = STRING_TOKEN(0x0004), value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x0003), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          endoneof;
        endif;
endif;
        text
        help   = STRING_TOKEN(0x1331),
        text   = STRING_TOKEN(0x13D5),
        flags  = 0,
        key    = 0;

        oneof varid   = SETUP_DATA.Tmp1Object,
          prompt      = STRING_TOKEN(0x1400),
          help        = STRING_TOKEN(0x1401),
          option text = STRING_TOKEN(0x0004), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 0, flags = RESET_REQUIRED;
         endoneof;

        suppressif TRUE;

        oneof varid   = SETUP_DATA.Tmp2Object,
          prompt      = STRING_TOKEN(0x1402),
          help        = STRING_TOKEN(0x1403),
          option text = STRING_TOKEN(0x0004), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 0, flags = RESET_REQUIRED;
        endoneof;

        oneof varid   = SETUP_DATA.Tmp3Object,
          prompt      = STRING_TOKEN(0x1404),
          help        = STRING_TOKEN(0x1405),
          option text = STRING_TOKEN(0x0004), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        oneof varid   = SETUP_DATA.Tmp4Object,
          prompt      = STRING_TOKEN(0x1406),
          help        = STRING_TOKEN(0x1407),
          option text = STRING_TOKEN(0x0004),value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        oneof varid   = SETUP_DATA.Tmp5Object,
          prompt      = STRING_TOKEN(0x1408),
          help        = STRING_TOKEN(0x1409),
          option text = STRING_TOKEN(0x0004), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        oneof varid   = SETUP_DATA.Tmp6Object,
          prompt      = STRING_TOKEN(0x140A),
          help        = STRING_TOKEN(0x140B),
          option text = STRING_TOKEN(0x0004), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        oneof varid   = SETUP_DATA.Tmp7Object,
          prompt      = STRING_TOKEN(0x140C),
          help        = STRING_TOKEN(0x140D),
          option text = STRING_TOKEN(0x0004),value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        oneof varid   = SETUP_DATA.Tmp8Object,
          prompt      = STRING_TOKEN(0x140E),
          help        = STRING_TOKEN(0x140F),
          option text = STRING_TOKEN(0x0004),value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        oneof varid   = SETUP_DATA.OptionalObjects,
          prompt      = STRING_TOKEN(0x13FE),
          help        = STRING_TOKEN(0x13FF),
          option text = STRING_TOKEN(0x0004), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 0, flags = RESET_REQUIRED;
        endoneof;
      endif;

    endform; 

  
    form formid = 4389,

    title = STRING_TOKEN(0x1468);

      subtitle text = STRING_TOKEN(0x146A);
      subtitle text = STRING_TOKEN(0x0002);

  oneof varid   = SETUP_DATA.EcChargingMethod,
    prompt      = STRING_TOKEN(0x1560),
    help        = STRING_TOKEN(0x1561),
    option text = STRING_TOKEN(0x1562), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    option text = STRING_TOKEN(0x1563),   value = 1, flags = RESET_REQUIRED;
  endoneof;

  suppressif NOT ideqval SETUP_VOLATILE_DATA.PlatformFlavor == 0x1 AND
             NOT ideqval SETUP_VOLATILE_DATA.PlatformFlavor == 0x6;
    oneof varid   = SETUP_DATA.PseudoG3State,
      prompt      = STRING_TOKEN(0x1589),
      help        = STRING_TOKEN(0x158A),
      option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED | INTERACTIVE;
      option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | RESET_REQUIRED | INTERACTIVE;
    endoneof;
  endif;


  suppressif NOT ideqval SETUP_DATA.Rp08D3ColdSupport == 1;
    oneof varid   = SETUP_DATA.Rp08D3ColdDisable,
      prompt      = STRING_TOKEN(0x158B),
      help        = STRING_TOKEN(0x158C),
      option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;




    oneof varid   = SETUP_DATA.Rp08WakeReworkDone,
      prompt      = STRING_TOKEN(0x158D),
      help        = STRING_TOKEN(0x158E),
      option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;
  endif;


  
  oneof varid   = SETUP_DATA.Ps2KbMsEnable,
    questionid  = 32771,
    prompt      = STRING_TOKEN(0x155B),
    help        = STRING_TOKEN(0x155C),
    default value = 1, defaultstore = MyStandardDefault,
    option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;

    suppressif ideqval CPU_SETUP.GameCompatibilityMode == 1;
#line 902 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PlatformSetup.hfr"
      option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;

    endif;
#line 906 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PlatformSetup.hfr"
  endoneof;

  
  suppressif ideqval SETUP_DATA.EcPeciModeUnsupport == 1;
    oneof varid   = SETUP_DATA.EcPeciMode,
      questionid  = 5073,
      prompt      = STRING_TOKEN(0x155D),
      help        = STRING_TOKEN(0x135A),
      option text = STRING_TOKEN(0x155E), value = 0, flags = DEFAULT | RESET_REQUIRED |INTERACTIVE;
      option text = STRING_TOKEN(0x155F),  value = 1, flags = RESET_REQUIRED | INTERACTIVE;
    endoneof;
  endif;

  
  oneof varid   = SETUP_DATA.PlnEnable,
    prompt      = STRING_TOKEN(0x156B),
    help        = STRING_TOKEN(0x156C),
    option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(0x0003),  value = 1, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(0x156D),  value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
  endoneof;

  checkbox varid = SETUP_DATA.DevicePasswordSupport,
    prompt       = STRING_TOKEN(0x1559),
    help         = STRING_TOKEN(0x155A),
    
    
    flags        = CHECKBOX_DEFAULT | RESET_REQUIRED,
  endcheckbox;

  oneof varid   = SETUP_DATA.PmicVccLevel,
    prompt      = STRING_TOKEN(0x146B),
    help        = STRING_TOKEN(0x146C),
    option text = STRING_TOKEN(0x1474), value = 7, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    option text = STRING_TOKEN(0x146D), value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(0x146E), value = 1, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(0x146F), value = 2, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(0x1470), value = 3, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(0x1471), value = 4, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(0x1472), value = 5, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(0x1473), value = 6, flags = RESET_REQUIRED;
  endoneof;

  oneof varid   = SETUP_DATA.PmicVddqLevel,
    prompt      = STRING_TOKEN(0x1475),
    help        = STRING_TOKEN(0x1476),
    option text = STRING_TOKEN(0x1474), value = 8, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    option text = STRING_TOKEN(0x1477), value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(0x1478), value = 1, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(0x1479), value = 2, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(0x147A), value = 3, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(0x147B), value = 4, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(0x147C), value = 5, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(0x147D), value = 6, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(0x147E), value = 7, flags = RESET_REQUIRED;
  endoneof;






#line 969 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PlatformSetup.hfr"



  oneof varid   = SETUP_DATA.CrcPmicNvmUpdateEnable,
    prompt      = STRING_TOKEN(0x1481),
    help        = STRING_TOKEN(0x1482),
    option text = STRING_TOKEN(0x0003),  value = 1, flags =  RESET_REQUIRED;
    option text = STRING_TOKEN(0x0004), value = 0, flags = MANUFACTURING | DEFAULT | RESET_REQUIRED;
  endoneof;

  suppressif ideqval SETUP_DATA.CrcPmicNvmUpdateEnable == 0;
    oneof varid   = SETUP_DATA.CrcPmicCustomizationNvmUpdateEnable,
      prompt      = STRING_TOKEN(0x1483),
      help        = STRING_TOKEN(0x1484),
      option text = STRING_TOKEN(0x0003),  value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0004), value = 0, flags = MANUFACTURING | DEFAULT | RESET_REQUIRED;
    endoneof;
  endif;

  oneof varid   = SETUP_DATA.PmicNvmWriteLockEnable,
    prompt      = STRING_TOKEN(0x1485),
    help        = STRING_TOKEN(0x1486),
    option text = STRING_TOKEN(0x0004), value = 0, flags = MANUFACTURING | DEFAULT | RESET_REQUIRED;
    option text = STRING_TOKEN(0x0003),  value = 1, flags = RESET_REQUIRED;
  endoneof;





#line 1000 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PlatformSetup.hfr"



  suppressif NOT ideqval SETUP_DATA.HebcValueSupport == 1;
    numeric varid = SETUP_DATA.HebcValue,
      prompt      = STRING_TOKEN (0x1340),
      help        = STRING_TOKEN (0x1341),
      minimum     = 0,
      maximum     = 0xFFFFFFFF,
      step        = 1,
      default     = 0x233F3,
    endnumeric;
  endif;

  oneof varid   = SETUP_DATA.PmicSlpS0VmSupport,
    prompt      = STRING_TOKEN(0x147F),
    help        = STRING_TOKEN(0x1480),
    option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
  endoneof;

  oneof varid   = SETUP_DATA.PowerSharingManagerEnable,
    prompt      = STRING_TOKEN(0x1488),
    help        = STRING_TOKEN(0x1489),
    option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
  endoneof;

  suppressif ideqval SETUP_DATA.PowerSharingManagerEnable == 0;
    numeric varid = SETUP_DATA.PsmSplcDomainType1,
      prompt      = STRING_TOKEN(0x148A),
      help        = STRING_TOKEN(0x148C),
      minimum     = 1,
      maximum     = 50,
      step        = 1,
      default     = 9,
    endnumeric;

    numeric varid = SETUP_DATA.PsmSplcPowerLimit1,
      prompt      = STRING_TOKEN(0x148D),
      help        = STRING_TOKEN(0x011F),
      minimum     = 1,
      maximum     = 10000,
      step        = 1,
      default     = 4000,
    endnumeric;

    numeric varid = SETUP_DATA.PsmSplcTimeWindow1,
      prompt      = STRING_TOKEN(0x148E),
      help        = STRING_TOKEN(0x0121),
      minimum     = 1,
      maximum     = 100000,
      step        = 1,
      default     = 30000,
    endnumeric;

    subtitle text = STRING_TOKEN(0x0002);
    numeric varid = SETUP_DATA.PsmDplcDomainType1,
      prompt      = STRING_TOKEN(0x148F),
      help        = STRING_TOKEN(0x148C),
      minimum     = 1,
      maximum     = 50,
      step        = 1,
      default     = 9,
    endnumeric;

    numeric varid = SETUP_DATA.PsmDplcDomainPreference1,
      prompt      = STRING_TOKEN(0x1490),
      help        = STRING_TOKEN(0x148C),
      minimum     = 1,
      maximum     = 50,
      step        = 1,
      default     = 9,
    endnumeric;

    numeric varid = SETUP_DATA.PsmDplcPowerLimitIndex1,
      prompt      = STRING_TOKEN(0x1491),
      help        = STRING_TOKEN(0x1492),
      minimum     = 0,
      maximum     = 10,
      step        = 1,
      default     = 0,
    endnumeric;

    numeric varid = SETUP_DATA.PsmDplcDefaultPowerLimit1,
      prompt      = STRING_TOKEN(0x1493),
      help        = STRING_TOKEN(0x011F),
      minimum     = 1,
      maximum     = 10000,
      step        = 1,
      default     = 1200,
    endnumeric;

    numeric varid = SETUP_DATA.PsmDplcDefaultTimeWindow1,
      prompt      = STRING_TOKEN(0x1494),
      help        = STRING_TOKEN(0x0121),
      minimum     = 1,
      maximum     = 100000,
      step        = 1,
      default     = 30000,
    endnumeric;

    numeric varid = SETUP_DATA.PsmDplcMinimumPowerLimit1,
      prompt      = STRING_TOKEN(0x1495),
      help        = STRING_TOKEN(0x011F),
      minimum     = 1,
      maximum     = 10000,
      step        = 1,
      default     = 1200,
    endnumeric;

    numeric varid = SETUP_DATA.PsmDplcMaximumPowerLimit1,
      prompt      = STRING_TOKEN(0x1496),
      help        = STRING_TOKEN(0x011F),
      minimum     = 1,
      maximum     = 10000,
      step        = 1,
      default     = 1200,
    endnumeric;

    numeric varid = SETUP_DATA.PsmDplcMaximumTimeWindow1,
      prompt      = STRING_TOKEN(0x1497),
      help        = STRING_TOKEN(0x0121),
      minimum     = 1,
      maximum     = 10000,
      step        = 1,
      default     = 1000,
    endnumeric;
  endif;

  oneof varid   = SETUP_DATA.UsbFnEnable,
    prompt      = STRING_TOKEN(0x1498),
    help        = STRING_TOKEN(0x1499),
    option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
  endoneof;

    oneof varid   = SETUP_DATA.HidEventFilterDriverEnable,
      prompt      = STRING_TOKEN(0x153B),
      help        = STRING_TOKEN(0x153C),
      option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

  suppressif ideqval SETUP_DATA.WwanEnable == 0;
    numeric varid  = SETUP_DATA.I2cSarResetDelay,
      prompt       = STRING_TOKEN(0x1542),
      help         = STRING_TOKEN(0x1543),
      minimum      = 0,
      maximum      = 255,
      step         = 1,
      default      = 8,
    endnumeric;
  endif;




  oneof varid   = SETUP_DATA.OfflineCrashDumpEnable,
    prompt      = STRING_TOKEN(0x1503),
    help        = STRING_TOKEN(0x1504),
    option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
  endoneof;



  oneof varid   = SETUP_DATA.SystemTimeAndAlarmSource,
    prompt      = STRING_TOKEN(0x1544),
    help        = STRING_TOKEN(0x1545),
    option text = STRING_TOKEN(0x1546), value = 0 , flags = DEFAULT | MANUFACTURING |RESET_REQUIRED;
    option text = STRING_TOKEN(0x1547), value = 1, flags =  RESET_REQUIRED;
  endoneof;

  suppressif NOT ideqval SETUP_DATA.ItpxdpMuxSupport == 1;
    oneof varid   = SETUP_DATA.ItpxdpMux,
      prompt      = STRING_TOKEN(0x154F),
      help        = STRING_TOKEN(0x1550),
      option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;
  endif;






#line 1189 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PlatformSetup.hfr"



  oneof varid   = SETUP_DATA.DgPlatformSupport,
    prompt      = STRING_TOKEN(0x1551),
    help        = STRING_TOKEN(0x1552),
    option text = STRING_TOKEN(0x1553), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    option text = STRING_TOKEN(0x1554), value = 1, flags = RESET_REQUIRED;
  endoneof;




  oneof varid   = SETUP_DATA.VramSrEnable,
    prompt      = STRING_TOKEN(0x1555),
    help        = STRING_TOKEN(0x1556),
    option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
  endoneof;









#line 1218 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PlatformSetup.hfr"




  oneof varid   = SETUP_DATA.PowermeterDeviceEnable,
    prompt      = STRING_TOKEN(0x1557),
    help        = STRING_TOKEN(0x1558),
    option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
  endoneof;






#line 1235 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PlatformSetup.hfr"



  oneof varid    = SETUP_DATA.TrustedDeviceSetupBoot,
    prompt       = STRING_TOKEN(0x153F),
    help         = STRING_TOKEN(0x1540),
    option text  = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
    option text  = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED | DEFAULT;
  endoneof;






#line 1251 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PlatformSetup.hfr"



  oneof varid   = SETUP_DATA.MPdtSupport,
    prompt      = STRING_TOKEN(0x1F00),
    help        = STRING_TOKEN(0x1F01),
    option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | RESET_REQUIRED;
    option text = STRING_TOKEN(0x1F02), value = 1, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(0x1F03), value = 2, flags = RESET_REQUIRED;
    option text = STRING_TOKEN(0x1F04), value = 3, flags = RESET_REQUIRED;
  endoneof;













#line 1276 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PlatformSetup.hfr"

suppressif NOT ideqval SETUP_VOLATILE_DATA.PlatformFlavor == 0x2;
  suppressif NOT ideqval PCH_SETUP.PsOnEnable == 0x1;
    numeric varid  = SETUP_DATA.AuxRailBudget,
      prompt       = STRING_TOKEN(0x1587),
      help         = STRING_TOKEN(0x1588),
      flags        = RESET_REQUIRED,
      minimum      = 0,
      maximum      = 10,
      step         = 1,
      default value = 6,
    endnumeric;
  endif;
endif;

  goto 5415,
    prompt  = STRING_TOKEN(0x1564),
    help    = STRING_TOKEN(0x1565);

  goto 5420,
    prompt  = STRING_TOKEN(0x149A),
    help    = STRING_TOKEN(0x149B);

  goto 5421,
    prompt  = STRING_TOKEN(0x14D1),
    help    = STRING_TOKEN(0x14D2);

  endform; 

  
    form formid = 4339,

    title = STRING_TOKEN(0x1509);

      subtitle text = STRING_TOKEN(0x1509);
      subtitle text = STRING_TOKEN(0x0002);

       
        oneof varid   = SETUP_DATA.Rtd3Support,
          questionid  = 5131,
          prompt      = STRING_TOKEN(0x1505),
          help        = STRING_TOKEN(0x1506),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED | INTERACTIVE;
          option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED | INTERACTIVE;
        endoneof;
       

      subtitle text = STRING_TOKEN(0x0002);

      suppressif ideqval SETUP_DATA.Rtd3Support == 0x0;
        numeric varid  = SETUP_DATA.VRRampUpDelay,
          prompt       = STRING_TOKEN(0x150A),
          help         = STRING_TOKEN(0x150B),
          minimum      = 0,
          maximum      = 100,
          
          
          
          
          step         = 16,
          default      = 16,
        endnumeric;

        numeric varid  = SETUP_DATA.Rtd3P0dl,
          prompt       = STRING_TOKEN(0x150C),
          help         = STRING_TOKEN(0x150D),
          minimum      = 0,
          maximum      = 200,
          
          
          step         = 16,
          default      = 100,
        endnumeric;

        
        
        
        suppressif ideqval PCH_SETUP.PchHdAudio == 0x0;
          numeric varid  = SETUP_DATA.Rtd3AudioDelay,
            prompt       = STRING_TOKEN(0x150E),
            help         = STRING_TOKEN(0x150F),
            minimum      = 0,
            maximum      = 1000,
            
            
            step         = 16,
            default      = 200,
          endnumeric;
        endif;

        numeric varid  = SETUP_DATA.Rtd3SensorHub,
          prompt       = STRING_TOKEN(0x1514),
          help         = STRING_TOKEN(0x1515),
          minimum      = 0,
          maximum      = 1000,
          
          
          
          
          step         = 16,
          default      = 68,
        endnumeric;

        numeric varid  = SETUP_DATA.Rtd3TouchPadDelay,
          prompt       = STRING_TOKEN(0x1510),
          help         = STRING_TOKEN(0x1511),
          minimum      = 0,
          maximum      = 1000,
          
          
          
          
          step         = 16,
          default      = 68,
        endnumeric;

        numeric varid  = SETUP_DATA.Rtd3TouchPanelDelay,
          prompt       = STRING_TOKEN(0x1512),
          help         = STRING_TOKEN(0x1513),
          minimum      = 0,
          maximum      = 1000,
          
          
          
          
          step         = 16,
          default      = 68,
        endnumeric;

        oneof varid   = SETUP_DATA.PstateCapping,
          prompt      = STRING_TOKEN(0x1516),
          help        = STRING_TOKEN(0x1517),
          option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
        endoneof;

        oneof varid   = SETUP_DATA.Rtd3UsbPt1,
          prompt      = STRING_TOKEN(0x1527),
          help        = STRING_TOKEN(0x152B),
          option text = STRING_TOKEN(0x1529), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x152A), value = 2, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        oneof varid   = SETUP_DATA.Rtd3UsbPt2,
          prompt      = STRING_TOKEN(0x1528),
          help        = STRING_TOKEN(0x152B),
          option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1529), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x152A), value = 2, flags = RESET_REQUIRED;
          suppressif ideqval SETUP_DATA.Rtd3WWAN == 0;
            option text = STRING_TOKEN(0x1541), value = 4, flags = RESET_REQUIRED;
          endif
        endoneof;

        suppressif ideqval SETUP_DATA.Rtd3ZpoddSupport == 1;
          oneof varid   = SETUP_DATA.Rtd3Zpodd,
            prompt      = STRING_TOKEN(0x1518),
            help        = STRING_TOKEN(0x1519),
            option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
          endoneof;
        endif;

        grayoutif ideqval SETUP_DATA.WwanEnable == 0;
          oneof varid   = SETUP_DATA.Rtd3WWAN,
            prompt      = STRING_TOKEN(0x151A),
            help        = STRING_TOKEN(0x151B),
            option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x151D), value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(0x151C),  value = 3, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          endoneof;
        endif; 

        oneof varid   = SETUP_DATA.Rtd3SataPort0,
          prompt      = STRING_TOKEN(0x151E),
          help        = STRING_TOKEN(0x1526),
          option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
        endoneof;

        oneof varid   = SETUP_DATA.Rtd3SataPort1,
          prompt      = STRING_TOKEN(0x151F),
          help        = STRING_TOKEN(0x1526),
          option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
        endoneof;

        oneof varid   = SETUP_DATA.Rtd3SataPort2,
          prompt      = STRING_TOKEN(0x1520),
          help        = STRING_TOKEN(0x1526),
          option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
        endoneof;

        oneof varid   = SETUP_DATA.Rtd3SataPort3,
          prompt      = STRING_TOKEN(0x1521),
          help        = STRING_TOKEN(0x1526),
          option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
        endoneof;

        oneof varid   = SETUP_DATA.Rtd3SataPort4,
          prompt      = STRING_TOKEN(0x1522),
          help        = STRING_TOKEN(0x1526),
          option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
        endoneof;

        oneof varid   = SETUP_DATA.Rtd3SataPort5,
          prompt      = STRING_TOKEN(0x1523),
          help        = STRING_TOKEN(0x1526),
          option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
        endoneof;

        oneof varid   = SETUP_DATA.Rtd3SataPort6,
          prompt      = STRING_TOKEN(0x1524),
          help        = STRING_TOKEN(0x1526),
          option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
        endoneof;

        oneof varid   = SETUP_DATA.Rtd3SataPort7,
          prompt      = STRING_TOKEN(0x1525),
          help        = STRING_TOKEN(0x1526),
          option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
        endoneof;

        suppressif NOT ideqval SETUP_DATA.DiscreteTbtSupport == 1 ;
          grayoutif NOT ideqval SETUP_DATA.Win10Support == 2 ;
            oneof varid   = SETUP_DATA.DTbtRtd3,
              prompt      = STRING_TOKEN(0x152D),
              help        = STRING_TOKEN(0x152E),
              option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
              option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
            endoneof;
          endif;

          suppressif NOT ideqval SETUP_DATA.DTbtRtd3 == 1 ;
            oneof varid   = SETUP_DATA.DTbtRtd3OffDelayOptEn,
              prompt      = STRING_TOKEN(0x152F),
              help        = STRING_TOKEN(0x1530),
              option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
              option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            endoneof;

            numeric varid = SETUP_DATA.DTbtRtd3OffDelay,
              prompt      = STRING_TOKEN(0x1531),
              help        = STRING_TOKEN(0x1532),
              minimum     = 0,
              maximum     = 15000,
              step        = 1,
              default     = 5000,
            endnumeric;

            oneof varid   = SETUP_DATA.DTbtRtd3ClkReq,
              prompt      = STRING_TOKEN(0x1533),
              help        = STRING_TOKEN(0x1534),
              option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
              option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
            endoneof;

            numeric varid = SETUP_DATA.DTbtRtd3ClkReqDelay,
              prompt      = STRING_TOKEN(0x1535),
              help        = STRING_TOKEN(0x1536),
              minimum     = 0,
              maximum     = 2000,
              step        = 1,
              default     = 0,
            endnumeric;
          endif; 
        endif; 

      endif; 
    endform; 

    form formid = 5415,
    title = STRING_TOKEN(0x1564);

      subtitle text = STRING_TOKEN(0x1566);
      subtitle text = STRING_TOKEN(0x0002);

      oneof varid   = SETUP_DATA.SysFwUpdateLoadDefault,
        prompt      = STRING_TOKEN(0x1567),
        help        = STRING_TOKEN(0x1568),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = SETUP_DATA.SysFwUpdateSkipPowerCheck,
        prompt      = STRING_TOKEN(0x1569),
        help        = STRING_TOKEN(0x156A),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),  value = 1, flags = RESET_REQUIRED;
      endoneof;

    endform; 

    form formid = 5420,
    title = STRING_TOKEN(0x149A);

      subtitle text = STRING_TOKEN(0x149C);
      subtitle text = STRING_TOKEN(0x0002);

      oneof varid  = SETUP_DATA.VtioSupport,
        prompt   = STRING_TOKEN(0x149D),
        help     = STRING_TOKEN(0x149E),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags  = RESET_REQUIRED;
      endoneof;

      suppressif ideqval SETUP_DATA.VtioSupport == 0;
        
        suppressif TRUE;
          oneof varid  = SETUP_DATA.SdevCio2Entry,
            prompt   = STRING_TOKEN(0x14A4),
            help     = STRING_TOKEN(0x14A5),
            option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
          endoneof;
        endif; 

        subtitle text = STRING_TOKEN(0x0002);

        
        oneof varid  = SETUP_DATA.SdevIspEntry,
          prompt   = STRING_TOKEN(0x14A6),
          help     = STRING_TOKEN(0x14A7),
          option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
        endoneof;

        suppressif ideqval SETUP_DATA.SdevIspEntry == 0;
          numeric varid   = SETUP_DATA.SdevNumberOfSensors[1],
            prompt        = STRING_TOKEN (0x149F),
            help          = STRING_TOKEN (0x14A0),
            flags         = DISPLAY_UINT_HEX | RESET_REQUIRED,
            minimum       = 0x0,
            maximum       = 0x2,
            step          = 0x0,
            default value = 0x2,
          endnumeric;

          suppressif ideqval SETUP_DATA.SdevNumberOfSensors[1] == 0;
            numeric varid   = SETUP_DATA.SdevFlags[1],
              prompt        = STRING_TOKEN (0x157A),
              help          = STRING_TOKEN (0x157B),
              flags         = DISPLAY_UINT_HEX | RESET_REQUIRED,
              minimum       = 0x0,
              maximum       = 0x01,
              step          = 0x0,
              default value = 0x00,
            endnumeric;

            numeric varid   = SETUP_DATA.SdevSensorEntry1[1],
              prompt        = STRING_TOKEN (0x14A1),
              help          = STRING_TOKEN (0x14A3),
              flags         = DISPLAY_UINT_HEX | RESET_REQUIRED,
              minimum       = 0x0,
              maximum       = 0xFFFF,
              step          = 0x0,
              default value = 0x01,
            endnumeric;
          endif; 

          suppressif ideqval SETUP_DATA.SdevNumberOfSensors[1] <= 1;
            numeric varid   = SETUP_DATA.SdevSensorEntry2[1],
              prompt        = STRING_TOKEN (0x14A2),
              help          = STRING_TOKEN (0x14A3),
              flags         = DISPLAY_UINT_HEX | RESET_REQUIRED,
              minimum       = 0x0,
              maximum       = 0xFFFF,
              step          = 0x0,
              default value = 0x85,
            endnumeric;
          endif; 
        endif; 

        subtitle text = STRING_TOKEN(0x0002);

        oneof varid  = SETUP_DATA.SdevHeciEntry,
          prompt   = STRING_TOKEN(0x14A8),
          help     = STRING_TOKEN(0x14A9),
          option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
        endoneof;

        suppressif ideqval SETUP_DATA.SdevHeciEntry == 0;
          numeric varid   = SETUP_DATA.SdevNumberOfSensors[2],
            prompt        = STRING_TOKEN (0x149F),
            help          = STRING_TOKEN (0x14A0),
            flags         = DISPLAY_UINT_HEX | RESET_REQUIRED,
            minimum       = 0x0,
            maximum       = 0x2,
            step          = 0x0,
            default value = 0x0,
          endnumeric;

          suppressif ideqval SETUP_DATA.SdevNumberOfSensors[2] == 0;
            numeric varid   = SETUP_DATA.SdevFlags[2],
              prompt        = STRING_TOKEN (0x157A),
              help          = STRING_TOKEN (0x157B),
              flags         = DISPLAY_UINT_HEX | RESET_REQUIRED,
              minimum       = 0x0,
              maximum       = 0x01,
              step          = 0x0,
              default value = 0x00,
            endnumeric;

            numeric varid   = SETUP_DATA.SdevSensorEntry1[2],
              prompt        = STRING_TOKEN (0x14A1),
              help          = STRING_TOKEN (0x14A3),
              flags         = DISPLAY_UINT_HEX | RESET_REQUIRED,
              minimum       = 0x0,
              maximum       = 0xFFFF,
              step          = 0x0,
              default value = 0x00,
            endnumeric;
          endif; 

          suppressif ideqval SETUP_DATA.SdevNumberOfSensors[2] <= 1;
            numeric varid   = SETUP_DATA.SdevSensorEntry2[2],
              prompt        = STRING_TOKEN (0x14A2),
              help          = STRING_TOKEN (0x14A3),
              flags         = DISPLAY_UINT_HEX | RESET_REQUIRED,
              minimum       = 0x0,
              maximum       = 0xFFFF,
              step          = 0x0,
              default value = 0x0,
            endnumeric;
          endif; 
        endif; 

        subtitle text = STRING_TOKEN(0x0002);

        oneof varid  = SETUP_DATA.SdevSpi1Entry,
          prompt   = STRING_TOKEN(0x14AA),
          help     = STRING_TOKEN(0x14AB),
          option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
        endoneof;

        suppressif ideqval SETUP_DATA.SdevSpi1Entry == 0;
          numeric varid   = SETUP_DATA.SdevNumberOfSensors[3],
            prompt        = STRING_TOKEN (0x149F),
            help          = STRING_TOKEN (0x14A0),
            flags         = DISPLAY_UINT_HEX | RESET_REQUIRED,
            minimum       = 0x0,
            maximum       = 0x2,
            step          = 0x0,
            default value = 0x1,
          endnumeric;

          suppressif ideqval SETUP_DATA.SdevNumberOfSensors[3] == 0;
            numeric varid   = SETUP_DATA.SdevFlags[3],
              prompt        = STRING_TOKEN (0x157A),
              help          = STRING_TOKEN (0x157B),
              flags         = DISPLAY_UINT_HEX | RESET_REQUIRED,
              minimum       = 0x0,
              maximum       = 0x01,
              step          = 0x0,
              default value = 0x00,
            endnumeric;

            numeric varid   = SETUP_DATA.SdevSensorEntry1[3],
              prompt        = STRING_TOKEN (0x14A1),
              help          = STRING_TOKEN (0x14A3),
              flags         = DISPLAY_UINT_HEX | RESET_REQUIRED,
              minimum       = 0x0,
              maximum       = 0xFFFF,
              step          = 0x0,
              default value = 0x01,
            endnumeric;
          endif; 

          suppressif ideqval SETUP_DATA.SdevNumberOfSensors[3] <= 1;
            numeric varid   = SETUP_DATA.SdevSensorEntry2[3],
              prompt        = STRING_TOKEN (0x14A2),
              help          = STRING_TOKEN (0x14A3),
              flags         = DISPLAY_UINT_HEX | RESET_REQUIRED,
              minimum       = 0x0,
              maximum       = 0xFFFF,
              step          = 0x0,
              default value = 0x0,
            endnumeric;
          endif; 
        endif; 

        subtitle text = STRING_TOKEN(0x0002);

        oneof varid  = SETUP_DATA.SdevSpi2Entry,
          prompt   = STRING_TOKEN(0x14AC),
          help     = STRING_TOKEN(0x14AD),
          option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
        endoneof;

        suppressif ideqval SETUP_DATA.SdevSpi2Entry == 0;
          numeric varid   = SETUP_DATA.SdevNumberOfSensors[4],
            prompt        = STRING_TOKEN (0x149F),
            help          = STRING_TOKEN (0x14A0),
            flags         = DISPLAY_UINT_HEX | RESET_REQUIRED,
            minimum       = 0x0,
            maximum       = 0x2,
            step          = 0x0,
            default value = 0x1,
          endnumeric;

          suppressif ideqval SETUP_DATA.SdevNumberOfSensors[4] == 0;
            numeric varid   = SETUP_DATA.SdevFlags[4],
              prompt        = STRING_TOKEN (0x157A),
              help          = STRING_TOKEN (0x157B),
              flags         = DISPLAY_UINT_HEX | RESET_REQUIRED,
              minimum       = 0x0,
              maximum       = 0x01,
              step          = 0x0,
              default value = 0x00,
            endnumeric;

            numeric varid   = SETUP_DATA.SdevSensorEntry1[4],
              prompt        = STRING_TOKEN (0x14A1),
              help          = STRING_TOKEN (0x14A3),
              flags         = DISPLAY_UINT_HEX | RESET_REQUIRED,
              minimum       = 0x0,
              maximum       = 0xFFFF,
              step          = 0x0,
              default value = 0x01,
            endnumeric;
          endif; 

          suppressif ideqval SETUP_DATA.SdevNumberOfSensors[4] <= 1;
            numeric varid   = SETUP_DATA.SdevSensorEntry2[4],
              prompt        = STRING_TOKEN (0x14A2),
              help          = STRING_TOKEN (0x14A3),
              flags         = DISPLAY_UINT_HEX | RESET_REQUIRED,
              minimum       = 0x0,
              maximum       = 0xFFFF,
              step          = 0x0,
              default value = 0x0,
            endnumeric;
          endif; 
        endif; 

        subtitle text = STRING_TOKEN(0x0002);

        oneof varid  = SETUP_DATA.SdevXhciEntry,
          prompt   = STRING_TOKEN(0x14AE),
          help     = STRING_TOKEN(0x14AF),
          option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
        endoneof;

        suppressif ideqval SETUP_DATA.SdevXhciEntry == 0;
          numeric varid   = SETUP_DATA.SdevXhciNumberOfDevices,
            prompt        = STRING_TOKEN (0x14B0),
            help          = STRING_TOKEN (0x14B1),
            flags         = DISPLAY_UINT_HEX | RESET_REQUIRED,
            minimum       = 0x1,
            maximum       = 0x2,
            step          = 0x0,
            default value = 0x2,
          endnumeric;

          numeric varid   = SETUP_DATA.SdevXhciFlags,
            prompt        = STRING_TOKEN (0x157A),
            help          = STRING_TOKEN (0x157B),
            flags         = DISPLAY_UINT_HEX | RESET_REQUIRED,
            minimum       = 0x0,
            maximum       = 0x01,
            step          = 0x0,
            default value = 0x00,
          endnumeric;

          text
            help  = STRING_TOKEN(0x14B2),
            text  = STRING_TOKEN(0x14B2);

          numeric varid   = SETUP_DATA.SdevXhciDeviceAttributes[0],
            prompt        = STRING_TOKEN (0x14B4),
            help          = STRING_TOKEN (0x14B5),
            flags         = DISPLAY_UINT_HEX | RESET_REQUIRED,
            minimum       = 0x0,
            maximum       = 0xFF,
            step          = 0x0,
            default value = 0x00,
          endnumeric;

          numeric varid   = SETUP_DATA.SdevXhciRootPortNumber[0],
            prompt        = STRING_TOKEN (0x14B6),
            help          = STRING_TOKEN (0x14B7),
            flags         = DISPLAY_UINT_HEX | RESET_REQUIRED,
            minimum       = 0x0,
            maximum       = 0xFF,
            step          = 0x0,
            default value = 0x00,
          endnumeric;

          numeric varid   = SETUP_DATA.SdevXhciVendorId[0],
            prompt        = STRING_TOKEN (0x14B8),
            help          = STRING_TOKEN (0x14B9),
            flags         = DISPLAY_UINT_HEX | RESET_REQUIRED,
            minimum       = 0x0,
            maximum       = 0xFFFF,
            step          = 0x0,
            default value = 0x0000,
          endnumeric;

          numeric varid   = SETUP_DATA.SdevXhciProductId[0],
            prompt        = STRING_TOKEN (0x14BA),
            help          = STRING_TOKEN (0x14BB),
            flags         = DISPLAY_UINT_HEX | RESET_REQUIRED,
            minimum       = 0x0,
            maximum       = 0xFFFF,
            step          = 0x0,
            default value = 0x0000,
          endnumeric;

          numeric varid   = SETUP_DATA.SdevXhciRevision[0],
            prompt        = STRING_TOKEN (0x14BC),
            help          = STRING_TOKEN (0x14BD),
            flags         = DISPLAY_UINT_HEX | RESET_REQUIRED,
            minimum       = 0x0,
            maximum       = 0xFFFF,
            step          = 0x0,
            default value = 0x0000,
          endnumeric;

          numeric varid   = SETUP_DATA.SdevXhciInterfaceNumber[0],
            prompt        = STRING_TOKEN (0x14BE),
            help          = STRING_TOKEN (0x14BF),
            flags         = DISPLAY_UINT_HEX | RESET_REQUIRED,
            minimum       = 0x0,
            maximum       = 0xFF,
            step          = 0x0,
            default value = 0x00,
          endnumeric;

          numeric varid   = SETUP_DATA.SdevXhciClass[0],
            prompt        = STRING_TOKEN (0x14C0),
            help          = STRING_TOKEN (0x14C1),
            flags         = DISPLAY_UINT_HEX | RESET_REQUIRED,
            minimum       = 0x0,
            maximum       = 0xFF,
            step          = 0x0,
            default value = 0x0E,
          endnumeric;

          numeric varid   = SETUP_DATA.SdevXhciSubClass[0],
            prompt        = STRING_TOKEN (0x14C2),
            help          = STRING_TOKEN (0x14C3),
            flags         = DISPLAY_UINT_HEX | RESET_REQUIRED,
            minimum       = 0x0,
            maximum       = 0xFF,
            step          = 0x0,
            default value = 0x01,
          endnumeric;

          numeric varid   = SETUP_DATA.SdevXhciProtocol[0],
            prompt        = STRING_TOKEN (0x14C4),
            help          = STRING_TOKEN (0x14C5),
            flags         = DISPLAY_UINT_HEX | RESET_REQUIRED,
            minimum       = 0x0,
            maximum       = 0xFF,
            step          = 0x0,
            default value = 0x01,
          endnumeric;

          numeric varid   = SETUP_DATA.SdevXhciAcpiPathStringOffset[0],
            prompt        = STRING_TOKEN (0x14C6),
            help          = STRING_TOKEN (0x14C7),
            flags         = DISPLAY_UINT_HEX | RESET_REQUIRED,
            minimum       = 0x0,
            maximum       = 0xFFFF,
            step          = 0x0,
            default value = 0x0034,
          endnumeric;

          grayoutif TRUE;
            numeric varid   = SETUP_DATA.SdevXhciAcpiPathStringLength[0],
              prompt        = STRING_TOKEN (0x14C8),
              help          = STRING_TOKEN (0x14C9),
              flags         = DISPLAY_UINT_HEX | RESET_REQUIRED,
              minimum       = 0x0,
              maximum       = 0xFFFF,
              step          = 0x0,
              default value = 0x001D,
            endnumeric;
          endif;  

          numeric varid = SETUP_DATA.SdevXhciFirmwareHashDevice1[3],
            prompt      = STRING_TOKEN (0x14CB),
            help        = STRING_TOKEN (0x14CB),
            flags       = DISPLAY_UINT_HEX | NUMERIC_SIZE_8 | RESET_REQUIRED,
            minimum     = 0x0,
            maximum     = 0xFFFFFFFFFFFFFFFF,
            step        = 0x1,
            default     = 0x0,
          endnumeric;

          numeric varid = SETUP_DATA.SdevXhciFirmwareHashDevice1[2],
            prompt      = STRING_TOKEN (0x14CC),
            help        = STRING_TOKEN (0x14CC),
            flags       = DISPLAY_UINT_HEX | NUMERIC_SIZE_8 | RESET_REQUIRED,
            minimum     = 0x0,
            maximum     = 0xFFFFFFFFFFFFFFFF,
            step        = 0x1,
            default     = 0x0,
          endnumeric;

          numeric varid = SETUP_DATA.SdevXhciFirmwareHashDevice1[1],
            prompt      = STRING_TOKEN (0x14CD),
            help        = STRING_TOKEN (0x14CD),
            flags       = DISPLAY_UINT_HEX | NUMERIC_SIZE_8 | RESET_REQUIRED,
            minimum     = 0x0,
            maximum     = 0xFFFFFFFFFFFFFFFF,
            step        = 0x1,
            default     = 0x0,
          endnumeric;

          numeric varid = SETUP_DATA.SdevXhciFirmwareHashDevice1[0],
            prompt      = STRING_TOKEN (0x14CE),
            help        = STRING_TOKEN (0x14CE),
            flags       = DISPLAY_UINT_HEX | NUMERIC_SIZE_8 | RESET_REQUIRED,
            minimum     = 0x0,
            maximum     = 0xFFFFFFFFFFFFFFFF,
            step        = 0x1,
            default     = 0x0,
          endnumeric;

          string  varid   = SETUP_DATA.SdevXhciAcpiPathNameDevice1,
            questionid  = 5436,
            prompt  = STRING_TOKEN(0x14CA),
            help    = STRING_TOKEN(0x14CF),
            flags   = 0 | RESET_REQUIRED | INTERACTIVE,
            minsize = 1,
            maxsize = 48, 
          endstring;

          suppressif ideqval SETUP_DATA.SdevXhciNumberOfDevices <= 1;
            text
              help  = STRING_TOKEN(0x14B3),
              text  = STRING_TOKEN(0x14B3);

            numeric varid   = SETUP_DATA.SdevXhciDeviceAttributes[1],
              prompt        = STRING_TOKEN (0x14B4),
              help          = STRING_TOKEN (0x14B5),
              flags         = DISPLAY_UINT_HEX | RESET_REQUIRED,
              minimum       = 0x0,
              maximum       = 0xFF,
              step          = 0x0,
              default value = 0x00,
            endnumeric;

            numeric varid   = SETUP_DATA.SdevXhciRootPortNumber[1],
              prompt        = STRING_TOKEN (0x14B6),
              help          = STRING_TOKEN (0x14B7),
              flags         = DISPLAY_UINT_HEX | RESET_REQUIRED,
              minimum       = 0x0,
              maximum       = 0xFF,
              step          = 0x0,
              default value = 0x01,
            endnumeric;

            numeric varid   = SETUP_DATA.SdevXhciVendorId[1],
              prompt        = STRING_TOKEN (0x14B8),
              help          = STRING_TOKEN (0x14B9),
              flags         = DISPLAY_UINT_HEX | RESET_REQUIRED,
              minimum       = 0x0,
              maximum       = 0xFFFF,
              step          = 0x0,
              default value = 0x0000,
            endnumeric;

            numeric varid   = SETUP_DATA.SdevXhciProductId[1],
              prompt        = STRING_TOKEN (0x14BA),
              help          = STRING_TOKEN (0x14BB),
              flags         = DISPLAY_UINT_HEX | RESET_REQUIRED,
              minimum       = 0x0,
              maximum       = 0xFFFF,
              step          = 0x0,
              default value = 0x0000,
            endnumeric;

            numeric varid   = SETUP_DATA.SdevXhciRevision[1],
              prompt        = STRING_TOKEN (0x14BC),
              help          = STRING_TOKEN (0x14BD),
              flags         = DISPLAY_UINT_HEX | RESET_REQUIRED,
              minimum       = 0x0,
              maximum       = 0xFFFF,
              step          = 0x0,
              default value = 0x0000,
            endnumeric;

            numeric varid   = SETUP_DATA.SdevXhciInterfaceNumber[1],
              prompt        = STRING_TOKEN (0x14BE),
              help          = STRING_TOKEN (0x14BF),
              flags         = DISPLAY_UINT_HEX | RESET_REQUIRED,
              minimum       = 0x0,
              maximum       = 0xFF,
              step          = 0x0,
              default value = 0x00,
            endnumeric;

            numeric varid   = SETUP_DATA.SdevXhciClass[1],
              prompt        = STRING_TOKEN (0x14C0),
              help          = STRING_TOKEN (0x14C1),
              flags         = DISPLAY_UINT_HEX | RESET_REQUIRED,
              minimum       = 0x0,
              maximum       = 0xFF,
              step          = 0x0,
              default value = 0x0E,
            endnumeric;

            numeric varid   = SETUP_DATA.SdevXhciSubClass[1],
              prompt        = STRING_TOKEN (0x14C2),
              help          = STRING_TOKEN (0x14C3),
              flags         = DISPLAY_UINT_HEX | RESET_REQUIRED,
              minimum       = 0x0,
              maximum       = 0xFF,
              step          = 0x0,
              default value = 0x01,
            endnumeric;

            numeric varid   = SETUP_DATA.SdevXhciProtocol[1],
              prompt        = STRING_TOKEN (0x14C4),
              help          = STRING_TOKEN (0x14C5),
              flags         = DISPLAY_UINT_HEX | RESET_REQUIRED,
              minimum       = 0x0,
              maximum       = 0xFF,
              step          = 0x0,
              default value = 0x01,
            endnumeric;

            numeric varid   = SETUP_DATA.SdevXhciAcpiPathStringOffset[1],
              prompt        = STRING_TOKEN (0x14C6),
              help          = STRING_TOKEN (0x14C7),
              flags         = DISPLAY_UINT_HEX | RESET_REQUIRED,
              minimum       = 0x0,
              maximum       = 0xFFFF,
              step          = 0x0,
              default value = 0x0034,
            endnumeric;

            grayoutif TRUE;
              numeric varid   = SETUP_DATA.SdevXhciAcpiPathStringLength[1],
                prompt        = STRING_TOKEN (0x14C8),
                help          = STRING_TOKEN (0x14C9),
                flags         = DISPLAY_UINT_HEX | RESET_REQUIRED,
                minimum       = 0x0,
                maximum       = 0xFFFF,
                step          = 0x0,
                default value = 0x001C,
              endnumeric;
            endif;  

            numeric varid = SETUP_DATA.SdevXhciFirmwareHashDevice2[3],
              prompt      = STRING_TOKEN (0x14CB),
              help        = STRING_TOKEN (0x14CB),
              flags       = DISPLAY_UINT_HEX | NUMERIC_SIZE_8 | RESET_REQUIRED,
              minimum     = 0x0,
              maximum     = 0xFFFFFFFFFFFFFFFF,
              step        = 0x1,
              default     = 0x0,
            endnumeric;

            numeric varid = SETUP_DATA.SdevXhciFirmwareHashDevice2[2],
              prompt      = STRING_TOKEN (0x14CC),
              help        = STRING_TOKEN (0x14CC),
              flags       = DISPLAY_UINT_HEX | NUMERIC_SIZE_8 | RESET_REQUIRED,
              minimum     = 0x0,
              maximum     = 0xFFFFFFFFFFFFFFFF,
              step        = 0x1,
              default     = 0x0,
            endnumeric;

            numeric varid = SETUP_DATA.SdevXhciFirmwareHashDevice2[1],
              prompt      = STRING_TOKEN (0x14CD),
              help        = STRING_TOKEN (0x14CD),
              flags       = DISPLAY_UINT_HEX | NUMERIC_SIZE_8 | RESET_REQUIRED,
              minimum     = 0x0,
              maximum     = 0xFFFFFFFFFFFFFFFF,
              step        = 0x1,
              default     = 0x0,
            endnumeric;

            numeric varid = SETUP_DATA.SdevXhciFirmwareHashDevice2[0],
              prompt      = STRING_TOKEN (0x14CE),
              help        = STRING_TOKEN (0x14CE),
              flags       = DISPLAY_UINT_HEX | NUMERIC_SIZE_8 | RESET_REQUIRED,
              minimum     = 0x0,
              maximum     = 0xFFFFFFFFFFFFFFFF,
              step        = 0x1,
              default     = 0x0,
            endnumeric;

            string  varid   = SETUP_DATA.SdevXhciAcpiPathNameDevice2,
              questionid  = 5437,
              prompt  = STRING_TOKEN(0x14CA),
              help    = STRING_TOKEN(0x14D0),
              flags   = 0 | RESET_REQUIRED | INTERACTIVE,
              minsize = 1,
              maxsize = 48, 
            endstring;
          endif; 
        endif; 
      endif; 
    endform; 

    form formid = 5421,
    title = STRING_TOKEN(0x14D1);

      subtitle text = STRING_TOKEN(0x14D3);
      subtitle text = STRING_TOKEN(0x0002);

      
      suppressif ideqval SETUP_VOLATILE_DATA.VTdAvailable == 0;
        grayoutif ideqval SA_SETUP.EnableVtd == 0;
          oneof varid   = SETUP_DATA.DisableTbtPcieTreeBme,
            prompt      = STRING_TOKEN(0x153D),
            help        = STRING_TOKEN(0x153E),
          option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED| INTERACTIVE;
          option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED| INTERACTIVE;
          endoneof;
        endif; 
      endif; 

      oneof varid  = SETUP_DATA.TcssUcmDevice,
        prompt   = STRING_TOKEN(0x14D4),
        help     = STRING_TOKEN(0x14D5),


#line 2210 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PlatformSetup.hfr"
        default     = 0, defaultstore = MyStandardDefault,
#line 2212 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PlatformSetup.hfr"
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x14D6), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x14D7), value = 2, flags = RESET_REQUIRED;
      endoneof;




















































































#line 2301 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PlatformSetup.hfr"
      oneof varid   = SETUP_DATA.DeepestUSBSleepWakeCapability,
        questionid  = 5491,
        prompt      = STRING_TOKEN(0x14E2),
        help        = STRING_TOKEN(0x14E3),
        option text = STRING_TOKEN(0x14E4), value = 3, flags = RESET_REQUIRED | INTERACTIVE;
        option text = STRING_TOKEN(0x14E5), value = 4, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED | INTERACTIVE;
      endoneof;


      oneof varid  = SETUP_DATA.TcssPdPsOnEnable,
        prompt   = STRING_TOKEN(0x157C),
        help     = STRING_TOKEN(0x157D),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x157E), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x157F), value = 2, flags = RESET_REQUIRED;
      endoneof;
#line 2318 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PlatformSetup.hfr"

    oneof varid    = SETUP_DATA.UsbcDataRoleSwapPlatformDisable,
      prompt   = STRING_TOKEN(0x1585),
      help     = STRING_TOKEN(0x1586),
      option text = STRING_TOKEN(0x0583), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x0582), value = 0, flags = RESET_REQUIRED;
    endoneof;






#line 2332 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PlatformSetup.hfr"




      goto 4379,
        prompt = STRING_TOKEN(0x1FBA),
        help   = STRING_TOKEN(0x1FBB);
#line 2340 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PlatformSetup.hfr"






#line 2347 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PlatformSetup.hfr"




























































#line 2408 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\PlatformSetup.hfr"

    endform; 
#line 478 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\Advanced.vfr"

  #line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\TcgSetup.hfr"

































form formid = 4172,
  title     = STRING_TOKEN(0x204C);

  subtitle text = STRING_TOKEN(0x204C);
  subtitle text = STRING_TOKEN(0x0002);

  text
    help   = STRING_TOKEN(0x204F),
    text   = STRING_TOKEN(0x204E),
      text   = STRING_TOKEN(0x2050);

  grayoutif ideqval ME_SETUP_STORAGE.AfterEoP == 0x1 OR
            ideqval ME_SETUP_STORAGE.RemoteSessionActive == 0x1;
  checkbox varid = TCG_SETUP.PttPresent,
    questionid = 4386,
    prompt     = STRING_TOKEN(0x2055),
    help       = STRING_TOKEN(0x2056),
    flags      = INTERACTIVE | RESET_REQUIRED,
    key        = 4386,
  endcheckbox;
  endif; 

  subtitle text = STRING_TOKEN(0x0002);

  suppressif (ideqval TCG_SETUP.dTpm12Present == 0x0 OR
              NOT ideqval TCG2_CONFIGURATION.TpmDevice == 1);
    goto 4172,
    prompt = STRING_TOKEN(0x2051),
    help   = STRING_TOKEN(0x2052),
    flags  = INTERACTIVE,
    key    = 5171;
  endif; 

  suppressif (ideqval TCG_SETUP.PttPresent == 0x0 AND
              ideqval TCG_SETUP.dTpm20Present == 0x0) OR
              NOT ideqval TCG2_CONFIGURATION.TpmDevice == 2;
    goto 4172,
    prompt = STRING_TOKEN(0x2053),
    help   = STRING_TOKEN(0x2054),
    flags  = INTERACTIVE,
    key    = 4362;
  endif; 
endform;
#line 480 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\Advanced.vfr"
#line 481 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\Advanced.vfr"



#line 485 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\Advanced.vfr"





#line 491 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\Advanced.vfr"
  #line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\HhmSetup.hfr"

































form formid = 4222,
  title     = STRING_TOKEN(0x0789);
  grayoutif TRUE;
    action
      questionid  = 5043,
      prompt      = STRING_TOKEN(0x0789),
      help        = STRING_TOKEN(0x0789),
      flags       = INTERACTIVE,
      config      = STRING_TOKEN(0x0789),
      refresh interval = 1
    endaction;
  endif;
  subtitle text = STRING_TOKEN(0x0002);

  grayoutif TRUE;
    text help = STRING_TOKEN(0x0002), text = STRING_TOKEN(0x078B), text = STRING_TOKEN(0x078C), flags = 0, key = 0;
    text help = STRING_TOKEN(0x0002), text = STRING_TOKEN(0x078D), text = STRING_TOKEN(0x078E), flags = 0, key = 0;
    text help = STRING_TOKEN(0x0002), text = STRING_TOKEN(0x078F), text = STRING_TOKEN(0x0790), flags = 0, key = 0;
    text help = STRING_TOKEN(0x0002), text = STRING_TOKEN(0x0791), text = STRING_TOKEN(0x0792), flags = 0, key = 0;
    text help = STRING_TOKEN(0x0002), text = STRING_TOKEN(0x0793), text = STRING_TOKEN(0x0794), flags = 0, key = 0;
    text help = STRING_TOKEN(0x0002), text = STRING_TOKEN(0x0796), text = STRING_TOKEN(0x0797), flags = 0, key = 0;
    text help = STRING_TOKEN(0x0002), text = STRING_TOKEN(0x0798), text = STRING_TOKEN(0x0799), flags = 0, key = 0;
  endif;
endform;
#line 492 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\Advanced.vfr"
  #line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\TbtSetup.hfr"

































  
    form formid = 4379,
    title     = STRING_TOKEN(0x1FBA);

    oneof varid   = SETUP_DATA.EnablePcieTunnelingOverUsb4,
      prompt      = STRING_TOKEN(0x1FC2),
      help        = STRING_TOKEN(0x1FC3),
      option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED | INTERACTIVE;
      option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED | INTERACTIVE;
    endoneof;













#line 58 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\TbtSetup.hfr"































#line 90 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\TbtSetup.hfr"

#line 92 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\TbtSetup.hfr"










#line 103 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\TbtSetup.hfr"


  suppressif NOT ideqval SETUP_DATA.DiscreteTbtPlatformConfigurationSupport == 1;
    oneof varid = SETUP_DATA.DiscreteTbtSupport,
      questionid = 5094,
      prompt   = STRING_TOKEN(0x1FC0),
      help     = STRING_TOKEN(0x1FC1),
      default  = 0, defaultstore = MyStandardDefault,
      option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED | INTERACTIVE;
      option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED | INTERACTIVE;
    endoneof;
  endif;
#line 116 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\TbtSetup.hfr"
    
    
    
    suppressif ideqval SETUP_DATA.DiscreteTbtSupport == 0
                                                      AND
               ideqval SETUP_DATA.IntegratedTbtSupport == 0;

      checkbox varid  = SETUP_DATA.TbtWakeupSupport,
        prompt   = STRING_TOKEN(0x1FE1),
        help     = STRING_TOKEN(0x1FE2),
        
        
        flags    = CHECKBOX_DEFAULT | RESET_REQUIRED,
        key      = 0,
      endcheckbox;

    endif; 

    
    
    
    suppressif ideqval SETUP_DATA.IntegratedTbtSupport == 0;

       goto 5200,
          prompt = STRING_TOKEN(0x200D),
          help = STRING_TOKEN(0x200E);
    endif;

    
    
    
  suppressif NOT ideqval SETUP_DATA.DiscreteTbtPlatformConfigurationSupport == 1;
    suppressif ideqval SETUP_DATA.DiscreteTbtSupport == 0;
      suppressif NOT ideqval SETUP_DATA.DTbtDpInSupport == 1;
        
        
        
        oneof varid    = SETUP_DATA.DpInExternalEn,
          prompt   = STRING_TOKEN(0x1580),
          help     = STRING_TOKEN(0x1581),
          option text = STRING_TOKEN(0x1582), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(0x1583), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(0x1584), value = 2, flags = RESET_REQUIRED;
        endoneof;
      endif; 

      goto 5076,
          prompt = STRING_TOKEN(0x1FBC),
          help = STRING_TOKEN(0x1FBD);
    endif;
  endif;
#line 168 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\TbtSetup.hfr"
    endform;  

    
    
    
    form formid = 5200,
    title = STRING_TOKEN(0x200D);

    subtitle text = STRING_TOKEN(0x200D);
    subtitle text = STRING_TOKEN(0x0002);
    
    
    
    oneof varid = SETUP_DATA.OsNativeResourceBalance,
      prompt   = STRING_TOKEN(0x203C),
      help     = STRING_TOKEN(0x203D),
      option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
    endoneof;

    numeric varid = SETUP_DATA.ITbtConnectTopologyTimeoutInMs,
      prompt      = STRING_TOKEN (0x1FDD),
      help        = STRING_TOKEN (0x1FDE),
      flags       = RESET_REQUIRED | INTERACTIVE,
      minimum     = 1,
      maximum     = 65535,
      step        = 1,    
      default     = 5000,    
    endnumeric;

    numeric varid = SETUP_DATA.ITbtForcePowerOnTimeoutInMs,
      prompt      = STRING_TOKEN (0x1FD3),
      help        = STRING_TOKEN (0x1FD4),
      flags       = RESET_REQUIRED | INTERACTIVE,
      minimum     = 1,
      maximum     = 65535,
      step        = 1,    
      default     = 500,    
    endnumeric;

    oneof varid  = SETUP_DATA.ITbtRtd3,
      prompt      = STRING_TOKEN (0x1FD5),
      help        = STRING_TOKEN (0x1FD6),
      option text = STRING_TOKEN (0x0004), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN (0x0003), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

    numeric varid = SETUP_DATA.ITbtRtd3ExitDelay,
      prompt    = STRING_TOKEN (0x1FD7),
      help      = STRING_TOKEN (0x1FD8),
      flags     = RESET_REQUIRED | INTERACTIVE,
      minimum   = 0,
      maximum   = 20000,
      step      = 1,    
      default   = 0,
    endnumeric;




    oneof varid  = SETUP_DATA.ITbtImrControl,
      prompt      = STRING_TOKEN (0x1FD9),
      help        = STRING_TOKEN (0x1FDA),
      option text = STRING_TOKEN (0x1FDB), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN (0x1FDC), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;




    suppressif NOT ideqval TBT_SETUP_VOLATILE_DATA.ITbtRootPortsNumber >= 1;
      suppressif ideqval SETUP_DATA.ITbtPcieRootPortSupported[0] == 0;
        goto 5201,
          prompt = STRING_TOKEN(0x200F),
          help = STRING_TOKEN(0x200F);
      endif;
    endif;
    suppressif NOT ideqval TBT_SETUP_VOLATILE_DATA.ITbtRootPortsNumber >= 2;
      suppressif ideqval SETUP_DATA.ITbtPcieRootPortSupported[1] == 0;
        goto 5202,
          prompt = STRING_TOKEN(0x2010),
          help = STRING_TOKEN(0x2010);
      endif;
    endif;
    suppressif NOT ideqval TBT_SETUP_VOLATILE_DATA.ITbtRootPortsNumber >= 3;
      suppressif ideqval SETUP_DATA.ITbtPcieRootPortSupported[2] == 0;
        goto 5203,
          prompt = STRING_TOKEN(0x2011),
          help = STRING_TOKEN(0x2011);
      endif;
    endif;
    suppressif NOT ideqval TBT_SETUP_VOLATILE_DATA.ITbtRootPortsNumber >= 4;
      suppressif ideqval SETUP_DATA.ITbtPcieRootPortSupported[3] == 0;
        goto 5204,
          prompt = STRING_TOKEN(0x2012),
          help = STRING_TOKEN(0x2012);
      endif;
    endif;
    endform; 

    #line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\iTbtStringPool.hfr"











































#line 269 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\TbtSetup.hfr"

    
    
    
    
    

    
      #line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\IntegratedTbtOptions.hfr"
form formid = 5201,
  title = STRING_TOKEN(0x200F);
    oneof varid  = SETUP_DATA.ITbtRootPort[0],
      questionid = 5207,
      prompt = STRING_TOKEN(0x2013),
      help = STRING_TOKEN(0x2014),
      option text = STRING_TOKEN(0x0004),  value = 0, flags = RESET_REQUIRED | INTERACTIVE;
      option text = STRING_TOKEN(0x0003),   value = 1, flags = RESET_REQUIRED | INTERACTIVE;
      default     = 1, defaultstore = MyStandardDefault,    
    endoneof;

    subtitle text = STRING_TOKEN(0x201B);
    numeric varid = SETUP_DATA.ITbtPcieExtraBusRsvd[0],
      prompt      = STRING_TOKEN (0x201C),
      help        = STRING_TOKEN (0x201D),
      flags       = RESET_REQUIRED | INTERACTIVE,
      minimum     = 0,
      maximum     = 224,
      step        = 1,    
      default     = 42,   
    endnumeric;

    numeric varid = SETUP_DATA.ITbtPcieMemRsvd[0],
      prompt      = STRING_TOKEN (0x201E),
      help        = STRING_TOKEN (0x201F),
      flags       = RESET_REQUIRED | INTERACTIVE,
      minimum     = 1,
      maximum     = 4096,
      step        = 1,    
      default     = 194,  
    endnumeric;

    numeric varid = SETUP_DATA.ITbtPcieMemAddrRngMax[0],
      prompt      = STRING_TOKEN (0x2020),
      help        = STRING_TOKEN (0x2021),
      flags       = RESET_REQUIRED | INTERACTIVE,
      minimum     = 0,
      maximum     = 31,
      step        = 1,
      default     = 25,   
    endnumeric;

    numeric varid = SETUP_DATA.ITbtPciePMemRsvd[0],
      prompt      = STRING_TOKEN (0x2022),
      help        = STRING_TOKEN (0x2023),
      flags     = RESET_REQUIRED | INTERACTIVE,
      minimum     = 1,
      maximum     = 4096,
      step        = 1,    
      default     = 448,  
    endnumeric;

    numeric varid = SETUP_DATA.ITbtPciePMemAddrRngMax[0],
      prompt      = STRING_TOKEN (0x2024),
      help        = STRING_TOKEN (0x2025),
      flags     = RESET_REQUIRED | INTERACTIVE,
      minimum     = 0,
      maximum     = 31,
      step        = 1,
      default     = 28, 
    endnumeric;

  endform;  
    
#line 278 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\TbtSetup.hfr"
    
    
      #line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\IntegratedTbtOptions.hfr"
form formid = 5202,
  title = STRING_TOKEN(0x2010);
    oneof varid  = SETUP_DATA.ITbtRootPort[1],
      questionid = 5208,
      prompt = STRING_TOKEN(0x2015),
      help = STRING_TOKEN(0x2016),
      option text = STRING_TOKEN(0x0004),  value = 0, flags = RESET_REQUIRED | INTERACTIVE;
      option text = STRING_TOKEN(0x0003),   value = 1, flags = RESET_REQUIRED | INTERACTIVE;
      default     = 1, defaultstore = MyStandardDefault,    
    endoneof;

    subtitle text = STRING_TOKEN(0x2027);
    numeric varid = SETUP_DATA.ITbtPcieExtraBusRsvd[1],
      prompt      = STRING_TOKEN (0x2028),
      help        = STRING_TOKEN (0x201D),
      flags       = RESET_REQUIRED | INTERACTIVE,
      minimum     = 0,
      maximum     = 224,
      step        = 1,    
      default     = 42,   
    endnumeric;

    numeric varid = SETUP_DATA.ITbtPcieMemRsvd[1],
      prompt      = STRING_TOKEN (0x2029),
      help        = STRING_TOKEN (0x201F),
      flags       = RESET_REQUIRED | INTERACTIVE,
      minimum     = 1,
      maximum     = 4096,
      step        = 1,    
      default     = 194,  
    endnumeric;

    numeric varid = SETUP_DATA.ITbtPcieMemAddrRngMax[1],
      prompt      = STRING_TOKEN (0x202A),
      help        = STRING_TOKEN (0x2021),
      flags       = RESET_REQUIRED | INTERACTIVE,
      minimum     = 0,
      maximum     = 31,
      step        = 1,
      default     = 25,   
    endnumeric;

    numeric varid = SETUP_DATA.ITbtPciePMemRsvd[1],
      prompt      = STRING_TOKEN (0x202B),
      help        = STRING_TOKEN (0x2023),
      flags     = RESET_REQUIRED | INTERACTIVE,
      minimum     = 1,
      maximum     = 4096,
      step        = 1,    
      default     = 448,  
    endnumeric;

    numeric varid = SETUP_DATA.ITbtPciePMemAddrRngMax[1],
      prompt      = STRING_TOKEN (0x202C),
      help        = STRING_TOKEN (0x2025),
      flags     = RESET_REQUIRED | INTERACTIVE,
      minimum     = 0,
      maximum     = 31,
      step        = 1,
      default     = 28, 
    endnumeric;

  endform;  
    
#line 281 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\TbtSetup.hfr"
    
    
      #line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\IntegratedTbtOptions.hfr"
form formid = 5203,
  title = STRING_TOKEN(0x2011);
    oneof varid  = SETUP_DATA.ITbtRootPort[2],
      questionid = 5209,
      prompt = STRING_TOKEN(0x2017),
      help = STRING_TOKEN(0x2018),
      option text = STRING_TOKEN(0x0004),  value = 0, flags = RESET_REQUIRED | INTERACTIVE;
      option text = STRING_TOKEN(0x0003),   value = 1, flags = RESET_REQUIRED | INTERACTIVE;
      default     = 1, defaultstore = MyStandardDefault,    
    endoneof;

    subtitle text = STRING_TOKEN(0x202E);
    numeric varid = SETUP_DATA.ITbtPcieExtraBusRsvd[2],
      prompt      = STRING_TOKEN (0x202F),
      help        = STRING_TOKEN (0x201D),
      flags       = RESET_REQUIRED | INTERACTIVE,
      minimum     = 0,
      maximum     = 224,
      step        = 1,    
      default     = 42,   
    endnumeric;

    numeric varid = SETUP_DATA.ITbtPcieMemRsvd[2],
      prompt      = STRING_TOKEN (0x2030),
      help        = STRING_TOKEN (0x201F),
      flags       = RESET_REQUIRED | INTERACTIVE,
      minimum     = 1,
      maximum     = 4096,
      step        = 1,    
      default     = 194,  
    endnumeric;

    numeric varid = SETUP_DATA.ITbtPcieMemAddrRngMax[2],
      prompt      = STRING_TOKEN (0x2031),
      help        = STRING_TOKEN (0x2021),
      flags       = RESET_REQUIRED | INTERACTIVE,
      minimum     = 0,
      maximum     = 31,
      step        = 1,
      default     = 25,   
    endnumeric;

    numeric varid = SETUP_DATA.ITbtPciePMemRsvd[2],
      prompt      = STRING_TOKEN (0x2032),
      help        = STRING_TOKEN (0x2023),
      flags     = RESET_REQUIRED | INTERACTIVE,
      minimum     = 1,
      maximum     = 4096,
      step        = 1,    
      default     = 448,  
    endnumeric;

    numeric varid = SETUP_DATA.ITbtPciePMemAddrRngMax[2],
      prompt      = STRING_TOKEN (0x2033),
      help        = STRING_TOKEN (0x2025),
      flags     = RESET_REQUIRED | INTERACTIVE,
      minimum     = 0,
      maximum     = 31,
      step        = 1,
      default     = 28, 
    endnumeric;

  endform;  
    
#line 284 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\TbtSetup.hfr"
    
    
      #line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\IntegratedTbtOptions.hfr"
form formid = 5204,
  title = STRING_TOKEN(0x2012);
    oneof varid  = SETUP_DATA.ITbtRootPort[3],
      questionid = 5210,
      prompt = STRING_TOKEN(0x2019),
      help = STRING_TOKEN(0x201A),
      option text = STRING_TOKEN(0x0004),  value = 0, flags = RESET_REQUIRED | INTERACTIVE;
      option text = STRING_TOKEN(0x0003),   value = 1, flags = RESET_REQUIRED | INTERACTIVE;
      default     = 1, defaultstore = MyStandardDefault,    
    endoneof;

    subtitle text = STRING_TOKEN(0x2035);
    numeric varid = SETUP_DATA.ITbtPcieExtraBusRsvd[3],
      prompt      = STRING_TOKEN (0x2036),
      help        = STRING_TOKEN (0x201D),
      flags       = RESET_REQUIRED | INTERACTIVE,
      minimum     = 0,
      maximum     = 224,
      step        = 1,    
      default     = 42,   
    endnumeric;

    numeric varid = SETUP_DATA.ITbtPcieMemRsvd[3],
      prompt      = STRING_TOKEN (0x2037),
      help        = STRING_TOKEN (0x201F),
      flags       = RESET_REQUIRED | INTERACTIVE,
      minimum     = 1,
      maximum     = 4096,
      step        = 1,    
      default     = 194,  
    endnumeric;

    numeric varid = SETUP_DATA.ITbtPcieMemAddrRngMax[3],
      prompt      = STRING_TOKEN (0x2038),
      help        = STRING_TOKEN (0x2021),
      flags       = RESET_REQUIRED | INTERACTIVE,
      minimum     = 0,
      maximum     = 31,
      step        = 1,
      default     = 25,   
    endnumeric;

    numeric varid = SETUP_DATA.ITbtPciePMemRsvd[3],
      prompt      = STRING_TOKEN (0x2039),
      help        = STRING_TOKEN (0x2023),
      flags     = RESET_REQUIRED | INTERACTIVE,
      minimum     = 1,
      maximum     = 4096,
      step        = 1,    
      default     = 448,  
    endnumeric;

    numeric varid = SETUP_DATA.ITbtPciePMemAddrRngMax[3],
      prompt      = STRING_TOKEN (0x203A),
      help        = STRING_TOKEN (0x2025),
      flags     = RESET_REQUIRED | INTERACTIVE,
      minimum     = 0,
      maximum     = 31,
      step        = 1,
      default     = 28, 
    endnumeric;

  endform;  
    
#line 287 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\TbtSetup.hfr"
    

    
    
    
    form formid = 5076,
    title = STRING_TOKEN(0x1FBC);

    subtitle text = STRING_TOKEN(0x1FBC);
    subtitle text = STRING_TOKEN(0x0002);
    suppressif ideqval SETUP_DATA.DiscreteTbtSupport == 0;

      oneof varid = SETUP_DATA.TbtBootOn,
        prompt      = STRING_TOKEN(0x1FDF),
        help        = STRING_TOKEN(0x1FE0),
        option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED | INTERACTIVE;
        option text = STRING_TOKEN(0x0003), value = 1, flags = DEFAULT | MANUFACTURING |  RESET_REQUIRED;
      endoneof;

      oneof varid = SETUP_DATA.TbtAcpiRemovalSupport,
        prompt   = STRING_TOKEN(0x1FE3),
        help     = STRING_TOKEN(0x1FE4),
        option text = STRING_TOKEN(0x0004), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003), value = 1, flags = RESET_REQUIRED;
      endoneof;












#line 325 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\TbtSetup.hfr"

      checkbox varid  = SETUP_DATA.Gpio3ForcePwr,
        prompt = STRING_TOKEN(0x1FF7),
        help = STRING_TOKEN(0x1FF8),
        
        
        flags    = 0 | RESET_REQUIRED,
        key      = 0,
      endcheckbox;
#line 335 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\TbtSetup.hfr"
#line 336 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\TbtSetup.hfr"

     oneof varid  = SETUP_DATA.Gpio5Filter,
        prompt = STRING_TOKEN(0x1FE5),
        help = STRING_TOKEN(0x1FE6),
        default = 0, defaultstore = MyStandardDefault,
        option text = STRING_TOKEN(0x0004),   value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),   value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid  = SETUP_DATA.DTbtGo2SxCommand,
        prompt = STRING_TOKEN(0x1FE7),
        help = STRING_TOKEN(0x1FE8),
        default = 1, defaultstore = MyStandardDefault,
        option text = STRING_TOKEN(0x0004),   value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(0x0003),   value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid  = SETUP_DATA.Win10Support,
        questionid  = 5119,
        prompt      = STRING_TOKEN(0x2009),
        help        = STRING_TOKEN(0x200C),
        option text = STRING_TOKEN(0x200B), value = 2, flags = DEFAULT | RESET_REQUIRED | INTERACTIVE;
        option text = STRING_TOKEN(0x200A), value = 0, flags = RESET_REQUIRED | INTERACTIVE;
      endoneof;

    suppressif NOT ideqval TBT_SETUP_VOLATILE_DATA.DTbtContollersNumber >= 1;
      goto 5077,
        prompt = STRING_TOKEN(0x1FBE),
        help = STRING_TOKEN(0x1FBE);
    endif;
    suppressif NOT ideqval TBT_SETUP_VOLATILE_DATA.DTbtContollersNumber >= 2;
      goto 5078,
        prompt = STRING_TOKEN(0x1FBF),
        help = STRING_TOKEN(0x1FBF);
    endif;

    endif; 
    endform;  

    #line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\dTbtStringPool.hfr"

































































#line 376 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\TbtSetup.hfr"
    
      #line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\DiscreteTbtOptions.hfr"


































#line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\DiscreteTbtResourcesInitValues.h"





























































#line 63 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\DiscreteTbtResourcesInitValues.h"
#line 36 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\DiscreteTbtOptions.hfr"

form formid = 5077,
  title = STRING_TOKEN(0x1FBE);
    oneof varid  = SETUP_DATA.DTbtController[0],
      questionid = 5080,
      prompt = STRING_TOKEN(0x1FE9),
      help = STRING_TOKEN(0x1FEA),
      option text = STRING_TOKEN(0x0004),   value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED | INTERACTIVE;
      option text = STRING_TOKEN(0x0003),   value = 1, flags = RESET_REQUIRED | INTERACTIVE;
    endoneof;


    suppressif (NOT ideqval SETUP_DATA.TbtSetupDTbtPegTypeSupport == 1);
      oneof varid  = SETUP_DATA.DTbtControllerType[0],
        questionid = 5095,
        prompt = STRING_TOKEN(0x1FEE),
        help = STRING_TOKEN(0x1FEF),
        option text = STRING_TOKEN(0x1FF0),   value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED | INTERACTIVE;
        option text = STRING_TOKEN(0x1FF1),   value = 2, flags = RESET_REQUIRED | INTERACTIVE;
      endoneof;
    endif; 

    oneof varid  = SETUP_DATA.DTbthostRouterPortNumber[0],
      questionid = 5085,
      prompt = STRING_TOKEN(0x1FF2),
      help = STRING_TOKEN(0x1FF4),
      option text = STRING_TOKEN(0x1FF5),   value = 1, flags = DEFAULT | MANUFACTURING |RESET_REQUIRED| INTERACTIVE;
      option text = STRING_TOKEN(0x1FF6),   value = 2, flags = RESET_REQUIRED| INTERACTIVE;
    endoneof;

    numeric varid = SETUP_DATA.DTbtPcieExtraBusRsvd[0],
      prompt      = STRING_TOKEN (0x1FF9),
      help        = STRING_TOKEN (0x1FFA),
      flags       = RESET_REQUIRED | INTERACTIVE,
      minimum     = 0,
      maximum     = 255,
      step        = 1,    
      default     = 56,
    endnumeric;

    numeric varid = SETUP_DATA.DTbtPcieMemRsvd[0],
      prompt      = STRING_TOKEN (0x1FFB),
      help        = STRING_TOKEN (0x1FFC),
      flags       = RESET_REQUIRED | INTERACTIVE,
      minimum     = 1,
      maximum     = 4096,
      step        = 1,    
      default     = 356,
    endnumeric;

    numeric varid = SETUP_DATA.DTbtPcieMemAddrRngMax[0],
      prompt      = STRING_TOKEN (0x1FFD),
      help        = STRING_TOKEN (0x1FFE),
      flags       = RESET_REQUIRED | INTERACTIVE,
      minimum     = 0,
      maximum     = 31,
      step        = 1,
      default     = 26,
    endnumeric;

    numeric varid = SETUP_DATA.DTbtPciePMemRsvd[0],
      prompt      = STRING_TOKEN (0x1FFF),
      help        = STRING_TOKEN (0x2000),
      flags     = RESET_REQUIRED | INTERACTIVE,
      minimum     = 1,
      maximum     = 4096,
      step        = 1,    
      default     = 544,
    endnumeric;

    numeric varid = SETUP_DATA.DTbtPciePMemAddrRngMax[0],
    prompt      = STRING_TOKEN (0x2001),
      help        = STRING_TOKEN (0x2002),
      flags     = RESET_REQUIRED | INTERACTIVE,
      minimum     = 0,
      maximum     = 31,
      step        = 1,
      default     = 28,
    endnumeric;

  endform;  
#line 118 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\DiscreteTbtOptions.hfr"
#line 378 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\TbtSetup.hfr"
    
    
      #line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\DiscreteTbtOptions.hfr"




































form formid = 5078,
  title = STRING_TOKEN(0x1FBF);
    oneof varid  = SETUP_DATA.DTbtController[1],
      questionid = 5081,
      prompt = STRING_TOKEN(0x1FEB),
      help = STRING_TOKEN(0x1FEC),
      option text = STRING_TOKEN(0x0004),   value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED | INTERACTIVE;
      option text = STRING_TOKEN(0x0003),   value = 1, flags = RESET_REQUIRED | INTERACTIVE;
    endoneof;


    suppressif (NOT ideqval SETUP_DATA.TbtSetupDTbtPegTypeSupport == 1);
      oneof varid  = SETUP_DATA.DTbtControllerType[1],
        questionid = 5096,
        prompt = STRING_TOKEN(0x1FEE),
        help = STRING_TOKEN(0x1FEF),
        option text = STRING_TOKEN(0x1FF0),   value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED | INTERACTIVE;
        option text = STRING_TOKEN(0x1FF1),   value = 2, flags = RESET_REQUIRED | INTERACTIVE;
      endoneof;
    endif; 

    oneof varid  = SETUP_DATA.DTbthostRouterPortNumber[1],
      questionid = 5086,
      prompt = STRING_TOKEN(0x1FF3),
      help = STRING_TOKEN(0x1FF4),
      option text = STRING_TOKEN(0x1FF5),   value = 1, flags = DEFAULT | MANUFACTURING |RESET_REQUIRED| INTERACTIVE;
      option text = STRING_TOKEN(0x1FF6),   value = 2, flags = RESET_REQUIRED| INTERACTIVE;
    endoneof;

    numeric varid = SETUP_DATA.DTbtPcieExtraBusRsvd[1],
      prompt      = STRING_TOKEN (0x2003),
      help        = STRING_TOKEN (0x1FFA),
      flags       = RESET_REQUIRED | INTERACTIVE,
      minimum     = 0,
      maximum     = 255,
      step        = 1,    
      default     = 56,
    endnumeric;

    numeric varid = SETUP_DATA.DTbtPcieMemRsvd[1],
      prompt      = STRING_TOKEN (0x2004),
      help        = STRING_TOKEN (0x1FFC),
      flags       = RESET_REQUIRED | INTERACTIVE,
      minimum     = 1,
      maximum     = 4096,
      step        = 1,    
      default     = 356,
    endnumeric;

    numeric varid = SETUP_DATA.DTbtPcieMemAddrRngMax[1],
      prompt      = STRING_TOKEN (0x2005),
      help        = STRING_TOKEN (0x1FFE),
      flags       = RESET_REQUIRED | INTERACTIVE,
      minimum     = 0,
      maximum     = 31,
      step        = 1,
      default     = 26,
    endnumeric;

    numeric varid = SETUP_DATA.DTbtPciePMemRsvd[1],
      prompt      = STRING_TOKEN (0x2006),
      help        = STRING_TOKEN (0x2000),
      flags     = RESET_REQUIRED | INTERACTIVE,
      minimum     = 1,
      maximum     = 4096,
      step        = 1,    
      default     = 544,
    endnumeric;

    numeric varid = SETUP_DATA.DTbtPciePMemAddrRngMax[1],
    prompt      = STRING_TOKEN (0x2007),
      help        = STRING_TOKEN (0x2002),
      flags     = RESET_REQUIRED | INTERACTIVE,
      minimum     = 0,
      maximum     = 31,
      step        = 1,
      default     = 28,
    endnumeric;

  endform;  
#line 118 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\DiscreteTbtOptions.hfr"
#line 381 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\TbtSetup.hfr"
    
#line 383 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\TbtSetup.hfr"
#line 493 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\Advanced.vfr"
  #line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\IccSetup.hfr"

































  form formid = 5001,
    title = STRING_TOKEN(0x07A0);

    text
      help  = STRING_TOKEN(0x07A2),
      text  = STRING_TOKEN(0x07A1),
      text  = STRING_TOKEN(0x07A3);

    subtitle text = STRING_TOKEN(0x0002);

    
    
    
    subtitle text = STRING_TOKEN(0x07A5);
      text
        help  = STRING_TOKEN(0x0851),
        text  = STRING_TOKEN(0x09D4),
        text  = STRING_TOKEN(0x09D5),
        flags = 0,
        key   = 0;

    subtitle text = STRING_TOKEN(0x0002);

    suppressif ideqval SETUP_DATA.DccClkCtrl == 0;
      text
        help  = STRING_TOKEN(0x0851),
        text  = STRING_TOKEN(0x07A6),
        text  = STRING_TOKEN(0x07A7),
        flags = 0,
        key   = 0;

      numeric varid = SETUP_DATA.CpuBclkFreq,
        prompt      = STRING_TOKEN (0x07A8),
          help        = STRING_TOKEN (0x07A9),
          flags       = DISPLAY_UINT_DEC | RESET_REQUIRED,
          minimum     = 80,
          maximum     = 530,
          step        = 1,
          default     = 100,
        endnumeric;

      text
        help  = STRING_TOKEN(0x0851),
        text  = STRING_TOKEN(0x07AA),
        text  = STRING_TOKEN(0x07AB),
        flags = 0,
        key   = 0;

      numeric varid = SETUP_DATA.PegDmiClkFreq,
        prompt      = STRING_TOKEN (0x07AC),
          help        = STRING_TOKEN (0x07AD),
          flags       = DISPLAY_UINT_DEC | RESET_REQUIRED,
          minimum     = 80,
          maximum     = 200,
          step        = 1,
          default     = 100,
        endnumeric;
    endif;

  endform;
#line 494 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\Advanced.vfr"




#line 499 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\Advanced.vfr"

  #line 1 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\StatusCodeSetup.hfr"

































form formid = 4319,
  title     = STRING_TOKEN(0x1F7F);

  subtitle text = STRING_TOKEN(0x1F7F);
  subtitle text = STRING_TOKEN(0x0002);

  checkbox varid = DEBUG_CONFIG_DATA.RamDebugInterface,
    prompt       = STRING_TOKEN(0x1F91),
    help         = STRING_TOKEN(0x1F81),
    flags        = RESET_REQUIRED,
    key          = 0,
  endcheckbox;
  checkbox varid = DEBUG_CONFIG_DATA.UartDebugInterface,
    prompt       = STRING_TOKEN(0x1F92),
    help         = STRING_TOKEN(0x1F81),

    flags        = CHECKBOX_DEFAULT | RESET_REQUIRED,


#line 54 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\StatusCodeSetup.hfr"
    key          = 1,
  endcheckbox;
  checkbox varid = DEBUG_CONFIG_DATA.Usb3DebugInterface,
    prompt       = STRING_TOKEN(0x1F93),
    help         = STRING_TOKEN(0x1F81),
    flags        = RESET_REQUIRED,
    key          = 0,
  endcheckbox;
  checkbox varid = DEBUG_CONFIG_DATA.SerialIoDebugInterface,
    prompt       = STRING_TOKEN(0x1F94),
    help         = STRING_TOKEN(0x1F81),

    flags        = CHECKBOX_DEFAULT | RESET_REQUIRED,


#line 70 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\StatusCodeSetup.hfr"
    key          = 1,
  endcheckbox;
  checkbox varid = DEBUG_CONFIG_DATA.TraceHubDebugInterface,
    prompt       = STRING_TOKEN(0x1F95),
    help         = STRING_TOKEN(0x1F81),
    flags        = CHECKBOX_DEFAULT | RESET_REQUIRED,
    key          = 0,
  endcheckbox;


    
    oneof varid   = DEBUG_CONFIG_DATA.SerialDebugMrcLevel,
      prompt      = STRING_TOKEN(0x1F84),
      help        = STRING_TOKEN(0x1F85),
      option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x1F8C), value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x1F8D), value = 2, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x1F8E), value = 3, flags = DEFAULT | RESET_REQUIRED;
      option text = STRING_TOKEN(0x1F8F), value = 4, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x1F90), value = 5, flags = RESET_REQUIRED;
    endoneof;
    #line 92 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\StatusCodeSetup.hfr"

    oneof varid   = DEBUG_CONFIG_DATA.SerialDebug,
      prompt      = STRING_TOKEN(0x1F82),
      help        = STRING_TOKEN(0x1F83),
      default     = 3, defaultstore = MyStandardDefault,
      option text = STRING_TOKEN(0x0004), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x1F8C), value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x1F8D), value = 2, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x1F8E), value = 3, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x1F8F), value = 4, flags = RESET_REQUIRED;
      option text = STRING_TOKEN(0x1F90), value = 5, flags = RESET_REQUIRED;
    endoneof;

    oneof varid   = DEBUG_CONFIG_DATA.SerialDebugBaudRate,
      prompt      = STRING_TOKEN (0x1F86),
      help        = STRING_TOKEN (0x1F87),
      option text = STRING_TOKEN (0x1F88), value = 3, flags = 0;
      option text = STRING_TOKEN (0x1F89), value = 4, flags = 0;
      option text = STRING_TOKEN (0x1F8A), value = 6, flags = 0;
      option text = STRING_TOKEN (0x1F8B), value = 7, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;
#line 114 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\StatusCodeSetup.hfr"

  subtitle text = STRING_TOKEN(0x0002);

  suppressif ideqval DEBUG_CONFIG_DATA.SerialIoDebugInterface == 0;
    subtitle text = STRING_TOKEN (0x1F96);
    oneof varid   = DEBUG_CONFIG_DATA.SerialIoUartDebugControllerNumber,
      prompt      = STRING_TOKEN (0x1FB5),
      help        = STRING_TOKEN (0x1FB6),


#line 125 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\StatusCodeSetup.hfr"
      default     = 2, defaultstore = MyStandardDefault,
#line 127 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\StatusCodeSetup.hfr"
      option text = STRING_TOKEN (0x1FB7), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN (0x1FB8), value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN (0x1FB9), value = 2, flags = RESET_REQUIRED;
    endoneof;
    oneof varid   = DEBUG_CONFIG_DATA.SerialIoUartDebugBaudRate,
      prompt      = STRING_TOKEN (0x1F98),
      help        = STRING_TOKEN (0x1F99),
      option text = STRING_TOKEN (0x1F88), value = 9600, flags = RESET_REQUIRED;
      option text = STRING_TOKEN (0x1F89), value = 19200, flags = RESET_REQUIRED;
      option text = STRING_TOKEN (0x1F8A), value = 57600, flags = RESET_REQUIRED;
      option text = STRING_TOKEN (0x1F8B), value = 115200, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN (0x1F9A), value = 460800, flags = RESET_REQUIRED;
      option text = STRING_TOKEN (0x1F9B), value = 921600, flags = RESET_REQUIRED;
      option text = STRING_TOKEN (0x1F9C), value = 1500000, flags = RESET_REQUIRED;
      option text = STRING_TOKEN (0x1F9D), value = 1843200, flags = RESET_REQUIRED;
      option text = STRING_TOKEN (0x1F9E), value = 3000000, flags = RESET_REQUIRED;
      option text = STRING_TOKEN (0x1F9F), value = 3686400, flags = RESET_REQUIRED;
      option text = STRING_TOKEN (0x1FA0), value = 6000000, flags = RESET_REQUIRED;
    endoneof;
    oneof varid   = DEBUG_CONFIG_DATA.SerialIoUartDebugStopBits,
      prompt      = STRING_TOKEN (0x1FA1),
      help        = STRING_TOKEN (0x1FA2),
      option text = STRING_TOKEN (0x1FA3), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN (0x1FA4), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN (0x1FA5), value = 2, flags = RESET_REQUIRED;
      option text = STRING_TOKEN (0x1FA6), value = 3, flags = RESET_REQUIRED;
    endoneof;
    oneof varid   = DEBUG_CONFIG_DATA.SerialIoUartDebugParity,
      prompt      = STRING_TOKEN (0x1FA7),
      help        = STRING_TOKEN (0x1FA8),
      option text = STRING_TOKEN (0x1FA9), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN (0x1FAA), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN (0x1FAB), value = 2, flags = RESET_REQUIRED;
      option text = STRING_TOKEN (0x1FAC), value = 3, flags = RESET_REQUIRED;
    endoneof;
    checkbox varid = DEBUG_CONFIG_DATA.SerialIoUartDebugFlowControl,
      prompt       = STRING_TOKEN(0x1FAD),
      help         = STRING_TOKEN(0x1FAE),
      flags        = RESET_REQUIRED,
      key          = 0,
    endcheckbox;
    oneof varid   = DEBUG_CONFIG_DATA.SerialIoUartDebugDataBits,
      prompt      = STRING_TOKEN (0x1FAF),
      help        = STRING_TOKEN (0x1FB0),
      option text = STRING_TOKEN (0x1FB1), value = 5, flags = RESET_REQUIRED;
      option text = STRING_TOKEN (0x1FB2), value = 6, flags = RESET_REQUIRED;
      option text = STRING_TOKEN (0x1FB3), value = 7, flags = RESET_REQUIRED;
      option text = STRING_TOKEN (0x1FB4), value = 8, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;
  endif;

  suppressif ideqval DEBUG_CONFIG_DATA.SerialIoDebugInterface == 1;
    subtitle text = STRING_TOKEN(0x1F97);
  endif;

endform;
#line 501 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\Advanced.vfr"
#line 502 "c:\\data\\alderlake\\Intel\\AlderLakePlatSamplePkg\\Setup\\Advanced.vfr"

endformset;
