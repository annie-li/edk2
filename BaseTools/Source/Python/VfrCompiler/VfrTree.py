from CommonCtypes import *
from VfrFormPkg import *
from antlr4 import*
from CommonCtypes import *
import yaml
# Ifr related Info -> ctypes obj
#ã€€conditional Info
# Structure Info

VFR_COMPILER_VERSION = "2.01 (UEFI 2.4)"
BUILD_VERSION = 'Developer Build based on Revision: Unknown'
class VfrTreeNode():

    def __init__(self, OpCode=None, Data=None, Buffer=None) -> None:

        self.OpCode = OpCode
        self.Data = Data
        self.Buffer = Buffer
        self.Condition = None
        self.Offset = None
        self.Parent = None
        self.Child = []

    def hasCondition(self) -> bool:
        if self.Condition == None:
            return False
        else:
            return True

    def hasChild(self) -> bool:
        if self.Child == []:
            return False
        else:
            return True

    def isFinalChild(self) -> bool:
        ParTree = self.Parent
        if ParTree:
            if ParTree.Child[-1] == self:
                return True
        return False

    def insertChild(self, NewNode, pos: int = None) -> None:
        if NewNode != None:
            if not pos:
                self.Child.append(NewNode)
            else:
                self.Child.insert(pos, NewNode)

            NewNode.Parent = self

    # lastNode.insertRel(newNode)
    def insertRel(self, newNode) -> None:
        if self.Parent:
            parentTree = self.Parent
            new_index = parentTree.Child.index(self) + 1
            parentTree.Child.insert(new_index, newNode)
        self.NextRel = newNode
        newNode.LastRel = self

    def deleteNode(self, deletekey: str) -> None:
        FindStatus, DeleteTree = self.FindNode(deletekey)
        if FindStatus:
            parentTree = DeleteTree.Parent
            lastTree = DeleteTree.LastRel
            nextTree = DeleteTree.NextRel
            if parentTree:
                index = parentTree.Child.index(DeleteTree)
                del parentTree.Child[index]
            if lastTree and nextTree:
                lastTree.NextRel = nextTree
                nextTree.LastRel = lastTree
            elif lastTree:
                lastTree.NextRel = None
            elif nextTree:
                nextTree.LastRel = None
            return DeleteTree
        else:
            print('Could not find the target tree')
            return None

ExpOps = [EFI_IFR_DUP_OP, EFI_IFR_EQ_ID_VAL_OP, EFI_IFR_QUESTION_REF1_OP, EFI_IFR_EQ_ID_VAL_OP, EFI_IFR_EQ_ID_ID_OP, EFI_IFR_EQ_ID_VAL_LIST_OP, EFI_IFR_RULE_REF_OP, EFI_IFR_STRING_REF1_OP, EFI_IFR_THIS_OP, EFI_IFR_SECURITY_OP, EFI_IFR_GET_OP, EFI_IFR_TRUE_OP, EFI_IFR_FALSE_OP, EFI_IFR_ONE_OP, EFI_IFR_ONES_OP, EFI_IFR_ZERO_OP, EFI_IFR_UNDEFINED_OP, EFI_IFR_VERSION_OP, EFI_IFR_UINT64_OP, EFI_IFR_QUESTION_REF2_OP, EFI_IFR_QUESTION_REF3_OP, EFI_IFR_SET_OP, EFI_IFR_DEFAULTSTORE_OP, EFI_IFR_OR_OP]
class VfrTree():
    def __init__(self, Root: VfrTreeNode) -> None:
        self.__Root = Root

    def GenBinaryFiles(self, InputFile):

        # GenBinary
        PkgHdr = gFormPkg.BuildPkgHdr()
        try:
            HpkFile = InputFile[:InputFile.find('.')] + '.hpk'
            Hpk = open(HpkFile, 'wb')
            Hpk.write(gFormPkg.StructToStream(PkgHdr))
        except:
            EdkLogger.error("VfrCompiler", FILE_OPEN_FAILURE, "File open failed for %s" % HpkFile, None)

        #GenCFile
        try:
            CFile = InputFile[:InputFile.find('.')] + '.c'
            C = open(CFile, 'w')
            C.write('//\n')
            C.write('//' + ' ' + 'DO NOT EDIT -- auto-generated file\n')
            C.write('//\n')
            C.write('//' + ' ' + 'This file is generated by the vfrcompiler utility\n')

            BaseName = 'unsigned char ' + InputFile[:InputFile.find('.')] + 'Bin[] = {\n'
            C.write(BaseName)
            C.write('  //' + ' ' + 'ARRAY LENGTH\n')
            PkgLength = PkgHdr.Length + sizeof(ctypes.c_uint32)
            for B in PkgLength.to_bytes(4, byteorder='little', signed=True):
                C.write('  0x%02x,'%B)
            C.write('\n')
            C.write('  //' + ' ' + 'PACKAGE HEADER\n')
            HeaderBuffer = gFormPkg.StructToStream(PkgHdr)
            for B in HeaderBuffer:
                C.write('  0x%02x,'%B)
            C.write('\n')
            C.write('  //' + ' ' + 'PACKAGE DATA\n')
            self.__Index = 0
        except:
            EdkLogger.error("VfrCompiler", FILE_OPEN_FAILURE, "File open failed for %s" % CFile, None)

        # GenRecordList
        try:
            LstFile = InputFile[:InputFile.find('.')] + '.lst'
            Lst = open(LstFile, 'w')
            Lst.write('//\n//  VFR compiler version {} {}\n//\n'.format(VFR_COMPILER_VERSION, BUILD_VERSION))
            RecordLines = []
        except:
            EdkLogger.error("VfrCompiler", FILE_OPEN_FAILURE, "File open failed for %s" % LstFile, None)

        self.GenBinaryFilesDfs(self.__Root, Hpk, C, RecordLines, InputFile)

        #GenCFile
        try:
            C.write('\n};\n')
        except:
            EdkLogger.error("VfrCompiler", FILE_WRITE_FAILURE, "File write failed for %s" % CFile, None)


        # GenRecordList
        try:
            In = open(InputFile, 'r')
            InFileLines = []
            for Line in In:
                InFileLines.append(Line)
        except:
            EdkLogger.error("VfrCompiler", FILE_OPEN_FAILURE, "File open failed for %s" % InputFile, None)

        try:
            InsertedLine = 0
            for RecordLine in RecordLines:
                InFileLines.insert(RecordLine.LineNo + InsertedLine, RecordLine.Record)
                InsertedLine += 1
            for Line in InFileLines:
                Lst.write('{}'.format(Line))

            Lst.write('//\n//  All Opcode Record List\n//\n')
            for RecordLine in RecordLines:
                Lst.write('{}'.format(RecordLine.Record))
            Lst.write('\nTotal Size of all record is' + ' {:0>8d}'.format(gFormPkg.Offset))
            gVfrVarDataTypeDB.Dump(Lst)
        except:
            EdkLogger.error("VfrCompiler", FILE_WRITE_FAILURE, "File write failed for %s" % LstFile, None)

        In.close()
        Hpk.close()
        C.close()
        Lst.close()

    def GenBinaryFilesDfs(self, Root, Hpk, C, RecordLines, InputFile):
        if Root.OpCode != None:

            if Root.OpCode in ExpOps:
                # The Data is likely to be modified, so generate buffer here
                Root.Buffer = gFormPkg.StructToStream(Root.Data.GetInfo())
            if Root.Buffer != None:
                try:
                    Hpk.write(Root.Buffer)
                except:
                    EdkLogger.error("VfrCompiler", FILE_WRITE_FAILURE, "File write failed for %s" % (InputFile[:InputFile.find('.')] + '.hpk'), None)

                try:
                    LineBuffer = ''
                    for i in range(0, len(Root.Buffer)):

                        self.__Index += 1
                        Data = Root.Buffer[i]
                        if self.__Index == gFormPkg.PkgLength:
                            C.write('0x%02x'%Data)
                        elif self.__Index % BYTES_PRE_LINE == 1:
                            C.write('  0x%02x,  '%Data)
                        elif self.__Index % BYTES_PRE_LINE == 0:
                            C.write('0x%02x,\n'%Data)
                        else:
                            C.write('0x%02x,  '%Data)

                        LineBuffer += '{:0>2X} '.format(Root.Buffer[i])

                    Record = '>{:0>8d}: '.format(Root.Offset) + LineBuffer + '\n'
                    LineNo = Root.Data.GetLineNo()
                    RecordLines.append(ReCordNode(Record, LineNo))
                except:
                    EdkLogger.error("VfrCompiler", FILE_WRITE_FAILURE, "File write failed for %s" % (InputFile[:InputFile.find('.')] + '.c'), None)


        if Root.Child != []:
            for ChildNode in Root.Child:
                self.GenBinaryFilesDfs(ChildNode, Hpk, C, RecordLines, InputFile)


    def GenBinary(self, InputFile):
        FileName = InputFile[:InputFile.find('.')] + '.hpk'

        try:
            with open(FileName, 'wb') as f:
                PkgHdr = gFormPkg.BuildPkgHdr()
                f.write(gFormPkg.StructToStream(PkgHdr))
                self.GenBinaryDfs(self.__Root, f, InputFile)
            f.close()
        except:
            EdkLogger.error("VfrCompiler", FILE_OPEN_FAILURE, "File open failed for %s" % FileName, None)

    def GenBinaryDfs(self, Root, f, InputFile):
        if Root.OpCode != None:
            if Root.OpCode in ExpOps:
                # The Data is likely to be modified, so generate buffer here
                Root.Buffer = gFormPkg.StructToStream(Root.Data.GetInfo())

            if Root.Buffer != None:
                try:
                    f.write(Root.Buffer)
                except:
                    EdkLogger.error("VfrCompiler", FILE_WRITE_FAILURE, "File write failed for %s" % (InputFile[:InputFile.find('.')] + '.hpk'), None)
            #gFormPkg.PkgLength += 1

        if Root.Child != []:
            for ChildNode in Root.Child:
                self.GenBinaryDfs(ChildNode, f, InputFile)

    def GenCFile(self, InputFile):
        FileName = InputFile[:InputFile.find('.')] + '.c'
        try:
            with open(FileName, 'w') as f:
                PkgHdr = gFormPkg.BuildPkgHdr()
                f.write('//\n')
                f.write('//' + ' ' + 'DO NOT EDIT -- auto-generated file\n')
                f.write('//\n')
                f.write('//' + ' ' + 'This file is generated by the vfrcompiler utility\n')

                BaseName = 'unsigned char ' + InputFile[:InputFile.find('.')] + 'Bin[] = {\n'
                f.write(BaseName)
                f.write('  //' + ' ' + 'ARRAY LENGTH\n')
                PkgLength = PkgHdr.Length + sizeof(ctypes.c_uint32)
                for B in PkgLength.to_bytes(4, byteorder='little', signed=True):
                    f.write('  0x%02x,'%B)
                f.write('\n')
                f.write('  //' + ' ' + 'PACKAGE HEADER\n')
                HeaderBuffer = gFormPkg.StructToStream(PkgHdr)
                for B in HeaderBuffer:
                    f.write('  0x%02x,'%B)
                f.write('\n')
                f.write('  //' + ' ' + 'PACKAGE DATA\n')
                self.__Index = 0
                self.GenCFileDfs(self.__Root, gFormPkg.PkgLength, f, InputFile)
                f.write('\n};\n')
            f.close()
        except:
            EdkLogger.error("VfrCompiler", FILE_OPEN_FAILURE, "File open failed for %s" % FileName, None)

    def GenCFileDfs(self, Root, Length, f, InputFile):
        if Root.OpCode != None:
            if Root.Buffer != None:
                try:
                    for i in range(0, len(Root.Buffer)):

                        self.__Index += 1
                        Data = Root.Buffer[i]
                        if self.__Index == Length:
                            f.write('0x%02x'%Data)
                        elif self.__Index % BYTES_PRE_LINE == 1:
                            f.write('  0x%02x,  '%Data)
                        elif self.__Index % BYTES_PRE_LINE == 0:
                            f.write('0x%02x,\n'%Data)
                        else:
                            f.write('0x%02x,  '%Data)
                except:
                    EdkLogger.error("VfrCompiler", FILE_WRITE_FAILURE, "File write failed for %s" % (InputFile[:InputFile.find('.')] + '.c'), None)

        if Root.Child != []:
            for ChildNode in Root.Child:
                self.GenCFileDfs(ChildNode, Length, f, InputFile)


    def GenRecordListFile(self, InputFile):
        FileName = InputFile[:InputFile.find('.')] + '.lst'
        try:
            In = open(InputFile, 'r')
        except:
            EdkLogger.error("VfrCompiler", FILE_OPEN_FAILURE, "File open failed for %s" % InputFile, None)
        InFileLines = []
        for Line in In:
            InFileLines.append(Line)

        RecordLines = []
        self.GenRecordListFileDfs(self.__Root, RecordLines)

        InsertedLine = 0
        for RecordLine in RecordLines:
            InFileLines.insert(RecordLine.LineNo + InsertedLine, RecordLine.Record)
            InsertedLine += 1

        try:
            Out = open(FileName, 'w')
        except:
            EdkLogger.error("VfrCompiler", FILE_OPEN_FAILURE, "File open failed for %s" % InputFile, None)

        try:
            Out.write('//\n//  VFR compiler version {} {}\n//\n'.format(VFR_COMPILER_VERSION, BUILD_VERSION))
            for Line in InFileLines:
                Out.write('{}'.format(Line))

            Out.write('//\n//  All Opcode Record List\n//\n')
            for RecordLine in RecordLines:
                Out.write('{}'.format(RecordLine.Record))
            Out.write('\nTotal Size of all record is' + ' {:0>8d}'.format(gFormPkg.Offset))
            gVfrVarDataTypeDB.Dump(Out)
            In.close()
            Out.close()
        except:
            EdkLogger.error("VfrCompiler", FILE_WRITE_FAILURE, "File write failed for %s" % (InputFile[:InputFile.find('.')] + '.lst'), None)

    def GenRecordListFileDfs(self, Root, RecordLines):
        if Root.OpCode != None:
            #f.write('{}\n'.format(type(Root.Data)))
            LineBuffer = ''
            if Root.Buffer != None:
                for i in range(0, len(Root.Buffer)):
                    LineBuffer += '{:0>2X} '.format(Root.Buffer[i])

                Record = '>{:0>8d}: '.format(Root.Offset) + LineBuffer + '\n'
                LineNo = Root.Data.GetLineNo()
                RecordLines.append(ReCordNode(Record, LineNo))

        if Root.Child != []:
            for ChildNode in Root.Child:
                self.GenRecordListFileDfs(ChildNode, RecordLines)

    def DumpJson(self, InputFile):
        FileName = InputFile[:InputFile.find('.')] + '.json'
        try:
            with open(FileName, 'w') as f:
                f.write('{\n')
                f.write('  \"DataStruct\" : {\n')
                pNode = gVfrVarDataTypeDB.GetDataTypeList()
                while pNode != None:
                    f.write('    \"{}\" : [\n'.format(str(pNode.TypeName)))
                    FNode = pNode.Members
                    while FNode != None:
                        f.write('      {\n')
                        f.write('        \"Name\": \"{}\",\n'.format(str(FNode.FieldName)))
                        if FNode.ArrayNum > 0:
                            f.write('        \"Type\": \"{}[{}]\",\n'.format(str(FNode.FieldType.TypeName),str(FNode.ArrayNum)))
                        else:
                            f.write('        \"Type\": \"{}\",\n'.format(str(FNode.FieldType.TypeName)))
                        f.write('        \"Offset\": {}\n'.format(str(FNode.Offset)))
                        if FNode.Next == None:
                            f.write('      }\n')
                        else:
                            f.write('      }, \n')
                        FNode = FNode.Next
                    if pNode.Next == None:
                        f.write('    ]\n')
                    else:
                        f.write('    ],\n')
                    pNode = pNode.Next
                f.write('  },\n')
                f.write('  \"DataStructAttribute\": {\n')
                pNode = gVfrVarDataTypeDB.GetDataTypeList()
                while pNode != None:
                    f.write('    \"{}\"'.format(str(pNode.TypeName)) + ': {\n')
                    f.write('        \"Alignment\": {},\n'.format(str(pNode.Align)))
                    f.write('        \"TotalSize\": {}\n'.format(str(pNode.TotalSize)))
                    if pNode.Next == None:
                        f.write('      }\n')
                    else:
                        f.write('      },\n')
                    pNode = pNode.Next
                f.write('  },\n')
                f.write('  \"VarDefine\" : {\n')
                pVsNode = gVfrDataStorage.GetBufferVarStoreList()
                while pVsNode != None:
                    f.write('    \"{}\"'.format(str(pVsNode.VarStoreName)) + ': {\n')
                    f.write('        \"Type\": \"{}\",\n'.format(str(pVsNode.DataType.TypeName)))
                    f.write('        \"Attributes\": {},\n'.format(str(pVsNode.Attributes)))
                    f.write('        \"VarStoreId\": {},\n'.format(str(pVsNode.VarStoreId)))
                    f.write('        \"VendorGuid\": ' + '\"{}, {}, {},'.format('0x%x'%(pVsNode.Guid.Data1),'0x%x'%(pVsNode.Guid.Data2), '0x%x'%(pVsNode.Guid.Data3)) \
                    + ' { ' +  '{}, {}, {}, {}, {}, {}, {}, {}'.format('0x%x'%(pVsNode.Guid.Data4[0]), '0x%x'%(pVsNode.Guid.Data4[1]), '0x%x'%(pVsNode.Guid.Data4[2]), '0x%x'%(pVsNode.Guid.Data4[3]), \
                    '0x%x'%(pVsNode.Guid.Data4[4]), '0x%x'%(pVsNode.Guid.Data4[5]), '0x%x'%(pVsNode.Guid.Data4[6]), '0x%x'%(pVsNode.Guid.Data4[7])) + ' }}\"\n')
                    if pVsNode.Next == None:
                        f.write('      }\n')
                    else:
                        f.write('      },\n')

                    pVsNode = pVsNode.Next
                f.write('  },\n')
                f.write('  \"Data\" : [\n')
                pVsNode = gVfrBufferConfig.GetVarItemList()
                while pVsNode != None:
                    if pVsNode.Id == None:
                        pVsNode = pVsNode.Next
                        continue
                    pInfoNode = pVsNode.InfoStrList
                    while pInfoNode != None:
                        f.write('      {\n')
                        f.write('        \"VendorGuid\": ' + '\"{}, {}, {},'.format('0x%x'%(pVsNode.Guid.Data1),'0x%x'%(pVsNode.Guid.Data2), '0x%x'%(pVsNode.Guid.Data3)) \
                        + ' { ' +  '{}, {}, {}, {}, {}, {}, {}, {}'.format('0x%x'%(pVsNode.Guid.Data4[0]), '0x%x'%(pVsNode.Guid.Data4[1]), '0x%x'%(pVsNode.Guid.Data4[2]), '0x%x'%(pVsNode.Guid.Data4[3]), \
                        '0x%x'%(pVsNode.Guid.Data4[4]), '0x%x'%(pVsNode.Guid.Data4[5]), '0x%x'%(pVsNode.Guid.Data4[6]), '0x%x'%(pVsNode.Guid.Data4[7])) + ' }}\",\n')
                        f.write('        \"VarName\": \"{}\",\n'.format(str(pVsNode.Name)))
                        f.write('        \"DefaultStore\": \"{}\",\n'.format(str(pVsNode.Id)))
                        f.write('        \"Size\": \"{}\",\n'.format(str(pInfoNode.Width)))
                        f.write('        \"Offset\": {},\n'.format(str(pInfoNode.Offset)))
                        #f.write('        \"Value\": \"{}\"\n'.format(str(pInfoNode.Value)))
                        if pInfoNode.Type == EFI_IFR_TYPE_DATE:
                            f.write('        \"Value\": \"{}/{}/{}\"\n'.format(pInfoNode.Value.Year, pInfoNode.Value.Month, pInfoNode.Value.Day))
                        elif pInfoNode.Type == EFI_IFR_TYPE_TIME:
                            f.write('        \"Value\": \"{}:{}:{}\"\n'.format(pInfoNode.Value.Hour, pInfoNode.Value.Minute, pInfoNode.Value.Second))
                        elif pInfoNode.Type == EFI_IFR_TYPE_REF:
                            f.write('        \"Value\": \"{};{};'.format(pInfoNode.Value.QuestionId, pInfoNode.Value.FormId) +  '{' + '{}, {}, {},'.format('0x%x'%(pInfoNode.Value.FormSetGuid.Data1),'0x%x'%(pInfoNode.Value.FormSetGuid.Data2), '0x%x'%(pInfoNode.Value.FormSetGuid.Data3)) \
                            + ' { ' +  '{}, {}, {}, {}, {}, {}, {}, {}'.format('0x%x'%(pInfoNode.Value.FormSetGuid.Data4[0]), '0x%x'%(pInfoNode.Value.FormSetGuid.Data4[1]), '0x%x'%(pInfoNode.Value.FormSetGuid.Data4[2]), '0x%x'%(pInfoNode.Value.FormSetGuid.Data4[3]), \
                            '0x%x'%(pInfoNode.Value.FormSetGuid.Data4[4]), '0x%x'%(pInfoNode.Value.FormSetGuid.Data4[5]), '0x%x'%(pInfoNode.Value.FormSetGuid.Data4[6]), '0x%x'%(pInfoNode.Value.FormSetGuid.Data4[7])) + ' }}' + ';{}\n'.format(pInfoNode.Value.DevicePath))
                        else:
                            f.write('        \"Value\": \"{}\"\n'.format(pInfoNode.Value))

                        f.write('      },\n')
                        pInfoNode = pInfoNode.Next
                    pVsNode = pVsNode.Next
                f.write('      {\n')
                f.write('        \"VendorGuid\": \"NA\",\n')
                f.write('        \"VarName\": \"NA\",\n')
                f.write('        \"DefaultStore\": \"NA\",\n')
                f.write('        \"Size\": 0,\n')
                f.write('        \"Offset\": 0,\n')
                f.write('        \"Value\": \"0x00\"\n')
                f.write('      }\n')
                f.write('  ]\n')
                f.write('}\n')

            f.close()
        except:
            EdkLogger.error("VfrCompiler", FILE_OPEN_FAILURE, "File open failed for %s" % FileName, None)

    def DumpYaml(self, InputFile):
        FileName = InputFile[:InputFile.find('.')] + '.yaml'
        try:
            with open(FileName, 'w') as f:
                f.write('## DO NOT REMOVE -- VFR Mode\n')
                self.__LastOp = None
                self.DumpYamlDfs(self.__Root, f, InputFile)
            f.close()
        except:
            EdkLogger.error("VfrCompiler", FILE_OPEN_FAILURE, "File open failed for %s" % FileName, None)


    def DumpYamlDfs(self, Root, f, InputFile):
        try:
            if Root.OpCode != None:

                if Root.OpCode == EFI_IFR_FORM_SET_OP:
                    Info = Root.Data.GetInfo()
                    f.write('formset:\n')

                    f.write('  guid:  \'{' + '{}, {}, {},'.format('0x%x'%(Info.Guid.Data1),'0x%x'%(Info.Guid.Data2), '0x%x'%(Info.Guid.Data3)) \
                        + ' { ' +  '{}, {}, {}, {}, {}, {}, {}, {}'.format('0x%x'%(Info.Guid.Data4[0]), '0x%x'%(Info.Guid.Data4[1]), '0x%x'%(Info.Guid.Data4[2]), '0x%x'%(Info.Guid.Data4[3]), \
                        '0x%x'%(Info.Guid.Data4[4]), '0x%x'%(Info.Guid.Data4[5]), '0x%x'%(Info.Guid.Data4[6]), '0x%x'%(Info.Guid.Data4[7])) + ' }}\'\n')
                    f.write('  title:  {}  # Title STRING_ID\n'.format('0x%04x'%(Info.FormSetTitle)))
                    f.write('  help:  {}  # Help STRING_ID\n'.format('0x%04x'%(Info.Help)))
                    if len(Root.Data.GetClassGuid()) == 1:
                        Guid = Root.Data.GetClassGuid()[0]
                        f.write('  classguid:  \'{'  + '{}, {}, {},'.format('0x%x'%(Guid.Data1),'0x%x'%(Guid.Data2), '0x%x'%(Guid.Data3)) \
                        + ' { ' +  '{}, {}, {}, {}, {}, {}, {}, {}'.format('0x%x'%(Guid.Data4[0]), '0x%x'%(Guid.Data4[1]), '0x%x'%(Guid.Data4[2]), '0x%x'%(Guid.Data4[3]), \
                        '0x%x'%(Guid.Data4[4]), '0x%x'%(Guid.Data4[5]), '0x%x'%(Guid.Data4[6]), '0x%x'%(Guid.Data4[7])) + ' }}\'\n')
                    else:
                        for i in range(0, len(Root.Data.GetClassGuid())):
                            Guid = Root.Data.GetClassGuid()[i]
                            f.write('  classguid{}:  '.format(i+1) + '\'{'  + '{}, {}, {},'.format('0x%x'%(Guid.Data1),'0x%x'%(Guid.Data2), '0x%x'%(Guid.Data3)) \
                            + ' { ' +  '{}, {}, {}, {}, {}, {}, {}, {}'.format('0x%x'%(Guid.Data4[0]), '0x%x'%(Guid.Data4[1]), '0x%x'%(Guid.Data4[2]), '0x%x'%(Guid.Data4[3]), \
                            '0x%x'%(Guid.Data4[4]), '0x%x'%(Guid.Data4[5]), '0x%x'%(Guid.Data4[6]), '0x%x'%(Guid.Data4[7])) + ' }}\'\n')

                if Root.OpCode == EFI_IFR_VARSTORE_OP:
                    Info = Root.Data.GetInfo()
                    if self.__LastOp != EFI_IFR_VARSTORE_OP:
                        f.write('  varstore:\n')
                    f.write('    - type:  {}\n'.format(Root.Data.GetType()))
                    f.write('      varid:  {} # Optional Input, Need to assign if None \n'.format('0x%04x'%(Info.VarStoreId)))
                    Name = ''
                    for i in range(0, len(Info.Name)):
                        Name += chr(Info.Name[i])
                    f.write('      name:  {}\n'.format(Name))
                    f.write('      guid:  \'{' + '{}, {}, {},'.format('0x%x'%(Info.Guid.Data1),'0x%x'%(Info.Guid.Data2), '0x%x'%(Info.Guid.Data3)) \
                        + ' { ' +  '{}, {}, {}, {}, {}, {}, {}, {}'.format('0x%x'%(Info.Guid.Data4[0]), '0x%x'%(Info.Guid.Data4[1]), '0x%x'%(Info.Guid.Data4[2]), '0x%x'%(Info.Guid.Data4[3]), \
                        '0x%x'%(Info.Guid.Data4[4]), '0x%x'%(Info.Guid.Data4[5]), '0x%x'%(Info.Guid.Data4[6]), '0x%x'%(Info.Guid.Data4[7])) + ' }}\'\n')
                    f.write('      size:  {} # Need to Compute\n'.format(Info.Size))
                    self.__LastOp = EFI_IFR_VARSTORE_OP

                if Root.OpCode == EFI_IFR_VARSTORE_EFI_OP:
                    Info = Root.Data.GetInfo()
                    if self.__LastOp != EFI_IFR_VARSTORE_EFI_OP:
                        f.write('  efivarstore:\n')
                    f.write('    - type:  {}\n'.format(Root.Data.GetType()))
                    f.write('      varid:  {} # Optional Input, Need to assign if None\n'.format('0x%04x'%(Info.VarStoreId)))
                    Name = ''
                    for i in range(0, len(Info.Name)):
                        Name += chr(Info.Name[i])
                    f.write('      name:  {}\n'.format(Name))
                    f.write('      guid:  \'{' + '{}, {}, {},'.format('0x%x'%(Info.Guid.Data1),'0x%x'%(Info.Guid.Data2), '0x%x'%(Info.Guid.Data3)) \
                        + ' { ' +  '{}, {}, {}, {}, {}, {}, {}, {}'.format('0x%x'%(Info.Guid.Data4[0]), '0x%x'%(Info.Guid.Data4[1]), '0x%x'%(Info.Guid.Data4[2]), '0x%x'%(Info.Guid.Data4[3]), \
                        '0x%x'%(Info.Guid.Data4[4]), '0x%x'%(Info.Guid.Data4[5]), '0x%x'%(Info.Guid.Data4[6]), '0x%x'%(Info.Guid.Data4[7])) + ' }}\'\n')
                    f.write('      attribute:  {} # Need to Compute, the Input should be 0x00000001 | 0x00000002 \n'.format('0x%08x'%(Info.Attributes)))
                    f.write('      size:  {} # Need to Compute\n'.format(Info.Size))
                    self.__LastOp = EFI_IFR_VARSTORE_EFI_OP

                if Root.OpCode == EFI_IFR_VARSTORE_NAME_VALUE_OP:
                    Info = Root.Data.GetInfo()
                    if self.__LastOp != EFI_IFR_VARSTORE_NAME_VALUE_OP:
                        f.write('  namevaluevarstore:\n')
                        self.__IsFirstNameValuestoreStoreOp = False
                    f.write('    - type:  {}\n'.format(Root.Data.GetType()))
                    f.write('      varid:  {} # Optional Input, Need to assign if None\n'.format('0x%04x'%(Info.VarStoreId)))
                    for NameItem in Root.Data.GetNameItemList():
                        f.write('      name:  {} # NameList STRING_ID\n'.format('0x%04x'%(NameItem)))
                    f.write('      guid:  \'{' + '{}, {}, {},'.format('0x%x'%(Info.Guid.Data1),'0x%x'%(Info.Guid.Data2), '0x%x'%(Info.Guid.Data3)) \
                        + ' { ' +  '{}, {}, {}, {}, {}, {}, {}, {}'.format('0x%x'%(Info.Guid.Data4[0]), '0x%x'%(Info.Guid.Data4[1]), '0x%x'%(Info.Guid.Data4[2]), '0x%x'%(Info.Guid.Data4[3]), \
                        '0x%x'%(Info.Guid.Data4[4]), '0x%x'%(Info.Guid.Data4[5]), '0x%x'%(Info.Guid.Data4[6]), '0x%x'%(Info.Guid.Data4[7])) + ' }}\'\n')
                    self.__LastOp = EFI_IFR_VARSTORE_NAME_VALUE_OP

                if Root.OpCode == EFI_IFR_DEFAULTSTORE_OP:
                    gVfrDefaultStore.UpdateDefaultType(Root)
                    Info = Root.Data.GetInfo()
                    Type = Root.Data.GetType()
                    if Type != 'Standard Defaults' and Type != 'Standard ManuFacturing':
                        if self.__LastOp != EFI_IFR_DEFAULTSTORE_OP:
                            f.write('  defaultstore:\n')
                            self.__IsFirstDefaultStoreOp = False
                        f.write('    - type:  {}\n'.format(Type))
                        f.write('      prompt:  {} # DefaultName STRING_ID\n'.format('0x%04x'%(Info.DefaultName)))
                        f.write('      attribute:  {} # Default ID\n'.format('0x%04x'%(Info.DefaultId)))
                        self.__LastOp = EFI_IFR_DEFAULTSTORE_OP

                if Root.OpCode == EFI_IFR_FORM_OP:
                    Info = Root.Data.GetInfo()
                    f.write('  form:\n')
                    if Root.Condition != None:
                        f.write('      condition:  {}\n'.format(Root.Condition))
                    f.write('    formid{}:  # FormId STRING_ID\n'.format(Info.FormId))
                    f.write('      title:  {}  # FormTitle STRING_ID\n'.format('0x%04x'%(Info.FormTitle)))
                    f.write('      statement:\n')
                if Root.OpCode == EFI_IFR_FORM_MAP_OP:
                    Info = Root.Data.GetInfo()
                    MethodMapList = Root.Data.GetMethodMapList()
                    f.write('  - formmap:\n')
                    if Root.Condition != None:
                        f.write('      condition:  {}\n'.format(Root.Condition))
                    f.write('      FormId:  {}  # FormId STRING_ID\n'.format(Info.FormId))
                    for MethodMap in  MethodMapList:
                        f.write('      maptitle:  {}\n'.format(MethodMap.MethodTitle))
                        f.write('      mapguid:  {' + '{}, {}, {},'.format('0x%x'%(MethodMap.MethodIdentifier.Data1),'0x%x'%(MethodMap.MethodIdentifier.Data2), '0x%x'%(MethodMap.MethodIdentifier.Data3)) \
                        + ' { ' +  '{}, {}, {}, {}, {}, {}, {}, {}'.format('0x%x'%(MethodMap.MethodIdentifier.Data4[0]), '0x%x'%(MethodMap.MethodIdentifier.Data4[1]), '0x%x'%(MethodMap.MethodIdentifier.Data4[2]), '0x%x'%(MethodMap.MethodIdentifier.Data4[3]), \
                        '0x%x'%(MethodMap.MethodIdentifier.Data4[4]), '0x%x'%(MethodMap.MethodIdentifier.Data4[5]), '0x%x'%(MethodMap.MethodIdentifier.Data4[6]), '0x%x'%(MethodMap.MethodIdentifier.Data4[7])) + ' }}\n')

                if Root.OpCode == EFI_IFR_IMAGE_OP:
                    Info = Root.Data.GetInfo()
                    f.write('      - image:\n')
                    if Root.Condition != None:
                        f.write('          condition:  {}\n'.format(Root.Condition))
                    f.write('          Id:  {} # ImageId\n'.format(Info.Id))

                if Root.OpCode == EFI_IFR_RULE_OP:
                    Info = Root.Data.GetInfo()
                    f.write('      - rule:\n')
                    if Root.Condition != None:
                        f.write('          condition:  {}\n'.format(Root.Condition))
                    f.write('          RuleId:  {} # RuleId\n'.format(Info.RuleId))

                if Root.OpCode == EFI_IFR_SUBTITLE_OP:
                    Info = Root.Data.GetInfo()
                    f.write('        - subtitle:\n')
                    if Root.Condition != None:
                        f.write('            condition:  {}\n'.format(Root.Condition))
                    f.write('            prompt:  {}  # Statement Prompt STRING_ID\n'.format('0x%04x'%(Info.Statement.Prompt)))
                    f.write('            flags:  {}  # Optional Input\n'.format('0x%04x'%(Info.Flags)))

                if Root.OpCode == EFI_IFR_TEXT_OP:
                    Info = Root.Data.GetInfo()
                    f.write('        - text:\n')
                    if Root.Condition != None:
                        f.write('            condition:  {}\n'.format(Root.Condition))
                    if type(Info) == EFI_IFR_TEXT:
                        f.write('            help:  {}  # Statement Help STRING_ID\n'.format('0x%04x'%(Info.Statement.Help)))
                        f.write('            prompt:  {}  # Statement Prompt STRING_ID\n'.format('0x%04x'%(Info.Statement.Prompt)))
                        f.write('            text:  {}  # Optional Input, Statement TextTwo STRING_ID\n'.format('0x%04x'%(Info.TextTwo)))
                    if type(Info) == EFI_IFR_ACTION:
                        f.write('            help:  {}  # Question Help STRING_ID\n'.format('0x%04x'%(Info.Question.Header.Help)))
                        f.write('            prompt:  {}  # Question Prompt STRING_ID\n'.format('0x%04x'%(Info.Question.Header.Prompt)))
                        f.write('            flags:  {}  # Optional Input, Question Flags\n'.format('0x%04x'%(Info.Question.Flags)))
                        f.write('            key:  {}  # Optional Input, Question QuestionId\n'.format('0x%04x'%(Info.Question.QuestionId)))

                if Root.OpCode == EFI_IFR_ACTION_OP:
                    Info = Root.Data.GetInfo()
                    f.write('      - action:\n')
                    if Root.Condition != None:
                        f.write('          condition:  {}\n'.format(Root.Condition))
                    f.write('          prompt:  {}  # Question Prompt STRING_ID\n'.format(Info.Question.Header.Prompt))
                    f.write('          help:  {}  # Question Help STRING_ID\n'.format(Info.Question.Header.Help))
                    f.write('          questionid:  {}  # Question QuestionId\n'.format(Info.Question.QuestionId))
                    f.write('          varstoreid:  {}  # Question VarStoreId\n'.format(Info.Question.VarStoreId))
                    f.write('          flags:  {}  # Question Flags\n'.format(Info.Question.Flags))
                    f.write('          questionconfig:  {}  # QuestionConfig\n'.format(Info.QuestionConfig))

                if Root.OpCode == EFI_IFR_ONE_OF_OP:
                    Info = Root.Data.GetInfo()
                    f.write('        - oneof:\n')
                    if Root.Condition != None:
                        f.write('            condition:  {}\n'.format(Root.Condition))
                    if Root.Data.GetQName() != None:
                        f.write('            name:  {}  #  Optional Input\n'.format(Root.Data.GetQName()))
                    if Root.Data.GetVarIdStr() != '':
                        f.write('            varid:  {}  #  Optional Input\n'.format(Root.Data.GetVarIdStr()))
                    f.write('            questionid:  {}  # Optional Input, Need to compute if None\n'.format(Info.Question.QuestionId))
                    f.write('            prompt:  {}  # Statement Prompt STRING_ID\n'.format('0x%04x'%(Info.Question.Header.Prompt)))
                    f.write('            help:  {}  # Statement Help STRING_ID\n'.format('0x%04x'%(Info.Question.Header.Help)))
                    #f.write('            varname:  {}  # Question VarName STRING_ID\n'.format(Info.Question.VarStoreInfo.VarName))
                    #f.write('            varoffset:  {}  #Optional Input Question VarOffset\n'.format(Info.Question.VarStoreInfo.VarOffset))
                    f.write('            flags:  {}  # Optional Input\n'.format(Info.Question.Flags))
                    f.write('            maximum:  {} # Optional Input\n'.format(Info.Data.MaxValue))
                    f.write('            minimum:  {} # Optional Input\n'.format(Info.Data.MinValue))
                    f.write('            step:  {} # Optional Input\n'.format(Info.Data.Step))

                if Root.OpCode == EFI_IFR_ONE_OF_OPTION_OP:
                    Info = Root.Data.GetInfo()
                    if self.__LastOp != EFI_IFR_ONE_OF_OPTION_OP:
                        f.write('            option:  \n')

                    f.write('              - text:  {} # Option STRING_ID\n'.format('0x%04x'%(Info.Option)))

                    if type(Root.Data) == IfrOneOfOption:
                        if len(Info.Value) == 1:
                            f.write('                value:  {}\n'.format('0x%x'%(Info.Value[0])))
                        else:
                            f.write('                value:  {')
                            ValueType = Root.Data.GetValueType()
                            for i in range(0, len(Info.Value)-1):
                                f.write('{},'.format(Info.Value[i]))
                            f.write('{}'.format(Info.Value[len(Info.Value)-1]) + '}\n')
                    f.write('                flags:  {} # Optional Input\n'.format(Info.Flags))
                    if Root.Data.GetIfrOptionKey() != None:
                        f.write('                key:  {} # Optional Input\n'.format('0x%04x'%(Root.Data.GetIfrOptionKey())))
                    if Root.Condition != None:
                        f.write('                condition:  {}\n'.format(Root.Condition))
                    self.__LastOp = EFI_IFR_ONE_OF_OPTION_OP

                if Root.OpCode == EFI_IFR_DEFAULT_OP:
                    Info = Root.Data.GetInfo()
                    if self.__LastOp != EFI_IFR_DEFAULT_OP:
                        f.write('            default:\n')
                    f.write('              - type:  {}\n'.format(Info.Type))
                    f.write('                defaultId:  {}\n'.format(Info.DefaultId))
                    if type(Root.Data) == IfrDefault:

                        if len(Info.Value) == 1:
                            if Info.Type == EFI_IFR_TYPE_DATE:
                                f.write('                value:  {}/{}/{}\n'.format(Info.Value[0].Year, Info.Value[0].Month, Info.Value[0].Day))
                            elif Info.Type == EFI_IFR_TYPE_TIME:
                                f.write('                value:  {}:{}:{}\n'.format(Info.Value[0].Hour, Info.Value[0].Minute, Info.Value[0].Second))
                            elif Info.Type == EFI_IFR_TYPE_REF:
                                f.write('                value:  {};{};'.format(Info.Value[0].QuestionId, Info.Value[0].FormId) +  '{' + '{}, {}, {},'.format('0x%x'%(Info.Value[0].FormSetGuid.Data1),'0x%x'%(Info.Value[0].FormSetGuid.Data2), '0x%x'%(Info.Value[0].FormSetGuid.Data3)) \
                                + ' { ' +  '{}, {}, {}, {}, {}, {}, {}, {}'.format('0x%x'%(Info.Value[0].FormSetGuid.Data4[0]), '0x%x'%(Info.Value[0].FormSetGuid.Data4[1]), '0x%x'%(Info.Value[0].FormSetGuid.Data4[2]), '0x%x'%(Info.Value[0].FormSetGuid.Data4[3]), \
                                '0x%x'%(Info.Value[0].FormSetGuid.Data4[4]), '0x%x'%(Info.Value[0].FormSetGuid.Data4[5]), '0x%x'%(Info.Value[0].FormSetGuid.Data4[6]), '0x%x'%(Info.Value[0].FormSetGuid.Data4[7])) + ' }}' + ';{}\n'.format(Info.Value[0].DevicePath))
                            else:
                                f.write('                value:  {}\n'.format(Info.Value[0]))

                        else:
                            f.write('                value:  {')
                            for i in range(0, len(Info.Value)-1):
                                f.write('{},'.format(Info.Value[i]))
                            f.write('{}'.format(Info.Value[len(Info.Value)-1]) + '}\n')

                    if Root.Condition != None:
                        f.write('                condition:  {}\n'.format(Root.Condition))
                    self.__LastOp = EFI_IFR_DEFAULT_OP

                if Root.OpCode == EFI_IFR_ORDERED_LIST_OP:
                    Info = Root.Data.GetInfo()
                    f.write('        - orderedlist:\n')
                    if Root.Condition != None:
                        f.write('            condition:  {}\n'.format(Root.Condition))
                    if Root.Data.GetQName() != None:
                        f.write('            name:  {}  #  Optional Input\n'.format(Root.Data.GetQName()))
                    if Root.Data.GetVarIdStr() != '':
                        f.write('            varid:  {}  #  Optional Input\n'.format(Root.Data.GetVarIdStr()))
                    f.write('            questionid:  {}  # Optional Input, Need to compute if None\n'.format(Info.Question.QuestionId))
                    f.write('            prompt:  {}  # Statement Prompt STRING_ID\n'.format('0x%04x'%(Info.Question.Header.Prompt)))
                    f.write('            help:  {}  # Statement Help STRING_ID\n'.format('0x%04x'%(Info.Question.Header.Help)))
                    #f.write('            varstoreid:  {}  # Question VarStoreId\n'.format(Info.Question.VarStoreId))
                    f.write('            maxContainers:  {} # Optional Input, Need to compute if None\n'.format(Info.MaxContainers))
                    f.write('            flags:  {} # Optional Input \n'.format(Info.Question.Flags))

                if Root.OpCode == EFI_IFR_NUMERIC_OP:
                    Info = Root.Data.GetInfo()
                    f.write('      - numeric:\n')
                    if Root.Condition != None:
                        f.write('          condition:  {}\n'.format(Root.Condition))
                    f.write('          prompt:  {}  # Statement Prompt STRING_ID\n'.format(Info.Question.Header.Prompt))
                    f.write('          help:  {}  # Statement Help STRING_ID\n'.format(Info.Question.Header.Help))
                    f.write('          questionid:  {}  # Question QuestionId\n'.format(Info.Question.QuestionId))
                    f.write('          varstoreid:  {}  # Question VarStoreId\n'.format(Info.Question.VarStoreId))
                    f.write('          varname:  {}  # Question VarName STRING_ID\n'.format(Info.Question.VarStoreInfo.VarName))
                    f.write('          varoffset:  {}  # Question VarOffset\n'.format(Info.Question.VarStoreInfo.VarOffset))
                    f.write('          flags:  {}  # Question Flags\n'.format(Info.Question.Flags))
                    f.write('          maxvalue:  {}\n'.format(Info.Data.MaxValue))
                    f.write('          minvalue:  {}\n'.format(Info.Data.MinValue))
                    f.write('          step:  {}\n'.format(Info.Data.Step))

                if Root.OpCode == EFI_IFR_CHECKBOX_OP:
                    Info = Root.Data.GetInfo()
                    f.write('        - checkbox:\n')
                    if Root.Condition != None:
                        f.write('            condition:  {}\n'.format(Root.Condition))
                    if Root.Data.GetQName() != None:
                        f.write('            name:  {}  #  Optional Input\n'.format(Root.Data.GetQName()))
                    if Root.Data.GetVarIdStr() != '':
                        f.write('            varid:  {}  #  Optional Input\n'.format(Root.Data.GetVarIdStr()))
                    f.write('            questionid/key:  {}  # Optional Input, Need to compute if None\n'.format(Info.Question.QuestionId))
                    f.write('            prompt:  {}  # Statement Prompt STRING_ID\n'.format('0x%04x'%(Info.Question.Header.Prompt)))
                    f.write('            help:  {}  # Statement Help STRING_ID\n'.format('0x%04x'%(Info.Question.Header.Help)))
                    #f.write('            varstoreid:  {}  # Question VarStoreId\n'.format(Info.Question.VarStoreId))
                    #f.write('            varname:  {}  # Question VarName STRING_ID\n'.format(Info.Question.VarStoreInfo.VarName))
                    #f.write('            varoffset:  {}  # Question VarOffset\n'.format(Info.Question.VarStoreInfo.VarOffset))
                    f.write('            flags:  {}  # Optional Input\n'.format(Info.Flags))

                if Root.OpCode == EFI_IFR_TIME_OP:
                    Info = Root.Data.GetInfo()
                    f.write('      - time:\n')
                    if Root.Condition != None:
                        f.write('          condition:  {}\n'.format(Root.Condition))
                    f.write('          questionid:  {}  # Statement Prompt STRING_ID\n'.format(Info.Question.QuestionId))
                    f.write('          varstoreid:  {}  # Question VarStoreId\n'.format(Info.Question.VarStoreId))
                    f.write('          varname:  {}\n'.format(Info.Question.VarStoreInfo.VarName))
                    f.write('          varoffset:  {}\n'.format(Info.Question.VarStoreInfo.VarOffset))
                    f.write('          prompt:  {}  # Statement Prompt STRING_ID\n'.format(Info.Question.Header.Prompt))
                    f.write('          help:  {}  # Statement Help STRING_ID\n'.format(Info.Question.Header.Help))
                    f.write('          flags:  {}\n'.format(Info.Flags))

                if Root.OpCode == EFI_IFR_DATE_OP:
                    Info = Root.Data.GetInfo()
                    f.write('      - date:\n')
                    if Root.Condition != None:
                        f.write('          condition:  {}\n'.format(Root.Condition))
                    f.write('          questionid:  {}  # Statement Prompt STRING_ID\n'.format(Info.Question.QuestionId))
                    f.write('          varstoreid:  {}  # Question VarStoreId\n'.format(Info.Question.VarStoreId))
                    f.write('          varname:  {}\n'.format(Info.Question.VarStoreInfo.VarName))
                    f.write('          varoffset:  {}\n'.format(Info.Question.VarStoreInfo.VarOffset))
                    f.write('          prompt:  {}  # Statement Prompt STRING_ID\n'.format(Info.Question.Header.Prompt))
                    f.write('          help:  {}  # Statement Help STRING_ID\n'.format(Info.Question.Header.Help))
                    f.write('          flags:  {}\n'.format(Info.Flags))


                if Root.OpCode == EFI_IFR_STRING_OP:
                    Info = Root.Data.GetInfo()
                    f.write('      - string:\n')
                    if Root.Condition != None:
                        f.write('          condition:  {}\n'.format(Root.Condition))
                    f.write('          prompt:  {}  # Statement Prompt STRING_ID\n'.format(Info.Question.Header.Prompt))
                    f.write('          help:  {}  # Statement Help STRING_ID\n'.format(Info.Question.Header.Help))
                    f.write('          questionid:  {}  # Question QuestionId\n'.format(Info.Question.QuestionId))
                    f.write('          varstoreid:  {}  # Question VarStoreId\n'.format(Info.Question.VarStoreId))
                    f.write('          varname:  {}  # Question VarName STRING_ID\n'.format(Info.Question.VarStoreInfo.VarName))
                    f.write('          varoffset:  {}  # Question VarOffset\n'.format(Info.Question.VarStoreInfo.VarOffset))
                    f.write('          flags:  {}  # Question Flags\n'.format(Info.Question.Flags))
                    f.write('          stringflags:  {}\n'.format(Info.Flags))
                    f.write('          stringminsize:  {}\n'.format(Info.MinSize))
                    f.write('          stringmaxsize:  {}\n'.format(Info.MaxSize))

                if Root.OpCode == EFI_IFR_PASSWORD_OP:
                    Info = Root.Data.GetInfo()
                    f.write('      - password:\n')
                    if Root.Condition != None:
                        f.write('          condition:  {}\n'.format(Root.Condition))
                    f.write('          prompt:  {}  # Statement Prompt STRING_ID\n'.format(Info.Question.Header.Prompt))
                    f.write('          help:  {}  # Statement Help STRING_ID\n'.format(Info.Question.Header.Help))
                    f.write('          questionid:  {}  # Question QuestionId\n'.format(Info.Question.QuestionId))
                    f.write('          varstoreid:  {}  # Question VarStoreId\n'.format(Info.Question.VarStoreId))
                    f.write('          varname:  {}  # Question VarName STRING_ID\n'.format(Info.Question.VarStoreInfo.VarName))
                    f.write('          varoffset:  {}  # Question VarOffset\n'.format(Info.Question.VarStoreInfo.VarOffset))
                    f.write('          flags:  {}  # Question Flags\n'.format(Info.Question.Flags))
                    f.write('          minsize:  {}\n'.format(Info.MinSize))
                    f.write('          maxsize:  {}\n'.format(Info.MaxSize))


                if Root.OpCode == EFI_IFR_RESET_BUTTON_OP:
                    Info = Root.Data.GetInfo()
                    f.write('      - resetbutton:\n')
                    if Root.Condition != None:
                        f.write('          condition:  {}\n'.format(Root.Condition))
                    f.write('          prompt:  {}  # Statement Prompt STRING_ID\n'.format(Info.Statement.Prompt))
                    f.write('          help:  {}  # Statement Help STRING_ID\n'.format(Info.Statement.Help))
                    f.write('          defaultid:  {}\n'.format(Info.DefaultId))

                if Root.OpCode == EFI_IFR_REF_OP:
                    Info = Root.Data.GetInfo()
                    f.write('      - goto:\n')
                    if Root.Condition != None:
                        f.write('          condition:  {}\n'.format(Root.Condition))

                    if type(Root.Data) == IfrRef4:
                        f.write('          formid:  {}\n'.format(Info.FormId))
                        f.write('          formsetid:  {' + '{}, {}, {},'.format('0x%x'%(Info.FormSetId.Data1),'0x%x'%(Info.FormSetId.Data2), '0x%x'%(Info.FormSetId.Data3)) \
                        + ' { ' +  '{}, {}, {}, {}, {}, {}, {}, {}'.format('0x%x'%(Info.FormSetId.Data4[0]), '0x%x'%(Info.FormSetId.Data4[1]), '0x%x'%(Info.FormSetId.Data4[2]), '0x%x'%(Info.FormSetId.Data4[3]), \
                        '0x%x'%(Info.FormSetId.Data4[4]), '0x%x'%(Info.FormSetId.Data4[5]), '0x%x'%(Info.FormSetId.Data4[6]), '0x%x'%(Info.FormSetId.Data4[7])) + ' }}\n')
                        f.write('          questionid:  {}\n'.format(Info.QuestionId))
                        f.write('          devicepath:  {}\n'.format(Info.DevicePath))

                    if type(Root.Data) == IfrRef3:
                        f.write('          formid:  {}\n'.format(Info.FormId))
                        f.write('          formsetid:  {' + '{}, {}, {},'.format('0x%x'%(Info.FormSetId.Data1),'0x%x'%(Info.FormSetId.Data2), '0x%x'%(Info.FormSetId.Data3)) \
                        + ' { ' +  '{}, {}, {}, {}, {}, {}, {}, {}'.format('0x%x'%(Info.FormSetId.Data4[0]), '0x%x'%(Info.FormSetId.Data4[1]), '0x%x'%(Info.FormSetId.Data4[2]), '0x%x'%(Info.FormSetId.Data4[3]), \
                        '0x%x'%(Info.FormSetId.Data4[4]), '0x%x'%(Info.FormSetId.Data4[5]), '0x%x'%(Info.FormSetId.Data4[6]), '0x%x'%(Info.FormSetId.Data4[7])) + ' }}\n')
                        f.write('          questionid:  {}\n'.format(Info.QuestionId))

                    if type(Root.Data) == IfrRef2:
                        f.write('          formid:  {}\n'.format(Info.FormId))
                        f.write('          questionid:  {}\n'.format(Info.QuestionId))

                    if type(Root.Data) == IfrRef:
                        f.write('          formid:  {}\n'.format(Info.FormId))
                        f.write('          questionid:  {}\n'.format(Info.Question.QuestionId))

                    f.write('          prompt:  {}\n'.format(Info.Question.Header.Prompt))
                    f.write('          help:  {}\n'.format(Info.Question.Header.Help))

                if Root.OpCode == EFI_IFR_REFRESH_OP:
                    Info = Root.Data.GetInfo()
                    f.write('          - refresh:\n')
                    if Root.Condition != None:
                        f.write('              condition:  {}\n'.format(Root.Condition))
                    f.write('              interval:  {}  # RefreshInterval\n'.format(Info.RefreshInterval))

                if Root.OpCode == EFI_IFR_VARSTORE_DEVICE_OP:
                    Info = Root.Data.GetInfo()
                    f.write('          - varstoredevice:\n')
                    if Root.Condition != None:
                        f.write('              condition:  {}\n'.format(Root.Condition))
                    f.write('              devicepath:  {}  # DevicePath\n'.format(Info.DevicePath))

                if Root.OpCode == EFI_IFR_REFRESH_ID_OP:
                    Info = Root.Data.GetInfo()
                    f.write('          - refreshguid:\n')
                    if Root.Condition != None:
                        f.write('              condition:  {}\n'.format(Root.Condition))
                    f.write('              eventgroupid:  {' + '{}, {}, {},'.format('0x%x'%(Info.RefreshEventGroupId.Data1),'0x%x'%(Info.RefreshEventGroupId.Data2), '0x%x'%(Info.RefreshEventGroupId.Data3)) \
                        + ' { ' +  '{}, {}, {}, {}, {}, {}, {}, {}'.format('0x%x'%(Info.RefreshEventGroupId.Data4[0]), '0x%x'%(Info.RefreshEventGroupId.Data4[1]), '0x%x'%(Info.RefreshEventGroupId.Data4[2]), '0x%x'%(Info.RefreshEventGroupId.Data4[3]), \
                        '0x%x'%(Info.RefreshEventGroupId.Data4[4]), '0x%x'%(Info.RefreshEventGroupId.Data4[5]), '0x%x'%(Info.RefreshEventGroupId.Data4[6]), '0x%x'%(Info.RefreshEventGroupId.Data4[7])) + ' }}\n')

                if Root.OpCode == EFI_IFR_WARNING_IF_OP:
                    Info = Root.Data.GetInfo()
                    f.write('          - warningif:\n')
                    if Root.Condition != None:
                        f.write('              condition:  {}\n'.format(Root.Condition))
                    f.write('              warning:  {}\n'.format(Info.Warning))
                    f.write('              timeOut:  {}\n'.format(Info.TimeOut))

                if Root.OpCode == EFI_IFR_GUID_OP:
                    Info = Root.Data.GetInfo()
                    if type(Root.Data) == IfrLabel: # type(Info) == EFI_IFR_GUID_LABEL
                        f.write('        - label:\n')
                        if Root.Condition != None:
                            f.write('            condition:  {}\n'.format(Root.Condition))

                        f.write('            number:  {}  # Number\n'.format('0x%x'%(Info.Number)))

                    if type(Root.Data) == IfrBanner:
                        f.write('      - banner:\n')
                        if Root.Condition != None:
                            f.write('          condition:  {}\n'.format(Root.Condition))

                        f.write('          title:  {}\n'.format(Info.Title))
                        f.write('          linenumber:  {}\n'.format(Info.LineNumber))
                        f.write('          align:  {}\n'.format(Info.Alignment))

                    if type(Root.Data) == IfrTimeout:
                        f.write('      - banner:\n')
                        if Root.Condition != None:
                            f.write('          condition:  {}\n'.format(Root.Condition))

                        f.write('          timeout:  {}\n'.format(Info.TimeOut))

                    if type(Root.Data) == IfrClass:
                        f.write('  Class:  {}\n'.format(Info.Class))

                    if type(Root.Data) == IfrSubClass:
                        f.write('  SubClass:  {}\n'.format(Info.SubClass))

                    if type(Root.Data) == IfrExtensionGuid:
                        f.write('      - guidop:\n')
                        if Root.Condition != None:
                            f.write('          condition:  {}\n'.format(Root.Condition))
                        f.write('          guid:  \'{' + '{}, {}, {},'.format('0x%x'%(Info.Guid.Data1),'0x%x'%(Info.Guid.Data2), '0x%x'%(Info.Guid.Data3)) \
                        + ' { ' +  '{}, {}, {}, {}, {}, {}, {}, {}'.format('0x%x'%(Info.Guid.Data4[0]), '0x%x'%(Info.Guid.Data4[1]), '0x%x'%(Info.Guid.Data4[2]), '0x%x'%(Info.Guid.Data4[3]), \
                        '0x%x'%(Info.Guid.Data4[4]), '0x%x'%(Info.Guid.Data4[5]), '0x%x'%(Info.Guid.Data4[6]), '0x%x'%(Info.Guid.Data4[7])) + ' }}\'\n')

        except:
            EdkLogger.error("VfrCompiler", FILE_WRITE_FAILURE, "File write failed for %s" % (InputFile[:InputFile.find('.')] + '.yaml'), None)

        if Root.Child != []:
            for ChildNode in Root.Child:
                if Root.OpCode in ConditionOps:
                    if ChildNode.OpCode in ConditionOps:
                        ChildNode.Condition = Root.Condition + ' | ' + ChildNode.Condition
                    else:
                        ChildNode.Condition = Root.Condition

                self.DumpYamlDfs(ChildNode, f, InputFile)

        return

    def ReadYaml(self, FileName):
        try:
            f = open(FileName, 'r')
            #YamlDict = yaml.load(f, Loader=yaml.FullLoader)
            Config = yaml.safe_load(f)
            f.close()
        except:
            EdkLogger.error("VfrCompiler", FILE_OPEN_FAILURE, "File open failed for %s" % FileName, None)
        print(Config)
        for Data in Config:
            print(Data)