# Generated from VfrSyntax.g4 by ANTLR 4.7.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys



from CommonCtypes import *
from VfrFormPkg import *
from VfrUtility import *


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u0102")
        buf.write("\u0a30\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4")
        buf.write("q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4w\tw\4x\tx\4y\ty\4")
        buf.write("z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080")
        buf.write("\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084")
        buf.write("\t\u0084\4\u0085\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087")
        buf.write("\4\u0088\t\u0088\4\u0089\t\u0089\4\u008a\t\u008a\4\u008b")
        buf.write("\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e\t\u008e")
        buf.write("\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092")
        buf.write("\t\u0092\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095")
        buf.write("\4\u0096\t\u0096\4\u0097\t\u0097\4\u0098\t\u0098\4\u0099")
        buf.write("\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b\4\u009c\t\u009c")
        buf.write("\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0")
        buf.write("\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3")
        buf.write("\4\u00a4\t\u00a4\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7")
        buf.write("\t\u00a7\4\u00a8\t\u00a8\4\u00a9\t\u00a9\4\u00aa\t\u00aa")
        buf.write("\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad\4\u00ae")
        buf.write("\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1")
        buf.write("\4\u00b2\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5")
        buf.write("\t\u00b5\3\2\3\2\3\2\7\2\u016e\n\2\f\2\16\2\u0171\13\2")
        buf.write("\3\2\3\2\3\3\3\3\3\4\3\4\3\4\5\4\u017a\n\4\3\4\3\4\5\4")
        buf.write("\u017e\n\4\3\5\5\5\u0181\n\5\3\6\3\6\3\6\3\6\3\6\3\6\5")
        buf.write("\6\u0189\n\6\3\6\3\6\3\7\5\7\u018e\n\7\3\7\3\7\5\7\u0192")
        buf.write("\n\7\3\7\5\7\u0195\n\7\3\7\3\7\3\7\3\7\5\7\u019b\n\7\3")
        buf.write("\7\3\7\3\b\5\b\u01a0\n\b\3\b\3\b\5\b\u01a4\n\b\3\b\5\b")
        buf.write("\u01a7\n\b\3\b\3\b\3\b\3\b\5\b\u01ad\n\b\3\b\3\b\3\t\3")
        buf.write("\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\7\t")
        buf.write("\u01bf\n\t\f\t\16\t\u01c2\13\t\3\n\3\n\3\n\3\n\3\n\5\n")
        buf.write("\u01c9\n\n\3\n\3\n\3\13\3\13\3\13\3\13\3\13\5\13\u01d2")
        buf.write("\n\13\3\13\3\13\3\f\3\f\3\f\3\f\3\f\5\f\u01db\n\f\3\f")
        buf.write("\3\f\3\r\3\r\3\r\3\r\3\r\5\r\u01e4\n\r\3\r\3\r\3\16\3")
        buf.write("\16\3\16\3\16\3\16\5\16\u01ed\n\16\3\16\3\16\3\17\3\17")
        buf.write("\3\17\3\17\3\17\5\17\u01f6\n\17\3\17\3\17\3\20\3\20\3")
        buf.write("\20\3\20\3\20\5\20\u01ff\n\20\3\20\3\20\3\21\3\21\3\21")
        buf.write("\3\21\3\21\5\21\u0208\n\21\3\21\3\21\3\22\3\22\3\22\3")
        buf.write("\22\3\22\5\22\u0211\n\22\3\22\3\22\3\23\3\23\3\23\3\23")
        buf.write("\3\23\5\23\u021a\n\23\3\23\3\23\3\24\3\24\5\24\u0220\n")
        buf.write("\24\3\24\3\24\3\24\3\24\3\25\3\25\5\25\u0228\n\25\3\25")
        buf.write("\3\25\3\25\3\25\3\26\3\26\5\26\u0230\n\26\3\26\3\26\3")
        buf.write("\26\3\26\3\27\3\27\5\27\u0238\n\27\3\27\3\27\3\27\3\27")
        buf.write("\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30")
        buf.write("\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30")
        buf.write("\3\30\3\30\5\30\u0256\n\30\3\30\3\30\3\30\3\30\3\30\5")
        buf.write("\30\u025d\n\30\3\30\3\30\3\30\3\30\3\30\5\30\u0264\n\30")
        buf.write("\3\30\3\30\3\30\3\30\3\31\3\31\3\31\5\31\u026d\n\31\3")
        buf.write("\31\3\31\5\31\u0271\n\31\3\31\3\31\5\31\u0275\n\31\3\32")
        buf.write("\3\32\3\32\7\32\u027a\n\32\f\32\16\32\u027d\13\32\3\33")
        buf.write("\3\33\3\34\3\34\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35")
        buf.write("\3\35\3\35\7\35\u028d\n\35\f\35\16\35\u0290\13\35\3\36")
        buf.write("\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36")
        buf.write("\3\36\5\36\u029f\n\36\3\36\3\36\3\37\3\37\3\37\3\37\3")
        buf.write("\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37")
        buf.write("\3\37\3\37\5\37\u02b4\n\37\3\37\3\37\3\37\3\37\5\37\u02ba")
        buf.write("\n\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3 ")
        buf.write("\3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \5 \u02d6")
        buf.write("\n \3 \3 \3 \3 \5 \u02dc\n \3 \3 \3 \3 \3 \7 \u02e3\n")
        buf.write(" \f \16 \u02e6\13 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3")
        buf.write(" \3 \3 \3 \3 \5 \u02f8\n \3 \3 \3 \3 \3 \3!\3!\3\"\3\"")
        buf.write("\3\"\3\"\3\"\3\"\3\"\5\"\u0308\n\"\3\"\3\"\3\"\3\"\3\"")
        buf.write("\3\"\3\"\6\"\u0311\n\"\r\"\16\"\u0312\3\"\3\"\3\"\3\"")
        buf.write("\3\"\3#\3#\3#\3#\3#\3#\3#\3$\3$\3$\3$\3$\3$\3$\3%\3%\3")
        buf.write("%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3&\3&\3&\3&\3")
        buf.write("&\3&\3&\3&\3&\3&\3&\3&\5&\u0344\n&\3&\3&\3\'\3\'\3\'\3")
        buf.write("\'\3\'\3(\3(\3(\3)\3)\3)\3)\5)\u0354\n)\3)\3)\3)\3)\3")
        buf.write(")\5)\u035b\n)\3)\3)\3)\3)\5)\u0361\n)\3*\3*\3*\3*\3*\3")
        buf.write("*\3*\3*\3*\3*\3*\3*\3*\3*\3+\3+\3,\3,\3,\3,\3,\3,\3,\3")
        buf.write(",\3,\3,\5,\u037d\n,\7,\u037f\n,\f,\16,\u0382\13,\5,\u0384")
        buf.write("\n,\3-\5-\u0387\n-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3")
        buf.write("-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3")
        buf.write("-\3-\3-\3-\3-\3-\7-\u03ac\n-\f-\16-\u03af\13-\3-\5-\u03b2")
        buf.write("\n-\3.\3.\3.\3.\3.\3.\3.\3/\3/\3\60\3\60\5\60\u03bf\n")
        buf.write("\60\3\61\3\61\3\61\7\61\u03c4\n\61\f\61\16\61\u03c7\13")
        buf.write("\61\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62")
        buf.write("\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62")
        buf.write("\3\62\3\62\7\62\u03e0\n\62\f\62\16\62\u03e3\13\62\3\62")
        buf.write("\3\62\3\62\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63")
        buf.write("\3\63\3\63\3\63\3\63\3\63\7\63\u03f6\n\63\f\63\16\63\u03f9")
        buf.write("\13\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3")
        buf.write("\63\3\63\7\63\u0406\n\63\f\63\16\63\u0409\13\63\3\63\3")
        buf.write("\63\3\63\3\64\3\64\3\64\3\65\3\65\3\65\3\66\3\66\3\66")
        buf.write("\3\66\3\66\3\66\3\66\3\67\3\67\3\67\5\67\u041e\n\67\3")
        buf.write("8\38\38\38\38\38\38\38\38\38\38\58\u042b\n8\38\38\58\u042f")
        buf.write("\n8\38\38\38\58\u0434\n8\38\38\38\78\u0439\n8\f8\168\u043c")
        buf.write("\138\58\u043e\n8\38\38\58\u0442\n8\39\39\39\79\u0447\n")
        buf.write("9\f9\169\u044a\139\3:\3:\3;\3;\3;\3;\3;\3;\3;\3;\3;\3")
        buf.write(";\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\5;\u0463\n;\3;\3;\3")
        buf.write(";\3;\3;\3;\7;\u046b\n;\f;\16;\u046e\13;\3;\3;\3;\3;\3")
        buf.write(";\5;\u0475\n;\3;\3;\5;\u0479\n;\3;\3;\3<\3<\5<\u047f\n")
        buf.write("<\3=\3=\5=\u0483\n=\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3")
        buf.write(">\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3")
        buf.write(">\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\5>\u04b1\n")
        buf.write(">\3>\3>\5>\u04b5\n>\3>\3>\3>\3>\3>\5>\u04bc\n>\3>\3>\3")
        buf.write(">\3>\5>\u04c2\n>\3>\3>\5>\u04c6\n>\3>\3>\3?\3?\3?\7?\u04cd")
        buf.write("\n?\f?\16?\u04d0\13?\3@\3@\5@\u04d4\n@\3A\3A\3A\3A\3A")
        buf.write("\3A\3A\3A\3A\3A\5A\u04e0\nA\3A\3A\3A\3B\3B\3B\3B\3B\3")
        buf.write("B\5B\u04eb\nB\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\5C\u04f8")
        buf.write("\nC\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\7D\u0507\n")
        buf.write("D\fD\16D\u050a\13D\3D\3D\5D\u050e\nD\3D\3D\3D\5D\u0513")
        buf.write("\nD\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\7E\u0522\n")
        buf.write("E\fE\16E\u0525\13E\3E\3E\5E\u0529\nE\3E\3E\3E\5E\u052e")
        buf.write("\nE\3F\3F\3F\3F\3F\3F\5F\u0536\nF\3G\3G\3G\3G\3G\3H\3")
        buf.write("H\3H\3H\3H\3H\3H\3H\3I\3I\3I\3I\3I\3J\3J\3J\3J\3J\3J\3")
        buf.write("J\3J\3J\3J\3J\3J\5J\u0556\nJ\3J\3J\3J\5J\u055b\nJ\3K\7")
        buf.write("K\u055e\nK\fK\16K\u0561\13K\3L\3L\3L\3L\3L\3L\5L\u0569")
        buf.write("\nL\3M\3M\3M\3M\3M\3M\5M\u0571\nM\3N\3N\3O\3O\3O\3O\3")
        buf.write("O\3O\3O\3O\5O\u057d\nO\3O\3O\3O\3O\5O\u0583\nO\3P\3P\3")
        buf.write("P\3P\3Q\3Q\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\7")
        buf.write("R\u0599\nR\fR\16R\u059c\13R\3R\3R\3S\3S\3S\7S\u05a3\n")
        buf.write("S\fS\16S\u05a6\13S\3T\3T\3U\3U\3U\3U\3V\3V\3V\3V\3W\3")
        buf.write("W\7W\u05b4\nW\fW\16W\u05b7\13W\3X\3X\5X\u05bb\nX\3Y\3")
        buf.write("Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\5Y\u05c6\nY\3Y\3Y\3Y\3Y\5Y\u05cc")
        buf.write("\nY\3Y\3Y\3Y\3Y\3Z\3Z\3Z\7Z\u05d5\nZ\fZ\16Z\u05d8\13Z")
        buf.write("\3[\3[\3[\3[\3[\3[\5[\u05e0\n[\3\\\3\\\3\\\3\\\3\\\3\\")
        buf.write("\3\\\3\\\5\\\u05ea\n\\\3\\\3\\\3\\\3\\\3\\\3\\\3\\\3\\")
        buf.write("\3\\\3\\\3\\\3]\3]\3]\7]\u05fa\n]\f]\16]\u05fd\13]\3^")
        buf.write("\3^\5^\u0601\n^\3_\3_\5_\u0605\n_\3`\3`\3`\3`\3`\3`\3")
        buf.write("`\3`\3`\5`\u0610\n`\3`\3`\3`\3`\5`\u0616\n`\3`\3`\3`\3")
        buf.write("`\3`\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\5a\u0629\na\3")
        buf.write("b\3b\3b\7b\u062e\nb\fb\16b\u0631\13b\3c\3c\3c\3c\3c\3")
        buf.write("c\3c\3c\3c\5c\u063c\nc\3d\3d\3d\3d\3d\3d\3d\3d\3d\5d\u0647")
        buf.write("\nd\3d\5d\u064a\nd\3d\3d\3d\3d\3e\3e\3e\7e\u0653\ne\f")
        buf.write("e\16e\u0656\13e\3f\3f\5f\u065a\nf\3g\3g\3g\3g\3g\3g\3")
        buf.write("g\3g\5g\u0664\ng\3g\3g\3g\3g\5g\u066a\ng\3g\3g\3g\3g\3")
        buf.write("g\3g\3g\3g\3g\3g\3g\3g\3h\3h\3h\7h\u067b\nh\fh\16h\u067e")
        buf.write("\13h\3i\3i\3i\5i\u0683\ni\3j\3j\3j\3j\3j\3j\3j\3j\5j\u068d")
        buf.write("\nj\3j\3j\3j\3j\5j\u0693\nj\3j\3j\3j\3j\3j\3j\3j\3j\3")
        buf.write("j\3j\3j\3j\3k\3k\3k\7k\u06a4\nk\fk\16k\u06a7\13k\3l\3")
        buf.write("l\5l\u06ab\nl\3m\3m\3m\3m\3m\3m\3m\5m\u06b4\nm\3m\3m\3")
        buf.write("m\3m\3m\5m\u06bb\nm\3m\3m\3m\3m\3n\3n\3n\7n\u06c4\nn\f")
        buf.write("n\16n\u06c7\13n\3o\3o\3o\3o\5o\u06cd\no\3p\3p\3p\3p\3")
        buf.write("p\3p\3p\3p\5p\u06d7\np\3p\3p\3p\3p\3p\3p\3p\3p\3p\3p\3")
        buf.write("p\3p\3p\3p\3p\3p\3p\3p\3p\3p\3p\3p\3p\3p\3p\3p\3p\3p\3")
        buf.write("p\3p\3p\3p\3p\3p\3p\3p\3p\3p\3p\3p\3p\3p\3p\3p\3p\3p\3")
        buf.write("p\3p\3p\3p\3p\3p\3p\3p\3p\3p\3p\3p\3p\3p\3p\3p\3p\3p\3")
        buf.write("p\3p\3p\3p\3p\3p\3p\3p\3p\5p\u0722\np\3p\7p\u0725\np\f")
        buf.write("p\16p\u0728\13p\5p\u072a\np\3p\3p\3p\3q\3q\3q\3q\3q\3")
        buf.write("q\3q\3q\3q\3q\3q\3q\5q\u073b\nq\3q\3q\3q\3q\5q\u0741\n")
        buf.write("q\3r\3r\3r\7r\u0746\nr\fr\16r\u0749\13r\3s\3s\3t\3t\3")
        buf.write("t\3t\3t\3t\3t\3t\5t\u0755\nt\3t\3t\3t\3t\3t\3t\3t\3t\3")
        buf.write("t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3")
        buf.write("t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3")
        buf.write("t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3")
        buf.write("t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\5t\u07a0\nt\3t\7t\u07a3")
        buf.write("\nt\ft\16t\u07a6\13t\5t\u07a8\nt\3t\3t\3t\3u\3u\3u\3u")
        buf.write("\3u\3u\3u\3u\3u\3u\3u\3u\5u\u07b9\nu\3u\3u\3u\3u\5u\u07bf")
        buf.write("\nu\3v\3v\3v\7v\u07c4\nv\fv\16v\u07c7\13v\3w\3w\3x\3x")
        buf.write("\3x\5x\u07ce\nx\3y\3y\3y\3y\3y\5y\u07d5\ny\3z\3z\3z\3")
        buf.write("z\7z\u07db\nz\fz\16z\u07de\13z\3z\3z\3z\3{\3{\3{\3{\7")
        buf.write("{\u07e7\n{\f{\16{\u07ea\13{\3{\3{\3{\3|\3|\3|\3|\7|\u07f3")
        buf.write("\n|\f|\16|\u07f6\13|\3|\3|\3|\3}\3}\3}\3}\3~\3~\5~\u0801")
        buf.write("\n~\3~\3~\3~\3~\3~\3~\3~\3~\3~\3~\3~\3~\3~\3~\3~\3~\3")
        buf.write("~\5~\u0814\n~\3\177\3\177\3\177\3\177\3\177\3\177\3\177")
        buf.write("\3\177\3\177\3\177\3\177\5\177\u0821\n\177\3\177\3\177")
        buf.write("\3\177\3\177\5\177\u0827\n\177\3\177\3\177\3\177\3\177")
        buf.write("\5\177\u082d\n\177\3\177\3\177\3\177\3\177\5\177\u0833")
        buf.write("\n\177\3\177\3\177\3\177\3\177\5\177\u0839\n\177\3\177")
        buf.write("\3\177\3\177\3\177\5\177\u083f\n\177\3\177\3\177\3\177")
        buf.write("\3\177\5\177\u0845\n\177\3\177\3\177\3\177\3\177\5\177")
        buf.write("\u084b\n\177\3\177\3\177\3\177\3\177\5\177\u0851\n\177")
        buf.write("\3\177\3\177\3\177\3\177\5\177\u0857\n\177\5\177\u0859")
        buf.write("\n\177\3\177\5\177\u085c\n\177\3\177\3\177\7\177\u0860")
        buf.write("\n\177\f\177\16\177\u0863\13\177\3\177\5\177\u0866\n\177")
        buf.write("\3\177\3\177\3\u0080\7\u0080\u086b\n\u0080\f\u0080\16")
        buf.write("\u0080\u086e\13\u0080\3\u0081\3\u0081\3\u0081\3\u0081")
        buf.write("\3\u0081\5\u0081\u0875\n\u0081\3\u0081\7\u0081\u0878\n")
        buf.write("\u0081\f\u0081\16\u0081\u087b\13\u0081\3\u0081\3\u0081")
        buf.write("\3\u0081\3\u0082\3\u0082\3\u0082\3\u0082\3\u0082\5\u0082")
        buf.write("\u0885\n\u0082\3\u0083\3\u0083\3\u0083\3\u0084\3\u0084")
        buf.write("\3\u0084\7\u0084\u088d\n\u0084\f\u0084\16\u0084\u0890")
        buf.write("\13\u0084\3\u0085\3\u0085\3\u0085\7\u0085\u0895\n\u0085")
        buf.write("\f\u0085\16\u0085\u0898\13\u0085\3\u0086\3\u0086\3\u0086")
        buf.write("\7\u0086\u089d\n\u0086\f\u0086\16\u0086\u08a0\13\u0086")
        buf.write("\3\u0087\3\u0087\3\u0087\7\u0087\u08a5\n\u0087\f\u0087")
        buf.write("\16\u0087\u08a8\13\u0087\3\u0088\3\u0088\3\u0088\7\u0088")
        buf.write("\u08ad\n\u0088\f\u0088\16\u0088\u08b0\13\u0088\3\u0089")
        buf.write("\3\u0089\3\u0089\3\u0089\3\u0089\7\u0089\u08b7\n\u0089")
        buf.write("\f\u0089\16\u0089\u08ba\13\u0089\3\u008a\3\u008a\3\u008a")
        buf.write("\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\7\u008a")
        buf.write("\u08c5\n\u008a\f\u008a\16\u008a\u08c8\13\u008a\3\u008b")
        buf.write("\3\u008b\3\u008b\3\u008b\3\u008b\7\u008b\u08cf\n\u008b")
        buf.write("\f\u008b\16\u008b\u08d2\13\u008b\3\u008c\3\u008c\3\u008c")
        buf.write("\3\u008c\3\u008c\7\u008c\u08d9\n\u008c\f\u008c\16\u008c")
        buf.write("\u08dc\13\u008c\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d")
        buf.write("\3\u008d\3\u008d\7\u008d\u08e5\n\u008d\f\u008d\16\u008d")
        buf.write("\u08e8\13\u008d\3\u008e\3\u008e\3\u008e\7\u008e\u08ed")
        buf.write("\n\u008e\f\u008e\16\u008e\u08f0\13\u008e\3\u008e\3\u008e")
        buf.write("\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f")
        buf.write("\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f\5\u008f\u0900")
        buf.write("\n\u008f\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090")
        buf.write("\3\u0090\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091")
        buf.write("\3\u0091\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092")
        buf.write("\3\u0092\3\u0092\3\u0092\3\u0093\3\u0093\3\u0093\3\u0093")
        buf.write("\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094")
        buf.write("\3\u0094\3\u0094\3\u0094\3\u0094\5\u0094\u0928\n\u0094")
        buf.write("\3\u0095\3\u0095\3\u0096\3\u0096\3\u0097\3\u0097\3\u0097")
        buf.write("\3\u0097\3\u0097\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098")
        buf.write("\3\u0099\3\u0099\3\u0099\3\u0099\6\u0099\u093c\n\u0099")
        buf.write("\r\u0099\16\u0099\u093d\3\u009a\3\u009a\3\u009a\3\u009a")
        buf.write("\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\5\u009a")
        buf.write("\u094a\n\u009a\7\u009a\u094c\n\u009a\f\u009a\16\u009a")
        buf.write("\u094f\13\u009a\5\u009a\u0951\n\u009a\3\u009b\3\u009b")
        buf.write("\3\u009b\3\u009b\3\u009b\5\u009b\u0958\n\u009b\3\u009c")
        buf.write("\3\u009c\3\u009c\3\u009c\3\u009c\3\u009d\3\u009d\3\u009d")
        buf.write("\3\u009d\3\u009d\3\u009e\3\u009e\3\u009f\3\u009f\3\u009f")
        buf.write("\3\u009f\3\u009f\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0")
        buf.write("\3\u00a0\3\u00a0\5\u00a0\u0972\n\u00a0\3\u00a0\3\u00a0")
        buf.write("\3\u00a1\3\u00a1\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2")
        buf.write("\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\5\u00a2\u0982")
        buf.write("\n\u00a2\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a4")
        buf.write("\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a5\3\u00a5\3\u00a5")
        buf.write("\3\u00a5\3\u00a5\3\u00a5\3\u00a5\3\u00a5\3\u00a5\5\u00a5")
        buf.write("\u0997\n\u00a5\3\u00a5\3\u00a5\3\u00a5\3\u00a5\3\u00a5")
        buf.write("\5\u00a5\u099e\n\u00a5\3\u00a5\3\u00a5\3\u00a5\3\u00a6")
        buf.write("\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a7\3\u00a7\3\u00a7")
        buf.write("\3\u00a7\3\u00a7\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8")
        buf.write("\5\u00a8\u09b2\n\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8")
        buf.write("\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00aa\3\u00aa")
        buf.write("\3\u00aa\3\u00aa\3\u00aa\3\u00ab\3\u00ab\3\u00ab\3\u00ab")
        buf.write("\3\u00ab\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac")
        buf.write("\3\u00ac\5\u00ac\u09ce\n\u00ac\3\u00ac\3\u00ac\3\u00ac")
        buf.write("\3\u00ac\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\5\u00ad")
        buf.write("\u09d9\n\u00ad\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae")
        buf.write("\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00af\3\u00af\3\u00af")
        buf.write("\3\u00af\3\u00af\7\u00af\u09e9\n\u00af\f\u00af\16\u00af")
        buf.write("\u09ec\13\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af")
        buf.write("\3\u00af\3\u00af\3\u00af\3\u00b0\3\u00b0\3\u00b1\3\u00b1")
        buf.write("\3\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1")
        buf.write("\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2")
        buf.write("\3\u00b2\3\u00b2\3\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b3")
        buf.write("\3\u00b3\3\u00b3\7\u00b3\u0a11\n\u00b3\f\u00b3\16\u00b3")
        buf.write("\u0a14\13\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b3")
        buf.write("\3\u00b3\3\u00b3\3\u00b3\3\u00b4\3\u00b4\3\u00b5\3\u00b5")
        buf.write("\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5")
        buf.write("\7\u00b5\u0a29\n\u00b5\f\u00b5\16\u00b5\u0a2c\13\u00b5")
        buf.write("\3\u00b5\3\u00b5\3\u00b5\2\2\u00b6\2\4\6\b\n\f\16\20\22")
        buf.write("\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPR")
        buf.write("TVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088")
        buf.write("\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a")
        buf.write("\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac")
        buf.write("\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be")
        buf.write("\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0")
        buf.write("\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2")
        buf.write("\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4")
        buf.write("\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102\u0104\u0106")
        buf.write("\u0108\u010a\u010c\u010e\u0110\u0112\u0114\u0116\u0118")
        buf.write("\u011a\u011c\u011e\u0120\u0122\u0124\u0126\u0128\u012a")
        buf.write("\u012c\u012e\u0130\u0132\u0134\u0136\u0138\u013a\u013c")
        buf.write("\u013e\u0140\u0142\u0144\u0146\u0148\u014a\u014c\u014e")
        buf.write("\u0150\u0152\u0154\u0156\u0158\u015a\u015c\u015e\u0160")
        buf.write("\u0162\u0164\u0166\u0168\2\20\3\2\4\5\4\2\u00b9\u00bf")
        buf.write("\u00fa\u00fa\4\2\u00c0\u00c3\u00fa\u00fa\3\2\u0086\u008d")
        buf.write("\4\2\13\13\u00fa\u00fa\5\2\u0082\u0083\u0086\u008a\u00fa")
        buf.write("\u00fa\7\2\f\r\u0082\u0083\u0086\u008a\u008d\u008d\u00fa")
        buf.write("\u00fa\5\2\u00c4\u00c6\u00ca\u00cc\u00fa\u00fa\4\2\u00c7")
        buf.write("\u00cc\u00fa\u00fa\3\2\u0097\u0099\3\2_c\4\2\u00e0\u00e6")
        buf.write("\u00fa\u00fa\3\2$%\4\2&\'\u00fa\u00fa\2\u0ad8\2\u016f")
        buf.write("\3\2\2\2\4\u0174\3\2\2\2\6\u0176\3\2\2\2\b\u0180\3\2\2")
        buf.write("\2\n\u0182\3\2\2\2\f\u018d\3\2\2\2\16\u019f\3\2\2\2\20")
        buf.write("\u01c0\3\2\2\2\22\u01c3\3\2\2\2\24\u01cc\3\2\2\2\26\u01d5")
        buf.write("\3\2\2\2\30\u01de\3\2\2\2\32\u01e7\3\2\2\2\34\u01f0\3")
        buf.write("\2\2\2\36\u01f9\3\2\2\2 \u0202\3\2\2\2\"\u020b\3\2\2\2")
        buf.write("$\u0214\3\2\2\2&\u021d\3\2\2\2(\u0225\3\2\2\2*\u022d\3")
        buf.write("\2\2\2,\u0235\3\2\2\2.\u023d\3\2\2\2\60\u0269\3\2\2\2")
        buf.write("\62\u0276\3\2\2\2\64\u027e\3\2\2\2\66\u0280\3\2\2\28\u028e")
        buf.write("\3\2\2\2:\u0291\3\2\2\2<\u02a2\3\2\2\2>\u02c4\3\2\2\2")
        buf.write("@\u02fe\3\2\2\2B\u0300\3\2\2\2D\u0319\3\2\2\2F\u0320\3")
        buf.write("\2\2\2H\u0327\3\2\2\2J\u0337\3\2\2\2L\u0347\3\2\2\2N\u034c")
        buf.write("\3\2\2\2P\u0353\3\2\2\2R\u0362\3\2\2\2T\u0370\3\2\2\2")
        buf.write("V\u0383\3\2\2\2X\u03b1\3\2\2\2Z\u03b3\3\2\2\2\\\u03ba")
        buf.write("\3\2\2\2^\u03be\3\2\2\2`\u03c0\3\2\2\2b\u03c8\3\2\2\2")
        buf.write("d\u03e7\3\2\2\2f\u040d\3\2\2\2h\u0410\3\2\2\2j\u0413\3")
        buf.write("\2\2\2l\u041d\3\2\2\2n\u041f\3\2\2\2p\u0443\3\2\2\2r\u044b")
        buf.write("\3\2\2\2t\u044d\3\2\2\2v\u047e\3\2\2\2x\u0482\3\2\2\2")
        buf.write("z\u0484\3\2\2\2|\u04c9\3\2\2\2~\u04d3\3\2\2\2\u0080\u04d5")
        buf.write("\3\2\2\2\u0082\u04ea\3\2\2\2\u0084\u04f7\3\2\2\2\u0086")
        buf.write("\u04f9\3\2\2\2\u0088\u0514\3\2\2\2\u008a\u052f\3\2\2\2")
        buf.write("\u008c\u0537\3\2\2\2\u008e\u053c\3\2\2\2\u0090\u0544\3")
        buf.write("\2\2\2\u0092\u0549\3\2\2\2\u0094\u055f\3\2\2\2\u0096\u0568")
        buf.write("\3\2\2\2\u0098\u056a\3\2\2\2\u009a\u0572\3\2\2\2\u009c")
        buf.write("\u0574\3\2\2\2\u009e\u0584\3\2\2\2\u00a0\u0588\3\2\2\2")
        buf.write("\u00a2\u058a\3\2\2\2\u00a4\u059f\3\2\2\2\u00a6\u05a7\3")
        buf.write("\2\2\2\u00a8\u05a9\3\2\2\2\u00aa\u05ad\3\2\2\2\u00ac\u05b5")
        buf.write("\3\2\2\2\u00ae\u05ba\3\2\2\2\u00b0\u05bc\3\2\2\2\u00b2")
        buf.write("\u05d1\3\2\2\2\u00b4\u05df\3\2\2\2\u00b6\u05e1\3\2\2\2")
        buf.write("\u00b8\u05f6\3\2\2\2\u00ba\u0600\3\2\2\2\u00bc\u0604\3")
        buf.write("\2\2\2\u00be\u0606\3\2\2\2\u00c0\u061c\3\2\2\2\u00c2\u062a")
        buf.write("\3\2\2\2\u00c4\u063b\3\2\2\2\u00c6\u063d\3\2\2\2\u00c8")
        buf.write("\u064f\3\2\2\2\u00ca\u0659\3\2\2\2\u00cc\u065b\3\2\2\2")
        buf.write("\u00ce\u0677\3\2\2\2\u00d0\u0682\3\2\2\2\u00d2\u0684\3")
        buf.write("\2\2\2\u00d4\u06a0\3\2\2\2\u00d6\u06aa\3\2\2\2\u00d8\u06ac")
        buf.write("\3\2\2\2\u00da\u06c0\3\2\2\2\u00dc\u06cc\3\2\2\2\u00de")
        buf.write("\u06ce\3\2\2\2\u00e0\u072e\3\2\2\2\u00e2\u0742\3\2\2\2")
        buf.write("\u00e4\u074a\3\2\2\2\u00e6\u074c\3\2\2\2\u00e8\u07ac\3")
        buf.write("\2\2\2\u00ea\u07c0\3\2\2\2\u00ec\u07c8\3\2\2\2\u00ee\u07cd")
        buf.write("\3\2\2\2\u00f0\u07d4\3\2\2\2\u00f2\u07d6\3\2\2\2\u00f4")
        buf.write("\u07e2\3\2\2\2\u00f6\u07ee\3\2\2\2\u00f8\u07fa\3\2\2\2")
        buf.write("\u00fa\u07fe\3\2\2\2\u00fc\u0815\3\2\2\2\u00fe\u086c\3")
        buf.write("\2\2\2\u0100\u086f\3\2\2\2\u0102\u087f\3\2\2\2\u0104\u0886")
        buf.write("\3\2\2\2\u0106\u0889\3\2\2\2\u0108\u0891\3\2\2\2\u010a")
        buf.write("\u0899\3\2\2\2\u010c\u08a1\3\2\2\2\u010e\u08a9\3\2\2\2")
        buf.write("\u0110\u08b1\3\2\2\2\u0112\u08bb\3\2\2\2\u0114\u08c9\3")
        buf.write("\2\2\2\u0116\u08d3\3\2\2\2\u0118\u08dd\3\2\2\2\u011a\u08ee")
        buf.write("\3\2\2\2\u011c\u08ff\3\2\2\2\u011e\u0901\3\2\2\2\u0120")
        buf.write("\u0908\3\2\2\2\u0122\u090f\3\2\2\2\u0124\u0918\3\2\2\2")
        buf.write("\u0126\u0927\3\2\2\2\u0128\u0929\3\2\2\2\u012a\u092b\3")
        buf.write("\2\2\2\u012c\u092d\3\2\2\2\u012e\u0932\3\2\2\2\u0130\u0937")
        buf.write("\3\2\2\2\u0132\u0950\3\2\2\2\u0134\u0957\3\2\2\2\u0136")
        buf.write("\u0959\3\2\2\2\u0138\u095e\3\2\2\2\u013a\u0963\3\2\2\2")
        buf.write("\u013c\u0965\3\2\2\2\u013e\u096a\3\2\2\2\u0140\u0975\3")
        buf.write("\2\2\2\u0142\u0981\3\2\2\2\u0144\u0983\3\2\2\2\u0146\u0988")
        buf.write("\3\2\2\2\u0148\u098d\3\2\2\2\u014a\u09a2\3\2\2\2\u014c")
        buf.write("\u09a7\3\2\2\2\u014e\u09ac\3\2\2\2\u0150\u09b7\3\2\2\2")
        buf.write("\u0152\u09bc\3\2\2\2\u0154\u09c1\3\2\2\2\u0156\u09c6\3")
        buf.write("\2\2\2\u0158\u09d8\3\2\2\2\u015a\u09da\3\2\2\2\u015c\u09e3")
        buf.write("\3\2\2\2\u015e\u09f5\3\2\2\2\u0160\u09f7\3\2\2\2\u0162")
        buf.write("\u0a00\3\2\2\2\u0164\u0a09\3\2\2\2\u0166\u0a1d\3\2\2\2")
        buf.write("\u0168\u0a1f\3\2\2\2\u016a\u016e\5\n\6\2\u016b\u016e\5")
        buf.write("\f\7\2\u016c\u016e\5\16\b\2\u016d\u016a\3\2\2\2\u016d")
        buf.write("\u016b\3\2\2\2\u016d\u016c\3\2\2\2\u016e\u0171\3\2\2\2")
        buf.write("\u016f\u016d\3\2\2\2\u016f\u0170\3\2\2\2\u0170\u0172\3")
        buf.write("\2\2\2\u0171\u016f\3\2\2\2\u0172\u0173\5.\30\2\u0173\3")
        buf.write("\3\2\2\2\u0174\u0175\7\3\2\2\u0175\5\3\2\2\2\u0176\u0179")
        buf.write("\t\2\2\2\u0177\u0178\7\66\2\2\u0178\u017a\7\u00fb\2\2")
        buf.write("\u0179\u0177\3\2\2\2\u0179\u017a\3\2\2\2\u017a\u017d\3")
        buf.write("\2\2\2\u017b\u017c\7\66\2\2\u017c\u017e\7\u00fa\2\2\u017d")
        buf.write("\u017b\3\2\2\2\u017d\u017e\3\2\2\2\u017e\7\3\2\2\2\u017f")
        buf.write("\u0181\7\u00fa\2\2\u0180\u017f\3\2\2\2\u0180\u0181\3\2")
        buf.write("\2\2\u0181\t\3\2\2\2\u0182\u0183\7\6\2\2\u0183\u0184\7")
        buf.write("\7\2\2\u0184\u0188\7-\2\2\u0185\u0189\5\4\3\2\u0186\u0189")
        buf.write("\5\6\4\2\u0187\u0189\5\b\5\2\u0188\u0185\3\2\2\2\u0188")
        buf.write("\u0186\3\2\2\2\u0188\u0187\3\2\2\2\u0188\u0189\3\2\2\2")
        buf.write("\u0189\u018a\3\2\2\2\u018a\u018b\7.\2\2\u018b\13\3\2\2")
        buf.write("\2\u018c\u018e\7\u0091\2\2\u018d\u018c\3\2\2\2\u018d\u018e")
        buf.write("\3\2\2\2\u018e\u018f\3\2\2\2\u018f\u0191\7]\2\2\u0190")
        buf.write("\u0192\7\\\2\2\u0191\u0190\3\2\2\2\u0191\u0192\3\2\2\2")
        buf.write("\u0192\u0194\3\2\2\2\u0193\u0195\7\u00fb\2\2\u0194\u0193")
        buf.write("\3\2\2\2\u0194\u0195\3\2\2\2\u0195\u0196\3\2\2\2\u0196")
        buf.write("\u0197\7+\2\2\u0197\u0198\5\20\t\2\u0198\u019a\7,\2\2")
        buf.write("\u0199\u019b\7\u00fb\2\2\u019a\u0199\3\2\2\2\u019a\u019b")
        buf.write("\3\2\2\2\u019b\u019c\3\2\2\2\u019c\u019d\7\65\2\2\u019d")
        buf.write("\r\3\2\2\2\u019e\u01a0\7\u0091\2\2\u019f\u019e\3\2\2\2")
        buf.write("\u019f\u01a0\3\2\2\2\u01a0\u01a1\3\2\2\2\u01a1\u01a3\7")
        buf.write("^\2\2\u01a2\u01a4\7\\\2\2\u01a3\u01a2\3\2\2\2\u01a3\u01a4")
        buf.write("\3\2\2\2\u01a4\u01a6\3\2\2\2\u01a5\u01a7\7\u00fb\2\2\u01a6")
        buf.write("\u01a5\3\2\2\2\u01a6\u01a7\3\2\2\2\u01a7\u01a8\3\2\2\2")
        buf.write("\u01a8\u01a9\7+\2\2\u01a9\u01aa\5\20\t\2\u01aa\u01ac\7")
        buf.write(",\2\2\u01ab\u01ad\7\u00fb\2\2\u01ac\u01ab\3\2\2\2\u01ac")
        buf.write("\u01ad\3\2\2\2\u01ad\u01ae\3\2\2\2\u01ae\u01af\7\65\2")
        buf.write("\2\u01af\17\3\2\2\2\u01b0\u01bf\5\22\n\2\u01b1\u01bf\5")
        buf.write("\24\13\2\u01b2\u01bf\5\26\f\2\u01b3\u01bf\5\30\r\2\u01b4")
        buf.write("\u01bf\5\32\16\2\u01b5\u01bf\5\34\17\2\u01b6\u01bf\5\36")
        buf.write("\20\2\u01b7\u01bf\5 \21\2\u01b8\u01bf\5\"\22\2\u01b9\u01bf")
        buf.write("\5$\23\2\u01ba\u01bf\5&\24\2\u01bb\u01bf\5(\25\2\u01bc")
        buf.write("\u01bf\5*\26\2\u01bd\u01bf\5,\27\2\u01be\u01b0\3\2\2\2")
        buf.write("\u01be\u01b1\3\2\2\2\u01be\u01b2\3\2\2\2\u01be\u01b3\3")
        buf.write("\2\2\2\u01be\u01b4\3\2\2\2\u01be\u01b5\3\2\2\2\u01be\u01b6")
        buf.write("\3\2\2\2\u01be\u01b7\3\2\2\2\u01be\u01b8\3\2\2\2\u01be")
        buf.write("\u01b9\3\2\2\2\u01be\u01ba\3\2\2\2\u01be\u01bb\3\2\2\2")
        buf.write("\u01be\u01bc\3\2\2\2\u01be\u01bd\3\2\2\2\u01bf\u01c2\3")
        buf.write("\2\2\2\u01c0\u01be\3\2\2\2\u01c0\u01c1\3\2\2\2\u01c1\21")
        buf.write("\3\2\2\2\u01c2\u01c0\3\2\2\2\u01c3\u01c4\7`\2\2\u01c4")
        buf.write("\u01c8\7\u00fb\2\2\u01c5\u01c6\7/\2\2\u01c6\u01c7\7\u00fa")
        buf.write("\2\2\u01c7\u01c9\7\60\2\2\u01c8\u01c5\3\2\2\2\u01c8\u01c9")
        buf.write("\3\2\2\2\u01c9\u01ca\3\2\2\2\u01ca\u01cb\7\65\2\2\u01cb")
        buf.write("\23\3\2\2\2\u01cc\u01cd\7a\2\2\u01cd\u01d1\7\u00fb\2\2")
        buf.write("\u01ce\u01cf\7/\2\2\u01cf\u01d0\7\u00fa\2\2\u01d0\u01d2")
        buf.write("\7\60\2\2\u01d1\u01ce\3\2\2\2\u01d1\u01d2\3\2\2\2\u01d2")
        buf.write("\u01d3\3\2\2\2\u01d3\u01d4\7\65\2\2\u01d4\25\3\2\2\2\u01d5")
        buf.write("\u01d6\7b\2\2\u01d6\u01da\7\u00fb\2\2\u01d7\u01d8\7/\2")
        buf.write("\2\u01d8\u01d9\7\u00fa\2\2\u01d9\u01db\7\60\2\2\u01da")
        buf.write("\u01d7\3\2\2\2\u01da\u01db\3\2\2\2\u01db\u01dc\3\2\2\2")
        buf.write("\u01dc\u01dd\7\65\2\2\u01dd\27\3\2\2\2\u01de\u01df\7c")
        buf.write("\2\2\u01df\u01e3\7\u00fb\2\2\u01e0\u01e1\7/\2\2\u01e1")
        buf.write("\u01e2\7\u00fa\2\2\u01e2\u01e4\7\60\2\2\u01e3\u01e0\3")
        buf.write("\2\2\2\u01e3\u01e4\3\2\2\2\u01e4\u01e5\3\2\2\2\u01e5\u01e6")
        buf.write("\7\65\2\2\u01e6\31\3\2\2\2\u01e7\u01e8\7_\2\2\u01e8\u01ec")
        buf.write("\7\u00fb\2\2\u01e9\u01ea\7/\2\2\u01ea\u01eb\7\u00fa\2")
        buf.write("\2\u01eb\u01ed\7\60\2\2\u01ec\u01e9\3\2\2\2\u01ec\u01ed")
        buf.write("\3\2\2\2\u01ed\u01ee\3\2\2\2\u01ee\u01ef\7\65\2\2\u01ef")
        buf.write("\33\3\2\2\2\u01f0\u01f1\7d\2\2\u01f1\u01f5\7\u00fb\2\2")
        buf.write("\u01f2\u01f3\7/\2\2\u01f3\u01f4\7\u00fa\2\2\u01f4\u01f6")
        buf.write("\7\60\2\2\u01f5\u01f2\3\2\2\2\u01f5\u01f6\3\2\2\2\u01f6")
        buf.write("\u01f7\3\2\2\2\u01f7\u01f8\7\65\2\2\u01f8\35\3\2\2\2\u01f9")
        buf.write("\u01fa\7e\2\2\u01fa\u01fe\7\u00fb\2\2\u01fb\u01fc\7/\2")
        buf.write("\2\u01fc\u01fd\7\u00fa\2\2\u01fd\u01ff\7\60\2\2\u01fe")
        buf.write("\u01fb\3\2\2\2\u01fe\u01ff\3\2\2\2\u01ff\u0200\3\2\2\2")
        buf.write("\u0200\u0201\7\65\2\2\u0201\37\3\2\2\2\u0202\u0203\7f")
        buf.write("\2\2\u0203\u0207\7\u00fb\2\2\u0204\u0205\7/\2\2\u0205")
        buf.write("\u0206\7\u00fa\2\2\u0206\u0208\7\60\2\2\u0207\u0204\3")
        buf.write("\2\2\2\u0207\u0208\3\2\2\2\u0208\u0209\3\2\2\2\u0209\u020a")
        buf.write("\7\65\2\2\u020a!\3\2\2\2\u020b\u020c\7g\2\2\u020c\u0210")
        buf.write("\7\u00fb\2\2\u020d\u020e\7/\2\2\u020e\u020f\7\u00fa\2")
        buf.write("\2\u020f\u0211\7\60\2\2\u0210\u020d\3\2\2\2\u0210\u0211")
        buf.write("\3\2\2\2\u0211\u0212\3\2\2\2\u0212\u0213\7\65\2\2\u0213")
        buf.write("#\3\2\2\2\u0214\u0215\7\u00fb\2\2\u0215\u0219\7\u00fb")
        buf.write("\2\2\u0216\u0217\7/\2\2\u0217\u0218\7\u00fa\2\2\u0218")
        buf.write("\u021a\7\60\2\2\u0219\u0216\3\2\2\2\u0219\u021a\3\2\2")
        buf.write("\2\u021a\u021b\3\2\2\2\u021b\u021c\7\65\2\2\u021c%\3\2")
        buf.write("\2\2\u021d\u021f\7`\2\2\u021e\u0220\7\u00fb\2\2\u021f")
        buf.write("\u021e\3\2\2\2\u021f\u0220\3\2\2\2\u0220\u0221\3\2\2\2")
        buf.write("\u0221\u0222\7\63\2\2\u0222\u0223\7\u00fa\2\2\u0223\u0224")
        buf.write("\7\65\2\2\u0224\'\3\2\2\2\u0225\u0227\7a\2\2\u0226\u0228")
        buf.write("\7\u00fb\2\2\u0227\u0226\3\2\2\2\u0227\u0228\3\2\2\2\u0228")
        buf.write("\u0229\3\2\2\2\u0229\u022a\7\63\2\2\u022a\u022b\7\u00fa")
        buf.write("\2\2\u022b\u022c\7\65\2\2\u022c)\3\2\2\2\u022d\u022f\7")
        buf.write("b\2\2\u022e\u0230\7\u00fb\2\2\u022f\u022e\3\2\2\2\u022f")
        buf.write("\u0230\3\2\2\2\u0230\u0231\3\2\2\2\u0231\u0232\7\63\2")
        buf.write("\2\u0232\u0233\7\u00fa\2\2\u0233\u0234\7\65\2\2\u0234")
        buf.write("+\3\2\2\2\u0235\u0237\7c\2\2\u0236\u0238\7\u00fb\2\2\u0237")
        buf.write("\u0236\3\2\2\2\u0237\u0238\3\2\2\2\u0238\u0239\3\2\2\2")
        buf.write("\u0239\u023a\7\63\2\2\u023a\u023b\7\u00fa\2\2\u023b\u023c")
        buf.write("\7\65\2\2\u023c-\3\2\2\2\u023d\u023e\78\2\2\u023e\u023f")
        buf.write("\7h\2\2\u023f\u0240\7\b\2\2\u0240\u0241\5J&\2\u0241\u0242")
        buf.write("\7\66\2\2\u0242\u0243\7;\2\2\u0243\u0244\7\b\2\2\u0244")
        buf.write("\u0245\7\u00f9\2\2\u0245\u0246\7-\2\2\u0246\u0247\7\u00fa")
        buf.write("\2\2\u0247\u0248\7.\2\2\u0248\u0249\7\66\2\2\u0249\u024a")
        buf.write("\7J\2\2\u024a\u024b\7\b\2\2\u024b\u024c\7\u00f9\2\2\u024c")
        buf.write("\u024d\7-\2\2\u024d\u024e\7\u00fa\2\2\u024e\u024f\7.\2")
        buf.write("\2\u024f\u0255\7\66\2\2\u0250\u0251\7\u0090\2\2\u0251")
        buf.write("\u0252\7\b\2\2\u0252\u0253\5\60\31\2\u0253\u0254\7\66")
        buf.write("\2\2\u0254\u0256\3\2\2\2\u0255\u0250\3\2\2\2\u0255\u0256")
        buf.write("\3\2\2\2\u0256\u025c\3\2\2\2\u0257\u0258\7\u008e\2\2\u0258")
        buf.write("\u0259\7\b\2\2\u0259\u025a\5\62\32\2\u025a\u025b\7\66")
        buf.write("\2\2\u025b\u025d\3\2\2\2\u025c\u0257\3\2\2\2\u025c\u025d")
        buf.write("\3\2\2\2\u025d\u0263\3\2\2\2\u025e\u025f\7\u008f\2\2\u025f")
        buf.write("\u0260\7\b\2\2\u0260\u0261\5\66\34\2\u0261\u0262\7\66")
        buf.write("\2\2\u0262\u0264\3\2\2\2\u0263\u025e\3\2\2\2\u0263\u0264")
        buf.write("\3\2\2\2\u0264\u0265\3\2\2\2\u0265\u0266\58\35\2\u0266")
        buf.write("\u0267\7:\2\2\u0267\u0268\7\65\2\2\u0268/\3\2\2\2\u0269")
        buf.write("\u026c\5J&\2\u026a\u026b\7\t\2\2\u026b\u026d\5J&\2\u026c")
        buf.write("\u026a\3\2\2\2\u026c\u026d\3\2\2\2\u026d\u0270\3\2\2\2")
        buf.write("\u026e\u026f\7\t\2\2\u026f\u0271\5J&\2\u0270\u026e\3\2")
        buf.write("\2\2\u0270\u0271\3\2\2\2\u0271\u0274\3\2\2\2\u0272\u0273")
        buf.write("\7\t\2\2\u0273\u0275\5J&\2\u0274\u0272\3\2\2\2\u0274\u0275")
        buf.write("\3\2\2\2\u0275\61\3\2\2\2\u0276\u027b\5\64\33\2\u0277")
        buf.write("\u0278\7\t\2\2\u0278\u027a\5\64\33\2\u0279\u0277\3\2\2")
        buf.write("\2\u027a\u027d\3\2\2\2\u027b\u0279\3\2\2\2\u027b\u027c")
        buf.write("\3\2\2\2\u027c\63\3\2\2\2\u027d\u027b\3\2\2\2\u027e\u027f")
        buf.write("\t\3\2\2\u027f\65\3\2\2\2\u0280\u0281\t\4\2\2\u0281\67")
        buf.write("\3\2\2\2\u0282\u028d\5b\62\2\u0283\u028d\5d\63\2\u0284")
        buf.write("\u028d\5f\64\2\u0285\u028d\5<\37\2\u0286\u028d\5> \2\u0287")
        buf.write("\u028d\5B\"\2\u0288\u028d\5:\36\2\u0289\u028d\5D#\2\u028a")
        buf.write("\u028d\5F$\2\u028b\u028d\5\u00fc\177\2\u028c\u0282\3\2")
        buf.write("\2\2\u028c\u0283\3\2\2\2\u028c\u0284\3\2\2\2\u028c\u0285")
        buf.write("\3\2\2\2\u028c\u0286\3\2\2\2\u028c\u0287\3\2\2\2\u028c")
        buf.write("\u0288\3\2\2\2\u028c\u0289\3\2\2\2\u028c\u028a\3\2\2\2")
        buf.write("\u028c\u028b\3\2\2\2\u028d\u0290\3\2\2\2\u028e\u028c\3")
        buf.write("\2\2\2\u028e\u028f\3\2\2\2\u028f9\3\2\2\2\u0290\u028e")
        buf.write("\3\2\2\2\u0291\u0292\7\u00a8\2\2\u0292\u0293\7\u00fb\2")
        buf.write("\2\u0293\u0294\7\66\2\2\u0294\u0295\7?\2\2\u0295\u0296")
        buf.write("\7\b\2\2\u0296\u0297\7\u00f9\2\2\u0297\u0298\7-\2\2\u0298")
        buf.write("\u0299\7\u00fa\2\2\u0299\u029e\7.\2\2\u029a\u029b\7\66")
        buf.write("\2\2\u029b\u029c\7\u00a9\2\2\u029c\u029d\7\b\2\2\u029d")
        buf.write("\u029f\7\u00fa\2\2\u029e\u029a\3\2\2\2\u029e\u029f\3\2")
        buf.write("\2\2\u029f\u02a0\3\2\2\2\u02a0\u02a1\7\65\2\2\u02a1;\3")
        buf.write("\2\2\2\u02a2\u02b3\7\u00aa\2\2\u02a3\u02a4\7\u00fb\2\2")
        buf.write("\u02a4\u02b4\7\66\2\2\u02a5\u02a6\7c\2\2\u02a6\u02b4\7")
        buf.write("\66\2\2\u02a7\u02a8\7b\2\2\u02a8\u02b4\7\66\2\2\u02a9")
        buf.write("\u02aa\7a\2\2\u02aa\u02b4\7\66\2\2\u02ab\u02ac\7`\2\2")
        buf.write("\u02ac\u02b4\7\66\2\2\u02ad\u02ae\7e\2\2\u02ae\u02b4\7")
        buf.write("\66\2\2\u02af\u02b0\7f\2\2\u02b0\u02b4\7\66\2\2\u02b1")
        buf.write("\u02b2\7g\2\2\u02b2\u02b4\7\66\2\2\u02b3\u02a3\3\2\2\2")
        buf.write("\u02b3\u02a5\3\2\2\2\u02b3\u02a7\3\2\2\2\u02b3\u02a9\3")
        buf.write("\2\2\2\u02b3\u02ab\3\2\2\2\u02b3\u02ad\3\2\2\2\u02b3\u02af")
        buf.write("\3\2\2\2\u02b3\u02b1\3\2\2\2\u02b4\u02b9\3\2\2\2\u02b5")
        buf.write("\u02b6\7\u009c\2\2\u02b6\u02b7\7\b\2\2\u02b7\u02b8\7\u00fa")
        buf.write("\2\2\u02b8\u02ba\7\66\2\2\u02b9\u02b5\3\2\2\2\u02b9\u02ba")
        buf.write("\3\2\2\2\u02ba\u02bb\3\2\2\2\u02bb\u02bc\7\u009b\2\2\u02bc")
        buf.write("\u02bd\7\b\2\2\u02bd\u02be\7\u00fb\2\2\u02be\u02bf\7\66")
        buf.write("\2\2\u02bf\u02c0\7h\2\2\u02c0\u02c1\7\b\2\2\u02c1\u02c2")
        buf.write("\5J&\2\u02c2\u02c3\7\65\2\2\u02c3=\3\2\2\2\u02c4\u02d5")
        buf.write("\7\u00ab\2\2\u02c5\u02c6\7\u00fb\2\2\u02c6\u02d6\7\66")
        buf.write("\2\2\u02c7\u02c8\7c\2\2\u02c8\u02d6\7\66\2\2\u02c9\u02ca")
        buf.write("\7b\2\2\u02ca\u02d6\7\66\2\2\u02cb\u02cc\7a\2\2\u02cc")
        buf.write("\u02d6\7\66\2\2\u02cd\u02ce\7`\2\2\u02ce\u02d6\7\66\2")
        buf.write("\2\u02cf\u02d0\7e\2\2\u02d0\u02d6\7\66\2\2\u02d1\u02d2")
        buf.write("\7f\2\2\u02d2\u02d6\7\66\2\2\u02d3\u02d4\7g\2\2\u02d4")
        buf.write("\u02d6\7\66\2\2\u02d5\u02c5\3\2\2\2\u02d5\u02c7\3\2\2")
        buf.write("\2\u02d5\u02c9\3\2\2\2\u02d5\u02cb\3\2\2\2\u02d5\u02cd")
        buf.write("\3\2\2\2\u02d5\u02cf\3\2\2\2\u02d5\u02d1\3\2\2\2\u02d5")
        buf.write("\u02d3\3\2\2\2\u02d6\u02db\3\2\2\2\u02d7\u02d8\7\u009c")
        buf.write("\2\2\u02d8\u02d9\7\b\2\2\u02d9\u02da\7\u00fa\2\2\u02da")
        buf.write("\u02dc\7\66\2\2\u02db\u02d7\3\2\2\2\u02db\u02dc\3\2\2")
        buf.write("\2\u02dc\u02dd\3\2\2\2\u02dd\u02de\7\u00a9\2\2\u02de\u02df")
        buf.write("\7\b\2\2\u02df\u02e4\5@!\2\u02e0\u02e1\7\t\2\2\u02e1\u02e3")
        buf.write("\5@!\2\u02e2\u02e0\3\2\2\2\u02e3\u02e6\3\2\2\2\u02e4\u02e2")
        buf.write("\3\2\2\2\u02e4\u02e5\3\2\2\2\u02e5\u02e7\3\2\2\2\u02e6")
        buf.write("\u02e4\3\2\2\2\u02e7\u02f7\7\66\2\2\u02e8\u02e9\7\u009b")
        buf.write("\2\2\u02e9\u02ea\7\b\2\2\u02ea\u02eb\7\u00fb\2\2\u02eb")
        buf.write("\u02f8\7\66\2\2\u02ec\u02ed\7\u009b\2\2\u02ed\u02ee\7")
        buf.write("\b\2\2\u02ee\u02ef\7\u00f9\2\2\u02ef\u02f0\7-\2\2\u02f0")
        buf.write("\u02f1\7\u00fa\2\2\u02f1\u02f2\7.\2\2\u02f2\u02f3\7\66")
        buf.write("\2\2\u02f3\u02f4\7\u00ac\2\2\u02f4\u02f5\7\b\2\2\u02f5")
        buf.write("\u02f6\7\u00fa\2\2\u02f6\u02f8\7\66\2\2\u02f7\u02e8\3")
        buf.write("\2\2\2\u02f7\u02ec\3\2\2\2\u02f8\u02f9\3\2\2\2\u02f9\u02fa")
        buf.write("\7h\2\2\u02fa\u02fb\7\b\2\2\u02fb\u02fc\5J&\2\u02fc\u02fd")
        buf.write("\7\65\2\2\u02fd?\3\2\2\2\u02fe\u02ff\7\u00fa\2\2\u02ff")
        buf.write("A\3\2\2\2\u0300\u0301\7\u00ad\2\2\u0301\u0302\7\u00fb")
        buf.write("\2\2\u0302\u0307\7\66\2\2\u0303\u0304\7\u009c\2\2\u0304")
        buf.write("\u0305\7\b\2\2\u0305\u0306\7\u00fa\2\2\u0306\u0308\7\66")
        buf.write("\2\2\u0307\u0303\3\2\2\2\u0307\u0308\3\2\2\2\u0308\u0310")
        buf.write("\3\2\2\2\u0309\u030a\7\u009b\2\2\u030a\u030b\7\b\2\2\u030b")
        buf.write("\u030c\7\u00f9\2\2\u030c\u030d\7-\2\2\u030d\u030e\7\u00fa")
        buf.write("\2\2\u030e\u030f\7.\2\2\u030f\u0311\7\66\2\2\u0310\u0309")
        buf.write("\3\2\2\2\u0311\u0312\3\2\2\2\u0312\u0310\3\2\2\2\u0312")
        buf.write("\u0313\3\2\2\2\u0313\u0314\3\2\2\2\u0314\u0315\7h\2\2")
        buf.write("\u0315\u0316\7\b\2\2\u0316\u0317\5J&\2\u0317\u0318\7\65")
        buf.write("\2\2\u0318C\3\2\2\2\u0319\u031a\7y\2\2\u031a\u031b\5\u0106")
        buf.write("\u0084\2\u031b\u031c\7\65\2\2\u031c\u031d\58\35\2\u031d")
        buf.write("\u031e\7\u0080\2\2\u031e\u031f\7\65\2\2\u031fE\3\2\2\2")
        buf.write("\u0320\u0321\7x\2\2\u0321\u0322\5\u0106\u0084\2\u0322")
        buf.write("\u0323\7\65\2\2\u0323\u0324\58\35\2\u0324\u0325\7\u0080")
        buf.write("\2\2\u0325\u0326\7\65\2\2\u0326G\3\2\2\2\u0327\u0328\7")
        buf.write("\u00fa\2\2\u0328\u0329\7\66\2\2\u0329\u032a\7\u00fa\2")
        buf.write("\2\u032a\u032b\7\66\2\2\u032b\u032c\7\u00fa\2\2\u032c")
        buf.write("\u032d\7\66\2\2\u032d\u032e\7\u00fa\2\2\u032e\u032f\7")
        buf.write("\66\2\2\u032f\u0330\7\u00fa\2\2\u0330\u0331\7\66\2\2\u0331")
        buf.write("\u0332\7\u00fa\2\2\u0332\u0333\7\66\2\2\u0333\u0334\7")
        buf.write("\u00fa\2\2\u0334\u0335\7\66\2\2\u0335\u0336\7\u00fa\2")
        buf.write("\2\u0336I\3\2\2\2\u0337\u0338\7+\2\2\u0338\u0339\7\u00fa")
        buf.write("\2\2\u0339\u033a\7\66\2\2\u033a\u033b\7\u00fa\2\2\u033b")
        buf.write("\u033c\7\66\2\2\u033c\u033d\7\u00fa\2\2\u033d\u0343\7")
        buf.write("\66\2\2\u033e\u033f\7+\2\2\u033f\u0340\5H%\2\u0340\u0341")
        buf.write("\7,\2\2\u0341\u0344\3\2\2\2\u0342\u0344\5H%\2\u0343\u033e")
        buf.write("\3\2\2\2\u0343\u0342\3\2\2\2\u0344\u0345\3\2\2\2\u0345")
        buf.write("\u0346\7,\2\2\u0346K\3\2\2\2\u0347\u0348\7\u00f9\2\2\u0348")
        buf.write("\u0349\7-\2\2\u0349\u034a\7\u00fa\2\2\u034a\u034b\7.\2")
        buf.write("\2\u034bM\3\2\2\2\u034c\u034d\5P)\2\u034d\u034e\5R*\2")
        buf.write("\u034eO\3\2\2\2\u034f\u0350\7\u009b\2\2\u0350\u0351\7")
        buf.write("\b\2\2\u0351\u0352\7\u00fb\2\2\u0352\u0354\7\66\2\2\u0353")
        buf.write("\u034f\3\2\2\2\u0353\u0354\3\2\2\2\u0354\u035a\3\2\2\2")
        buf.write("\u0355\u0356\7\u009c\2\2\u0356\u0357\7\b\2\2\u0357\u0358")
        buf.write("\5V,\2\u0358\u0359\7\66\2\2\u0359\u035b\3\2\2\2\u035a")
        buf.write("\u0355\3\2\2\2\u035a\u035b\3\2\2\2\u035b\u0360\3\2\2\2")
        buf.write("\u035c\u035d\7\u009e\2\2\u035d\u035e\7\b\2\2\u035e\u035f")
        buf.write("\7\u00fa\2\2\u035f\u0361\7\66\2\2\u0360\u035c\3\2\2\2")
        buf.write("\u0360\u0361\3\2\2\2\u0361Q\3\2\2\2\u0362\u0363\7?\2\2")
        buf.write("\u0363\u0364\7\b\2\2\u0364\u0365\7\u00f9\2\2\u0365\u0366")
        buf.write("\7-\2\2\u0366\u0367\7\u00fa\2\2\u0367\u0368\7.\2\2\u0368")
        buf.write("\u0369\7\66\2\2\u0369\u036a\7J\2\2\u036a\u036b\7\b\2\2")
        buf.write("\u036b\u036c\7\u00f9\2\2\u036c\u036d\7-\2\2\u036d\u036e")
        buf.write("\7\u00fa\2\2\u036e\u036f\7.\2\2\u036fS\3\2\2\2\u0370\u0371")
        buf.write("\t\5\2\2\u0371U\3\2\2\2\u0372\u0373\7\u00fb\2\2\u0373")
        buf.write("\u0374\7/\2\2\u0374\u0375\7\u00fa\2\2\u0375\u0384\7\60")
        buf.write("\2\2\u0376\u0380\7\u00fb\2\2\u0377\u0378\7\61\2\2\u0378")
        buf.write("\u037c\7\u00fb\2\2\u0379\u037a\7/\2\2\u037a\u037b\7\u00fa")
        buf.write("\2\2\u037b\u037d\7\60\2\2\u037c\u0379\3\2\2\2\u037c\u037d")
        buf.write("\3\2\2\2\u037d\u037f\3\2\2\2\u037e\u0377\3\2\2\2\u037f")
        buf.write("\u0382\3\2\2\2\u0380\u037e\3\2\2\2\u0380\u0381\3\2\2\2")
        buf.write("\u0381\u0384\3\2\2\2\u0382\u0380\3\2\2\2\u0383\u0372\3")
        buf.write("\2\2\2\u0383\u0376\3\2\2\2\u0384W\3\2\2\2\u0385\u0387")
        buf.write("\7\62\2\2\u0386\u0385\3\2\2\2\u0386\u0387\3\2\2\2\u0387")
        buf.write("\u0388\3\2\2\2\u0388\u03b2\7\u00fa\2\2\u0389\u03b2\7\u00e0")
        buf.write("\2\2\u038a\u03b2\7\u00e1\2\2\u038b\u03b2\7\u00e2\2\2\u038c")
        buf.write("\u03b2\7\u00e3\2\2\u038d\u03b2\7\u00e4\2\2\u038e\u038f")
        buf.write("\7\u00fa\2\2\u038f\u0390\7\63\2\2\u0390\u0391\7\u00fa")
        buf.write("\2\2\u0391\u0392\7\63\2\2\u0392\u03b2\7\u00fa\2\2\u0393")
        buf.write("\u0394\7\u00fa\2\2\u0394\u0395\7\64\2\2\u0395\u0396\7")
        buf.write("\u00fa\2\2\u0396\u0397\7\64\2\2\u0397\u03b2\7\u00fa\2")
        buf.write("\2\u0398\u0399\7\u00fa\2\2\u0399\u039a\7\65\2\2\u039a")
        buf.write("\u039b\7\u00fa\2\2\u039b\u039c\7\65\2\2\u039c\u039d\5")
        buf.write("J&\2\u039d\u039e\7\65\2\2\u039e\u039f\7\u00f9\2\2\u039f")
        buf.write("\u03a0\7-\2\2\u03a0\u03a1\7\u00fa\2\2\u03a1\u03a2\7.\2")
        buf.write("\2\u03a2\u03b2\3\2\2\2\u03a3\u03a4\7\u00f9\2\2\u03a4\u03a5")
        buf.write("\7-\2\2\u03a5\u03a6\7\u00fa\2\2\u03a6\u03b2\7.\2\2\u03a7")
        buf.write("\u03a8\7+\2\2\u03a8\u03ad\7\u00fa\2\2\u03a9\u03aa\7\66")
        buf.write("\2\2\u03aa\u03ac\7\u00fa\2\2\u03ab\u03a9\3\2\2\2\u03ac")
        buf.write("\u03af\3\2\2\2\u03ad\u03ab\3\2\2\2\u03ad\u03ae\3\2\2\2")
        buf.write("\u03ae\u03b0\3\2\2\2\u03af\u03ad\3\2\2\2\u03b0\u03b2\7")
        buf.write(",\2\2\u03b1\u0386\3\2\2\2\u03b1\u0389\3\2\2\2\u03b1\u038a")
        buf.write("\3\2\2\2\u03b1\u038b\3\2\2\2\u03b1\u038c\3\2\2\2\u03b1")
        buf.write("\u038d\3\2\2\2\u03b1\u038e\3\2\2\2\u03b1\u0393\3\2\2\2")
        buf.write("\u03b1\u0398\3\2\2\2\u03b1\u03a3\3\2\2\2\u03b1\u03a7\3")
        buf.write("\2\2\2\u03b2Y\3\2\2\2\u03b3\u03b4\7\u009f\2\2\u03b4\u03b5")
        buf.write("\7\b\2\2\u03b5\u03b6\7\n\2\2\u03b6\u03b7\7-\2\2\u03b7")
        buf.write("\u03b8\7\u00fa\2\2\u03b8\u03b9\7.\2\2\u03b9[\3\2\2\2\u03ba")
        buf.write("\u03bb\7\u00a0\2\2\u03bb]\3\2\2\2\u03bc\u03bf\5Z.\2\u03bd")
        buf.write("\u03bf\5\\/\2\u03be\u03bc\3\2\2\2\u03be\u03bd\3\2\2\2")
        buf.write("\u03bf_\3\2\2\2\u03c0\u03c5\5^\60\2\u03c1\u03c2\7\66\2")
        buf.write("\2\u03c2\u03c4\5^\60\2\u03c3\u03c1\3\2\2\2\u03c4\u03c7")
        buf.write("\3\2\2\2\u03c5\u03c3\3\2\2\2\u03c5\u03c6\3\2\2\2\u03c6")
        buf.write("a\3\2\2\2\u03c7\u03c5\3\2\2\2\u03c8\u03c9\7D\2\2\u03c9")
        buf.write("\u03ca\7<\2\2\u03ca\u03cb\7\b\2\2\u03cb\u03cc\7\u00fa")
        buf.write("\2\2\u03cc\u03cd\7\66\2\2\u03cd\u03ce\7;\2\2\u03ce\u03cf")
        buf.write("\7\b\2\2\u03cf\u03d0\7\u00f9\2\2\u03d0\u03d1\7-\2\2\u03d1")
        buf.write("\u03d2\7\u00fa\2\2\u03d2\u03d3\7.\2\2\u03d3\u03e1\7\65")
        buf.write("\2\2\u03d4\u03e0\5f\64\2\u03d5\u03e0\5h\65\2\u03d6\u03e0")
        buf.write("\5j\66\2\u03d7\u03e0\5\u009cO\2\u03d8\u03e0\5l\67\2\u03d9")
        buf.write("\u03e0\5\u0082B\2\u03da\u03e0\5\u00eex\2\u03db\u03e0\5")
        buf.write("\u00f8}\2\u03dc\u03e0\5\u00fa~\2\u03dd\u03e0\5\u00fc\177")
        buf.write("\2\u03de\u03e0\5\u0104\u0083\2\u03df\u03d4\3\2\2\2\u03df")
        buf.write("\u03d5\3\2\2\2\u03df\u03d6\3\2\2\2\u03df\u03d7\3\2\2\2")
        buf.write("\u03df\u03d8\3\2\2\2\u03df\u03d9\3\2\2\2\u03df\u03da\3")
        buf.write("\2\2\2\u03df\u03db\3\2\2\2\u03df\u03dc\3\2\2\2\u03df\u03dd")
        buf.write("\3\2\2\2\u03df\u03de\3\2\2\2\u03e0\u03e3\3\2\2\2\u03e1")
        buf.write("\u03df\3\2\2\2\u03e1\u03e2\3\2\2\2\u03e2\u03e4\3\2\2\2")
        buf.write("\u03e3\u03e1\3\2\2\2\u03e4\u03e5\7C\2\2\u03e5\u03e6\7")
        buf.write("\65\2\2\u03e6c\3\2\2\2\u03e7\u03e8\7E\2\2\u03e8\u03e9")
        buf.write("\7<\2\2\u03e9\u03ea\7\b\2\2\u03ea\u03eb\7\u00fa\2\2\u03eb")
        buf.write("\u03f7\7\66\2\2\u03ec\u03ed\7F\2\2\u03ed\u03ee\7\b\2\2")
        buf.write("\u03ee\u03ef\5L\'\2\u03ef\u03f0\7\65\2\2\u03f0\u03f1\7")
        buf.write("G\2\2\u03f1\u03f2\7\b\2\2\u03f2\u03f3\5J&\2\u03f3\u03f4")
        buf.write("\7\65\2\2\u03f4\u03f6\3\2\2\2\u03f5\u03ec\3\2\2\2\u03f6")
        buf.write("\u03f9\3\2\2\2\u03f7\u03f5\3\2\2\2\u03f7\u03f8\3\2\2\2")
        buf.write("\u03f8\u0407\3\2\2\2\u03f9\u03f7\3\2\2\2\u03fa\u0406\5")
        buf.write("f\64\2\u03fb\u0406\5h\65\2\u03fc\u0406\5j\66\2\u03fd\u0406")
        buf.write("\5\u009cO\2\u03fe\u0406\5l\67\2\u03ff\u0406\5\u0082B\2")
        buf.write("\u0400\u0406\5\u00eex\2\u0401\u0406\5\u00f8}\2\u0402\u0406")
        buf.write("\5\u00fa~\2\u0403\u0406\5\u00fc\177\2\u0404\u0406\5\u0104")
        buf.write("\u0083\2\u0405\u03fa\3\2\2\2\u0405\u03fb\3\2\2\2\u0405")
        buf.write("\u03fc\3\2\2\2\u0405\u03fd\3\2\2\2\u0405\u03fe\3\2\2\2")
        buf.write("\u0405\u03ff\3\2\2\2\u0405\u0400\3\2\2\2\u0405\u0401\3")
        buf.write("\2\2\2\u0405\u0402\3\2\2\2\u0405\u0403\3\2\2\2\u0405\u0404")
        buf.write("\3\2\2\2\u0406\u0409\3\2\2\2\u0407\u0405\3\2\2\2\u0407")
        buf.write("\u0408\3\2\2\2\u0408\u040a\3\2\2\2\u0409\u0407\3\2\2\2")
        buf.write("\u040a\u040b\7C\2\2\u040b\u040c\7\65\2\2\u040ce\3\2\2")
        buf.write("\2\u040d\u040e\5Z.\2\u040e\u040f\7\65\2\2\u040fg\3\2\2")
        buf.write("\2\u0410\u0411\5\\/\2\u0411\u0412\7\65\2\2\u0412i\3\2")
        buf.write("\2\2\u0413\u0414\7\u00a1\2\2\u0414\u0415\7\u00fb\2\2\u0415")
        buf.write("\u0416\7\66\2\2\u0416\u0417\5\u0106\u0084\2\u0417\u0418")
        buf.write("\7\u00a2\2\2\u0418\u0419\7\65\2\2\u0419k\3\2\2\2\u041a")
        buf.write("\u041e\5n8\2\u041b\u041e\5t;\2\u041c\u041e\5x=\2\u041d")
        buf.write("\u041a\3\2\2\2\u041d\u041b\3\2\2\2\u041d\u041c\3\2\2\2")
        buf.write("\u041em\3\2\2\2\u041f\u0420\7H\2\2\u0420\u0421\7K\2\2")
        buf.write("\u0421\u0422\7\b\2\2\u0422\u0423\7\u00f9\2\2\u0423\u0424")
        buf.write("\7-\2\2\u0424\u0425\7\u00fa\2\2\u0425\u042a\7.\2\2\u0426")
        buf.write("\u0427\7\66\2\2\u0427\u0428\7M\2\2\u0428\u0429\7\b\2\2")
        buf.write("\u0429\u042b\5p9\2\u042a\u0426\3\2\2\2\u042a\u042b\3\2")
        buf.write("\2\2\u042b\u0441\3\2\2\2\u042c\u042d\7\66\2\2\u042d\u042f")
        buf.write("\5`\61\2\u042e\u042c\3\2\2\2\u042e\u042f\3\2\2\2\u042f")
        buf.write("\u0430\3\2\2\2\u0430\u0442\7\65\2\2\u0431\u0432\7\66\2")
        buf.write("\2\u0432\u0434\5`\61\2\u0433\u0431\3\2\2\2\u0433\u0434")
        buf.write("\3\2\2\2\u0434\u043d\3\2\2\2\u0435\u043a\7\66\2\2\u0436")
        buf.write("\u0439\5l\67\2\u0437\u0439\5\u0082B\2\u0438\u0436\3\2")
        buf.write("\2\2\u0438\u0437\3\2\2\2\u0439\u043c\3\2\2\2\u043a\u0438")
        buf.write("\3\2\2\2\u043a\u043b\3\2\2\2\u043b\u043e\3\2\2\2\u043c")
        buf.write("\u043a\3\2\2\2\u043d\u0435\3\2\2\2\u043d\u043e\3\2\2\2")
        buf.write("\u043e\u043f\3\2\2\2\u043f\u0440\7I\2\2\u0440\u0442\7")
        buf.write("\65\2\2\u0441\u042e\3\2\2\2\u0441\u0433\3\2\2\2\u0442")
        buf.write("o\3\2\2\2\u0443\u0448\5r:\2\u0444\u0445\7\t\2\2\u0445")
        buf.write("\u0447\5r:\2\u0446\u0444\3\2\2\2\u0447\u044a\3\2\2\2\u0448")
        buf.write("\u0446\3\2\2\2\u0448\u0449\3\2\2\2\u0449q\3\2\2\2\u044a")
        buf.write("\u0448\3\2\2\2\u044b\u044c\t\6\2\2\u044cs\3\2\2\2\u044d")
        buf.write("\u044e\7K\2\2\u044e\u044f\7J\2\2\u044f\u0450\7\b\2\2\u0450")
        buf.write("\u0451\7\u00f9\2\2\u0451\u0452\7-\2\2\u0452\u0453\7\u00fa")
        buf.write("\2\2\u0453\u0454\7.\2\2\u0454\u0455\7\66\2\2\u0455\u0456")
        buf.write("\7K\2\2\u0456\u0457\7\b\2\2\u0457\u0458\7\u00f9\2\2\u0458")
        buf.write("\u0459\7-\2\2\u0459\u045a\7\u00fa\2\2\u045a\u0462\7.\2")
        buf.write("\2\u045b\u045c\7\66\2\2\u045c\u045d\7K\2\2\u045d\u045e")
        buf.write("\7\b\2\2\u045e\u045f\7\u00f9\2\2\u045f\u0460\7-\2\2\u0460")
        buf.write("\u0461\7\u00fa\2\2\u0461\u0463\7.\2\2\u0462\u045b\3\2")
        buf.write("\2\2\u0462\u0463\3\2\2\2\u0463\u0474\3\2\2\2\u0464\u0465")
        buf.write("\7\66\2\2\u0465\u0466\7M\2\2\u0466\u0467\7\b\2\2\u0467")
        buf.write("\u046c\5v<\2\u0468\u0469\7\t\2\2\u0469\u046b\5v<\2\u046a")
        buf.write("\u0468\3\2\2\2\u046b\u046e\3\2\2\2\u046c\u046a\3\2\2\2")
        buf.write("\u046c\u046d\3\2\2\2\u046d\u046f\3\2\2\2\u046e\u046c\3")
        buf.write("\2\2\2\u046f\u0470\7\66\2\2\u0470\u0471\7\u0081\2\2\u0471")
        buf.write("\u0472\7\b\2\2\u0472\u0473\7\u00fa\2\2\u0473\u0475\3\2")
        buf.write("\2\2\u0474\u0464\3\2\2\2\u0474\u0475\3\2\2\2\u0475\u0478")
        buf.write("\3\2\2\2\u0476\u0477\7\66\2\2\u0477\u0479\5`\61\2\u0478")
        buf.write("\u0476\3\2\2\2\u0478\u0479\3\2\2\2\u0479\u047a\3\2\2\2")
        buf.write("\u047a\u047b\7\65\2\2\u047bu\3\2\2\2\u047c\u047f\7\u00fa")
        buf.write("\2\2\u047d\u047f\5T+\2\u047e\u047c\3\2\2\2\u047e\u047d")
        buf.write("\3\2\2\2\u047fw\3\2\2\2\u0480\u0483\5z>\2\u0481\u0483")
        buf.write("\5\u0080A\2\u0482\u0480\3\2\2\2\u0482\u0481\3\2\2\2\u0483")
        buf.write("y\3\2\2\2\u0484\u04b4\7{\2\2\u0485\u0486\7\67\2\2\u0486")
        buf.write("\u0487\7\b\2\2\u0487\u0488\7\u00f9\2\2\u0488\u0489\7-")
        buf.write("\2\2\u0489\u048a\7\u00fa\2\2\u048a\u048b\7.\2\2\u048b")
        buf.write("\u048c\7\66\2\2\u048c\u048d\7|\2\2\u048d\u048e\7\b\2\2")
        buf.write("\u048e\u048f\5J&\2\u048f\u0490\7\66\2\2\u0490\u0491\7")
        buf.write("<\2\2\u0491\u0492\7\b\2\2\u0492\u0493\7\u00fa\2\2\u0493")
        buf.write("\u0494\7\66\2\2\u0494\u0495\7\u009d\2\2\u0495\u0496\7")
        buf.write("\b\2\2\u0496\u0497\7\u00fa\2\2\u0497\u0498\7\66\2\2\u0498")
        buf.write("\u04b5\3\2\2\2\u0499\u049a\7|\2\2\u049a\u049b\7\b\2\2")
        buf.write("\u049b\u049c\5J&\2\u049c\u049d\7\66\2\2\u049d\u049e\7")
        buf.write("<\2\2\u049e\u049f\7\b\2\2\u049f\u04a0\7\u00fa\2\2\u04a0")
        buf.write("\u04a1\7\66\2\2\u04a1\u04a2\7\u009d\2\2\u04a2\u04a3\7")
        buf.write("\b\2\2\u04a3\u04a4\7\u00fa\2\2\u04a4\u04a5\7\66\2\2\u04a5")
        buf.write("\u04b5\3\2\2\2\u04a6\u04a7\7<\2\2\u04a7\u04a8\7\b\2\2")
        buf.write("\u04a8\u04a9\7\u00fa\2\2\u04a9\u04aa\7\66\2\2\u04aa\u04ab")
        buf.write("\7\u009d\2\2\u04ab\u04b0\7\b\2\2\u04ac\u04ad\7\u00fb\2")
        buf.write("\2\u04ad\u04b1\7\66\2\2\u04ae\u04af\7\u00fa\2\2\u04af")
        buf.write("\u04b1\7\66\2\2\u04b0\u04ac\3\2\2\2\u04b0\u04ae\3\2\2")
        buf.write("\2\u04b1\u04b5\3\2\2\2\u04b2\u04b3\7\u00fa\2\2\u04b3\u04b5")
        buf.write("\7\66\2\2\u04b4\u0485\3\2\2\2\u04b4\u0499\3\2\2\2\u04b4")
        buf.write("\u04a6\3\2\2\2\u04b4\u04b2\3\2\2\2\u04b4\u04b5\3\2\2\2")
        buf.write("\u04b5\u04b6\3\2\2\2\u04b6\u04bb\5N(\2\u04b7\u04b8\7\66")
        buf.write("\2\2\u04b8\u04b9\7M\2\2\u04b9\u04ba\7\b\2\2\u04ba\u04bc")
        buf.write("\5|?\2\u04bb\u04b7\3\2\2\2\u04bb\u04bc\3\2\2\2\u04bc\u04c1")
        buf.write("\3\2\2\2\u04bd\u04be\7\66\2\2\u04be\u04bf\7\u0081\2\2")
        buf.write("\u04bf\u04c0\7\b\2\2\u04c0\u04c2\7\u00fa\2\2\u04c1\u04bd")
        buf.write("\3\2\2\2\u04c1\u04c2\3\2\2\2\u04c2\u04c5\3\2\2\2\u04c3")
        buf.write("\u04c4\7\66\2\2\u04c4\u04c6\5\u00acW\2\u04c5\u04c3\3\2")
        buf.write("\2\2\u04c5\u04c6\3\2\2\2\u04c6\u04c7\3\2\2\2\u04c7\u04c8")
        buf.write("\7\65\2\2\u04c8{\3\2\2\2\u04c9\u04ce\5~@\2\u04ca\u04cb")
        buf.write("\7\t\2\2\u04cb\u04cd\5~@\2\u04cc\u04ca\3\2\2\2\u04cd\u04d0")
        buf.write("\3\2\2\2\u04ce\u04cc\3\2\2\2\u04ce\u04cf\3\2\2\2\u04cf")
        buf.write("}\3\2\2\2\u04d0\u04ce\3\2\2\2\u04d1\u04d4\7\u00fa\2\2")
        buf.write("\u04d2\u04d4\5T+\2\u04d3\u04d1\3\2\2\2\u04d3\u04d2\3\2")
        buf.write("\2\2\u04d4\177\3\2\2\2\u04d5\u04d6\7\u00a6\2\2\u04d6\u04d7")
        buf.write("\7\u00a8\2\2\u04d7\u04d8\7\b\2\2\u04d8\u04d9\7\u00fb\2")
        buf.write("\2\u04d9\u04da\7\66\2\2\u04da\u04db\5R*\2\u04db\u04df")
        buf.write("\7\66\2\2\u04dc\u04dd\5`\61\2\u04dd\u04de\7\66\2\2\u04de")
        buf.write("\u04e0\3\2\2\2\u04df\u04dc\3\2\2\2\u04df\u04e0\3\2\2\2")
        buf.write("\u04e0\u04e1\3\2\2\2\u04e1\u04e2\7\u00a7\2\2\u04e2\u04e3")
        buf.write("\7\65\2\2\u04e3\u0081\3\2\2\2\u04e4\u04eb\5\u00aeX\2\u04e5")
        buf.write("\u04eb\5\u00dep\2\u04e6\u04eb\5\u00bc_\2\u04e7\u04eb\5")
        buf.write("\u00caf\2\u04e8\u04eb\5\u00d8m\2\u04e9\u04eb\5\u00e6t")
        buf.write("\2\u04ea\u04e4\3\2\2\2\u04ea\u04e5\3\2\2\2\u04ea\u04e6")
        buf.write("\3\2\2\2\u04ea\u04e7\3\2\2\2\u04ea\u04e8\3\2\2\2\u04ea")
        buf.write("\u04e9\3\2\2\2\u04eb\u0083\3\2\2\2\u04ec\u04ed\5^\60\2")
        buf.write("\u04ed\u04ee\7\66\2\2\u04ee\u04f8\3\2\2\2\u04ef\u04f8")
        buf.write("\5\u0086D\2\u04f0\u04f8\5\u0088E\2\u04f1\u04f8\5\u008a")
        buf.write("F\2\u04f2\u04f8\5\u008cG\2\u04f3\u04f8\5\u008eH\2\u04f4")
        buf.write("\u04f8\5\u00fc\177\2\u04f5\u04f8\5\u0090I\2\u04f6\u04f8")
        buf.write("\5\u0092J\2\u04f7\u04ec\3\2\2\2\u04f7\u04ef\3\2\2\2\u04f7")
        buf.write("\u04f0\3\2\2\2\u04f7\u04f1\3\2\2\2\u04f7\u04f2\3\2\2\2")
        buf.write("\u04f7\u04f3\3\2\2\2\u04f7\u04f4\3\2\2\2\u04f7\u04f5\3")
        buf.write("\2\2\2\u04f7\u04f6\3\2\2\2\u04f8\u0085\3\2\2\2\u04f9\u04fa")
        buf.write("\7}\2\2\u04fa\u04fb\7?\2\2\u04fb\u04fc\7\b\2\2\u04fc\u04fd")
        buf.write("\7\u00f9\2\2\u04fd\u04fe\7-\2\2\u04fe\u04ff\7\u00fa\2")
        buf.write("\2\u04ff\u0500\7.\2\2\u0500\u050d\7\66\2\2\u0501\u0502")
        buf.write("\7M\2\2\u0502\u0503\7\b\2\2\u0503\u0508\5\u009aN\2\u0504")
        buf.write("\u0505\7\t\2\2\u0505\u0507\5\u009aN\2\u0506\u0504\3\2")
        buf.write("\2\2\u0507\u050a\3\2\2\2\u0508\u0506\3\2\2\2\u0508\u0509")
        buf.write("\3\2\2\2\u0509\u050b\3\2\2\2\u050a\u0508\3\2\2\2\u050b")
        buf.write("\u050c\7\66\2\2\u050c\u050e\3\2\2\2\u050d\u0501\3\2\2")
        buf.write("\2\u050d\u050e\3\2\2\2\u050e\u050f\3\2\2\2\u050f\u0510")
        buf.write("\5\u0106\u0084\2\u0510\u0512\7\u0080\2\2\u0511\u0513\7")
        buf.write("\65\2\2\u0512\u0511\3\2\2\2\u0512\u0513\3\2\2\2\u0513")
        buf.write("\u0087\3\2\2\2\u0514\u0515\7\177\2\2\u0515\u0516\7?\2")
        buf.write("\2\u0516\u0517\7\b\2\2\u0517\u0518\7\u00f9\2\2\u0518\u0519")
        buf.write("\7-\2\2\u0519\u051a\7\u00fa\2\2\u051a\u051b\7.\2\2\u051b")
        buf.write("\u0528\7\66\2\2\u051c\u051d\7M\2\2\u051d\u051e\7\b\2\2")
        buf.write("\u051e\u0523\5\u009aN\2\u051f\u0520\7\t\2\2\u0520\u0522")
        buf.write("\5\u009aN\2\u0521\u051f\3\2\2\2\u0522\u0525\3\2\2\2\u0523")
        buf.write("\u0521\3\2\2\2\u0523\u0524\3\2\2\2\u0524\u0526\3\2\2\2")
        buf.write("\u0525\u0523\3\2\2\2\u0526\u0527\7\66\2\2\u0527\u0529")
        buf.write("\3\2\2\2\u0528\u051c\3\2\2\2\u0528\u0529\3\2\2\2\u0529")
        buf.write("\u052a\3\2\2\2\u052a\u052b\5\u0106\u0084\2\u052b\u052d")
        buf.write("\7\u0080\2\2\u052c\u052e\7\65\2\2\u052d\u052c\3\2\2\2")
        buf.write("\u052d\u052e\3\2\2\2\u052e\u0089\3\2\2\2\u052f\u0530\7")
        buf.write("y\2\2\u0530\u0531\5\u0106\u0084\2\u0531\u0532\7\65\2\2")
        buf.write("\u0532\u0533\5\u00acW\2\u0533\u0535\7\u0080\2\2\u0534")
        buf.write("\u0536\7\65\2\2\u0535\u0534\3\2\2\2\u0535\u0536\3\2\2")
        buf.write("\2\u0536\u008b\3\2\2\2\u0537\u0538\7\u00b1\2\2\u0538\u0539")
        buf.write("\7\u00b2\2\2\u0539\u053a\7\b\2\2\u053a\u053b\7\u00fa\2")
        buf.write("\2\u053b\u008d\3\2\2\2\u053c\u053d\7\u00b3\2\2\u053d\u053e")
        buf.write("\7\b\2\2\u053e\u053f\7\u00f9\2\2\u053f\u0540\7-\2\2\u0540")
        buf.write("\u0541\7\u00fa\2\2\u0541\u0542\7.\2\2\u0542\u0543\7\66")
        buf.write("\2\2\u0543\u008f\3\2\2\2\u0544\u0545\7\u00f8\2\2\u0545")
        buf.write("\u0546\7\b\2\2\u0546\u0547\5J&\2\u0547\u0548\7\66\2\2")
        buf.write("\u0548\u0091\3\2\2\2\u0549\u054a\7~\2\2\u054a\u054b\7")
        buf.write("?\2\2\u054b\u054c\7\b\2\2\u054c\u054d\7\u00f9\2\2\u054d")
        buf.write("\u054e\7-\2\2\u054e\u054f\7\u00fa\2\2\u054f\u0550\7.\2")
        buf.write("\2\u0550\u0555\7\66\2\2\u0551\u0552\7Z\2\2\u0552\u0553")
        buf.write("\7\b\2\2\u0553\u0554\7\u00fa\2\2\u0554\u0556\7\66\2\2")
        buf.write("\u0555\u0551\3\2\2\2\u0555\u0556\3\2\2\2\u0556\u0557\3")
        buf.write("\2\2\2\u0557\u0558\5\u0106\u0084\2\u0558\u055a\7\u0080")
        buf.write("\2\2\u0559\u055b\7\65\2\2\u055a\u0559\3\2\2\2\u055a\u055b")
        buf.write("\3\2\2\2\u055b\u0093\3\2\2\2\u055c\u055e\5\u0084C\2\u055d")
        buf.write("\u055c\3\2\2\2\u055e\u0561\3\2\2\2\u055f\u055d\3\2\2\2")
        buf.write("\u055f\u0560\3\2\2\2\u0560\u0095\3\2\2\2\u0561\u055f\3")
        buf.write("\2\2\2\u0562\u0569\5\u0098M\2\u0563\u0569\5\u009eP\2\u0564")
        buf.write("\u0569\5\u009cO\2\u0565\u0569\5\u00a0Q\2\u0566\u0569\5")
        buf.write("\u00a8U\2\u0567\u0569\5\u00aaV\2\u0568\u0562\3\2\2\2\u0568")
        buf.write("\u0563\3\2\2\2\u0568\u0564\3\2\2\2\u0568\u0565\3\2\2\2")
        buf.write("\u0568\u0566\3\2\2\2\u0568\u0567\3\2\2\2\u0569\u0097\3")
        buf.write("\2\2\2\u056a\u056b\7x\2\2\u056b\u056c\5\u0106\u0084\2")
        buf.write("\u056c\u056d\7\65\2\2\u056d\u056e\5\u00acW\2\u056e\u0570")
        buf.write("\7\u0080\2\2\u056f\u0571\7\65\2\2\u0570\u056f\3\2\2\2")
        buf.write("\u0570\u0571\3\2\2\2\u0571\u0099\3\2\2\2\u0572\u0573\t")
        buf.write("\7\2\2\u0573\u009b\3\2\2\2\u0574\u057c\7p\2\2\u0575\u0576")
        buf.write("\5\u009eP\2\u0576\u0577\7\66\2\2\u0577\u057d\3\2\2\2\u0578")
        buf.write("\u0579\7\b\2\2\u0579\u057a\5X-\2\u057a\u057b\7\66\2\2")
        buf.write("\u057b\u057d\3\2\2\2\u057c\u0575\3\2\2\2\u057c\u0578\3")
        buf.write("\2\2\2\u057d\u0582\3\2\2\2\u057e\u057f\7\u00a8\2\2\u057f")
        buf.write("\u0580\7\b\2\2\u0580\u0581\7\u00fb\2\2\u0581\u0583\7\66")
        buf.write("\2\2\u0582\u057e\3\2\2\2\u0582\u0583\3\2\2\2\u0583\u009d")
        buf.write("\3\2\2\2\u0584\u0585\7\u00a3\2\2\u0585\u0586\7\b\2\2\u0586")
        buf.write("\u0587\5\u0106\u0084\2\u0587\u009f\3\2\2\2\u0588\u0589")
        buf.write("\5\u00a2R\2\u0589\u00a1\3\2\2\2\u058a\u058b\7L\2\2\u058b")
        buf.write("\u058c\7K\2\2\u058c\u058d\7\b\2\2\u058d\u058e\5L\'\2\u058e")
        buf.write("\u058f\7\66\2\2\u058f\u0590\7\u00a3\2\2\u0590\u0591\7")
        buf.write("\b\2\2\u0591\u0592\5X-\2\u0592\u0593\7\66\2\2\u0593\u0594")
        buf.write("\7M\2\2\u0594\u0595\7\b\2\2\u0595\u059a\5\u00a4S\2\u0596")
        buf.write("\u0597\7\66\2\2\u0597\u0599\5Z.\2\u0598\u0596\3\2\2\2")
        buf.write("\u0599\u059c\3\2\2\2\u059a\u0598\3\2\2\2\u059a\u059b\3")
        buf.write("\2\2\2\u059b\u059d\3\2\2\2\u059c\u059a\3\2\2\2\u059d\u059e")
        buf.write("\7\65\2\2\u059e\u00a3\3\2\2\2\u059f\u05a4\5\u00a6T\2\u05a0")
        buf.write("\u05a1\7\t\2\2\u05a1\u05a3\5\u00a6T\2\u05a2\u05a0\3\2")
        buf.write("\2\2\u05a3\u05a6\3\2\2\2\u05a4\u05a2\3\2\2\2\u05a4\u05a5")
        buf.write("\3\2\2\2\u05a5\u00a5\3\2\2\2\u05a6\u05a4\3\2\2\2\u05a7")
        buf.write("\u05a8\t\b\2\2\u05a8\u00a7\3\2\2\2\u05a9\u05aa\7\u00a4")
        buf.write("\2\2\u05aa\u05ab\5\u0106\u0084\2\u05ab\u05ac\7\65\2\2")
        buf.write("\u05ac\u00a9\3\2\2\2\u05ad\u05ae\7\u00a5\2\2\u05ae\u05af")
        buf.write("\5\u0106\u0084\2\u05af\u05b0\7\65\2\2\u05b0\u00ab\3\2")
        buf.write("\2\2\u05b1\u05b4\5\u0084C\2\u05b2\u05b4\5\u0096L\2\u05b3")
        buf.write("\u05b1\3\2\2\2\u05b3\u05b2\3\2\2\2\u05b4\u05b7\3\2\2\2")
        buf.write("\u05b5\u05b3\3\2\2\2\u05b5\u05b6\3\2\2\2\u05b6\u00ad\3")
        buf.write("\2\2\2\u05b7\u05b5\3\2\2\2\u05b8\u05bb\5\u00b0Y\2\u05b9")
        buf.write("\u05bb\5\u00b6\\\2\u05ba\u05b8\3\2\2\2\u05ba\u05b9\3\2")
        buf.write("\2\2\u05bb\u00af\3\2\2\2\u05bc\u05bd\7i\2\2\u05bd\u05be")
        buf.write("\5P)\2\u05be\u05bf\5R*\2\u05bf\u05c5\7\66\2\2\u05c0\u05c1")
        buf.write("\7M\2\2\u05c1\u05c2\7\b\2\2\u05c2\u05c3\5\u00b2Z\2\u05c3")
        buf.write("\u05c4\7\66\2\2\u05c4\u05c6\3\2\2\2\u05c5\u05c0\3\2\2")
        buf.write("\2\u05c5\u05c6\3\2\2\2\u05c6\u05cb\3\2\2\2\u05c7\u05c8")
        buf.write("\7\u0081\2\2\u05c8\u05c9\7\b\2\2\u05c9\u05ca\7\u00fa\2")
        buf.write("\2\u05ca\u05cc\7\66\2\2\u05cb\u05c7\3\2\2\2\u05cb\u05cc")
        buf.write("\3\2\2\2\u05cc\u05cd\3\2\2\2\u05cd\u05ce\5\u00acW\2\u05ce")
        buf.write("\u05cf\7j\2\2\u05cf\u05d0\7\65\2\2\u05d0\u00b1\3\2\2\2")
        buf.write("\u05d1\u05d6\5\u00b4[\2\u05d2\u05d3\7\t\2\2\u05d3\u05d5")
        buf.write("\5\u00b4[\2\u05d4\u05d2\3\2\2\2\u05d5\u05d8\3\2\2\2\u05d6")
        buf.write("\u05d4\3\2\2\2\u05d6\u05d7\3\2\2\2\u05d7\u00b3\3\2\2\2")
        buf.write("\u05d8\u05d6\3\2\2\2\u05d9\u05e0\7\u00fa\2\2\u05da\u05e0")
        buf.write("\7\u0082\2\2\u05db\u05e0\7\u0083\2\2\u05dc\u05e0\7\u0084")
        buf.write("\2\2\u05dd\u05e0\7\u0085\2\2\u05de\u05e0\5T+\2\u05df\u05d9")
        buf.write("\3\2\2\2\u05df\u05da\3\2\2\2\u05df\u05db\3\2\2\2\u05df")
        buf.write("\u05dc\3\2\2\2\u05df\u05dd\3\2\2\2\u05df\u05de\3\2\2\2")
        buf.write("\u05e0\u00b5\3\2\2\2\u05e1\u05e2\7\u00ae\2\2\u05e2\u05e3")
        buf.write("\5N(\2\u05e3\u05e9\7\66\2\2\u05e4\u05e5\7M\2\2\u05e5\u05e6")
        buf.write("\7\b\2\2\u05e6\u05e7\5\u00b8]\2\u05e7\u05e8\7\66\2\2\u05e8")
        buf.write("\u05ea\3\2\2\2\u05e9\u05e4\3\2\2\2\u05e9\u05ea\3\2\2\2")
        buf.write("\u05ea\u05eb\3\2\2\2\u05eb\u05ec\7\u00af\2\2\u05ec\u05ed")
        buf.write("\7\b\2\2\u05ed\u05ee\7\u00f9\2\2\u05ee\u05ef\7-\2\2\u05ef")
        buf.write("\u05f0\7\u00fa\2\2\u05f0\u05f1\7.\2\2\u05f1\u05f2\7\66")
        buf.write("\2\2\u05f2\u05f3\5\u0094K\2\u05f3\u05f4\7\u00b0\2\2\u05f4")
        buf.write("\u05f5\7\65\2\2\u05f5\u00b7\3\2\2\2\u05f6\u05fb\5\u00ba")
        buf.write("^\2\u05f7\u05f8\7\t\2\2\u05f8\u05fa\5\u00ba^\2\u05f9\u05f7")
        buf.write("\3\2\2\2\u05fa\u05fd\3\2\2\2\u05fb\u05f9\3\2\2\2\u05fb")
        buf.write("\u05fc\3\2\2\2\u05fc\u00b9\3\2\2\2\u05fd\u05fb\3\2\2\2")
        buf.write("\u05fe\u0601\7\u00fa\2\2\u05ff\u0601\5T+\2\u0600\u05fe")
        buf.write("\3\2\2\2\u0600\u05ff\3\2\2\2\u0601\u00bb\3\2\2\2\u0602")
        buf.write("\u0605\5\u00be`\2\u0603\u0605\5\u00c6d\2\u0604\u0602\3")
        buf.write("\2\2\2\u0604\u0603\3\2\2\2\u0605\u00bd\3\2\2\2\u0606\u0607")
        buf.write("\7k\2\2\u0607\u0608\5P)\2\u0608\u0609\5R*\2\u0609\u060f")
        buf.write("\7\66\2\2\u060a\u060b\7M\2\2\u060b\u060c\7\b\2\2\u060c")
        buf.write("\u060d\5\u00c2b\2\u060d\u060e\7\66\2\2\u060e\u0610\3\2")
        buf.write("\2\2\u060f\u060a\3\2\2\2\u060f\u0610\3\2\2\2\u0610\u0615")
        buf.write("\3\2\2\2\u0611\u0612\7\u0081\2\2\u0612\u0613\7\b\2\2\u0613")
        buf.write("\u0614\7\u00fa\2\2\u0614\u0616\7\66\2\2\u0615\u0611\3")
        buf.write("\2\2\2\u0615\u0616\3\2\2\2\u0616\u0617\3\2\2\2\u0617\u0618")
        buf.write("\5\u00c0a\2\u0618\u0619\5\u00acW\2\u0619\u061a\7l\2\2")
        buf.write("\u061a\u061b\7\65\2\2\u061b\u00bf\3\2\2\2\u061c\u061d")
        buf.write("\7m\2\2\u061d\u061e\7\b\2\2\u061e\u061f\7\u00fa\2\2\u061f")
        buf.write("\u0620\7\66\2\2\u0620\u0621\7n\2\2\u0621\u0622\7\b\2\2")
        buf.write("\u0622\u0623\7\u00fa\2\2\u0623\u0628\7\66\2\2\u0624\u0625")
        buf.write("\7o\2\2\u0625\u0626\7\b\2\2\u0626\u0627\7\u00fa\2\2\u0627")
        buf.write("\u0629\7\66\2\2\u0628\u0624\3\2\2\2\u0628\u0629\3\2\2")
        buf.write("\2\u0629\u00c1\3\2\2\2\u062a\u062f\5\u00c4c\2\u062b\u062c")
        buf.write("\7\t\2\2\u062c\u062e\5\u00c4c\2\u062d\u062b\3\2\2\2\u062e")
        buf.write("\u0631\3\2\2\2\u062f\u062d\3\2\2\2\u062f\u0630\3\2\2\2")
        buf.write("\u0630\u00c3\3\2\2\2\u0631\u062f\3\2\2\2\u0632\u063c\7")
        buf.write("\u00fa\2\2\u0633\u063c\7\16\2\2\u0634\u063c\7\17\2\2\u0635")
        buf.write("\u063c\7\20\2\2\u0636\u063c\7\21\2\2\u0637\u063c\7\22")
        buf.write("\2\2\u0638\u063c\7\23\2\2\u0639\u063c\7\24\2\2\u063a\u063c")
        buf.write("\5T+\2\u063b\u0632\3\2\2\2\u063b\u0633\3\2\2\2\u063b\u0634")
        buf.write("\3\2\2\2\u063b\u0635\3\2\2\2\u063b\u0636\3\2\2\2\u063b")
        buf.write("\u0637\3\2\2\2\u063b\u0638\3\2\2\2\u063b\u0639\3\2\2\2")
        buf.write("\u063b\u063a\3\2\2\2\u063c\u00c5\3\2\2\2\u063d\u063e\7")
        buf.write("=\2\2\u063e\u063f\5P)\2\u063f\u0640\5R*\2\u0640\u0646")
        buf.write("\7\66\2\2\u0641\u0642\7M\2\2\u0642\u0643\7\b\2\2\u0643")
        buf.write("\u0644\5\u00c8e\2\u0644\u0645\7\66\2\2\u0645\u0647\3\2")
        buf.write("\2\2\u0646\u0641\3\2\2\2\u0646\u0647\3\2\2\2\u0647\u0649")
        buf.write("\3\2\2\2\u0648\u064a\5\u00c0a\2\u0649\u0648\3\2\2\2\u0649")
        buf.write("\u064a\3\2\2\2\u064a\u064b\3\2\2\2\u064b\u064c\5\u00ac")
        buf.write("W\2\u064c\u064d\7>\2\2\u064d\u064e\7\65\2\2\u064e\u00c7")
        buf.write("\3\2\2\2\u064f\u0654\5\u00c4c\2\u0650\u0651\7\t\2\2\u0651")
        buf.write("\u0653\5\u00c4c\2\u0652\u0650\3\2\2\2\u0653\u0656\3\2")
        buf.write("\2\2\u0654\u0652\3\2\2\2\u0654\u0655\3\2\2\2\u0655\u00c9")
        buf.write("\3\2\2\2\u0656\u0654\3\2\2\2\u0657\u065a\5\u00ccg\2\u0658")
        buf.write("\u065a\5\u00d2j\2\u0659\u0657\3\2\2\2\u0659\u0658\3\2")
        buf.write("\2\2\u065a\u00cb\3\2\2\2\u065b\u065c\7s\2\2\u065c\u065d")
        buf.write("\5N(\2\u065d\u0663\7\66\2\2\u065e\u065f\7M\2\2\u065f\u0660")
        buf.write("\7\b\2\2\u0660\u0661\5\u00ceh\2\u0661\u0662\7\66\2\2\u0662")
        buf.write("\u0664\3\2\2\2\u0663\u065e\3\2\2\2\u0663\u0664\3\2\2\2")
        buf.write("\u0664\u0669\3\2\2\2\u0665\u0666\7\u0081\2\2\u0666\u0667")
        buf.write("\7\b\2\2\u0667\u0668\7\u00fa\2\2\u0668\u066a\7\66\2\2")
        buf.write("\u0669\u0665\3\2\2\2\u0669\u066a\3\2\2\2\u066a\u066b\3")
        buf.write("\2\2\2\u066b\u066c\7u\2\2\u066c\u066d\7\b\2\2\u066d\u066e")
        buf.write("\7\u00fa\2\2\u066e\u066f\7\66\2\2\u066f\u0670\7v\2\2\u0670")
        buf.write("\u0671\7\b\2\2\u0671\u0672\7\u00fa\2\2\u0672\u0673\7\66")
        buf.write("\2\2\u0673\u0674\5\u00acW\2\u0674\u0675\7t\2\2\u0675\u0676")
        buf.write("\7\65\2\2\u0676\u00cd\3\2\2\2\u0677\u067c\5\u00d0i\2\u0678")
        buf.write("\u0679\7\t\2\2\u0679\u067b\5\u00d0i\2\u067a\u0678\3\2")
        buf.write("\2\2\u067b\u067e\3\2\2\2\u067c\u067a\3\2\2\2\u067c\u067d")
        buf.write("\3\2\2\2\u067d\u00cf\3\2\2\2\u067e\u067c\3\2\2\2\u067f")
        buf.write("\u0683\7\u00fa\2\2\u0680\u0683\7\25\2\2\u0681\u0683\5")
        buf.write("T+\2\u0682\u067f\3\2\2\2\u0682\u0680\3\2\2\2\u0682\u0681")
        buf.write("\3\2\2\2\u0683\u00d1\3\2\2\2\u0684\u0685\7q\2\2\u0685")
        buf.write("\u0686\5N(\2\u0686\u068c\7\66\2\2\u0687\u0688\7M\2\2\u0688")
        buf.write("\u0689\7\b\2\2\u0689\u068a\5\u00d4k\2\u068a\u068b\7\66")
        buf.write("\2\2\u068b\u068d\3\2\2\2\u068c\u0687\3\2\2\2\u068c\u068d")
        buf.write("\3\2\2\2\u068d\u0692\3\2\2\2\u068e\u068f\7\u0081\2\2\u068f")
        buf.write("\u0690\7\b\2\2\u0690\u0691\7\u00fa\2\2\u0691\u0693\7\66")
        buf.write("\2\2\u0692\u068e\3\2\2\2\u0692\u0693\3\2\2\2\u0693\u0694")
        buf.write("\3\2\2\2\u0694\u0695\7u\2\2\u0695\u0696\7\b\2\2\u0696")
        buf.write("\u0697\7\u00fa\2\2\u0697\u0698\7\66\2\2\u0698\u0699\7")
        buf.write("v\2\2\u0699\u069a\7\b\2\2\u069a\u069b\7\u00fa\2\2\u069b")
        buf.write("\u069c\7\66\2\2\u069c\u069d\5\u00acW\2\u069d\u069e\7r")
        buf.write("\2\2\u069e\u069f\7\65\2\2\u069f\u00d3\3\2\2\2\u06a0\u06a5")
        buf.write("\5\u00d6l\2\u06a1\u06a2\7\t\2\2\u06a2\u06a4\5\u00d6l\2")
        buf.write("\u06a3\u06a1\3\2\2\2\u06a4\u06a7\3\2\2\2\u06a5\u06a3\3")
        buf.write("\2\2\2\u06a5\u06a6\3\2\2\2\u06a6\u00d5\3\2\2\2\u06a7\u06a5")
        buf.write("\3\2\2\2\u06a8\u06ab\7\u00fa\2\2\u06a9\u06ab\5T+\2\u06aa")
        buf.write("\u06a8\3\2\2\2\u06aa\u06a9\3\2\2\2\u06ab\u00d7\3\2\2\2")
        buf.write("\u06ac\u06ad\7@\2\2\u06ad\u06ae\5N(\2\u06ae\u06b3\7\66")
        buf.write("\2\2\u06af\u06b0\7A\2\2\u06b0\u06b1\7\b\2\2\u06b1\u06b2")
        buf.write("\7\u00fa\2\2\u06b2\u06b4\7\66\2\2\u06b3\u06af\3\2\2\2")
        buf.write("\u06b3\u06b4\3\2\2\2\u06b4\u06ba\3\2\2\2\u06b5\u06b6\7")
        buf.write("M\2\2\u06b6\u06b7\7\b\2\2\u06b7\u06b8\5\u00dan\2\u06b8")
        buf.write("\u06b9\7\66\2\2\u06b9\u06bb\3\2\2\2\u06ba\u06b5\3\2\2")
        buf.write("\2\u06ba\u06bb\3\2\2\2\u06bb\u06bc\3\2\2\2\u06bc\u06bd")
        buf.write("\5\u00acW\2\u06bd\u06be\7B\2\2\u06be\u06bf\7\65\2\2\u06bf")
        buf.write("\u00d9\3\2\2\2\u06c0\u06c5\5\u00dco\2\u06c1\u06c2\7\t")
        buf.write("\2\2\u06c2\u06c4\5\u00dco\2\u06c3\u06c1\3\2\2\2\u06c4")
        buf.write("\u06c7\3\2\2\2\u06c5\u06c3\3\2\2\2\u06c5\u06c6\3\2\2\2")
        buf.write("\u06c6\u00db\3\2\2\2\u06c7\u06c5\3\2\2\2\u06c8\u06cd\7")
        buf.write("\u00fa\2\2\u06c9\u06cd\7\u00cd\2\2\u06ca\u06cd\7\u00ce")
        buf.write("\2\2\u06cb\u06cd\5T+\2\u06cc\u06c8\3\2\2\2\u06cc\u06c9")
        buf.write("\3\2\2\2\u06cc\u06ca\3\2\2\2\u06cc\u06cb\3\2\2\2\u06cd")
        buf.write("\u00dd\3\2\2\2\u06ce\u0729\7N\2\2\u06cf\u06d0\5N(\2\u06d0")
        buf.write("\u06d6\7\66\2\2\u06d1\u06d2\7M\2\2\u06d2\u06d3\7\b\2\2")
        buf.write("\u06d3\u06d4\5\u00e2r\2\u06d4\u06d5\7\66\2\2\u06d5\u06d7")
        buf.write("\3\2\2\2\u06d6\u06d1\3\2\2\2\u06d6\u06d7\3\2\2\2\u06d7")
        buf.write("\u06d8\3\2\2\2\u06d8\u06d9\5\u00acW\2\u06d9\u072a\3\2")
        buf.write("\2\2\u06da\u06db\7P\2\2\u06db\u06dc\7\u009c\2\2\u06dc")
        buf.write("\u06dd\7\b\2\2\u06dd\u06de\7\u00fb\2\2\u06de\u06df\7\61")
        buf.write("\2\2\u06df\u06e0\7\u00fb\2\2\u06e0\u06e1\7\66\2\2\u06e1")
        buf.write("\u06e2\7?\2\2\u06e2\u06e3\7\b\2\2\u06e3\u06e4\7\u00f9")
        buf.write("\2\2\u06e4\u06e5\7-\2\2\u06e5\u06e6\7\u00fa\2\2\u06e6")
        buf.write("\u06e7\7.\2\2\u06e7\u06e8\7\66\2\2\u06e8\u06e9\7J\2\2")
        buf.write("\u06e9\u06ea\7\b\2\2\u06ea\u06eb\7\u00f9\2\2\u06eb\u06ec")
        buf.write("\7-\2\2\u06ec\u06ed\7\u00fa\2\2\u06ed\u06ee\7.\2\2\u06ee")
        buf.write("\u06ef\7\66\2\2\u06ef\u06f0\5\u00e0q\2\u06f0\u06f1\7Q")
        buf.write("\2\2\u06f1\u06f2\7\u009c\2\2\u06f2\u06f3\7\b\2\2\u06f3")
        buf.write("\u06f4\7\u00fb\2\2\u06f4\u06f5\7\61\2\2\u06f5\u06f6\7")
        buf.write("\u00fb\2\2\u06f6\u06f7\7\66\2\2\u06f7\u06f8\7?\2\2\u06f8")
        buf.write("\u06f9\7\b\2\2\u06f9\u06fa\7\u00f9\2\2\u06fa\u06fb\7-")
        buf.write("\2\2\u06fb\u06fc\7\u00fa\2\2\u06fc\u06fd\7.\2\2\u06fd")
        buf.write("\u06fe\7\66\2\2\u06fe\u06ff\7J\2\2\u06ff\u0700\7\b\2\2")
        buf.write("\u0700\u0701\7\u00f9\2\2\u0701\u0702\7-\2\2\u0702\u0703")
        buf.write("\7\u00fa\2\2\u0703\u0704\7.\2\2\u0704\u0705\7\66\2\2\u0705")
        buf.write("\u0706\5\u00e0q\2\u0706\u0707\7R\2\2\u0707\u0708\7\u009c")
        buf.write("\2\2\u0708\u0709\7\b\2\2\u0709\u070a\7\u00fb\2\2\u070a")
        buf.write("\u070b\7\61\2\2\u070b\u070c\7\u00fb\2\2\u070c\u070d\7")
        buf.write("\66\2\2\u070d\u070e\7?\2\2\u070e\u070f\7\b\2\2\u070f\u0710")
        buf.write("\7\u00f9\2\2\u0710\u0711\7-\2\2\u0711\u0712\7\u00fa\2")
        buf.write("\2\u0712\u0713\7.\2\2\u0713\u0714\7\66\2\2\u0714\u0715")
        buf.write("\7J\2\2\u0715\u0716\7\b\2\2\u0716\u0717\7\u00f9\2\2\u0717")
        buf.write("\u0718\7-\2\2\u0718\u0719\7\u00fa\2\2\u0719\u071a\7.\2")
        buf.write("\2\u071a\u071b\7\66\2\2\u071b\u0721\5\u00e0q\2\u071c\u071d")
        buf.write("\7M\2\2\u071d\u071e\7\b\2\2\u071e\u071f\5\u00e2r\2\u071f")
        buf.write("\u0720\7\66\2\2\u0720\u0722\3\2\2\2\u0721\u071c\3\2\2")
        buf.write("\2\u0721\u0722\3\2\2\2\u0722\u0726\3\2\2\2\u0723\u0725")
        buf.write("\5\u0086D\2\u0724\u0723\3\2\2\2\u0725\u0728\3\2\2\2\u0726")
        buf.write("\u0724\3\2\2\2\u0726\u0727\3\2\2\2\u0727\u072a\3\2\2\2")
        buf.write("\u0728\u0726\3\2\2\2\u0729\u06cf\3\2\2\2\u0729\u06da\3")
        buf.write("\2\2\2\u072a\u072b\3\2\2\2\u072b\u072c\7O\2\2\u072c\u072d")
        buf.write("\7\65\2\2\u072d\u00df\3\2\2\2\u072e\u072f\7m\2\2\u072f")
        buf.write("\u0730\7\b\2\2\u0730\u0731\7\u00fa\2\2\u0731\u0732\7\66")
        buf.write("\2\2\u0732\u0733\7n\2\2\u0733\u0734\7\b\2\2\u0734\u0735")
        buf.write("\7\u00fa\2\2\u0735\u073a\7\66\2\2\u0736\u0737\7o\2\2\u0737")
        buf.write("\u0738\7\b\2\2\u0738\u0739\7\u00fa\2\2\u0739\u073b\7\66")
        buf.write("\2\2\u073a\u0736\3\2\2\2\u073a\u073b\3\2\2\2\u073b\u0740")
        buf.write("\3\2\2\2\u073c\u073d\7p\2\2\u073d\u073e\7\b\2\2\u073e")
        buf.write("\u073f\7\u00fa\2\2\u073f\u0741\7\66\2\2\u0740\u073c\3")
        buf.write("\2\2\2\u0740\u0741\3\2\2\2\u0741\u00e1\3\2\2\2\u0742\u0747")
        buf.write("\5\u00e4s\2\u0743\u0744\7\t\2\2\u0744\u0746\5\u00e4s\2")
        buf.write("\u0745\u0743\3\2\2\2\u0746\u0749\3\2\2\2\u0747\u0745\3")
        buf.write("\2\2\2\u0747\u0748\3\2\2\2\u0748\u00e3\3\2\2\2\u0749\u0747")
        buf.write("\3\2\2\2\u074a\u074b\t\t\2\2\u074b\u00e5\3\2\2\2\u074c")
        buf.write("\u07a7\7S\2\2\u074d\u074e\5N(\2\u074e\u0754\7\66\2\2\u074f")
        buf.write("\u0750\7M\2\2\u0750\u0751\7\b\2\2\u0751\u0752\5\u00ea")
        buf.write("v\2\u0752\u0753\7\66\2\2\u0753\u0755\3\2\2\2\u0754\u074f")
        buf.write("\3\2\2\2\u0754\u0755\3\2\2\2\u0755\u0756\3\2\2\2\u0756")
        buf.write("\u0757\5\u00acW\2\u0757\u07a8\3\2\2\2\u0758\u0759\7U\2")
        buf.write("\2\u0759\u075a\7\u009c\2\2\u075a\u075b\7\b\2\2\u075b\u075c")
        buf.write("\7\u00fb\2\2\u075c\u075d\7\61\2\2\u075d\u075e\7\u00fb")
        buf.write("\2\2\u075e\u075f\7\66\2\2\u075f\u0760\7?\2\2\u0760\u0761")
        buf.write("\7\b\2\2\u0761\u0762\7\u00f9\2\2\u0762\u0763\7-\2\2\u0763")
        buf.write("\u0764\7\u00fa\2\2\u0764\u0765\7.\2\2\u0765\u0766\7\66")
        buf.write("\2\2\u0766\u0767\7J\2\2\u0767\u0768\7\b\2\2\u0768\u0769")
        buf.write("\7\u00f9\2\2\u0769\u076a\7-\2\2\u076a\u076b\7\u00fa\2")
        buf.write("\2\u076b\u076c\7.\2\2\u076c\u076d\7\66\2\2\u076d\u076e")
        buf.write("\5\u00e8u\2\u076e\u076f\7V\2\2\u076f\u0770\7\u009c\2\2")
        buf.write("\u0770\u0771\7\b\2\2\u0771\u0772\7\u00fb\2\2\u0772\u0773")
        buf.write("\7\61\2\2\u0773\u0774\7\u00fb\2\2\u0774\u0775\7\66\2\2")
        buf.write("\u0775\u0776\7?\2\2\u0776\u0777\7\b\2\2\u0777\u0778\7")
        buf.write("\u00f9\2\2\u0778\u0779\7-\2\2\u0779\u077a\7\u00fa\2\2")
        buf.write("\u077a\u077b\7.\2\2\u077b\u077c\7\66\2\2\u077c\u077d\7")
        buf.write("J\2\2\u077d\u077e\7\b\2\2\u077e\u077f\7\u00f9\2\2\u077f")
        buf.write("\u0780\7-\2\2\u0780\u0781\7\u00fa\2\2\u0781\u0782\7.\2")
        buf.write("\2\u0782\u0783\7\66\2\2\u0783\u0784\5\u00e8u\2\u0784\u0785")
        buf.write("\7W\2\2\u0785\u0786\7\u009c\2\2\u0786\u0787\7\b\2\2\u0787")
        buf.write("\u0788\7\u00fb\2\2\u0788\u0789\7\61\2\2\u0789\u078a\7")
        buf.write("\u00fb\2\2\u078a\u078b\7\66\2\2\u078b\u078c\7?\2\2\u078c")
        buf.write("\u078d\7\b\2\2\u078d\u078e\7\u00f9\2\2\u078e\u078f\7-")
        buf.write("\2\2\u078f\u0790\7\u00fa\2\2\u0790\u0791\7.\2\2\u0791")
        buf.write("\u0792\7\66\2\2\u0792\u0793\7J\2\2\u0793\u0794\7\b\2\2")
        buf.write("\u0794\u0795\7\u00f9\2\2\u0795\u0796\7-\2\2\u0796\u0797")
        buf.write("\7\u00fa\2\2\u0797\u0798\7.\2\2\u0798\u0799\7\66\2\2\u0799")
        buf.write("\u079f\5\u00e8u\2\u079a\u079b\7M\2\2\u079b\u079c\7\b\2")
        buf.write("\2\u079c\u079d\5\u00eav\2\u079d\u079e\7\66\2\2\u079e\u07a0")
        buf.write("\3\2\2\2\u079f\u079a\3\2\2\2\u079f\u07a0\3\2\2\2\u07a0")
        buf.write("\u07a4\3\2\2\2\u07a1\u07a3\5\u0086D\2\u07a2\u07a1\3\2")
        buf.write("\2\2\u07a3\u07a6\3\2\2\2\u07a4\u07a2\3\2\2\2\u07a4\u07a5")
        buf.write("\3\2\2\2\u07a5\u07a8\3\2\2\2\u07a6\u07a4\3\2\2\2\u07a7")
        buf.write("\u074d\3\2\2\2\u07a7\u0758\3\2\2\2\u07a8\u07a9\3\2\2\2")
        buf.write("\u07a9\u07aa\7T\2\2\u07aa\u07ab\7\65\2\2\u07ab\u00e7\3")
        buf.write("\2\2\2\u07ac\u07ad\7m\2\2\u07ad\u07ae\7\b\2\2\u07ae\u07af")
        buf.write("\7\u00fa\2\2\u07af\u07b0\7\66\2\2\u07b0\u07b1\7n\2\2\u07b1")
        buf.write("\u07b2\7\b\2\2\u07b2\u07b3\7\u00fa\2\2\u07b3\u07b8\7\66")
        buf.write("\2\2\u07b4\u07b5\7o\2\2\u07b5\u07b6\7\b\2\2\u07b6\u07b7")
        buf.write("\7\u00fa\2\2\u07b7\u07b9\7\66\2\2\u07b8\u07b4\3\2\2\2")
        buf.write("\u07b8\u07b9\3\2\2\2\u07b9\u07be\3\2\2\2\u07ba\u07bb\7")
        buf.write("p\2\2\u07bb\u07bc\7\b\2\2\u07bc\u07bd\7\u00fa\2\2\u07bd")
        buf.write("\u07bf\7\66\2\2\u07be\u07ba\3\2\2\2\u07be\u07bf\3\2\2")
        buf.write("\2\u07bf\u00e9\3\2\2\2\u07c0\u07c5\5\u00ecw\2\u07c1\u07c2")
        buf.write("\7\t\2\2\u07c2\u07c4\5\u00ecw\2\u07c3\u07c1\3\2\2\2\u07c4")
        buf.write("\u07c7\3\2\2\2\u07c5\u07c3\3\2\2\2\u07c5\u07c6\3\2\2\2")
        buf.write("\u07c6\u00eb\3\2\2\2\u07c7\u07c5\3\2\2\2\u07c8\u07c9\t")
        buf.write("\n\2\2\u07c9\u00ed\3\2\2\2\u07ca\u07ce\5\u00f2z\2\u07cb")
        buf.write("\u07ce\5\u00f4{\2\u07cc\u07ce\5\u00f6|\2\u07cd\u07ca\3")
        buf.write("\2\2\2\u07cd\u07cb\3\2\2\2\u07cd\u07cc\3\2\2\2\u07ce\u00ef")
        buf.write("\3\2\2\2\u07cf\u07d5\5l\67\2\u07d0\u07d5\5\u0082B\2\u07d1")
        buf.write("\u07d5\5\u00eex\2\u07d2\u07d5\5\u00f8}\2\u07d3\u07d5\5")
        buf.write("\u00fc\177\2\u07d4\u07cf\3\2\2\2\u07d4\u07d0\3\2\2\2\u07d4")
        buf.write("\u07d1\3\2\2\2\u07d4\u07d2\3\2\2\2\u07d4\u07d3\3\2\2\2")
        buf.write("\u07d5\u00f1\3\2\2\2\u07d6\u07d7\7y\2\2\u07d7\u07d8\5")
        buf.write("\u0106\u0084\2\u07d8\u07dc\7\65\2\2\u07d9\u07db\5\u00f0")
        buf.write("y\2\u07da\u07d9\3\2\2\2\u07db\u07de\3\2\2\2\u07dc\u07da")
        buf.write("\3\2\2\2\u07dc\u07dd\3\2\2\2\u07dd\u07df\3\2\2\2\u07de")
        buf.write("\u07dc\3\2\2\2\u07df\u07e0\7\u0080\2\2\u07e0\u07e1\7\65")
        buf.write("\2\2\u07e1\u00f3\3\2\2\2\u07e2\u07e3\7x\2\2\u07e3\u07e4")
        buf.write("\5\u0106\u0084\2\u07e4\u07e8\7\65\2\2\u07e5\u07e7\5\u00f0")
        buf.write("y\2\u07e6\u07e5\3\2\2\2\u07e7\u07ea\3\2\2\2\u07e8\u07e6")
        buf.write("\3\2\2\2\u07e8\u07e9\3\2\2\2\u07e9\u07eb\3\2\2\2\u07ea")
        buf.write("\u07e8\3\2\2\2\u07eb\u07ec\7\u0080\2\2\u07ec\u07ed\7\65")
        buf.write("\2\2\u07ed\u00f5\3\2\2\2\u07ee\u07ef\7X\2\2\u07ef\u07f0")
        buf.write("\5\u0106\u0084\2\u07f0\u07f4\7\65\2\2\u07f1\u07f3\5\u00f0")
        buf.write("y\2\u07f2\u07f1\3\2\2\2\u07f3\u07f6\3\2\2\2\u07f4\u07f2")
        buf.write("\3\2\2\2\u07f4\u07f5\3\2\2\2\u07f5\u07f7\3\2\2\2\u07f6")
        buf.write("\u07f4\3\2\2\2\u07f7\u07f8\7\u0080\2\2\u07f8\u07f9\7\65")
        buf.write("\2\2\u07f9\u00f7\3\2\2\2\u07fa\u07fb\7Y\2\2\u07fb\u07fc")
        buf.write("\7\u00fa\2\2\u07fc\u07fd\7\65\2\2\u07fd\u00f9\3\2\2\2")
        buf.write("\u07fe\u0800\7\u0095\2\2\u07ff\u0801\7\66\2\2\u0800\u07ff")
        buf.write("\3\2\2\2\u0800\u0801\3\2\2\2\u0801\u0802\3\2\2\2\u0802")
        buf.write("\u0803\7;\2\2\u0803\u0804\7\b\2\2\u0804\u0805\7\u00f9")
        buf.write("\2\2\u0805\u0806\7-\2\2\u0806\u0807\7\u00fa\2\2\u0807")
        buf.write("\u0808\7.\2\2\u0808\u0813\7\66\2\2\u0809\u080a\7\u009a")
        buf.write("\2\2\u080a\u080b\7\u00fa\2\2\u080b\u080c\7\66\2\2\u080c")
        buf.write("\u080d\7\u0096\2\2\u080d\u080e\t\13\2\2\u080e\u0814\7")
        buf.write("\65\2\2\u080f\u0810\7Z\2\2\u0810\u0811\7\b\2\2\u0811\u0812")
        buf.write("\7\u00fa\2\2\u0812\u0814\7\65\2\2\u0813\u0809\3\2\2\2")
        buf.write("\u0813\u080f\3\2\2\2\u0814\u00fb\3\2\2\2\u0815\u0816\7")
        buf.write("\u00b4\2\2\u0816\u0817\7h\2\2\u0817\u0818\7\b\2\2\u0818")
        buf.write("\u085b\5J&\2\u0819\u081a\7\66\2\2\u081a\u081b\7\u00b6")
        buf.write("\2\2\u081b\u0858\7\b\2\2\u081c\u0820\7`\2\2\u081d\u081e")
        buf.write("\7/\2\2\u081e\u081f\7\u00fa\2\2\u081f\u0821\7\60\2\2\u0820")
        buf.write("\u081d\3\2\2\2\u0820\u0821\3\2\2\2\u0821\u0859\3\2\2\2")
        buf.write("\u0822\u0826\7a\2\2\u0823\u0824\7/\2\2\u0824\u0825\7\u00fa")
        buf.write("\2\2\u0825\u0827\7\60\2\2\u0826\u0823\3\2\2\2\u0826\u0827")
        buf.write("\3\2\2\2\u0827\u0859\3\2\2\2\u0828\u082c\7b\2\2\u0829")
        buf.write("\u082a\7/\2\2\u082a\u082b\7\u00fa\2\2\u082b\u082d\7\60")
        buf.write("\2\2\u082c\u0829\3\2\2\2\u082c\u082d\3\2\2\2\u082d\u0859")
        buf.write("\3\2\2\2\u082e\u0832\7c\2\2\u082f\u0830\7/\2\2\u0830\u0831")
        buf.write("\7\u00fa\2\2\u0831\u0833\7\60\2\2\u0832\u082f\3\2\2\2")
        buf.write("\u0832\u0833\3\2\2\2\u0833\u0859\3\2\2\2\u0834\u0838\7")
        buf.write("_\2\2\u0835\u0836\7/\2\2\u0836\u0837\7\u00fa\2\2\u0837")
        buf.write("\u0839\7\60\2\2\u0838\u0835\3\2\2\2\u0838\u0839\3\2\2")
        buf.write("\2\u0839\u0859\3\2\2\2\u083a\u083e\7d\2\2\u083b\u083c")
        buf.write("\7/\2\2\u083c\u083d\7\u00fa\2\2\u083d\u083f\7\60\2\2\u083e")
        buf.write("\u083b\3\2\2\2\u083e\u083f\3\2\2\2\u083f\u0859\3\2\2\2")
        buf.write("\u0840\u0844\7e\2\2\u0841\u0842\7/\2\2\u0842\u0843\7\u00fa")
        buf.write("\2\2\u0843\u0845\7\60\2\2\u0844\u0841\3\2\2\2\u0844\u0845")
        buf.write("\3\2\2\2\u0845\u0859\3\2\2\2\u0846\u084a\7f\2\2\u0847")
        buf.write("\u0848\7/\2\2\u0848\u0849\7\u00fa\2\2\u0849\u084b\7\60")
        buf.write("\2\2\u084a\u0847\3\2\2\2\u084a\u084b\3\2\2\2\u084b\u0859")
        buf.write("\3\2\2\2\u084c\u0850\7g\2\2\u084d\u084e\7/\2\2\u084e\u084f")
        buf.write("\7\u00fa\2\2\u084f\u0851\7\60\2\2\u0850\u084d\3\2\2\2")
        buf.write("\u0850\u0851\3\2\2\2\u0851\u0859\3\2\2\2\u0852\u0856\7")
        buf.write("\u00fb\2\2\u0853\u0854\7/\2\2\u0854\u0855\7\u00fa\2\2")
        buf.write("\u0855\u0857\7\60\2\2\u0856\u0853\3\2\2\2\u0856\u0857")
        buf.write("\3\2\2\2\u0857\u0859\3\2\2\2\u0858\u081c\3\2\2\2\u0858")
        buf.write("\u0822\3\2\2\2\u0858\u0828\3\2\2\2\u0858\u082e\3\2\2\2")
        buf.write("\u0858\u0834\3\2\2\2\u0858\u083a\3\2\2\2\u0858\u0840\3")
        buf.write("\2\2\2\u0858\u0846\3\2\2\2\u0858\u084c\3\2\2\2\u0858\u0852")
        buf.write("\3\2\2\2\u0859\u085a\3\2\2\2\u085a\u085c\5\u00fe\u0080")
        buf.write("\2\u085b\u0819\3\2\2\2\u085b\u085c\3\2\2\2\u085c\u0865")
        buf.write("\3\2\2\2\u085d\u0861\7\66\2\2\u085e\u0860\5\u00fc\177")
        buf.write("\2\u085f\u085e\3\2\2\2\u0860\u0863\3\2\2\2\u0861\u085f")
        buf.write("\3\2\2\2\u0861\u0862\3\2\2\2\u0862\u0864\3\2\2\2\u0863")
        buf.write("\u0861\3\2\2\2\u0864\u0866\7\u00b5\2\2\u0865\u085d\3\2")
        buf.write("\2\2\u0865\u0866\3\2\2\2\u0866\u0867\3\2\2\2\u0867\u0868")
        buf.write("\7\65\2\2\u0868\u00fd\3\2\2\2\u0869\u086b\5\u0100\u0081")
        buf.write("\2\u086a\u0869\3\2\2\2\u086b\u086e\3\2\2\2\u086c\u086a")
        buf.write("\3\2\2\2\u086c\u086d\3\2\2\2\u086d\u00ff\3\2\2\2\u086e")
        buf.write("\u086c\3\2\2\2\u086f\u0870\7\66\2\2\u0870\u0874\7\u00b7")
        buf.write("\2\2\u0871\u0872\7/\2\2\u0872\u0873\7\u00fa\2\2\u0873")
        buf.write("\u0875\7\60\2\2\u0874\u0871\3\2\2\2\u0874\u0875\3\2\2")
        buf.write("\2\u0875\u0879\3\2\2\2\u0876\u0878\5\u0102\u0082\2\u0877")
        buf.write("\u0876\3\2\2\2\u0878\u087b\3\2\2\2\u0879\u0877\3\2\2\2")
        buf.write("\u0879\u087a\3\2\2\2\u087a\u087c\3\2\2\2\u087b\u0879\3")
        buf.write("\2\2\2\u087c\u087d\7\b\2\2\u087d\u087e\7\u00fa\2\2\u087e")
        buf.write("\u0101\3\2\2\2\u087f\u0880\7\61\2\2\u0880\u0884\7\u00fb")
        buf.write("\2\2\u0881\u0882\7/\2\2\u0882\u0883\7\u00fa\2\2\u0883")
        buf.write("\u0885\7\60\2\2\u0884\u0881\3\2\2\2\u0884\u0885\3\2\2")
        buf.write("\2\u0885\u0103\3\2\2\2\u0886\u0887\7\u00b8\2\2\u0887\u0888")
        buf.write("\7\65\2\2\u0888\u0105\3\2\2\2\u0889\u088e\5\u010a\u0086")
        buf.write("\2\u088a\u088b\7\u00e9\2\2\u088b\u088d\5\u010a\u0086\2")
        buf.write("\u088c\u088a\3\2\2\2\u088d\u0890\3\2\2\2\u088e\u088c\3")
        buf.write("\2\2\2\u088e\u088f\3\2\2\2\u088f\u0107\3\2\2\2\u0890\u088e")
        buf.write("\3\2\2\2\u0891\u0896\5\u010a\u0086\2\u0892\u0893\7\u00e9")
        buf.write("\2\2\u0893\u0895\5\u010a\u0086\2\u0894\u0892\3\2\2\2\u0895")
        buf.write("\u0898\3\2\2\2\u0896\u0894\3\2\2\2\u0896\u0897\3\2\2\2")
        buf.write("\u0897\u0109\3\2\2\2\u0898\u0896\3\2\2\2\u0899\u089e\5")
        buf.write("\u010c\u0087\2\u089a\u089b\7\u00e8\2\2\u089b\u089d\5\u010c")
        buf.write("\u0087\2\u089c\u089a\3\2\2\2\u089d\u08a0\3\2\2\2\u089e")
        buf.write("\u089c\3\2\2\2\u089e\u089f\3\2\2\2\u089f\u010b\3\2\2\2")
        buf.write("\u08a0\u089e\3\2\2\2\u08a1\u08a6\5\u010e\u0088\2\u08a2")
        buf.write("\u08a3\7\t\2\2\u08a3\u08a5\5\u010e\u0088\2\u08a4\u08a2")
        buf.write("\3\2\2\2\u08a5\u08a8\3\2\2\2\u08a6\u08a4\3\2\2\2\u08a6")
        buf.write("\u08a7\3\2\2\2\u08a7\u010d\3\2\2\2\u08a8\u08a6\3\2\2\2")
        buf.write("\u08a9\u08ae\5\u0110\u0089\2\u08aa\u08ab\7\26\2\2\u08ab")
        buf.write("\u08ad\5\u0110\u0089\2\u08ac\u08aa\3\2\2\2\u08ad\u08b0")
        buf.write("\3\2\2\2\u08ae\u08ac\3\2\2\2\u08ae\u08af\3\2\2\2\u08af")
        buf.write("\u010f\3\2\2\2\u08b0\u08ae\3\2\2\2\u08b1\u08b8\5\u0112")
        buf.write("\u008a\2\u08b2\u08b3\7\27\2\2\u08b3\u08b7\5\u0112\u008a")
        buf.write("\2\u08b4\u08b5\7\30\2\2\u08b5\u08b7\5\u0112\u008a\2\u08b6")
        buf.write("\u08b2\3\2\2\2\u08b6\u08b4\3\2\2\2\u08b7\u08ba\3\2\2\2")
        buf.write("\u08b8\u08b6\3\2\2\2\u08b8\u08b9\3\2\2\2\u08b9\u0111\3")
        buf.write("\2\2\2\u08ba\u08b8\3\2\2\2\u08bb\u08c6\5\u0114\u008b\2")
        buf.write("\u08bc\u08bd\7\31\2\2\u08bd\u08c5\5\u0114\u008b\2\u08be")
        buf.write("\u08bf\7\32\2\2\u08bf\u08c5\5\u0114\u008b\2\u08c0\u08c1")
        buf.write("\7\33\2\2\u08c1\u08c5\5\u0114\u008b\2\u08c2\u08c3\7\34")
        buf.write("\2\2\u08c3\u08c5\5\u0114\u008b\2\u08c4\u08bc\3\2\2\2\u08c4")
        buf.write("\u08be\3\2\2\2\u08c4\u08c0\3\2\2\2\u08c4\u08c2\3\2\2\2")
        buf.write("\u08c5\u08c8\3\2\2\2\u08c6\u08c4\3\2\2\2\u08c6\u08c7\3")
        buf.write("\2\2\2\u08c7\u0113\3\2\2\2\u08c8\u08c6\3\2\2\2\u08c9\u08d0")
        buf.write("\5\u0116\u008c\2\u08ca\u08cb\7\35\2\2\u08cb\u08cf\5\u0116")
        buf.write("\u008c\2\u08cc\u08cd\7\36\2\2\u08cd\u08cf\5\u0116\u008c")
        buf.write("\2\u08ce\u08ca\3\2\2\2\u08ce\u08cc\3\2\2\2\u08cf\u08d2")
        buf.write("\3\2\2\2\u08d0\u08ce\3\2\2\2\u08d0\u08d1\3\2\2\2\u08d1")
        buf.write("\u0115\3\2\2\2\u08d2\u08d0\3\2\2\2\u08d3\u08da\5\u0118")
        buf.write("\u008d\2\u08d4\u08d5\7\37\2\2\u08d5\u08d9\5\u0118\u008d")
        buf.write("\2\u08d6\u08d7\7\62\2\2\u08d7\u08d9\5\u0118\u008d\2\u08d8")
        buf.write("\u08d4\3\2\2\2\u08d8\u08d6\3\2\2\2\u08d9\u08dc\3\2\2\2")
        buf.write("\u08da\u08d8\3\2\2\2\u08da\u08db\3\2\2\2\u08db\u0117\3")
        buf.write("\2\2\2\u08dc\u08da\3\2\2\2\u08dd\u08e6\5\u011a\u008e\2")
        buf.write("\u08de\u08df\7 \2\2\u08df\u08e5\5\u011a\u008e\2\u08e0")
        buf.write("\u08e1\7\64\2\2\u08e1\u08e5\5\u011a\u008e\2\u08e2\u08e3")
        buf.write("\7!\2\2\u08e3\u08e5\5\u011a\u008e\2\u08e4\u08de\3\2\2")
        buf.write("\2\u08e4\u08e0\3\2\2\2\u08e4\u08e2\3\2\2\2\u08e5\u08e8")
        buf.write("\3\2\2\2\u08e6\u08e4\3\2\2\2\u08e6\u08e7\3\2\2\2\u08e7")
        buf.write("\u0119\3\2\2\2\u08e8\u08e6\3\2\2\2\u08e9\u08ea\7-\2\2")
        buf.write("\u08ea\u08eb\t\f\2\2\u08eb\u08ed\7.\2\2\u08ec\u08e9\3")
        buf.write("\2\2\2\u08ed\u08f0\3\2\2\2\u08ee\u08ec\3\2\2\2\u08ee\u08ef")
        buf.write("\3\2\2\2\u08ef\u08f1\3\2\2\2\u08f0\u08ee\3\2\2\2\u08f1")
        buf.write("\u08f2\5\u011c\u008f\2\u08f2\u011b\3\2\2\2\u08f3\u0900")
        buf.write("\5\u011e\u0090\2\u08f4\u0900\5\u0120\u0091\2\u08f5\u0900")
        buf.write("\5\u0122\u0092\2\u08f6\u0900\5\u0124\u0093\2\u08f7\u0900")
        buf.write("\5\u0126\u0094\2\u08f8\u0900\5\u0140\u00a1\2\u08f9\u0900")
        buf.write("\5\u0142\u00a2\2\u08fa\u0900\5\u0158\u00ad\2\u08fb\u0900")
        buf.write("\5\u0168\u00b5\2\u08fc\u08fd\7\u00ea\2\2\u08fd\u0900\5")
        buf.write("\u011c\u008f\2\u08fe\u0900\5\u0122\u0092\2\u08ff\u08f3")
        buf.write("\3\2\2\2\u08ff\u08f4\3\2\2\2\u08ff\u08f5\3\2\2\2\u08ff")
        buf.write("\u08f6\3\2\2\2\u08ff\u08f7\3\2\2\2\u08ff\u08f8\3\2\2\2")
        buf.write("\u08ff\u08f9\3\2\2\2\u08ff\u08fa\3\2\2\2\u08ff\u08fb\3")
        buf.write("\2\2\2\u08ff\u08fc\3\2\2\2\u08ff\u08fe\3\2\2\2\u0900\u011d")
        buf.write("\3\2\2\2\u0901\u0902\7\u00f4\2\2\u0902\u0903\7-\2\2\u0903")
        buf.write("\u0904\5\u0108\u0085\2\u0904\u0905\7\66\2\2\u0905\u0906")
        buf.write("\5\u0108\u0085\2\u0906\u0907\7.\2\2\u0907\u011f\3\2\2")
        buf.write("\2\u0908\u0909\7\u00f2\2\2\u0909\u090a\7-\2\2\u090a\u090b")
        buf.write("\5\u0108\u0085\2\u090b\u090c\7\66\2\2\u090c\u090d\5\u0108")
        buf.write("\u0085\2\u090d\u090e\7.\2\2\u090e\u0121\3\2\2\2\u090f")
        buf.write("\u0910\7\u00f3\2\2\u0910\u0911\7-\2\2\u0911\u0912\5\u0108")
        buf.write("\u0085\2\u0912\u0913\7\66\2\2\u0913\u0914\5\u0108\u0085")
        buf.write("\2\u0914\u0915\7\66\2\2\u0915\u0916\5J&\2\u0916\u0917")
        buf.write("\7.\2\2\u0917\u0123\3\2\2\2\u0918\u0919\7-\2\2\u0919\u091a")
        buf.write("\5\u0108\u0085\2\u091a\u091b\7.\2\2\u091b\u0125\3\2\2")
        buf.write("\2\u091c\u0928\5\u0128\u0095\2\u091d\u0928\5\u012a\u0096")
        buf.write("\2\u091e\u0928\5\u012c\u0097\2\u091f\u0928\5\u012e\u0098")
        buf.write("\2\u0920\u0928\5\u0130\u0099\2\u0921\u0928\5\u0134\u009b")
        buf.write("\2\u0922\u0928\5\u0136\u009c\2\u0923\u0928\5\u0138\u009d")
        buf.write("\2\u0924\u0928\5\u013a\u009e\2\u0925\u0928\5\u013c\u009f")
        buf.write("\2\u0926\u0928\5\u013e\u00a0\2\u0927\u091c\3\2\2\2\u0927")
        buf.write("\u091d\3\2\2\2\u0927\u091e\3\2\2\2\u0927\u091f\3\2\2\2")
        buf.write("\u0927\u0920\3\2\2\2\u0927\u0921\3\2\2\2\u0927\u0922\3")
        buf.write("\2\2\2\u0927\u0923\3\2\2\2\u0927\u0924\3\2\2\2\u0927\u0925")
        buf.write("\3\2\2\2\u0927\u0926\3\2\2\2\u0928\u0127\3\2\2\2\u0929")
        buf.write("\u092a\7\u00d4\2\2\u092a\u0129\3\2\2\2\u092b\u092c\3\2")
        buf.write("\2\2\u092c\u012b\3\2\2\2\u092d\u092e\7\u00d7\2\2\u092e")
        buf.write("\u092f\5\u0132\u009a\2\u092f\u0930\7\27\2\2\u0930\u0931")
        buf.write("\7\u00fa\2\2\u0931\u012d\3\2\2\2\u0932\u0933\7\u00d8\2")
        buf.write("\2\u0933\u0934\5\u0132\u009a\2\u0934\u0935\7\27\2\2\u0935")
        buf.write("\u0936\5\u0132\u009a\2\u0936\u012f\3\2\2\2\u0937\u0938")
        buf.write("\7\u00d9\2\2\u0938\u0939\5\u0132\u009a\2\u0939\u093b\7")
        buf.write("\27\2\2\u093a\u093c\7\u00fa\2\2\u093b\u093a\3\2\2\2\u093c")
        buf.write("\u093d\3\2\2\2\u093d\u093b\3\2\2\2\u093d\u093e\3\2\2\2")
        buf.write("\u093e\u0131\3\2\2\2\u093f\u0940\7\u00fb\2\2\u0940\u0941")
        buf.write("\7/\2\2\u0941\u0942\7\u00fa\2\2\u0942\u0951\7\60\2\2\u0943")
        buf.write("\u094d\7\u00fb\2\2\u0944\u0945\7\61\2\2\u0945\u0949\7")
        buf.write("\u00fb\2\2\u0946\u0947\7/\2\2\u0947\u0948\7\u00fa\2\2")
        buf.write("\u0948\u094a\7\60\2\2\u0949\u0946\3\2\2\2\u0949\u094a")
        buf.write("\3\2\2\2\u094a\u094c\3\2\2\2\u094b\u0944\3\2\2\2\u094c")
        buf.write("\u094f\3\2\2\2\u094d\u094b\3\2\2\2\u094d\u094e\3\2\2\2")
        buf.write("\u094e\u0951\3\2\2\2\u094f\u094d\3\2\2\2\u0950\u093f\3")
        buf.write("\2\2\2\u0950\u0943\3\2\2\2\u0951\u0133\3\2\2\2\u0952\u0953")
        buf.write("\7\u00da\2\2\u0953\u0954\7-\2\2\u0954\u0958\7\u00fb\2")
        buf.write("\2\u0955\u0956\7\u00fa\2\2\u0956\u0958\7.\2\2\u0957\u0952")
        buf.write("\3\2\2\2\u0957\u0955\3\2\2\2\u0958\u0135\3\2\2\2\u0959")
        buf.write("\u095a\7\u00db\2\2\u095a\u095b\7-\2\2\u095b\u095c\7\u00fb")
        buf.write("\2\2\u095c\u095d\7.\2\2\u095d\u0137\3\2\2\2\u095e\u095f")
        buf.write("\7\u00dc\2\2\u095f\u0960\7-\2\2\u0960\u0961\5L\'\2\u0961")
        buf.write("\u0962\7.\2\2\u0962\u0139\3\2\2\2\u0963\u0964\7\u00dd")
        buf.write("\2\2\u0964\u013b\3\2\2\2\u0965\u0966\7\u00de\2\2\u0966")
        buf.write("\u0967\7-\2\2\u0967\u0968\5J&\2\u0968\u0969\7.\2\2\u0969")
        buf.write("\u013d\3\2\2\2\u096a\u096b\7\u00df\2\2\u096b\u096c\7-")
        buf.write("\2\2\u096c\u0971\5V,\2\u096d\u096e\7\t\2\2\u096e\u096f")
        buf.write("\7M\2\2\u096f\u0970\7\b\2\2\u0970\u0972\5\u00c2b\2\u0971")
        buf.write("\u096d\3\2\2\2\u0971\u0972\3\2\2\2\u0972\u0973\3\2\2\2")
        buf.write("\u0973\u0974\7.\2\2\u0974\u013f\3\2\2\2\u0975\u0976\t")
        buf.write("\r\2\2\u0976\u0141\3\2\2\2\u0977\u0982\5\u0144\u00a3\2")
        buf.write("\u0978\u0982\5\u0146\u00a4\2\u0979\u0982\5\u0148\u00a5")
        buf.write("\2\u097a\u0982\5\u014a\u00a6\2\u097b\u0982\5\u014c\u00a7")
        buf.write("\2\u097c\u0982\5\u014e\u00a8\2\u097d\u0982\5\u0150\u00a9")
        buf.write("\2\u097e\u0982\5\u0152\u00aa\2\u097f\u0982\5\u0154\u00ab")
        buf.write("\2\u0980\u0982\5\u0156\u00ac\2\u0981\u0977\3\2\2\2\u0981")
        buf.write("\u0978\3\2\2\2\u0981\u0979\3\2\2\2\u0981\u097a\3\2\2\2")
        buf.write("\u0981\u097b\3\2\2\2\u0981\u097c\3\2\2\2\u0981\u097d\3")
        buf.write("\2\2\2\u0981\u097e\3\2\2\2\u0981\u097f\3\2\2\2\u0981\u0980")
        buf.write("\3\2\2\2\u0982\u0143\3\2\2\2\u0983\u0984\7\u00e7\2\2\u0984")
        buf.write("\u0985\7-\2\2\u0985\u0986\5\u0106\u0084\2\u0986\u0987")
        buf.write("\7.\2\2\u0987\u0145\3\2\2\2\u0988\u0989\7\u00ec\2\2\u0989")
        buf.write("\u098a\7-\2\2\u098a\u098b\5\u0106\u0084\2\u098b\u098c")
        buf.write("\7.\2\2\u098c\u0147\3\2\2\2\u098d\u098e\7\u00f5\2\2\u098e")
        buf.write("\u0996\7-\2\2\u098f\u0990\7\67\2\2\u0990\u0991\7\b\2\2")
        buf.write("\u0991\u0992\7\u00f9\2\2\u0992\u0993\7-\2\2\u0993\u0994")
        buf.write("\7\u00fa\2\2\u0994\u0995\7.\2\2\u0995\u0997\7\66\2\2\u0996")
        buf.write("\u098f\3\2\2\2\u0996\u0997\3\2\2\2\u0997\u099d\3\2\2\2")
        buf.write("\u0998\u0999\7h\2\2\u0999\u099a\7\b\2\2\u099a\u099b\5")
        buf.write("J&\2\u099b\u099c\7\66\2\2\u099c\u099e\3\2\2\2\u099d\u0998")
        buf.write("\3\2\2\2\u099d\u099e\3\2\2\2\u099e\u099f\3\2\2\2\u099f")
        buf.write("\u09a0\5\u0108\u0085\2\u09a0\u09a1\7.\2\2\u09a1\u0149")
        buf.write("\3\2\2\2\u09a2\u09a3\7\u00f6\2\2\u09a3\u09a4\7-\2\2\u09a4")
        buf.write("\u09a5\5\u0108\u0085\2\u09a5\u09a6\7.\2\2\u09a6\u014b")
        buf.write("\3\2\2\2\u09a7\u09a8\7\u00ed\2\2\u09a8\u09a9\7-\2\2\u09a9")
        buf.write("\u09aa\5\u0108\u0085\2\u09aa\u09ab\7.\2\2\u09ab\u014d")
        buf.write("\3\2\2\2\u09ac\u09b1\7\u00ee\2\2\u09ad\u09ae\7\"\2\2\u09ae")
        buf.write("\u09af\7\b\2\2\u09af\u09b0\7\u00fa\2\2\u09b0\u09b2\7\66")
        buf.write("\2\2\u09b1\u09ad\3\2\2\2\u09b1\u09b2\3\2\2\2\u09b2\u09b3")
        buf.write("\3\2\2\2\u09b3\u09b4\7-\2\2\u09b4\u09b5\5\u0108\u0085")
        buf.write("\2\u09b5\u09b6\7.\2\2\u09b6\u014f\3\2\2\2\u09b7\u09b8")
        buf.write("\7\u00ef\2\2\u09b8\u09b9\7-\2\2\u09b9\u09ba\5\u0108\u0085")
        buf.write("\2\u09ba\u09bb\7.\2\2\u09bb\u0151\3\2\2\2\u09bc\u09bd")
        buf.write("\7\u00f0\2\2\u09bd\u09be\7-\2\2\u09be\u09bf\5\u0108\u0085")
        buf.write("\2\u09bf\u09c0\7.\2\2\u09c0\u0153\3\2\2\2\u09c1\u09c2")
        buf.write("\7\u00f1\2\2\u09c2\u09c3\7-\2\2\u09c3\u09c4\5\u0108\u0085")
        buf.write("\2\u09c4\u09c5\7.\2\2\u09c5\u0155\3\2\2\2\u09c6\u09c7")
        buf.write("\7\u00eb\2\2\u09c7\u09c8\7-\2\2\u09c8\u09cd\5V,\2\u09c9")
        buf.write("\u09ca\7\t\2\2\u09ca\u09cb\7M\2\2\u09cb\u09cc\7\b\2\2")
        buf.write("\u09cc\u09ce\5\u00c2b\2\u09cd\u09c9\3\2\2\2\u09cd\u09ce")
        buf.write("\3\2\2\2\u09ce\u09cf\3\2\2\2\u09cf\u09d0\7\66\2\2\u09d0")
        buf.write("\u09d1\5\u0108\u0085\2\u09d1\u09d2\7.\2\2\u09d2\u0157")
        buf.write("\3\2\2\2\u09d3\u09d9\5\u015a\u00ae\2\u09d4\u09d9\5\u015c")
        buf.write("\u00af\2\u09d5\u09d9\5\u0160\u00b1\2\u09d6\u09d9\5\u0162")
        buf.write("\u00b2\2\u09d7\u09d9\5\u0164\u00b3\2\u09d8\u09d3\3\2\2")
        buf.write("\2\u09d8\u09d4\3\2\2\2\u09d8\u09d5\3\2\2\2\u09d8\u09d6")
        buf.write("\3\2\2\2\u09d8\u09d7\3\2\2\2\u09d9\u0159\3\2\2\2\u09da")
        buf.write("\u09db\7\u00cf\2\2\u09db\u09dc\7-\2\2\u09dc\u09dd\5\u0108")
        buf.write("\u0085\2\u09dd\u09de\7#\2\2\u09de\u09df\5\u0108\u0085")
        buf.write("\2\u09df\u09e0\7\63\2\2\u09e0\u09e1\5\u0108\u0085\2\u09e1")
        buf.write("\u09e2\7.\2\2\u09e2\u015b\3\2\2\2\u09e3\u09e4\7\u00d0")
        buf.write("\2\2\u09e4\u09e5\7-\2\2\u09e5\u09ea\5\u015e\u00b0\2\u09e6")
        buf.write("\u09e7\7\t\2\2\u09e7\u09e9\5\u015e\u00b0\2\u09e8\u09e6")
        buf.write("\3\2\2\2\u09e9\u09ec\3\2\2\2\u09ea\u09e8\3\2\2\2\u09ea")
        buf.write("\u09eb\3\2\2\2\u09eb\u09ed\3\2\2\2\u09ec\u09ea\3\2\2\2")
        buf.write("\u09ed\u09ee\7\66\2\2\u09ee\u09ef\5\u0108\u0085\2\u09ef")
        buf.write("\u09f0\7\66\2\2\u09f0\u09f1\5\u0108\u0085\2\u09f1\u09f2")
        buf.write("\7\66\2\2\u09f2\u09f3\5\u0108\u0085\2\u09f3\u09f4\7.\2")
        buf.write("\2\u09f4\u015d\3\2\2\2\u09f5\u09f6\t\16\2\2\u09f6\u015f")
        buf.write("\3\2\2\2\u09f7\u09f8\7\u00d1\2\2\u09f8\u09f9\7-\2\2\u09f9")
        buf.write("\u09fa\5\u0108\u0085\2\u09fa\u09fb\7\66\2\2\u09fb\u09fc")
        buf.write("\5\u0108\u0085\2\u09fc\u09fd\7\66\2\2\u09fd\u09fe\5\u0108")
        buf.write("\u0085\2\u09fe\u09ff\7.\2\2\u09ff\u0161\3\2\2\2\u0a00")
        buf.write("\u0a01\7\u00d2\2\2\u0a01\u0a02\7-\2\2\u0a02\u0a03\5\u0108")
        buf.write("\u0085\2\u0a03\u0a04\7\66\2\2\u0a04\u0a05\5\u0108\u0085")
        buf.write("\2\u0a05\u0a06\7\66\2\2\u0a06\u0a07\5\u0108\u0085\2\u0a07")
        buf.write("\u0a08\7.\2\2\u0a08\u0163\3\2\2\2\u0a09\u0a0a\7\u00d3")
        buf.write("\2\2\u0a0a\u0a0b\7-\2\2\u0a0b\u0a0c\7M\2\2\u0a0c\u0a0d")
        buf.write("\7\b\2\2\u0a0d\u0a12\5\u0166\u00b4\2\u0a0e\u0a0f\7\t\2")
        buf.write("\2\u0a0f\u0a11\5\u0166\u00b4\2\u0a10\u0a0e\3\2\2\2\u0a11")
        buf.write("\u0a14\3\2\2\2\u0a12\u0a10\3\2\2\2\u0a12\u0a13\3\2\2\2")
        buf.write("\u0a13\u0a15\3\2\2\2\u0a14\u0a12\3\2\2\2\u0a15\u0a16\7")
        buf.write("\66\2\2\u0a16\u0a17\5\u0108\u0085\2\u0a17\u0a18\7\66\2")
        buf.write("\2\u0a18\u0a19\5\u0108\u0085\2\u0a19\u0a1a\7\66\2\2\u0a1a")
        buf.write("\u0a1b\5\u0108\u0085\2\u0a1b\u0a1c\7.\2\2\u0a1c\u0165")
        buf.write("\3\2\2\2\u0a1d\u0a1e\t\17\2\2\u0a1e\u0167\3\2\2\2\u0a1f")
        buf.write("\u0a20\7\u00f7\2\2\u0a20\u0a21\7-\2\2\u0a21\u0a22\5\u0108")
        buf.write("\u0085\2\u0a22\u0a2a\7\63\2\2\u0a23\u0a24\5\u0106\u0084")
        buf.write("\2\u0a24\u0a25\7\66\2\2\u0a25\u0a26\5\u0106\u0084\2\u0a26")
        buf.write("\u0a27\7\65\2\2\u0a27\u0a29\3\2\2\2\u0a28\u0a23\3\2\2")
        buf.write("\2\u0a29\u0a2c\3\2\2\2\u0a2a\u0a28\3\2\2\2\u0a2a\u0a2b")
        buf.write("\3\2\2\2\u0a2b\u0a2d\3\2\2\2\u0a2c\u0a2a\3\2\2\2\u0a2d")
        buf.write("\u0a2e\7.\2\2\u0a2e\u0169\3\2\2\2\u00d4\u016d\u016f\u0179")
        buf.write("\u017d\u0180\u0188\u018d\u0191\u0194\u019a\u019f\u01a3")
        buf.write("\u01a6\u01ac\u01be\u01c0\u01c8\u01d1\u01da\u01e3\u01ec")
        buf.write("\u01f5\u01fe\u0207\u0210\u0219\u021f\u0227\u022f\u0237")
        buf.write("\u0255\u025c\u0263\u026c\u0270\u0274\u027b\u028c\u028e")
        buf.write("\u029e\u02b3\u02b9\u02d5\u02db\u02e4\u02f7\u0307\u0312")
        buf.write("\u0343\u0353\u035a\u0360\u037c\u0380\u0383\u0386\u03ad")
        buf.write("\u03b1\u03be\u03c5\u03df\u03e1\u03f7\u0405\u0407\u041d")
        buf.write("\u042a\u042e\u0433\u0438\u043a\u043d\u0441\u0448\u0462")
        buf.write("\u046c\u0474\u0478\u047e\u0482\u04b0\u04b4\u04bb\u04c1")
        buf.write("\u04c5\u04ce\u04d3\u04df\u04ea\u04f7\u0508\u050d\u0512")
        buf.write("\u0523\u0528\u052d\u0535\u0555\u055a\u055f\u0568\u0570")
        buf.write("\u057c\u0582\u059a\u05a4\u05b3\u05b5\u05ba\u05c5\u05cb")
        buf.write("\u05d6\u05df\u05e9\u05fb\u0600\u0604\u060f\u0615\u0628")
        buf.write("\u062f\u063b\u0646\u0649\u0654\u0659\u0663\u0669\u067c")
        buf.write("\u0682\u068c\u0692\u06a5\u06aa\u06b3\u06ba\u06c5\u06cc")
        buf.write("\u06d6\u0721\u0726\u0729\u073a\u0740\u0747\u0754\u079f")
        buf.write("\u07a4\u07a7\u07b8\u07be\u07c5\u07cd\u07d4\u07dc\u07e8")
        buf.write("\u07f4\u0800\u0813\u0820\u0826\u082c\u0832\u0838\u083e")
        buf.write("\u0844\u084a\u0850\u0856\u0858\u085b\u0861\u0865\u086c")
        buf.write("\u0874\u0879\u0884\u088e\u0896\u089e\u08a6\u08ae\u08b6")
        buf.write("\u08b8\u08c4\u08c6\u08ce\u08d0\u08d8\u08da\u08e4\u08e6")
        buf.write("\u08ee\u08ff\u0927\u093d\u0949\u094d\u0950\u0957\u0971")
        buf.write("\u0981\u0996\u099d\u09b1\u09cd\u09d8\u09ea\u0a12\u0a2a")
        return buf.getvalue()


class VfrSyntaxParser ( Parser ):

    grammarFileName = "VfrSyntax.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'show'", "'push'", "'pop'", "'#pragma'", 
                     "'pack'", "'='", "'|'", "'IMAGE_TOKEN'", "'HORIZONTAL'", 
                     "'OPTION_DEFAULT'", "'OPTION_DEFAULT_MFG'", "'NUMERIC_SIZE_1'", 
                     "'NUMERIC_SIZE_2'", "'NUMERIC_SIZE_4'", "'NUMERIC_SIZE_8'", 
                     "'DISPLAY_INT_DEC'", "'DISPLAY_UINT_DEC'", "'DISPLAY_UINT_HEX'", 
                     "'MULTI_LINE'", "'&'", "'=='", "'!='", "'<'", "'<='", 
                     "'>'", "'>='", "'<<'", "'>>'", "'+'", "'*'", "'%'", 
                     "'format'", "'?'", "'SENSITIVE'", "'INSENSITIVE'", 
                     "'LAST_NON_MATCH'", "'FIRST_NON_MATCH'", "'#define'", 
                     "'#include'", "'formpkgtype'", "'{'", "'}'", "'('", 
                     "')'", "'['", "']'", "'.'", "'-'", "':'", "'/'", "';'", 
                     "','", "'devicepath'", "'formset'", "'formsetid'", 
                     "'endformset'", "'title'", "'formid'", "'oneof'", "'endoneof'", 
                     "'prompt'", "'orderedlist'", "'maxcontainers'", "'endlist'", 
                     "'endform'", "'form'", "'formmap'", "'maptitle'", "'mapguid'", 
                     "'subtitle'", "'endsubtitle'", "'help'", "'text'", 
                     "'option'", "'flags'", "'date'", "'enddate'", "'year'", 
                     "'month'", "'day'", "'time'", "'endtime'", "'hour'", 
                     "'minute'", "'second'", "'grayoutif'", "'label'", "'timeout'", 
                     "'inventory'", "'_NON_NV_DATA_MAP'", "'struct'", "'union'", 
                     "'BOOLEAN'", "'UINT64'", "'UINT32'", "'UINT16'", "'UINT8'", 
                     "'EFI_STRING_ID'", "'EFI_HII_DATE'", "'EFI_HII_TIME'", 
                     "'EFI_HII_REF'", "'guid'", "'checkbox'", "'endcheckbox'", 
                     "'numeric'", "'endnumeric'", "'minimum'", "'maximum'", 
                     "'step'", "'default'", "'password'", "'endpassword'", 
                     "'string'", "'endstring'", "'minsize'", "'maxsize'", 
                     "'encoding'", "'suppressif'", "'disableif'", "'hidden'", 
                     "'goto'", "'formsetguid'", "'inconsistentif'", "'warningif'", 
                     "'nosubmitif'", "'endif'", "'key'", "'DEFAULT'", "'MANUFACTURING'", 
                     "'CHECKBOX_DEFAULT'", "'CHECKBOX_DEFAULT_MFG'", "'INTERACTIVE'", 
                     "'NV_ACCESS'", "'RESET_REQUIRED'", "'RECONNECT_REQUIRED'", 
                     "'LATE_CHECK'", "'READ_ONLY'", "'OPTIONS_ONLY'", "'REST_STYLE'", 
                     "'class'", "'subclass'", "'classguid'", "'typedef'", 
                     "'restore'", "'save'", "'defaults'", "'banner'", "'align'", 
                     "'left'", "'right'", "'center'", "'line'", "'name'", 
                     "'varid'", "'question'", "'questionid'", "'image'", 
                     "'locked'", "'rule'", "'endrule'", "'value'", "'read'", 
                     "'write'", "'resetbutton'", "'endresetbutton'", "'defaultstore'", 
                     "'attribute'", "'varstore'", "'efivarstore'", "'varsize'", 
                     "'namevaluevarstore'", "'action'", "'config'", "'endaction'", 
                     "'refresh'", "'interval'", "'varstoredevice'", "'guidop'", 
                     "'endguidop'", "'datatype'", "'data'", "'modal'", "'NON_DEVICE'", 
                     "'DISK_DEVICE'", "'VIDEO_DEVICE'", "'NETWORK_DEVICE'", 
                     "'INPUT_DEVICE'", "'ONBOARD_DEVICE'", "'OTHER_DEVICE'", 
                     "'SETUP_APPLICATION'", "'GENERAL_APPLICATION'", "'FRONT_PAGE'", 
                     "'SINGLE_USE'", "'YEAR_SUPPRESS'", "'MONTH_SUPPRESS'", 
                     "'DAY_SUPPRESS'", "'HOUR_SUPPRESS'", "'MINUTE_SUPPRESS'", 
                     "'SECOND_SUPPRESS'", "'STORAGE_NORMAL'", "'STORAGE_TIME'", 
                     "'STORAGE_WAKEUP'", "'UNIQUE'", "'NOEMPTY'", "'cond'", 
                     "'find'", "'mid'", "'token'", "'span'", "'dup'", "'vareqval'", 
                     "'var'", "'ideqval'", "'ideqid'", "'ideqvallist'", 
                     "'questionref'", "'ruleref'", "'stringref'", "'pushthis'", 
                     "'security'", "'get'", "'TRUE'", "'FALSE'", "'ONE'", 
                     "'ONES'", "'ZERO'", "'UNDEFINED'", "'VERSION'", "'length'", 
                     "'AND'", "'OR'", "'NOT'", "'set'", "'~'", "'boolval'", 
                     "'stringval'", "'unintval'", "'toupper'", "'tolower'", 
                     "'match'", "'match2'", "'catenate'", "'questionrefval'", 
                     "'stringrefval'", "'map'", "'refreshguid'", "'STRING_TOKEN'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "Define", "Include", "FormPkgType", 
                      "OpenBrace", "CloseBrace", "OpenParen", "CloseParen", 
                      "OpenBracket", "CloseBracket", "Dot", "Negative", 
                      "Colon", "Slash", "Semicolon", "Comma", "DevicePath", 
                      "FormSet", "FormSetId", "EndFormSet", "Title", "FormId", 
                      "OneOf", "EndOneOf", "Prompt", "OrderedList", "MaxContainers", 
                      "EndList", "EndForm", "Form", "FormMap", "MapTitle", 
                      "MapGuid", "Subtitle", "EndSubtitle", "Help", "Text", 
                      "Option", "FLAGS", "Date", "EndDate", "Year", "Month", 
                      "Day", "Time", "EndTime", "Hour", "Minute", "Second", 
                      "GrayOutIf", "Label", "Timeout", "Inventory", "NonNvDataMap", 
                      "Struct", "Union", "Boolean", "Uint64", "Uint32", 
                      "Uint16", "Uint8", "EFI_STRING_ID", "EFI_HII_DATE", 
                      "EFI_HII_TIME", "EFI_HII_REF", "Uuid", "CheckBox", 
                      "EndCheckBox", "Numeric", "EndNumeric", "Minimum", 
                      "Maximum", "STEP", "Default", "Password", "EndPassword", 
                      "String", "EndString", "MinSize", "MaxSize", "Encoding", 
                      "SuppressIf", "DisableIf", "Hidden", "Goto", "FormSetGuid", 
                      "InconsistentIf", "WarningIf", "NoSubmitIf", "EndIf", 
                      "Key", "DefaultFlag", "ManufacturingFlag", "CheckBoxDefaultFlag", 
                      "CheckBoxDefaultMfgFlag", "InteractiveFlag", "NVAccessFlag", 
                      "ResetRequiredFlag", "ReconnectRequiredFlag", "LateCheckFlag", 
                      "ReadOnlyFlag", "OptionOnlyFlag", "RestStyleFlag", 
                      "Class", "Subclass", "ClassGuid", "TypeDef", "Restore", 
                      "Save", "Defaults", "Banner", "Align", "Left", "Right", 
                      "Center", "Line", "Name", "VarId", "Question", "QuestionId", 
                      "Image", "Locked", "Rule", "EndRule", "Value", "Read", 
                      "Write", "ResetButton", "EndResetButton", "DefaultStore", 
                      "Attribute", "Varstore", "Efivarstore", "VarSize", 
                      "NameValueVarStore", "Action", "Config", "EndAction", 
                      "Refresh", "Interval", "VarstoreDevice", "GuidOp", 
                      "EndGuidOp", "DataType", "Data", "Modal", "ClassNonDevice", 
                      "ClassDiskDevice", "ClassVideoDevice", "ClassNetworkDevice", 
                      "ClassInputDevice", "ClassOnBoardDevice", "ClassOtherDevice", 
                      "SubclassSetupApplication", "SubclassGeneralApplication", 
                      "SubclassFrontPage", "SubclassSingleUse", "YearSupppressFlag", 
                      "MonthSuppressFlag", "DaySuppressFlag", "HourSupppressFlag", 
                      "MinuteSuppressFlag", "SecondSuppressFlag", "StorageNormalFlag", 
                      "StorageTimeFlag", "StorageWakeUpFlag", "UniQueFlag", 
                      "NoEmptyFlag", "Cond", "Find", "Mid", "Tok", "Span", 
                      "Dup", "VarEqVal", "Var", "IdEqVal", "IdEqId", "IdEqValList", 
                      "QuestionRef", "RuleRef", "StringRef", "PushThis", 
                      "Security", "Get", "TrueSymbol", "FalseSymbol", "One", 
                      "Ones", "Zero", "Undefined", "Version", "Length", 
                      "AND", "OR", "NOT", "Set", "BitWiseNot", "BoolVal", 
                      "StringVal", "UnIntVal", "ToUpper", "ToLower", "Match", 
                      "Match2", "Catenate", "QuestionRefVal", "StringRefVal", 
                      "Map", "RefreshGuid", "StringToken", "Number", "StringIdentifier", 
                      "ComplexDefine", "LineDefinition", "IncludeDefinition", 
                      "Whitespace", "Newline", "LineComment", "Extern" ]

    RULE_vfrProgram = 0
    RULE_pragmaPackShowDef = 1
    RULE_pragmaPackStackDef = 2
    RULE_pragmaPackNumber = 3
    RULE_vfrPragmaPackDefinition = 4
    RULE_vfrDataStructDefinition = 5
    RULE_vfrDataUnionDefinition = 6
    RULE_vfrDataStructFields = 7
    RULE_dataStructField64 = 8
    RULE_dataStructField32 = 9
    RULE_dataStructField16 = 10
    RULE_dataStructField8 = 11
    RULE_dataStructFieldBool = 12
    RULE_dataStructFieldString = 13
    RULE_dataStructFieldDate = 14
    RULE_dataStructFieldTime = 15
    RULE_dataStructFieldRef = 16
    RULE_dataStructFieldUser = 17
    RULE_dataStructBitField64 = 18
    RULE_dataStructBitField32 = 19
    RULE_dataStructBitField16 = 20
    RULE_dataStructBitField8 = 21
    RULE_vfrFormSetDefinition = 22
    RULE_classguidDefinition = 23
    RULE_classDefinition = 24
    RULE_validClassNames = 25
    RULE_subclassDefinition = 26
    RULE_vfrFormSetList = 27
    RULE_vfrStatementDefaultStore = 28
    RULE_vfrStatementVarStoreLinear = 29
    RULE_vfrStatementVarStoreEfi = 30
    RULE_vfrVarStoreEfiAttr = 31
    RULE_vfrStatementVarStoreNameValue = 32
    RULE_vfrStatementDisableIfFormSet = 33
    RULE_vfrStatementSuppressIfFormSet = 34
    RULE_guidSubDefinition = 35
    RULE_guidDefinition = 36
    RULE_getStringId = 37
    RULE_vfrQuestionHeader = 38
    RULE_vfrQuestionBaseInfo = 39
    RULE_vfrStatementHeader = 40
    RULE_questionheaderFlagsField = 41
    RULE_vfrStorageVarId = 42
    RULE_vfrConstantValueField = 43
    RULE_vfrImageTag = 44
    RULE_vfrLockedTag = 45
    RULE_vfrStatementStatTag = 46
    RULE_vfrStatementStatTagList = 47
    RULE_vfrFormDefinition = 48
    RULE_vfrFormMapDefinition = 49
    RULE_vfrStatementImage = 50
    RULE_vfrStatementLocked = 51
    RULE_vfrStatementRules = 52
    RULE_vfrStatementStat = 53
    RULE_vfrStatementSubTitle = 54
    RULE_vfrSubtitleFlags = 55
    RULE_subtitleFlagsField = 56
    RULE_vfrStatementStaticText = 57
    RULE_staticTextFlagsField = 58
    RULE_vfrStatementCrossReference = 59
    RULE_vfrStatementGoto = 60
    RULE_vfrGotoFlags = 61
    RULE_gotoFlagsField = 62
    RULE_vfrStatementResetButton = 63
    RULE_vfrStatementQuestions = 64
    RULE_vfrStatementQuestionTag = 65
    RULE_vfrStatementInconsistentIf = 66
    RULE_vfrStatementNoSubmitIf = 67
    RULE_vfrStatementDisableIfQuest = 68
    RULE_vfrStatementRefresh = 69
    RULE_vfrStatementVarstoreDevice = 70
    RULE_vfrStatementRefreshEvent = 71
    RULE_vfrStatementWarningIf = 72
    RULE_vfrStatementQuestionTagList = 73
    RULE_vfrStatementQuestionOptionTag = 74
    RULE_vfrStatementSuppressIfQuest = 75
    RULE_flagsField = 76
    RULE_vfrStatementDefault = 77
    RULE_vfrStatementValue = 78
    RULE_vfrStatementOptions = 79
    RULE_vfrStatementOneOfOption = 80
    RULE_vfrOneOfOptionFlags = 81
    RULE_oneofoptionFlagsField = 82
    RULE_vfrStatementRead = 83
    RULE_vfrStatementWrite = 84
    RULE_vfrStatementQuestionOptionList = 85
    RULE_vfrStatementBooleanType = 86
    RULE_vfrStatementCheckBox = 87
    RULE_vfrCheckBoxFlags = 88
    RULE_checkboxFlagsField = 89
    RULE_vfrStatementAction = 90
    RULE_vfrActionFlags = 91
    RULE_actionFlagsField = 92
    RULE_vfrStatementNumericType = 93
    RULE_vfrStatementNumeric = 94
    RULE_vfrSetMinMaxStep = 95
    RULE_vfrNumericFlags = 96
    RULE_numericFlagsField = 97
    RULE_vfrStatementOneOf = 98
    RULE_vfrOneofFlagsField = 99
    RULE_vfrStatementStringType = 100
    RULE_vfrStatementString = 101
    RULE_vfrStringFlagsField = 102
    RULE_stringFlagsField = 103
    RULE_vfrStatementPassword = 104
    RULE_vfrPasswordFlagsField = 105
    RULE_passwordFlagsField = 106
    RULE_vfrStatementOrderedList = 107
    RULE_vfrOrderedListFlags = 108
    RULE_orderedlistFlagsField = 109
    RULE_vfrStatementDate = 110
    RULE_minMaxDateStepDefault = 111
    RULE_vfrDateFlags = 112
    RULE_dateFlagsField = 113
    RULE_vfrStatementTime = 114
    RULE_minMaxTimeStepDefault = 115
    RULE_vfrTimeFlags = 116
    RULE_timeFlagsField = 117
    RULE_vfrStatementConditional = 118
    RULE_vfrStatementStatList = 119
    RULE_vfrStatementDisableIfStat = 120
    RULE_vfrStatementSuppressIfStat = 121
    RULE_vfrStatementGrayOutIfStat = 122
    RULE_vfrStatementLabel = 123
    RULE_vfrStatementBanner = 124
    RULE_vfrStatementExtension = 125
    RULE_vfrExtensionData = 126
    RULE_vfrExtensionDataComponent = 127
    RULE_vfrExtensionDataDotArea = 128
    RULE_vfrStatementModal = 129
    RULE_vfrStatementExpression = 130
    RULE_vfrStatementExpressionSub = 131
    RULE_andTerm = 132
    RULE_bitwiseorTerm = 133
    RULE_bitwiseandTerm = 134
    RULE_equalTerm = 135
    RULE_compareTerm = 136
    RULE_shiftTerm = 137
    RULE_addMinusTerm = 138
    RULE_multdivmodTerm = 139
    RULE_castTerm = 140
    RULE_atomTerm = 141
    RULE_vfrExpressionCatenate = 142
    RULE_vfrExpressionMatch = 143
    RULE_vfrExpressionMatch2 = 144
    RULE_vfrExpressionParen = 145
    RULE_vfrExpressionBuildInFunction = 146
    RULE_dupExp = 147
    RULE_vareqvalExp = 148
    RULE_ideqvalExp = 149
    RULE_ideqidExp = 150
    RULE_ideqvallistExp = 151
    RULE_vfrQuestionDataFieldName = 152
    RULE_questionref1Exp = 153
    RULE_rulerefExp = 154
    RULE_stringref1Exp = 155
    RULE_pushthisExp = 156
    RULE_securityExp = 157
    RULE_getExp = 158
    RULE_vfrExpressionConstant = 159
    RULE_vfrExpressionUnaryOp = 160
    RULE_lengthExp = 161
    RULE_bitwisenotExp = 162
    RULE_question23refExp = 163
    RULE_stringref2Exp = 164
    RULE_toboolExp = 165
    RULE_tostringExp = 166
    RULE_unintExp = 167
    RULE_toupperExp = 168
    RULE_tolwerExp = 169
    RULE_setExp = 170
    RULE_vfrExpressionTernaryOp = 171
    RULE_conditionalExp = 172
    RULE_findExp = 173
    RULE_findFormat = 174
    RULE_midExp = 175
    RULE_tokenExp = 176
    RULE_spanExp = 177
    RULE_spanFlags = 178
    RULE_vfrExpressionMap = 179

    ruleNames =  [ "vfrProgram", "pragmaPackShowDef", "pragmaPackStackDef", 
                   "pragmaPackNumber", "vfrPragmaPackDefinition", "vfrDataStructDefinition", 
                   "vfrDataUnionDefinition", "vfrDataStructFields", "dataStructField64", 
                   "dataStructField32", "dataStructField16", "dataStructField8", 
                   "dataStructFieldBool", "dataStructFieldString", "dataStructFieldDate", 
                   "dataStructFieldTime", "dataStructFieldRef", "dataStructFieldUser", 
                   "dataStructBitField64", "dataStructBitField32", "dataStructBitField16", 
                   "dataStructBitField8", "vfrFormSetDefinition", "classguidDefinition", 
                   "classDefinition", "validClassNames", "subclassDefinition", 
                   "vfrFormSetList", "vfrStatementDefaultStore", "vfrStatementVarStoreLinear", 
                   "vfrStatementVarStoreEfi", "vfrVarStoreEfiAttr", "vfrStatementVarStoreNameValue", 
                   "vfrStatementDisableIfFormSet", "vfrStatementSuppressIfFormSet", 
                   "guidSubDefinition", "guidDefinition", "getStringId", 
                   "vfrQuestionHeader", "vfrQuestionBaseInfo", "vfrStatementHeader", 
                   "questionheaderFlagsField", "vfrStorageVarId", "vfrConstantValueField", 
                   "vfrImageTag", "vfrLockedTag", "vfrStatementStatTag", 
                   "vfrStatementStatTagList", "vfrFormDefinition", "vfrFormMapDefinition", 
                   "vfrStatementImage", "vfrStatementLocked", "vfrStatementRules", 
                   "vfrStatementStat", "vfrStatementSubTitle", "vfrSubtitleFlags", 
                   "subtitleFlagsField", "vfrStatementStaticText", "staticTextFlagsField", 
                   "vfrStatementCrossReference", "vfrStatementGoto", "vfrGotoFlags", 
                   "gotoFlagsField", "vfrStatementResetButton", "vfrStatementQuestions", 
                   "vfrStatementQuestionTag", "vfrStatementInconsistentIf", 
                   "vfrStatementNoSubmitIf", "vfrStatementDisableIfQuest", 
                   "vfrStatementRefresh", "vfrStatementVarstoreDevice", 
                   "vfrStatementRefreshEvent", "vfrStatementWarningIf", 
                   "vfrStatementQuestionTagList", "vfrStatementQuestionOptionTag", 
                   "vfrStatementSuppressIfQuest", "flagsField", "vfrStatementDefault", 
                   "vfrStatementValue", "vfrStatementOptions", "vfrStatementOneOfOption", 
                   "vfrOneOfOptionFlags", "oneofoptionFlagsField", "vfrStatementRead", 
                   "vfrStatementWrite", "vfrStatementQuestionOptionList", 
                   "vfrStatementBooleanType", "vfrStatementCheckBox", "vfrCheckBoxFlags", 
                   "checkboxFlagsField", "vfrStatementAction", "vfrActionFlags", 
                   "actionFlagsField", "vfrStatementNumericType", "vfrStatementNumeric", 
                   "vfrSetMinMaxStep", "vfrNumericFlags", "numericFlagsField", 
                   "vfrStatementOneOf", "vfrOneofFlagsField", "vfrStatementStringType", 
                   "vfrStatementString", "vfrStringFlagsField", "stringFlagsField", 
                   "vfrStatementPassword", "vfrPasswordFlagsField", "passwordFlagsField", 
                   "vfrStatementOrderedList", "vfrOrderedListFlags", "orderedlistFlagsField", 
                   "vfrStatementDate", "minMaxDateStepDefault", "vfrDateFlags", 
                   "dateFlagsField", "vfrStatementTime", "minMaxTimeStepDefault", 
                   "vfrTimeFlags", "timeFlagsField", "vfrStatementConditional", 
                   "vfrStatementStatList", "vfrStatementDisableIfStat", 
                   "vfrStatementSuppressIfStat", "vfrStatementGrayOutIfStat", 
                   "vfrStatementLabel", "vfrStatementBanner", "vfrStatementExtension", 
                   "vfrExtensionData", "vfrExtensionDataComponent", "vfrExtensionDataDotArea", 
                   "vfrStatementModal", "vfrStatementExpression", "vfrStatementExpressionSub", 
                   "andTerm", "bitwiseorTerm", "bitwiseandTerm", "equalTerm", 
                   "compareTerm", "shiftTerm", "addMinusTerm", "multdivmodTerm", 
                   "castTerm", "atomTerm", "vfrExpressionCatenate", "vfrExpressionMatch", 
                   "vfrExpressionMatch2", "vfrExpressionParen", "vfrExpressionBuildInFunction", 
                   "dupExp", "vareqvalExp", "ideqvalExp", "ideqidExp", "ideqvallistExp", 
                   "vfrQuestionDataFieldName", "questionref1Exp", "rulerefExp", 
                   "stringref1Exp", "pushthisExp", "securityExp", "getExp", 
                   "vfrExpressionConstant", "vfrExpressionUnaryOp", "lengthExp", 
                   "bitwisenotExp", "question23refExp", "stringref2Exp", 
                   "toboolExp", "tostringExp", "unintExp", "toupperExp", 
                   "tolwerExp", "setExp", "vfrExpressionTernaryOp", "conditionalExp", 
                   "findExp", "findFormat", "midExp", "tokenExp", "spanExp", 
                   "spanFlags", "vfrExpressionMap" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    Define=38
    Include=39
    FormPkgType=40
    OpenBrace=41
    CloseBrace=42
    OpenParen=43
    CloseParen=44
    OpenBracket=45
    CloseBracket=46
    Dot=47
    Negative=48
    Colon=49
    Slash=50
    Semicolon=51
    Comma=52
    DevicePath=53
    FormSet=54
    FormSetId=55
    EndFormSet=56
    Title=57
    FormId=58
    OneOf=59
    EndOneOf=60
    Prompt=61
    OrderedList=62
    MaxContainers=63
    EndList=64
    EndForm=65
    Form=66
    FormMap=67
    MapTitle=68
    MapGuid=69
    Subtitle=70
    EndSubtitle=71
    Help=72
    Text=73
    Option=74
    FLAGS=75
    Date=76
    EndDate=77
    Year=78
    Month=79
    Day=80
    Time=81
    EndTime=82
    Hour=83
    Minute=84
    Second=85
    GrayOutIf=86
    Label=87
    Timeout=88
    Inventory=89
    NonNvDataMap=90
    Struct=91
    Union=92
    Boolean=93
    Uint64=94
    Uint32=95
    Uint16=96
    Uint8=97
    EFI_STRING_ID=98
    EFI_HII_DATE=99
    EFI_HII_TIME=100
    EFI_HII_REF=101
    Uuid=102
    CheckBox=103
    EndCheckBox=104
    Numeric=105
    EndNumeric=106
    Minimum=107
    Maximum=108
    STEP=109
    Default=110
    Password=111
    EndPassword=112
    String=113
    EndString=114
    MinSize=115
    MaxSize=116
    Encoding=117
    SuppressIf=118
    DisableIf=119
    Hidden=120
    Goto=121
    FormSetGuid=122
    InconsistentIf=123
    WarningIf=124
    NoSubmitIf=125
    EndIf=126
    Key=127
    DefaultFlag=128
    ManufacturingFlag=129
    CheckBoxDefaultFlag=130
    CheckBoxDefaultMfgFlag=131
    InteractiveFlag=132
    NVAccessFlag=133
    ResetRequiredFlag=134
    ReconnectRequiredFlag=135
    LateCheckFlag=136
    ReadOnlyFlag=137
    OptionOnlyFlag=138
    RestStyleFlag=139
    Class=140
    Subclass=141
    ClassGuid=142
    TypeDef=143
    Restore=144
    Save=145
    Defaults=146
    Banner=147
    Align=148
    Left=149
    Right=150
    Center=151
    Line=152
    Name=153
    VarId=154
    Question=155
    QuestionId=156
    Image=157
    Locked=158
    Rule=159
    EndRule=160
    Value=161
    Read=162
    Write=163
    ResetButton=164
    EndResetButton=165
    DefaultStore=166
    Attribute=167
    Varstore=168
    Efivarstore=169
    VarSize=170
    NameValueVarStore=171
    Action=172
    Config=173
    EndAction=174
    Refresh=175
    Interval=176
    VarstoreDevice=177
    GuidOp=178
    EndGuidOp=179
    DataType=180
    Data=181
    Modal=182
    ClassNonDevice=183
    ClassDiskDevice=184
    ClassVideoDevice=185
    ClassNetworkDevice=186
    ClassInputDevice=187
    ClassOnBoardDevice=188
    ClassOtherDevice=189
    SubclassSetupApplication=190
    SubclassGeneralApplication=191
    SubclassFrontPage=192
    SubclassSingleUse=193
    YearSupppressFlag=194
    MonthSuppressFlag=195
    DaySuppressFlag=196
    HourSupppressFlag=197
    MinuteSuppressFlag=198
    SecondSuppressFlag=199
    StorageNormalFlag=200
    StorageTimeFlag=201
    StorageWakeUpFlag=202
    UniQueFlag=203
    NoEmptyFlag=204
    Cond=205
    Find=206
    Mid=207
    Tok=208
    Span=209
    Dup=210
    VarEqVal=211
    Var=212
    IdEqVal=213
    IdEqId=214
    IdEqValList=215
    QuestionRef=216
    RuleRef=217
    StringRef=218
    PushThis=219
    Security=220
    Get=221
    TrueSymbol=222
    FalseSymbol=223
    One=224
    Ones=225
    Zero=226
    Undefined=227
    Version=228
    Length=229
    AND=230
    OR=231
    NOT=232
    Set=233
    BitWiseNot=234
    BoolVal=235
    StringVal=236
    UnIntVal=237
    ToUpper=238
    ToLower=239
    Match=240
    Match2=241
    Catenate=242
    QuestionRefVal=243
    StringRefVal=244
    Map=245
    RefreshGuid=246
    StringToken=247
    Number=248
    StringIdentifier=249
    ComplexDefine=250
    LineDefinition=251
    IncludeDefinition=252
    Whitespace=253
    Newline=254
    LineComment=255
    Extern=256

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class VfrProgramContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vfrFormSetDefinition(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrFormSetDefinitionContext,0)


        def vfrPragmaPackDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrPragmaPackDefinitionContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrPragmaPackDefinitionContext,i)


        def vfrDataStructDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrDataStructDefinitionContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrDataStructDefinitionContext,i)


        def vfrDataUnionDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrDataUnionDefinitionContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrDataUnionDefinitionContext,i)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrProgram

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrProgram" ):
                return visitor.visitVfrProgram(self)
            else:
                return visitor.visitChildren(self)




    def vfrProgram(self):

        localctx = VfrSyntaxParser.VfrProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_vfrProgram)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 365
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==VfrSyntaxParser.T__3 or ((((_la - 91)) & ~0x3f) == 0 and ((1 << (_la - 91)) & ((1 << (VfrSyntaxParser.Struct - 91)) | (1 << (VfrSyntaxParser.Union - 91)) | (1 << (VfrSyntaxParser.TypeDef - 91)))) != 0):
                self.state = 363
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
                if la_ == 1:
                    self.state = 360
                    self.vfrPragmaPackDefinition()
                    pass

                elif la_ == 2:
                    self.state = 361
                    self.vfrDataStructDefinition()
                    pass

                elif la_ == 3:
                    self.state = 362
                    self.vfrDataUnionDefinition()
                    pass


                self.state = 367
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 368
            self.vfrFormSetDefinition()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PragmaPackShowDefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_pragmaPackShowDef

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPragmaPackShowDef" ):
                return visitor.visitPragmaPackShowDef(self)
            else:
                return visitor.visitChildren(self)




    def pragmaPackShowDef(self):

        localctx = VfrSyntaxParser.PragmaPackShowDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_pragmaPackShowDef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 370
            self.match(VfrSyntaxParser.T__0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PragmaPackStackDefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Comma)
            else:
                return self.getToken(VfrSyntaxParser.Comma, i)

        def StringIdentifier(self):
            return self.getToken(VfrSyntaxParser.StringIdentifier, 0)

        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_pragmaPackStackDef

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPragmaPackStackDef" ):
                return visitor.visitPragmaPackStackDef(self)
            else:
                return visitor.visitChildren(self)




    def pragmaPackStackDef(self):

        localctx = VfrSyntaxParser.PragmaPackStackDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_pragmaPackStackDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 372
            _la = self._input.LA(1)
            if not(_la==VfrSyntaxParser.T__1 or _la==VfrSyntaxParser.T__2):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 375
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.state = 373
                self.match(VfrSyntaxParser.Comma)
                self.state = 374
                self.match(VfrSyntaxParser.StringIdentifier)


            self.state = 379
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.Comma:
                self.state = 377
                self.match(VfrSyntaxParser.Comma)
                self.state = 378
                self.match(VfrSyntaxParser.Number)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PragmaPackNumberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_pragmaPackNumber

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPragmaPackNumber" ):
                return visitor.visitPragmaPackNumber(self)
            else:
                return visitor.visitChildren(self)




    def pragmaPackNumber(self):

        localctx = VfrSyntaxParser.PragmaPackNumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_pragmaPackNumber)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 382
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.Number:
                self.state = 381
                self.match(VfrSyntaxParser.Number)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrPragmaPackDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OpenParen(self):
            return self.getToken(VfrSyntaxParser.OpenParen, 0)

        def CloseParen(self):
            return self.getToken(VfrSyntaxParser.CloseParen, 0)

        def pragmaPackShowDef(self):
            return self.getTypedRuleContext(VfrSyntaxParser.PragmaPackShowDefContext,0)


        def pragmaPackStackDef(self):
            return self.getTypedRuleContext(VfrSyntaxParser.PragmaPackStackDefContext,0)


        def pragmaPackNumber(self):
            return self.getTypedRuleContext(VfrSyntaxParser.PragmaPackNumberContext,0)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrPragmaPackDefinition

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrPragmaPackDefinition" ):
                return visitor.visitVfrPragmaPackDefinition(self)
            else:
                return visitor.visitChildren(self)




    def vfrPragmaPackDefinition(self):

        localctx = VfrSyntaxParser.VfrPragmaPackDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_vfrPragmaPackDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 384
            self.match(VfrSyntaxParser.T__3)
            self.state = 385
            self.match(VfrSyntaxParser.T__4)
            self.state = 386
            self.match(VfrSyntaxParser.OpenParen)
            self.state = 390
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.state = 387
                self.pragmaPackShowDef()

            elif la_ == 2:
                self.state = 388
                self.pragmaPackStackDef()

            elif la_ == 3:
                self.state = 389
                self.pragmaPackNumber()


            self.state = 392
            self.match(VfrSyntaxParser.CloseParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrDataStructDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Struct(self):
            return self.getToken(VfrSyntaxParser.Struct, 0)

        def OpenBrace(self):
            return self.getToken(VfrSyntaxParser.OpenBrace, 0)

        def vfrDataStructFields(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrDataStructFieldsContext,0)


        def CloseBrace(self):
            return self.getToken(VfrSyntaxParser.CloseBrace, 0)

        def Semicolon(self):
            return self.getToken(VfrSyntaxParser.Semicolon, 0)

        def TypeDef(self):
            return self.getToken(VfrSyntaxParser.TypeDef, 0)

        def NonNvDataMap(self):
            return self.getToken(VfrSyntaxParser.NonNvDataMap, 0)

        def StringIdentifier(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.StringIdentifier)
            else:
                return self.getToken(VfrSyntaxParser.StringIdentifier, i)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrDataStructDefinition

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrDataStructDefinition" ):
                return visitor.visitVfrDataStructDefinition(self)
            else:
                return visitor.visitChildren(self)




    def vfrDataStructDefinition(self):

        localctx = VfrSyntaxParser.VfrDataStructDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_vfrDataStructDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 395
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.TypeDef:
                self.state = 394
                self.match(VfrSyntaxParser.TypeDef)


            self.state = 397
            self.match(VfrSyntaxParser.Struct)
            self.state = 399
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.NonNvDataMap:
                self.state = 398
                self.match(VfrSyntaxParser.NonNvDataMap)


            self.state = 402
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.StringIdentifier:
                self.state = 401
                self.match(VfrSyntaxParser.StringIdentifier)


            self.state = 404
            self.match(VfrSyntaxParser.OpenBrace)
            self.state = 405
            self.vfrDataStructFields(False)
            self.state = 406
            self.match(VfrSyntaxParser.CloseBrace)
            self.state = 408
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.StringIdentifier:
                self.state = 407
                self.match(VfrSyntaxParser.StringIdentifier)


            self.state = 410
            self.match(VfrSyntaxParser.Semicolon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrDataUnionDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Union(self):
            return self.getToken(VfrSyntaxParser.Union, 0)

        def OpenBrace(self):
            return self.getToken(VfrSyntaxParser.OpenBrace, 0)

        def vfrDataStructFields(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrDataStructFieldsContext,0)


        def CloseBrace(self):
            return self.getToken(VfrSyntaxParser.CloseBrace, 0)

        def Semicolon(self):
            return self.getToken(VfrSyntaxParser.Semicolon, 0)

        def TypeDef(self):
            return self.getToken(VfrSyntaxParser.TypeDef, 0)

        def NonNvDataMap(self):
            return self.getToken(VfrSyntaxParser.NonNvDataMap, 0)

        def StringIdentifier(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.StringIdentifier)
            else:
                return self.getToken(VfrSyntaxParser.StringIdentifier, i)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrDataUnionDefinition

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrDataUnionDefinition" ):
                return visitor.visitVfrDataUnionDefinition(self)
            else:
                return visitor.visitChildren(self)




    def vfrDataUnionDefinition(self):

        localctx = VfrSyntaxParser.VfrDataUnionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_vfrDataUnionDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 413
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.TypeDef:
                self.state = 412
                self.match(VfrSyntaxParser.TypeDef)


            self.state = 415
            self.match(VfrSyntaxParser.Union)
            self.state = 417
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.NonNvDataMap:
                self.state = 416
                self.match(VfrSyntaxParser.NonNvDataMap)


            self.state = 420
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.StringIdentifier:
                self.state = 419
                self.match(VfrSyntaxParser.StringIdentifier)


            self.state = 422
            self.match(VfrSyntaxParser.OpenBrace)
            self.state = 423
            self.vfrDataStructFields(True)
            self.state = 424
            self.match(VfrSyntaxParser.CloseBrace)
            self.state = 426
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.StringIdentifier:
                self.state = 425
                self.match(VfrSyntaxParser.StringIdentifier)


            self.state = 428
            self.match(VfrSyntaxParser.Semicolon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrDataStructFieldsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1, FieldInUnion=None):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.FieldInUnion = None
            self.FieldInUnion = FieldInUnion

        def dataStructField64(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.DataStructField64Context)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.DataStructField64Context,i)


        def dataStructField32(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.DataStructField32Context)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.DataStructField32Context,i)


        def dataStructField16(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.DataStructField16Context)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.DataStructField16Context,i)


        def dataStructField8(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.DataStructField8Context)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.DataStructField8Context,i)


        def dataStructFieldBool(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.DataStructFieldBoolContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.DataStructFieldBoolContext,i)


        def dataStructFieldString(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.DataStructFieldStringContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.DataStructFieldStringContext,i)


        def dataStructFieldDate(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.DataStructFieldDateContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.DataStructFieldDateContext,i)


        def dataStructFieldTime(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.DataStructFieldTimeContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.DataStructFieldTimeContext,i)


        def dataStructFieldRef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.DataStructFieldRefContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.DataStructFieldRefContext,i)


        def dataStructFieldUser(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.DataStructFieldUserContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.DataStructFieldUserContext,i)


        def dataStructBitField64(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.DataStructBitField64Context)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.DataStructBitField64Context,i)


        def dataStructBitField32(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.DataStructBitField32Context)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.DataStructBitField32Context,i)


        def dataStructBitField16(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.DataStructBitField16Context)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.DataStructBitField16Context,i)


        def dataStructBitField8(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.DataStructBitField8Context)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.DataStructBitField8Context,i)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrDataStructFields

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrDataStructFields" ):
                return visitor.visitVfrDataStructFields(self)
            else:
                return visitor.visitChildren(self)




    def vfrDataStructFields(self, FieldInUnion):

        localctx = VfrSyntaxParser.VfrDataStructFieldsContext(self, self._ctx, self.state, FieldInUnion)
        self.enterRule(localctx, 14, self.RULE_vfrDataStructFields)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 446
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & ((1 << (VfrSyntaxParser.Boolean - 93)) | (1 << (VfrSyntaxParser.Uint64 - 93)) | (1 << (VfrSyntaxParser.Uint32 - 93)) | (1 << (VfrSyntaxParser.Uint16 - 93)) | (1 << (VfrSyntaxParser.Uint8 - 93)) | (1 << (VfrSyntaxParser.EFI_STRING_ID - 93)) | (1 << (VfrSyntaxParser.EFI_HII_DATE - 93)) | (1 << (VfrSyntaxParser.EFI_HII_TIME - 93)) | (1 << (VfrSyntaxParser.EFI_HII_REF - 93)))) != 0) or _la==VfrSyntaxParser.StringIdentifier:
                self.state = 444
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
                if la_ == 1:
                    self.state = 430
                    self.dataStructField64(FieldInUnion)
                    pass

                elif la_ == 2:
                    self.state = 431
                    self.dataStructField32(FieldInUnion)
                    pass

                elif la_ == 3:
                    self.state = 432
                    self.dataStructField16(FieldInUnion)
                    pass

                elif la_ == 4:
                    self.state = 433
                    self.dataStructField8(FieldInUnion)
                    pass

                elif la_ == 5:
                    self.state = 434
                    self.dataStructFieldBool(FieldInUnion)
                    pass

                elif la_ == 6:
                    self.state = 435
                    self.dataStructFieldString(FieldInUnion)
                    pass

                elif la_ == 7:
                    self.state = 436
                    self.dataStructFieldDate(FieldInUnion)
                    pass

                elif la_ == 8:
                    self.state = 437
                    self.dataStructFieldTime(FieldInUnion)
                    pass

                elif la_ == 9:
                    self.state = 438
                    self.dataStructFieldRef(FieldInUnion)
                    pass

                elif la_ == 10:
                    self.state = 439
                    self.dataStructFieldUser(FieldInUnion)
                    pass

                elif la_ == 11:
                    self.state = 440
                    self.dataStructBitField64(FieldInUnion)
                    pass

                elif la_ == 12:
                    self.state = 441
                    self.dataStructBitField32(FieldInUnion)
                    pass

                elif la_ == 13:
                    self.state = 442
                    self.dataStructBitField16(FieldInUnion)
                    pass

                elif la_ == 14:
                    self.state = 443
                    self.dataStructBitField8(FieldInUnion)
                    pass


                self.state = 448
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataStructField64Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1, FieldInUnion=None):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.FieldInUnion = None
            self.FieldInUnion = FieldInUnion

        def Uint64(self):
            return self.getToken(VfrSyntaxParser.Uint64, 0)

        def StringIdentifier(self):
            return self.getToken(VfrSyntaxParser.StringIdentifier, 0)

        def Semicolon(self):
            return self.getToken(VfrSyntaxParser.Semicolon, 0)

        def OpenBracket(self):
            return self.getToken(VfrSyntaxParser.OpenBracket, 0)

        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def CloseBracket(self):
            return self.getToken(VfrSyntaxParser.CloseBracket, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_dataStructField64

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDataStructField64" ):
                return visitor.visitDataStructField64(self)
            else:
                return visitor.visitChildren(self)




    def dataStructField64(self, FieldInUnion):

        localctx = VfrSyntaxParser.DataStructField64Context(self, self._ctx, self.state, FieldInUnion)
        self.enterRule(localctx, 16, self.RULE_dataStructField64)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 449
            self.match(VfrSyntaxParser.Uint64)
            self.state = 450
            self.match(VfrSyntaxParser.StringIdentifier)
            self.state = 454
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.OpenBracket:
                self.state = 451
                self.match(VfrSyntaxParser.OpenBracket)
                self.state = 452
                self.match(VfrSyntaxParser.Number)
                self.state = 453
                self.match(VfrSyntaxParser.CloseBracket)


            self.state = 456
            self.match(VfrSyntaxParser.Semicolon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataStructField32Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1, FieldInUnion=None):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.FieldInUnion = None
            self.FieldInUnion = FieldInUnion

        def Uint32(self):
            return self.getToken(VfrSyntaxParser.Uint32, 0)

        def StringIdentifier(self):
            return self.getToken(VfrSyntaxParser.StringIdentifier, 0)

        def Semicolon(self):
            return self.getToken(VfrSyntaxParser.Semicolon, 0)

        def OpenBracket(self):
            return self.getToken(VfrSyntaxParser.OpenBracket, 0)

        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def CloseBracket(self):
            return self.getToken(VfrSyntaxParser.CloseBracket, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_dataStructField32

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDataStructField32" ):
                return visitor.visitDataStructField32(self)
            else:
                return visitor.visitChildren(self)




    def dataStructField32(self, FieldInUnion):

        localctx = VfrSyntaxParser.DataStructField32Context(self, self._ctx, self.state, FieldInUnion)
        self.enterRule(localctx, 18, self.RULE_dataStructField32)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 458
            self.match(VfrSyntaxParser.Uint32)
            self.state = 459
            self.match(VfrSyntaxParser.StringIdentifier)
            self.state = 463
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.OpenBracket:
                self.state = 460
                self.match(VfrSyntaxParser.OpenBracket)
                self.state = 461
                self.match(VfrSyntaxParser.Number)
                self.state = 462
                self.match(VfrSyntaxParser.CloseBracket)


            self.state = 465
            self.match(VfrSyntaxParser.Semicolon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataStructField16Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1, FieldInUnion=None):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.FieldInUnion = None
            self.FieldInUnion = FieldInUnion

        def Uint16(self):
            return self.getToken(VfrSyntaxParser.Uint16, 0)

        def StringIdentifier(self):
            return self.getToken(VfrSyntaxParser.StringIdentifier, 0)

        def Semicolon(self):
            return self.getToken(VfrSyntaxParser.Semicolon, 0)

        def OpenBracket(self):
            return self.getToken(VfrSyntaxParser.OpenBracket, 0)

        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def CloseBracket(self):
            return self.getToken(VfrSyntaxParser.CloseBracket, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_dataStructField16

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDataStructField16" ):
                return visitor.visitDataStructField16(self)
            else:
                return visitor.visitChildren(self)




    def dataStructField16(self, FieldInUnion):

        localctx = VfrSyntaxParser.DataStructField16Context(self, self._ctx, self.state, FieldInUnion)
        self.enterRule(localctx, 20, self.RULE_dataStructField16)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 467
            self.match(VfrSyntaxParser.Uint16)
            self.state = 468
            self.match(VfrSyntaxParser.StringIdentifier)
            self.state = 472
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.OpenBracket:
                self.state = 469
                self.match(VfrSyntaxParser.OpenBracket)
                self.state = 470
                self.match(VfrSyntaxParser.Number)
                self.state = 471
                self.match(VfrSyntaxParser.CloseBracket)


            self.state = 474
            self.match(VfrSyntaxParser.Semicolon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataStructField8Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1, FieldInUnion=None):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.FieldInUnion = None
            self.FieldInUnion = FieldInUnion

        def Uint8(self):
            return self.getToken(VfrSyntaxParser.Uint8, 0)

        def StringIdentifier(self):
            return self.getToken(VfrSyntaxParser.StringIdentifier, 0)

        def Semicolon(self):
            return self.getToken(VfrSyntaxParser.Semicolon, 0)

        def OpenBracket(self):
            return self.getToken(VfrSyntaxParser.OpenBracket, 0)

        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def CloseBracket(self):
            return self.getToken(VfrSyntaxParser.CloseBracket, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_dataStructField8

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDataStructField8" ):
                return visitor.visitDataStructField8(self)
            else:
                return visitor.visitChildren(self)




    def dataStructField8(self, FieldInUnion):

        localctx = VfrSyntaxParser.DataStructField8Context(self, self._ctx, self.state, FieldInUnion)
        self.enterRule(localctx, 22, self.RULE_dataStructField8)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 476
            self.match(VfrSyntaxParser.Uint8)
            self.state = 477
            self.match(VfrSyntaxParser.StringIdentifier)
            self.state = 481
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.OpenBracket:
                self.state = 478
                self.match(VfrSyntaxParser.OpenBracket)
                self.state = 479
                self.match(VfrSyntaxParser.Number)
                self.state = 480
                self.match(VfrSyntaxParser.CloseBracket)


            self.state = 483
            self.match(VfrSyntaxParser.Semicolon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataStructFieldBoolContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1, FieldInUnion=None):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.FieldInUnion = None
            self.FieldInUnion = FieldInUnion

        def Boolean(self):
            return self.getToken(VfrSyntaxParser.Boolean, 0)

        def StringIdentifier(self):
            return self.getToken(VfrSyntaxParser.StringIdentifier, 0)

        def Semicolon(self):
            return self.getToken(VfrSyntaxParser.Semicolon, 0)

        def OpenBracket(self):
            return self.getToken(VfrSyntaxParser.OpenBracket, 0)

        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def CloseBracket(self):
            return self.getToken(VfrSyntaxParser.CloseBracket, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_dataStructFieldBool

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDataStructFieldBool" ):
                return visitor.visitDataStructFieldBool(self)
            else:
                return visitor.visitChildren(self)




    def dataStructFieldBool(self, FieldInUnion):

        localctx = VfrSyntaxParser.DataStructFieldBoolContext(self, self._ctx, self.state, FieldInUnion)
        self.enterRule(localctx, 24, self.RULE_dataStructFieldBool)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 485
            self.match(VfrSyntaxParser.Boolean)
            self.state = 486
            self.match(VfrSyntaxParser.StringIdentifier)
            self.state = 490
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.OpenBracket:
                self.state = 487
                self.match(VfrSyntaxParser.OpenBracket)
                self.state = 488
                self.match(VfrSyntaxParser.Number)
                self.state = 489
                self.match(VfrSyntaxParser.CloseBracket)


            self.state = 492
            self.match(VfrSyntaxParser.Semicolon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataStructFieldStringContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1, FieldInUnion=None):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.FieldInUnion = None
            self.FieldInUnion = FieldInUnion

        def EFI_STRING_ID(self):
            return self.getToken(VfrSyntaxParser.EFI_STRING_ID, 0)

        def StringIdentifier(self):
            return self.getToken(VfrSyntaxParser.StringIdentifier, 0)

        def Semicolon(self):
            return self.getToken(VfrSyntaxParser.Semicolon, 0)

        def OpenBracket(self):
            return self.getToken(VfrSyntaxParser.OpenBracket, 0)

        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def CloseBracket(self):
            return self.getToken(VfrSyntaxParser.CloseBracket, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_dataStructFieldString

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDataStructFieldString" ):
                return visitor.visitDataStructFieldString(self)
            else:
                return visitor.visitChildren(self)




    def dataStructFieldString(self, FieldInUnion):

        localctx = VfrSyntaxParser.DataStructFieldStringContext(self, self._ctx, self.state, FieldInUnion)
        self.enterRule(localctx, 26, self.RULE_dataStructFieldString)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 494
            self.match(VfrSyntaxParser.EFI_STRING_ID)
            self.state = 495
            self.match(VfrSyntaxParser.StringIdentifier)
            self.state = 499
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.OpenBracket:
                self.state = 496
                self.match(VfrSyntaxParser.OpenBracket)
                self.state = 497
                self.match(VfrSyntaxParser.Number)
                self.state = 498
                self.match(VfrSyntaxParser.CloseBracket)


            self.state = 501
            self.match(VfrSyntaxParser.Semicolon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataStructFieldDateContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1, FieldInUnion=None):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.FieldInUnion = None
            self.FieldInUnion = FieldInUnion

        def EFI_HII_DATE(self):
            return self.getToken(VfrSyntaxParser.EFI_HII_DATE, 0)

        def StringIdentifier(self):
            return self.getToken(VfrSyntaxParser.StringIdentifier, 0)

        def Semicolon(self):
            return self.getToken(VfrSyntaxParser.Semicolon, 0)

        def OpenBracket(self):
            return self.getToken(VfrSyntaxParser.OpenBracket, 0)

        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def CloseBracket(self):
            return self.getToken(VfrSyntaxParser.CloseBracket, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_dataStructFieldDate

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDataStructFieldDate" ):
                return visitor.visitDataStructFieldDate(self)
            else:
                return visitor.visitChildren(self)




    def dataStructFieldDate(self, FieldInUnion):

        localctx = VfrSyntaxParser.DataStructFieldDateContext(self, self._ctx, self.state, FieldInUnion)
        self.enterRule(localctx, 28, self.RULE_dataStructFieldDate)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 503
            self.match(VfrSyntaxParser.EFI_HII_DATE)
            self.state = 504
            self.match(VfrSyntaxParser.StringIdentifier)
            self.state = 508
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.OpenBracket:
                self.state = 505
                self.match(VfrSyntaxParser.OpenBracket)
                self.state = 506
                self.match(VfrSyntaxParser.Number)
                self.state = 507
                self.match(VfrSyntaxParser.CloseBracket)


            self.state = 510
            self.match(VfrSyntaxParser.Semicolon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataStructFieldTimeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1, FieldInUnion=None):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.FieldInUnion = None
            self.FieldInUnion = FieldInUnion

        def EFI_HII_TIME(self):
            return self.getToken(VfrSyntaxParser.EFI_HII_TIME, 0)

        def StringIdentifier(self):
            return self.getToken(VfrSyntaxParser.StringIdentifier, 0)

        def Semicolon(self):
            return self.getToken(VfrSyntaxParser.Semicolon, 0)

        def OpenBracket(self):
            return self.getToken(VfrSyntaxParser.OpenBracket, 0)

        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def CloseBracket(self):
            return self.getToken(VfrSyntaxParser.CloseBracket, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_dataStructFieldTime

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDataStructFieldTime" ):
                return visitor.visitDataStructFieldTime(self)
            else:
                return visitor.visitChildren(self)




    def dataStructFieldTime(self, FieldInUnion):

        localctx = VfrSyntaxParser.DataStructFieldTimeContext(self, self._ctx, self.state, FieldInUnion)
        self.enterRule(localctx, 30, self.RULE_dataStructFieldTime)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 512
            self.match(VfrSyntaxParser.EFI_HII_TIME)
            self.state = 513
            self.match(VfrSyntaxParser.StringIdentifier)
            self.state = 517
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.OpenBracket:
                self.state = 514
                self.match(VfrSyntaxParser.OpenBracket)
                self.state = 515
                self.match(VfrSyntaxParser.Number)
                self.state = 516
                self.match(VfrSyntaxParser.CloseBracket)


            self.state = 519
            self.match(VfrSyntaxParser.Semicolon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataStructFieldRefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1, FieldInUnion=None):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.FieldInUnion = None
            self.FieldInUnion = FieldInUnion

        def EFI_HII_REF(self):
            return self.getToken(VfrSyntaxParser.EFI_HII_REF, 0)

        def StringIdentifier(self):
            return self.getToken(VfrSyntaxParser.StringIdentifier, 0)

        def Semicolon(self):
            return self.getToken(VfrSyntaxParser.Semicolon, 0)

        def OpenBracket(self):
            return self.getToken(VfrSyntaxParser.OpenBracket, 0)

        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def CloseBracket(self):
            return self.getToken(VfrSyntaxParser.CloseBracket, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_dataStructFieldRef

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDataStructFieldRef" ):
                return visitor.visitDataStructFieldRef(self)
            else:
                return visitor.visitChildren(self)




    def dataStructFieldRef(self, FieldInUnion):

        localctx = VfrSyntaxParser.DataStructFieldRefContext(self, self._ctx, self.state, FieldInUnion)
        self.enterRule(localctx, 32, self.RULE_dataStructFieldRef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 521
            self.match(VfrSyntaxParser.EFI_HII_REF)
            self.state = 522
            self.match(VfrSyntaxParser.StringIdentifier)
            self.state = 526
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.OpenBracket:
                self.state = 523
                self.match(VfrSyntaxParser.OpenBracket)
                self.state = 524
                self.match(VfrSyntaxParser.Number)
                self.state = 525
                self.match(VfrSyntaxParser.CloseBracket)


            self.state = 528
            self.match(VfrSyntaxParser.Semicolon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataStructFieldUserContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1, FieldInUnion=None):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.FieldInUnion = None
            self.FieldInUnion = FieldInUnion

        def StringIdentifier(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.StringIdentifier)
            else:
                return self.getToken(VfrSyntaxParser.StringIdentifier, i)

        def Semicolon(self):
            return self.getToken(VfrSyntaxParser.Semicolon, 0)

        def OpenBracket(self):
            return self.getToken(VfrSyntaxParser.OpenBracket, 0)

        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def CloseBracket(self):
            return self.getToken(VfrSyntaxParser.CloseBracket, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_dataStructFieldUser

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDataStructFieldUser" ):
                return visitor.visitDataStructFieldUser(self)
            else:
                return visitor.visitChildren(self)




    def dataStructFieldUser(self, FieldInUnion):

        localctx = VfrSyntaxParser.DataStructFieldUserContext(self, self._ctx, self.state, FieldInUnion)
        self.enterRule(localctx, 34, self.RULE_dataStructFieldUser)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 530
            self.match(VfrSyntaxParser.StringIdentifier)
            self.state = 531
            self.match(VfrSyntaxParser.StringIdentifier)
            self.state = 535
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.OpenBracket:
                self.state = 532
                self.match(VfrSyntaxParser.OpenBracket)
                self.state = 533
                self.match(VfrSyntaxParser.Number)
                self.state = 534
                self.match(VfrSyntaxParser.CloseBracket)


            self.state = 537
            self.match(VfrSyntaxParser.Semicolon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataStructBitField64Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1, FieldInUnion=None):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.FieldInUnion = None
            self.FieldInUnion = FieldInUnion

        def Uint64(self):
            return self.getToken(VfrSyntaxParser.Uint64, 0)

        def Colon(self):
            return self.getToken(VfrSyntaxParser.Colon, 0)

        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def Semicolon(self):
            return self.getToken(VfrSyntaxParser.Semicolon, 0)

        def StringIdentifier(self):
            return self.getToken(VfrSyntaxParser.StringIdentifier, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_dataStructBitField64

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDataStructBitField64" ):
                return visitor.visitDataStructBitField64(self)
            else:
                return visitor.visitChildren(self)




    def dataStructBitField64(self, FieldInUnion):

        localctx = VfrSyntaxParser.DataStructBitField64Context(self, self._ctx, self.state, FieldInUnion)
        self.enterRule(localctx, 36, self.RULE_dataStructBitField64)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 539
            self.match(VfrSyntaxParser.Uint64)
            self.state = 541
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.StringIdentifier:
                self.state = 540
                self.match(VfrSyntaxParser.StringIdentifier)


            self.state = 543
            self.match(VfrSyntaxParser.Colon)
            self.state = 544
            self.match(VfrSyntaxParser.Number)
            self.state = 545
            self.match(VfrSyntaxParser.Semicolon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataStructBitField32Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1, FieldInUnion=None):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.FieldInUnion = None
            self.FieldInUnion = FieldInUnion

        def Uint32(self):
            return self.getToken(VfrSyntaxParser.Uint32, 0)

        def Colon(self):
            return self.getToken(VfrSyntaxParser.Colon, 0)

        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def Semicolon(self):
            return self.getToken(VfrSyntaxParser.Semicolon, 0)

        def StringIdentifier(self):
            return self.getToken(VfrSyntaxParser.StringIdentifier, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_dataStructBitField32

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDataStructBitField32" ):
                return visitor.visitDataStructBitField32(self)
            else:
                return visitor.visitChildren(self)




    def dataStructBitField32(self, FieldInUnion):

        localctx = VfrSyntaxParser.DataStructBitField32Context(self, self._ctx, self.state, FieldInUnion)
        self.enterRule(localctx, 38, self.RULE_dataStructBitField32)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 547
            self.match(VfrSyntaxParser.Uint32)
            self.state = 549
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.StringIdentifier:
                self.state = 548
                self.match(VfrSyntaxParser.StringIdentifier)


            self.state = 551
            self.match(VfrSyntaxParser.Colon)
            self.state = 552
            self.match(VfrSyntaxParser.Number)
            self.state = 553
            self.match(VfrSyntaxParser.Semicolon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataStructBitField16Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1, FieldInUnion=None):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.FieldInUnion = None
            self.FieldInUnion = FieldInUnion

        def Uint16(self):
            return self.getToken(VfrSyntaxParser.Uint16, 0)

        def Colon(self):
            return self.getToken(VfrSyntaxParser.Colon, 0)

        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def Semicolon(self):
            return self.getToken(VfrSyntaxParser.Semicolon, 0)

        def StringIdentifier(self):
            return self.getToken(VfrSyntaxParser.StringIdentifier, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_dataStructBitField16

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDataStructBitField16" ):
                return visitor.visitDataStructBitField16(self)
            else:
                return visitor.visitChildren(self)




    def dataStructBitField16(self, FieldInUnion):

        localctx = VfrSyntaxParser.DataStructBitField16Context(self, self._ctx, self.state, FieldInUnion)
        self.enterRule(localctx, 40, self.RULE_dataStructBitField16)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 555
            self.match(VfrSyntaxParser.Uint16)
            self.state = 557
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.StringIdentifier:
                self.state = 556
                self.match(VfrSyntaxParser.StringIdentifier)


            self.state = 559
            self.match(VfrSyntaxParser.Colon)
            self.state = 560
            self.match(VfrSyntaxParser.Number)
            self.state = 561
            self.match(VfrSyntaxParser.Semicolon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataStructBitField8Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1, FieldInUnion=None):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.FieldInUnion = None
            self.FieldInUnion = FieldInUnion

        def Uint8(self):
            return self.getToken(VfrSyntaxParser.Uint8, 0)

        def Colon(self):
            return self.getToken(VfrSyntaxParser.Colon, 0)

        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def Semicolon(self):
            return self.getToken(VfrSyntaxParser.Semicolon, 0)

        def StringIdentifier(self):
            return self.getToken(VfrSyntaxParser.StringIdentifier, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_dataStructBitField8

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDataStructBitField8" ):
                return visitor.visitDataStructBitField8(self)
            else:
                return visitor.visitChildren(self)




    def dataStructBitField8(self, FieldInUnion):

        localctx = VfrSyntaxParser.DataStructBitField8Context(self, self._ctx, self.state, FieldInUnion)
        self.enterRule(localctx, 42, self.RULE_dataStructBitField8)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 563
            self.match(VfrSyntaxParser.Uint8)
            self.state = 565
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.StringIdentifier:
                self.state = 564
                self.match(VfrSyntaxParser.StringIdentifier)


            self.state = 567
            self.match(VfrSyntaxParser.Colon)
            self.state = 568
            self.match(VfrSyntaxParser.Number)
            self.state = 569
            self.match(VfrSyntaxParser.Semicolon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrFormSetDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FormSet(self):
            return self.getToken(VfrSyntaxParser.FormSet, 0)

        def Uuid(self):
            return self.getToken(VfrSyntaxParser.Uuid, 0)

        def guidDefinition(self):
            return self.getTypedRuleContext(VfrSyntaxParser.GuidDefinitionContext,0)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Comma)
            else:
                return self.getToken(VfrSyntaxParser.Comma, i)

        def Title(self):
            return self.getToken(VfrSyntaxParser.Title, 0)

        def StringToken(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.StringToken)
            else:
                return self.getToken(VfrSyntaxParser.StringToken, i)

        def OpenParen(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.OpenParen)
            else:
                return self.getToken(VfrSyntaxParser.OpenParen, i)

        def Number(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Number)
            else:
                return self.getToken(VfrSyntaxParser.Number, i)

        def CloseParen(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.CloseParen)
            else:
                return self.getToken(VfrSyntaxParser.CloseParen, i)

        def Help(self):
            return self.getToken(VfrSyntaxParser.Help, 0)

        def vfrFormSetList(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrFormSetListContext,0)


        def EndFormSet(self):
            return self.getToken(VfrSyntaxParser.EndFormSet, 0)

        def Semicolon(self):
            return self.getToken(VfrSyntaxParser.Semicolon, 0)

        def ClassGuid(self):
            return self.getToken(VfrSyntaxParser.ClassGuid, 0)

        def classguidDefinition(self):
            return self.getTypedRuleContext(VfrSyntaxParser.ClassguidDefinitionContext,0)


        def Class(self):
            return self.getToken(VfrSyntaxParser.Class, 0)

        def classDefinition(self):
            return self.getTypedRuleContext(VfrSyntaxParser.ClassDefinitionContext,0)


        def Subclass(self):
            return self.getToken(VfrSyntaxParser.Subclass, 0)

        def subclassDefinition(self):
            return self.getTypedRuleContext(VfrSyntaxParser.SubclassDefinitionContext,0)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrFormSetDefinition

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrFormSetDefinition" ):
                return visitor.visitVfrFormSetDefinition(self)
            else:
                return visitor.visitChildren(self)




    def vfrFormSetDefinition(self):

        localctx = VfrSyntaxParser.VfrFormSetDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_vfrFormSetDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 571
            self.match(VfrSyntaxParser.FormSet)
            self.state = 572
            self.match(VfrSyntaxParser.Uuid)
            self.state = 573
            self.match(VfrSyntaxParser.T__5)
            self.state = 574
            self.guidDefinition()
            self.state = 575
            self.match(VfrSyntaxParser.Comma)
            self.state = 576
            self.match(VfrSyntaxParser.Title)
            self.state = 577
            self.match(VfrSyntaxParser.T__5)
            self.state = 578
            self.match(VfrSyntaxParser.StringToken)
            self.state = 579
            self.match(VfrSyntaxParser.OpenParen)
            self.state = 580
            self.match(VfrSyntaxParser.Number)
            self.state = 581
            self.match(VfrSyntaxParser.CloseParen)
            self.state = 582
            self.match(VfrSyntaxParser.Comma)
            self.state = 583
            self.match(VfrSyntaxParser.Help)
            self.state = 584
            self.match(VfrSyntaxParser.T__5)
            self.state = 585
            self.match(VfrSyntaxParser.StringToken)
            self.state = 586
            self.match(VfrSyntaxParser.OpenParen)
            self.state = 587
            self.match(VfrSyntaxParser.Number)
            self.state = 588
            self.match(VfrSyntaxParser.CloseParen)
            self.state = 589
            self.match(VfrSyntaxParser.Comma)
            self.state = 595
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.ClassGuid:
                self.state = 590
                self.match(VfrSyntaxParser.ClassGuid)
                self.state = 591
                self.match(VfrSyntaxParser.T__5)
                self.state = 592
                self.classguidDefinition()
                self.state = 593
                self.match(VfrSyntaxParser.Comma)


            self.state = 602
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.Class:
                self.state = 597
                self.match(VfrSyntaxParser.Class)
                self.state = 598
                self.match(VfrSyntaxParser.T__5)
                self.state = 599
                self.classDefinition()
                self.state = 600
                self.match(VfrSyntaxParser.Comma)


            self.state = 609
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.Subclass:
                self.state = 604
                self.match(VfrSyntaxParser.Subclass)
                self.state = 605
                self.match(VfrSyntaxParser.T__5)
                self.state = 606
                self.subclassDefinition()
                self.state = 607
                self.match(VfrSyntaxParser.Comma)


            self.state = 611
            self.vfrFormSetList()
            self.state = 612
            self.match(VfrSyntaxParser.EndFormSet)
            self.state = 613
            self.match(VfrSyntaxParser.Semicolon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassguidDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.GuidList = []

        def guidDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.GuidDefinitionContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.GuidDefinitionContext,i)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_classguidDefinition

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassguidDefinition" ):
                return visitor.visitClassguidDefinition(self)
            else:
                return visitor.visitChildren(self)




    def classguidDefinition(self):

        localctx = VfrSyntaxParser.ClassguidDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_classguidDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 615
            self.guidDefinition()
            self.state = 618
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                self.state = 616
                self.match(VfrSyntaxParser.T__6)
                self.state = 617
                self.guidDefinition()


            self.state = 622
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
            if la_ == 1:
                self.state = 620
                self.match(VfrSyntaxParser.T__6)
                self.state = 621
                self.guidDefinition()


            self.state = 626
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.T__6:
                self.state = 624
                self.match(VfrSyntaxParser.T__6)
                self.state = 625
                self.guidDefinition()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.CObj = CIfrClass()

        def validClassNames(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.ValidClassNamesContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.ValidClassNamesContext,i)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_classDefinition

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassDefinition" ):
                return visitor.visitClassDefinition(self)
            else:
                return visitor.visitChildren(self)




    def classDefinition(self):

        localctx = VfrSyntaxParser.ClassDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_classDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 628
            self.validClassNames()
            self.state = 633
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==VfrSyntaxParser.T__6:
                self.state = 629
                self.match(VfrSyntaxParser.T__6)
                self.state = 630
                self.validClassNames()
                self.state = 635
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValidClassNamesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ClassName = 0

        def ClassNonDevice(self):
            return self.getToken(VfrSyntaxParser.ClassNonDevice, 0)

        def ClassDiskDevice(self):
            return self.getToken(VfrSyntaxParser.ClassDiskDevice, 0)

        def ClassVideoDevice(self):
            return self.getToken(VfrSyntaxParser.ClassVideoDevice, 0)

        def ClassNetworkDevice(self):
            return self.getToken(VfrSyntaxParser.ClassNetworkDevice, 0)

        def ClassInputDevice(self):
            return self.getToken(VfrSyntaxParser.ClassInputDevice, 0)

        def ClassOnBoardDevice(self):
            return self.getToken(VfrSyntaxParser.ClassOnBoardDevice, 0)

        def ClassOtherDevice(self):
            return self.getToken(VfrSyntaxParser.ClassOtherDevice, 0)

        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_validClassNames

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitValidClassNames" ):
                return visitor.visitValidClassNames(self)
            else:
                return visitor.visitChildren(self)




    def validClassNames(self):

        localctx = VfrSyntaxParser.ValidClassNamesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_validClassNames)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 636
            _la = self._input.LA(1)
            if not(((((_la - 183)) & ~0x3f) == 0 and ((1 << (_la - 183)) & ((1 << (VfrSyntaxParser.ClassNonDevice - 183)) | (1 << (VfrSyntaxParser.ClassDiskDevice - 183)) | (1 << (VfrSyntaxParser.ClassVideoDevice - 183)) | (1 << (VfrSyntaxParser.ClassNetworkDevice - 183)) | (1 << (VfrSyntaxParser.ClassInputDevice - 183)) | (1 << (VfrSyntaxParser.ClassOnBoardDevice - 183)) | (1 << (VfrSyntaxParser.ClassOtherDevice - 183)))) != 0) or _la==VfrSyntaxParser.Number):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubclassDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.SubObj = CIfrSubClass()

        def SubclassSetupApplication(self):
            return self.getToken(VfrSyntaxParser.SubclassSetupApplication, 0)

        def SubclassGeneralApplication(self):
            return self.getToken(VfrSyntaxParser.SubclassGeneralApplication, 0)

        def SubclassFrontPage(self):
            return self.getToken(VfrSyntaxParser.SubclassFrontPage, 0)

        def SubclassSingleUse(self):
            return self.getToken(VfrSyntaxParser.SubclassSingleUse, 0)

        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_subclassDefinition

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubclassDefinition" ):
                return visitor.visitSubclassDefinition(self)
            else:
                return visitor.visitChildren(self)




    def subclassDefinition(self):

        localctx = VfrSyntaxParser.SubclassDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_subclassDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 638
            _la = self._input.LA(1)
            if not(((((_la - 190)) & ~0x3f) == 0 and ((1 << (_la - 190)) & ((1 << (VfrSyntaxParser.SubclassSetupApplication - 190)) | (1 << (VfrSyntaxParser.SubclassGeneralApplication - 190)) | (1 << (VfrSyntaxParser.SubclassFrontPage - 190)) | (1 << (VfrSyntaxParser.SubclassSingleUse - 190)) | (1 << (VfrSyntaxParser.Number - 190)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrFormSetListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vfrFormDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrFormDefinitionContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrFormDefinitionContext,i)


        def vfrFormMapDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrFormMapDefinitionContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrFormMapDefinitionContext,i)


        def vfrStatementImage(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrStatementImageContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementImageContext,i)


        def vfrStatementVarStoreLinear(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrStatementVarStoreLinearContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementVarStoreLinearContext,i)


        def vfrStatementVarStoreEfi(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrStatementVarStoreEfiContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementVarStoreEfiContext,i)


        def vfrStatementVarStoreNameValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrStatementVarStoreNameValueContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementVarStoreNameValueContext,i)


        def vfrStatementDefaultStore(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrStatementDefaultStoreContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementDefaultStoreContext,i)


        def vfrStatementDisableIfFormSet(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrStatementDisableIfFormSetContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementDisableIfFormSetContext,i)


        def vfrStatementSuppressIfFormSet(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrStatementSuppressIfFormSetContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementSuppressIfFormSetContext,i)


        def vfrStatementExtension(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrStatementExtensionContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementExtensionContext,i)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrFormSetList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrFormSetList" ):
                return visitor.visitVfrFormSetList(self)
            else:
                return visitor.visitChildren(self)




    def vfrFormSetList(self):

        localctx = VfrSyntaxParser.VfrFormSetListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_vfrFormSetList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 652
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (VfrSyntaxParser.Form - 66)) | (1 << (VfrSyntaxParser.FormMap - 66)) | (1 << (VfrSyntaxParser.SuppressIf - 66)) | (1 << (VfrSyntaxParser.DisableIf - 66)))) != 0) or ((((_la - 157)) & ~0x3f) == 0 and ((1 << (_la - 157)) & ((1 << (VfrSyntaxParser.Image - 157)) | (1 << (VfrSyntaxParser.DefaultStore - 157)) | (1 << (VfrSyntaxParser.Varstore - 157)) | (1 << (VfrSyntaxParser.Efivarstore - 157)) | (1 << (VfrSyntaxParser.NameValueVarStore - 157)) | (1 << (VfrSyntaxParser.GuidOp - 157)))) != 0):
                self.state = 650
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VfrSyntaxParser.Form]:
                    self.state = 640
                    self.vfrFormDefinition()
                    pass
                elif token in [VfrSyntaxParser.FormMap]:
                    self.state = 641
                    self.vfrFormMapDefinition()
                    pass
                elif token in [VfrSyntaxParser.Image]:
                    self.state = 642
                    self.vfrStatementImage()
                    pass
                elif token in [VfrSyntaxParser.Varstore]:
                    self.state = 643
                    self.vfrStatementVarStoreLinear()
                    pass
                elif token in [VfrSyntaxParser.Efivarstore]:
                    self.state = 644
                    self.vfrStatementVarStoreEfi()
                    pass
                elif token in [VfrSyntaxParser.NameValueVarStore]:
                    self.state = 645
                    self.vfrStatementVarStoreNameValue()
                    pass
                elif token in [VfrSyntaxParser.DefaultStore]:
                    self.state = 646
                    self.vfrStatementDefaultStore()
                    pass
                elif token in [VfrSyntaxParser.DisableIf]:
                    self.state = 647
                    self.vfrStatementDisableIfFormSet()
                    pass
                elif token in [VfrSyntaxParser.SuppressIf]:
                    self.state = 648
                    self.vfrStatementSuppressIfFormSet()
                    pass
                elif token in [VfrSyntaxParser.GuidOp]:
                    self.state = 649
                    self.vfrStatementExtension()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 654
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementDefaultStoreContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.DSObj = CIfrDefaultStore()

        def DefaultStore(self):
            return self.getToken(VfrSyntaxParser.DefaultStore, 0)

        def StringIdentifier(self):
            return self.getToken(VfrSyntaxParser.StringIdentifier, 0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Comma)
            else:
                return self.getToken(VfrSyntaxParser.Comma, i)

        def Prompt(self):
            return self.getToken(VfrSyntaxParser.Prompt, 0)

        def StringToken(self):
            return self.getToken(VfrSyntaxParser.StringToken, 0)

        def OpenParen(self):
            return self.getToken(VfrSyntaxParser.OpenParen, 0)

        def Number(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Number)
            else:
                return self.getToken(VfrSyntaxParser.Number, i)

        def CloseParen(self):
            return self.getToken(VfrSyntaxParser.CloseParen, 0)

        def Semicolon(self):
            return self.getToken(VfrSyntaxParser.Semicolon, 0)

        def Attribute(self):
            return self.getToken(VfrSyntaxParser.Attribute, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementDefaultStore

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementDefaultStore" ):
                return visitor.visitVfrStatementDefaultStore(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementDefaultStore(self):

        localctx = VfrSyntaxParser.VfrStatementDefaultStoreContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_vfrStatementDefaultStore)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 655
            self.match(VfrSyntaxParser.DefaultStore)
            self.state = 656
            self.match(VfrSyntaxParser.StringIdentifier)
            self.state = 657
            self.match(VfrSyntaxParser.Comma)
            self.state = 658
            self.match(VfrSyntaxParser.Prompt)
            self.state = 659
            self.match(VfrSyntaxParser.T__5)
            self.state = 660
            self.match(VfrSyntaxParser.StringToken)
            self.state = 661
            self.match(VfrSyntaxParser.OpenParen)
            self.state = 662
            self.match(VfrSyntaxParser.Number)
            self.state = 663
            self.match(VfrSyntaxParser.CloseParen)
            self.state = 668
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.Comma:
                self.state = 664
                self.match(VfrSyntaxParser.Comma)
                self.state = 665
                self.match(VfrSyntaxParser.Attribute)
                self.state = 666
                self.match(VfrSyntaxParser.T__5)
                self.state = 667
                self.match(VfrSyntaxParser.Number)


            self.state = 670
            self.match(VfrSyntaxParser.Semicolon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementVarStoreLinearContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.VSObj = CIfrVarStore()

        def Varstore(self):
            return self.getToken(VfrSyntaxParser.Varstore, 0)

        def Name(self):
            return self.getToken(VfrSyntaxParser.Name, 0)

        def StringIdentifier(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.StringIdentifier)
            else:
                return self.getToken(VfrSyntaxParser.StringIdentifier, i)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Comma)
            else:
                return self.getToken(VfrSyntaxParser.Comma, i)

        def Uuid(self):
            return self.getToken(VfrSyntaxParser.Uuid, 0)

        def guidDefinition(self):
            return self.getTypedRuleContext(VfrSyntaxParser.GuidDefinitionContext,0)


        def Semicolon(self):
            return self.getToken(VfrSyntaxParser.Semicolon, 0)

        def Uint8(self):
            return self.getToken(VfrSyntaxParser.Uint8, 0)

        def Uint16(self):
            return self.getToken(VfrSyntaxParser.Uint16, 0)

        def Uint32(self):
            return self.getToken(VfrSyntaxParser.Uint32, 0)

        def Uint64(self):
            return self.getToken(VfrSyntaxParser.Uint64, 0)

        def EFI_HII_DATE(self):
            return self.getToken(VfrSyntaxParser.EFI_HII_DATE, 0)

        def EFI_HII_TIME(self):
            return self.getToken(VfrSyntaxParser.EFI_HII_TIME, 0)

        def EFI_HII_REF(self):
            return self.getToken(VfrSyntaxParser.EFI_HII_REF, 0)

        def VarId(self):
            return self.getToken(VfrSyntaxParser.VarId, 0)

        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementVarStoreLinear

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementVarStoreLinear" ):
                return visitor.visitVfrStatementVarStoreLinear(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementVarStoreLinear(self):

        localctx = VfrSyntaxParser.VfrStatementVarStoreLinearContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_vfrStatementVarStoreLinear)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 672
            self.match(VfrSyntaxParser.Varstore)
            self.state = 689
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VfrSyntaxParser.StringIdentifier]:
                self.state = 673
                self.match(VfrSyntaxParser.StringIdentifier)
                self.state = 674
                self.match(VfrSyntaxParser.Comma)
                pass
            elif token in [VfrSyntaxParser.Uint8]:
                self.state = 675
                self.match(VfrSyntaxParser.Uint8)
                self.state = 676
                self.match(VfrSyntaxParser.Comma)
                pass
            elif token in [VfrSyntaxParser.Uint16]:
                self.state = 677
                self.match(VfrSyntaxParser.Uint16)
                self.state = 678
                self.match(VfrSyntaxParser.Comma)
                pass
            elif token in [VfrSyntaxParser.Uint32]:
                self.state = 679
                self.match(VfrSyntaxParser.Uint32)
                self.state = 680
                self.match(VfrSyntaxParser.Comma)
                pass
            elif token in [VfrSyntaxParser.Uint64]:
                self.state = 681
                self.match(VfrSyntaxParser.Uint64)
                self.state = 682
                self.match(VfrSyntaxParser.Comma)
                pass
            elif token in [VfrSyntaxParser.EFI_HII_DATE]:
                self.state = 683
                self.match(VfrSyntaxParser.EFI_HII_DATE)
                self.state = 684
                self.match(VfrSyntaxParser.Comma)
                pass
            elif token in [VfrSyntaxParser.EFI_HII_TIME]:
                self.state = 685
                self.match(VfrSyntaxParser.EFI_HII_TIME)
                self.state = 686
                self.match(VfrSyntaxParser.Comma)
                pass
            elif token in [VfrSyntaxParser.EFI_HII_REF]:
                self.state = 687
                self.match(VfrSyntaxParser.EFI_HII_REF)
                self.state = 688
                self.match(VfrSyntaxParser.Comma)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 695
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.VarId:
                self.state = 691
                self.match(VfrSyntaxParser.VarId)
                self.state = 692
                self.match(VfrSyntaxParser.T__5)
                self.state = 693
                self.match(VfrSyntaxParser.Number)
                self.state = 694
                self.match(VfrSyntaxParser.Comma)


            self.state = 697
            self.match(VfrSyntaxParser.Name)
            self.state = 698
            self.match(VfrSyntaxParser.T__5)
            self.state = 699
            self.match(VfrSyntaxParser.StringIdentifier)
            self.state = 700
            self.match(VfrSyntaxParser.Comma)
            self.state = 701
            self.match(VfrSyntaxParser.Uuid)
            self.state = 702
            self.match(VfrSyntaxParser.T__5)
            self.state = 703
            self.guidDefinition()
            self.state = 704
            self.match(VfrSyntaxParser.Semicolon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementVarStoreEfiContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.VSEObj = CIfrVarStoreEfi()

        def Efivarstore(self):
            return self.getToken(VfrSyntaxParser.Efivarstore, 0)

        def Attribute(self):
            return self.getToken(VfrSyntaxParser.Attribute, 0)

        def vfrVarStoreEfiAttr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrVarStoreEfiAttrContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrVarStoreEfiAttrContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Comma)
            else:
                return self.getToken(VfrSyntaxParser.Comma, i)

        def Uuid(self):
            return self.getToken(VfrSyntaxParser.Uuid, 0)

        def guidDefinition(self):
            return self.getTypedRuleContext(VfrSyntaxParser.GuidDefinitionContext,0)


        def Semicolon(self):
            return self.getToken(VfrSyntaxParser.Semicolon, 0)

        def StringIdentifier(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.StringIdentifier)
            else:
                return self.getToken(VfrSyntaxParser.StringIdentifier, i)

        def Uint8(self):
            return self.getToken(VfrSyntaxParser.Uint8, 0)

        def Uint16(self):
            return self.getToken(VfrSyntaxParser.Uint16, 0)

        def Uint32(self):
            return self.getToken(VfrSyntaxParser.Uint32, 0)

        def Uint64(self):
            return self.getToken(VfrSyntaxParser.Uint64, 0)

        def EFI_HII_DATE(self):
            return self.getToken(VfrSyntaxParser.EFI_HII_DATE, 0)

        def EFI_HII_TIME(self):
            return self.getToken(VfrSyntaxParser.EFI_HII_TIME, 0)

        def EFI_HII_REF(self):
            return self.getToken(VfrSyntaxParser.EFI_HII_REF, 0)

        def Name(self):
            return self.getToken(VfrSyntaxParser.Name, 0)

        def StringToken(self):
            return self.getToken(VfrSyntaxParser.StringToken, 0)

        def OpenParen(self):
            return self.getToken(VfrSyntaxParser.OpenParen, 0)

        def Number(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Number)
            else:
                return self.getToken(VfrSyntaxParser.Number, i)

        def CloseParen(self):
            return self.getToken(VfrSyntaxParser.CloseParen, 0)

        def VarSize(self):
            return self.getToken(VfrSyntaxParser.VarSize, 0)

        def VarId(self):
            return self.getToken(VfrSyntaxParser.VarId, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementVarStoreEfi

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementVarStoreEfi" ):
                return visitor.visitVfrStatementVarStoreEfi(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementVarStoreEfi(self):

        localctx = VfrSyntaxParser.VfrStatementVarStoreEfiContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_vfrStatementVarStoreEfi)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 706
            self.match(VfrSyntaxParser.Efivarstore)
            self.state = 723
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VfrSyntaxParser.StringIdentifier]:
                self.state = 707
                self.match(VfrSyntaxParser.StringIdentifier)
                self.state = 708
                self.match(VfrSyntaxParser.Comma)
                pass
            elif token in [VfrSyntaxParser.Uint8]:
                self.state = 709
                self.match(VfrSyntaxParser.Uint8)
                self.state = 710
                self.match(VfrSyntaxParser.Comma)
                pass
            elif token in [VfrSyntaxParser.Uint16]:
                self.state = 711
                self.match(VfrSyntaxParser.Uint16)
                self.state = 712
                self.match(VfrSyntaxParser.Comma)
                pass
            elif token in [VfrSyntaxParser.Uint32]:
                self.state = 713
                self.match(VfrSyntaxParser.Uint32)
                self.state = 714
                self.match(VfrSyntaxParser.Comma)
                pass
            elif token in [VfrSyntaxParser.Uint64]:
                self.state = 715
                self.match(VfrSyntaxParser.Uint64)
                self.state = 716
                self.match(VfrSyntaxParser.Comma)
                pass
            elif token in [VfrSyntaxParser.EFI_HII_DATE]:
                self.state = 717
                self.match(VfrSyntaxParser.EFI_HII_DATE)
                self.state = 718
                self.match(VfrSyntaxParser.Comma)
                pass
            elif token in [VfrSyntaxParser.EFI_HII_TIME]:
                self.state = 719
                self.match(VfrSyntaxParser.EFI_HII_TIME)
                self.state = 720
                self.match(VfrSyntaxParser.Comma)
                pass
            elif token in [VfrSyntaxParser.EFI_HII_REF]:
                self.state = 721
                self.match(VfrSyntaxParser.EFI_HII_REF)
                self.state = 722
                self.match(VfrSyntaxParser.Comma)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 729
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.VarId:
                self.state = 725
                self.match(VfrSyntaxParser.VarId)
                self.state = 726
                self.match(VfrSyntaxParser.T__5)
                self.state = 727
                self.match(VfrSyntaxParser.Number)
                self.state = 728
                self.match(VfrSyntaxParser.Comma)


            self.state = 731
            self.match(VfrSyntaxParser.Attribute)
            self.state = 732
            self.match(VfrSyntaxParser.T__5)
            self.state = 733
            self.vfrVarStoreEfiAttr()
            self.state = 738
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==VfrSyntaxParser.T__6:
                self.state = 734
                self.match(VfrSyntaxParser.T__6)
                self.state = 735
                self.vfrVarStoreEfiAttr()
                self.state = 740
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 741
            self.match(VfrSyntaxParser.Comma)
            self.state = 757
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
            if la_ == 1:
                self.state = 742
                self.match(VfrSyntaxParser.Name)
                self.state = 743
                self.match(VfrSyntaxParser.T__5)
                self.state = 744
                self.match(VfrSyntaxParser.StringIdentifier)
                self.state = 745
                self.match(VfrSyntaxParser.Comma)
                pass

            elif la_ == 2:
                self.state = 746
                self.match(VfrSyntaxParser.Name)
                self.state = 747
                self.match(VfrSyntaxParser.T__5)
                self.state = 748
                self.match(VfrSyntaxParser.StringToken)
                self.state = 749
                self.match(VfrSyntaxParser.OpenParen)
                self.state = 750
                self.match(VfrSyntaxParser.Number)
                self.state = 751
                self.match(VfrSyntaxParser.CloseParen)
                self.state = 752
                self.match(VfrSyntaxParser.Comma)
                self.state = 753
                self.match(VfrSyntaxParser.VarSize)
                self.state = 754
                self.match(VfrSyntaxParser.T__5)
                self.state = 755
                self.match(VfrSyntaxParser.Number)
                self.state = 756
                self.match(VfrSyntaxParser.Comma)
                pass


            self.state = 759
            self.match(VfrSyntaxParser.Uuid)
            self.state = 760
            self.match(VfrSyntaxParser.T__5)
            self.state = 761
            self.guidDefinition()
            self.state = 762
            self.match(VfrSyntaxParser.Semicolon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrVarStoreEfiAttrContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Attr = 0

        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrVarStoreEfiAttr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrVarStoreEfiAttr" ):
                return visitor.visitVfrVarStoreEfiAttr(self)
            else:
                return visitor.visitChildren(self)




    def vfrVarStoreEfiAttr(self):

        localctx = VfrSyntaxParser.VfrVarStoreEfiAttrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_vfrVarStoreEfiAttr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 764
            self.match(VfrSyntaxParser.Number)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementVarStoreNameValueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.VSNVObj = CIfrVarStoreNameValue()

        def NameValueVarStore(self):
            return self.getToken(VfrSyntaxParser.NameValueVarStore, 0)

        def StringIdentifier(self):
            return self.getToken(VfrSyntaxParser.StringIdentifier, 0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Comma)
            else:
                return self.getToken(VfrSyntaxParser.Comma, i)

        def Uuid(self):
            return self.getToken(VfrSyntaxParser.Uuid, 0)

        def guidDefinition(self):
            return self.getTypedRuleContext(VfrSyntaxParser.GuidDefinitionContext,0)


        def Semicolon(self):
            return self.getToken(VfrSyntaxParser.Semicolon, 0)

        def VarId(self):
            return self.getToken(VfrSyntaxParser.VarId, 0)

        def Number(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Number)
            else:
                return self.getToken(VfrSyntaxParser.Number, i)

        def Name(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Name)
            else:
                return self.getToken(VfrSyntaxParser.Name, i)

        def StringToken(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.StringToken)
            else:
                return self.getToken(VfrSyntaxParser.StringToken, i)

        def OpenParen(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.OpenParen)
            else:
                return self.getToken(VfrSyntaxParser.OpenParen, i)

        def CloseParen(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.CloseParen)
            else:
                return self.getToken(VfrSyntaxParser.CloseParen, i)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementVarStoreNameValue

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementVarStoreNameValue" ):
                return visitor.visitVfrStatementVarStoreNameValue(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementVarStoreNameValue(self):

        localctx = VfrSyntaxParser.VfrStatementVarStoreNameValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_vfrStatementVarStoreNameValue)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 766
            self.match(VfrSyntaxParser.NameValueVarStore)
            self.state = 767
            self.match(VfrSyntaxParser.StringIdentifier)
            self.state = 768
            self.match(VfrSyntaxParser.Comma)
            self.state = 773
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.VarId:
                self.state = 769
                self.match(VfrSyntaxParser.VarId)
                self.state = 770
                self.match(VfrSyntaxParser.T__5)
                self.state = 771
                self.match(VfrSyntaxParser.Number)
                self.state = 772
                self.match(VfrSyntaxParser.Comma)


            self.state = 782 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 775
                self.match(VfrSyntaxParser.Name)
                self.state = 776
                self.match(VfrSyntaxParser.T__5)
                self.state = 777
                self.match(VfrSyntaxParser.StringToken)
                self.state = 778
                self.match(VfrSyntaxParser.OpenParen)
                self.state = 779
                self.match(VfrSyntaxParser.Number)
                self.state = 780
                self.match(VfrSyntaxParser.CloseParen)
                self.state = 781
                self.match(VfrSyntaxParser.Comma)
                self.state = 784 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==VfrSyntaxParser.Name):
                    break

            self.state = 786
            self.match(VfrSyntaxParser.Uuid)
            self.state = 787
            self.match(VfrSyntaxParser.T__5)
            self.state = 788
            self.guidDefinition()
            self.state = 789
            self.match(VfrSyntaxParser.Semicolon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementDisableIfFormSetContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DisableIf(self):
            return self.getToken(VfrSyntaxParser.DisableIf, 0)

        def vfrStatementExpression(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementExpressionContext,0)


        def Semicolon(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Semicolon)
            else:
                return self.getToken(VfrSyntaxParser.Semicolon, i)

        def vfrFormSetList(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrFormSetListContext,0)


        def EndIf(self):
            return self.getToken(VfrSyntaxParser.EndIf, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementDisableIfFormSet

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementDisableIfFormSet" ):
                return visitor.visitVfrStatementDisableIfFormSet(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementDisableIfFormSet(self):

        localctx = VfrSyntaxParser.VfrStatementDisableIfFormSetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_vfrStatementDisableIfFormSet)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 791
            self.match(VfrSyntaxParser.DisableIf)
            self.state = 792
            self.vfrStatementExpression()
            self.state = 793
            self.match(VfrSyntaxParser.Semicolon)
            self.state = 794
            self.vfrFormSetList()
            self.state = 795
            self.match(VfrSyntaxParser.EndIf)
            self.state = 796
            self.match(VfrSyntaxParser.Semicolon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementSuppressIfFormSetContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SuppressIf(self):
            return self.getToken(VfrSyntaxParser.SuppressIf, 0)

        def vfrStatementExpression(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementExpressionContext,0)


        def Semicolon(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Semicolon)
            else:
                return self.getToken(VfrSyntaxParser.Semicolon, i)

        def vfrFormSetList(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrFormSetListContext,0)


        def EndIf(self):
            return self.getToken(VfrSyntaxParser.EndIf, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementSuppressIfFormSet

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementSuppressIfFormSet" ):
                return visitor.visitVfrStatementSuppressIfFormSet(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementSuppressIfFormSet(self):

        localctx = VfrSyntaxParser.VfrStatementSuppressIfFormSetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_vfrStatementSuppressIfFormSet)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 798
            self.match(VfrSyntaxParser.SuppressIf)
            self.state = 799
            self.vfrStatementExpression()
            self.state = 800
            self.match(VfrSyntaxParser.Semicolon)
            self.state = 801
            self.vfrFormSetList()
            self.state = 802
            self.match(VfrSyntaxParser.EndIf)
            self.state = 803
            self.match(VfrSyntaxParser.Semicolon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GuidSubDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1, Guid=None):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Guid = None
            self.Guid = Guid

        def Number(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Number)
            else:
                return self.getToken(VfrSyntaxParser.Number, i)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Comma)
            else:
                return self.getToken(VfrSyntaxParser.Comma, i)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_guidSubDefinition

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGuidSubDefinition" ):
                return visitor.visitGuidSubDefinition(self)
            else:
                return visitor.visitChildren(self)




    def guidSubDefinition(self, Guid):

        localctx = VfrSyntaxParser.GuidSubDefinitionContext(self, self._ctx, self.state, Guid)
        self.enterRule(localctx, 70, self.RULE_guidSubDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 805
            self.match(VfrSyntaxParser.Number)
            self.state = 806
            self.match(VfrSyntaxParser.Comma)
            self.state = 807
            self.match(VfrSyntaxParser.Number)
            self.state = 808
            self.match(VfrSyntaxParser.Comma)
            self.state = 809
            self.match(VfrSyntaxParser.Number)
            self.state = 810
            self.match(VfrSyntaxParser.Comma)
            self.state = 811
            self.match(VfrSyntaxParser.Number)
            self.state = 812
            self.match(VfrSyntaxParser.Comma)
            self.state = 813
            self.match(VfrSyntaxParser.Number)
            self.state = 814
            self.match(VfrSyntaxParser.Comma)
            self.state = 815
            self.match(VfrSyntaxParser.Number)
            self.state = 816
            self.match(VfrSyntaxParser.Comma)
            self.state = 817
            self.match(VfrSyntaxParser.Number)
            self.state = 818
            self.match(VfrSyntaxParser.Comma)
            self.state = 819
            self.match(VfrSyntaxParser.Number)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GuidDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Guid = EFI_GUID()

        def OpenBrace(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.OpenBrace)
            else:
                return self.getToken(VfrSyntaxParser.OpenBrace, i)

        def Number(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Number)
            else:
                return self.getToken(VfrSyntaxParser.Number, i)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Comma)
            else:
                return self.getToken(VfrSyntaxParser.Comma, i)

        def CloseBrace(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.CloseBrace)
            else:
                return self.getToken(VfrSyntaxParser.CloseBrace, i)

        def guidSubDefinition(self):
            return self.getTypedRuleContext(VfrSyntaxParser.GuidSubDefinitionContext,0)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_guidDefinition

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGuidDefinition" ):
                return visitor.visitGuidDefinition(self)
            else:
                return visitor.visitChildren(self)




    def guidDefinition(self):

        localctx = VfrSyntaxParser.GuidDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_guidDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 821
            self.match(VfrSyntaxParser.OpenBrace)
            self.state = 822
            self.match(VfrSyntaxParser.Number)
            self.state = 823
            self.match(VfrSyntaxParser.Comma)
            self.state = 824
            self.match(VfrSyntaxParser.Number)
            self.state = 825
            self.match(VfrSyntaxParser.Comma)
            self.state = 826
            self.match(VfrSyntaxParser.Number)
            self.state = 827
            self.match(VfrSyntaxParser.Comma)
            self.state = 833
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VfrSyntaxParser.OpenBrace]:
                self.state = 828
                self.match(VfrSyntaxParser.OpenBrace)
                self.state = 829
                self.guidSubDefinition(localctx.Guid)
                self.state = 830
                self.match(VfrSyntaxParser.CloseBrace)
                pass
            elif token in [VfrSyntaxParser.Number]:
                self.state = 832
                self.guidSubDefinition(localctx.Guid)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 835
            self.match(VfrSyntaxParser.CloseBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GetStringIdContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.StringId = ''

        def StringToken(self):
            return self.getToken(VfrSyntaxParser.StringToken, 0)

        def OpenParen(self):
            return self.getToken(VfrSyntaxParser.OpenParen, 0)

        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def CloseParen(self):
            return self.getToken(VfrSyntaxParser.CloseParen, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_getStringId

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGetStringId" ):
                return visitor.visitGetStringId(self)
            else:
                return visitor.visitChildren(self)




    def getStringId(self):

        localctx = VfrSyntaxParser.GetStringIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_getStringId)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 837
            self.match(VfrSyntaxParser.StringToken)
            self.state = 838
            self.match(VfrSyntaxParser.OpenParen)
            self.state = 839
            self.match(VfrSyntaxParser.Number)
            self.state = 840
            self.match(VfrSyntaxParser.CloseParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrQuestionHeaderContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1, OpObj=None, QType=None):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.OpObj = None
            self.QType = None
            self.OpObj = OpObj
            self.QType = QType

        def vfrQuestionBaseInfo(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrQuestionBaseInfoContext,0)


        def vfrStatementHeader(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementHeaderContext,0)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrQuestionHeader

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrQuestionHeader" ):
                return visitor.visitVfrQuestionHeader(self)
            else:
                return visitor.visitChildren(self)




    def vfrQuestionHeader(self, OpObj, QType):

        localctx = VfrSyntaxParser.VfrQuestionHeaderContext(self, self._ctx, self.state, OpObj, QType)
        self.enterRule(localctx, 76, self.RULE_vfrQuestionHeader)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 842
            self.vfrQuestionBaseInfo(OpObj, QType)
            self.state = 843
            self.vfrStatementHeader(OpObj)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrQuestionBaseInfoContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1, OpObj=None, QType=None):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.OpObj = None
            self.QType = None
            self.BaseInfo = EFI_VARSTORE_INFO()
            self.QId = EFI_QUESTION_ID_INVALID
            self.CheckFlag = True
            self.OpObj = OpObj
            self.QType = QType

        def Name(self):
            return self.getToken(VfrSyntaxParser.Name, 0)

        def StringIdentifier(self):
            return self.getToken(VfrSyntaxParser.StringIdentifier, 0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Comma)
            else:
                return self.getToken(VfrSyntaxParser.Comma, i)

        def VarId(self):
            return self.getToken(VfrSyntaxParser.VarId, 0)

        def vfrStorageVarId(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStorageVarIdContext,0)


        def QuestionId(self):
            return self.getToken(VfrSyntaxParser.QuestionId, 0)

        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrQuestionBaseInfo

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrQuestionBaseInfo" ):
                return visitor.visitVfrQuestionBaseInfo(self)
            else:
                return visitor.visitChildren(self)




    def vfrQuestionBaseInfo(self, OpObj, QType):

        localctx = VfrSyntaxParser.VfrQuestionBaseInfoContext(self, self._ctx, self.state, OpObj, QType)
        self.enterRule(localctx, 78, self.RULE_vfrQuestionBaseInfo)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 849
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.Name:
                self.state = 845
                self.match(VfrSyntaxParser.Name)
                self.state = 846
                self.match(VfrSyntaxParser.T__5)
                self.state = 847
                self.match(VfrSyntaxParser.StringIdentifier)
                self.state = 848
                self.match(VfrSyntaxParser.Comma)


            self.state = 856
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.VarId:
                self.state = 851
                self.match(VfrSyntaxParser.VarId)
                self.state = 852
                self.match(VfrSyntaxParser.T__5)
                self.state = 853
                self.vfrStorageVarId(localctx.BaseInfo, localctx.CheckFlag)
                self.state = 854
                self.match(VfrSyntaxParser.Comma)


            self.state = 862
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.QuestionId:
                self.state = 858
                self.match(VfrSyntaxParser.QuestionId)
                self.state = 859
                self.match(VfrSyntaxParser.T__5)
                self.state = 860
                self.match(VfrSyntaxParser.Number)
                self.state = 861
                self.match(VfrSyntaxParser.Comma)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementHeaderContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1, OpObj=None):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.OpObj = None
            self.OpObj = OpObj

        def Prompt(self):
            return self.getToken(VfrSyntaxParser.Prompt, 0)

        def StringToken(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.StringToken)
            else:
                return self.getToken(VfrSyntaxParser.StringToken, i)

        def OpenParen(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.OpenParen)
            else:
                return self.getToken(VfrSyntaxParser.OpenParen, i)

        def Number(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Number)
            else:
                return self.getToken(VfrSyntaxParser.Number, i)

        def CloseParen(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.CloseParen)
            else:
                return self.getToken(VfrSyntaxParser.CloseParen, i)

        def Comma(self):
            return self.getToken(VfrSyntaxParser.Comma, 0)

        def Help(self):
            return self.getToken(VfrSyntaxParser.Help, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementHeader

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementHeader" ):
                return visitor.visitVfrStatementHeader(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementHeader(self, OpObj):

        localctx = VfrSyntaxParser.VfrStatementHeaderContext(self, self._ctx, self.state, OpObj)
        self.enterRule(localctx, 80, self.RULE_vfrStatementHeader)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 864
            self.match(VfrSyntaxParser.Prompt)
            self.state = 865
            self.match(VfrSyntaxParser.T__5)
            self.state = 866
            self.match(VfrSyntaxParser.StringToken)
            self.state = 867
            self.match(VfrSyntaxParser.OpenParen)
            self.state = 868
            self.match(VfrSyntaxParser.Number)
            self.state = 869
            self.match(VfrSyntaxParser.CloseParen)
            self.state = 870
            self.match(VfrSyntaxParser.Comma)
            self.state = 871
            self.match(VfrSyntaxParser.Help)
            self.state = 872
            self.match(VfrSyntaxParser.T__5)
            self.state = 873
            self.match(VfrSyntaxParser.StringToken)
            self.state = 874
            self.match(VfrSyntaxParser.OpenParen)
            self.state = 875
            self.match(VfrSyntaxParser.Number)
            self.state = 876
            self.match(VfrSyntaxParser.CloseParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuestionheaderFlagsFieldContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.QHFlag = 0

        def ReadOnlyFlag(self):
            return self.getToken(VfrSyntaxParser.ReadOnlyFlag, 0)

        def InteractiveFlag(self):
            return self.getToken(VfrSyntaxParser.InteractiveFlag, 0)

        def ResetRequiredFlag(self):
            return self.getToken(VfrSyntaxParser.ResetRequiredFlag, 0)

        def RestStyleFlag(self):
            return self.getToken(VfrSyntaxParser.RestStyleFlag, 0)

        def ReconnectRequiredFlag(self):
            return self.getToken(VfrSyntaxParser.ReconnectRequiredFlag, 0)

        def OptionOnlyFlag(self):
            return self.getToken(VfrSyntaxParser.OptionOnlyFlag, 0)

        def NVAccessFlag(self):
            return self.getToken(VfrSyntaxParser.NVAccessFlag, 0)

        def LateCheckFlag(self):
            return self.getToken(VfrSyntaxParser.LateCheckFlag, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_questionheaderFlagsField

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuestionheaderFlagsField" ):
                return visitor.visitQuestionheaderFlagsField(self)
            else:
                return visitor.visitChildren(self)




    def questionheaderFlagsField(self):

        localctx = VfrSyntaxParser.QuestionheaderFlagsFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_questionheaderFlagsField)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 878
            _la = self._input.LA(1)
            if not(((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & ((1 << (VfrSyntaxParser.InteractiveFlag - 132)) | (1 << (VfrSyntaxParser.NVAccessFlag - 132)) | (1 << (VfrSyntaxParser.ResetRequiredFlag - 132)) | (1 << (VfrSyntaxParser.ReconnectRequiredFlag - 132)) | (1 << (VfrSyntaxParser.LateCheckFlag - 132)) | (1 << (VfrSyntaxParser.ReadOnlyFlag - 132)) | (1 << (VfrSyntaxParser.OptionOnlyFlag - 132)) | (1 << (VfrSyntaxParser.RestStyleFlag - 132)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStorageVarIdContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1, BaseInfo=None, CheckFlag=None):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.BaseInfo = None
            self.CheckFlag = None
            self.VarIdStr = ''
            self.BaseInfo = BaseInfo
            self.CheckFlag = CheckFlag


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStorageVarId

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)
            self.BaseInfo = ctx.BaseInfo
            self.CheckFlag = ctx.CheckFlag
            self.VarIdStr = ctx.VarIdStr



    class VfrStorageVarIdRule1Context(VfrStorageVarIdContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VfrSyntaxParser.VfrStorageVarIdContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def StringIdentifier(self):
            return self.getToken(VfrSyntaxParser.StringIdentifier, 0)
        def OpenBracket(self):
            return self.getToken(VfrSyntaxParser.OpenBracket, 0)
        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)
        def CloseBracket(self):
            return self.getToken(VfrSyntaxParser.CloseBracket, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStorageVarIdRule1" ):
                return visitor.visitVfrStorageVarIdRule1(self)
            else:
                return visitor.visitChildren(self)


    class VfrStorageVarIdRule2Context(VfrStorageVarIdContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VfrSyntaxParser.VfrStorageVarIdContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def StringIdentifier(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.StringIdentifier)
            else:
                return self.getToken(VfrSyntaxParser.StringIdentifier, i)
        def Dot(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Dot)
            else:
                return self.getToken(VfrSyntaxParser.Dot, i)
        def OpenBracket(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.OpenBracket)
            else:
                return self.getToken(VfrSyntaxParser.OpenBracket, i)
        def Number(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Number)
            else:
                return self.getToken(VfrSyntaxParser.Number, i)
        def CloseBracket(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.CloseBracket)
            else:
                return self.getToken(VfrSyntaxParser.CloseBracket, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStorageVarIdRule2" ):
                return visitor.visitVfrStorageVarIdRule2(self)
            else:
                return visitor.visitChildren(self)



    def vfrStorageVarId(self, BaseInfo, CheckFlag):

        localctx = VfrSyntaxParser.VfrStorageVarIdContext(self, self._ctx, self.state, BaseInfo, CheckFlag)
        self.enterRule(localctx, 84, self.RULE_vfrStorageVarId)
        self._la = 0 # Token type
        try:
            self.state = 897
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
            if la_ == 1:
                localctx = VfrSyntaxParser.VfrStorageVarIdRule1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 880
                self.match(VfrSyntaxParser.StringIdentifier)
                self.state = 881
                self.match(VfrSyntaxParser.OpenBracket)
                self.state = 882
                self.match(VfrSyntaxParser.Number)
                self.state = 883
                self.match(VfrSyntaxParser.CloseBracket)
                pass

            elif la_ == 2:
                localctx = VfrSyntaxParser.VfrStorageVarIdRule2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 884
                self.match(VfrSyntaxParser.StringIdentifier)
                self.state = 894
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==VfrSyntaxParser.Dot:
                    self.state = 885
                    self.match(VfrSyntaxParser.Dot)
                    self.state = 886
                    self.match(VfrSyntaxParser.StringIdentifier)
                    self.state = 890
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VfrSyntaxParser.OpenBracket:
                        self.state = 887
                        self.match(VfrSyntaxParser.OpenBracket)
                        self.state = 888
                        self.match(VfrSyntaxParser.Number)
                        self.state = 889
                        self.match(VfrSyntaxParser.CloseBracket)


                    self.state = 896
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrConstantValueFieldContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Value = EFI_IFR_TYPE_VALUE()
            self.ListType = False

        def Number(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Number)
            else:
                return self.getToken(VfrSyntaxParser.Number, i)

        def Negative(self):
            return self.getToken(VfrSyntaxParser.Negative, 0)

        def TrueSymbol(self):
            return self.getToken(VfrSyntaxParser.TrueSymbol, 0)

        def FalseSymbol(self):
            return self.getToken(VfrSyntaxParser.FalseSymbol, 0)

        def One(self):
            return self.getToken(VfrSyntaxParser.One, 0)

        def Ones(self):
            return self.getToken(VfrSyntaxParser.Ones, 0)

        def Zero(self):
            return self.getToken(VfrSyntaxParser.Zero, 0)

        def Colon(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Colon)
            else:
                return self.getToken(VfrSyntaxParser.Colon, i)

        def Slash(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Slash)
            else:
                return self.getToken(VfrSyntaxParser.Slash, i)

        def Semicolon(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Semicolon)
            else:
                return self.getToken(VfrSyntaxParser.Semicolon, i)

        def guidDefinition(self):
            return self.getTypedRuleContext(VfrSyntaxParser.GuidDefinitionContext,0)


        def StringToken(self):
            return self.getToken(VfrSyntaxParser.StringToken, 0)

        def OpenParen(self):
            return self.getToken(VfrSyntaxParser.OpenParen, 0)

        def CloseParen(self):
            return self.getToken(VfrSyntaxParser.CloseParen, 0)

        def OpenBrace(self):
            return self.getToken(VfrSyntaxParser.OpenBrace, 0)

        def CloseBrace(self):
            return self.getToken(VfrSyntaxParser.CloseBrace, 0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Comma)
            else:
                return self.getToken(VfrSyntaxParser.Comma, i)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrConstantValueField

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrConstantValueField" ):
                return visitor.visitVfrConstantValueField(self)
            else:
                return visitor.visitChildren(self)




    def vfrConstantValueField(self):

        localctx = VfrSyntaxParser.VfrConstantValueFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_vfrConstantValueField)
        self._la = 0 # Token type
        try:
            self.state = 943
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 900
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VfrSyntaxParser.Negative:
                    self.state = 899
                    self.match(VfrSyntaxParser.Negative)


                self.state = 902
                self.match(VfrSyntaxParser.Number)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 903
                self.match(VfrSyntaxParser.TrueSymbol)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 904
                self.match(VfrSyntaxParser.FalseSymbol)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 905
                self.match(VfrSyntaxParser.One)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 906
                self.match(VfrSyntaxParser.Ones)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 907
                self.match(VfrSyntaxParser.Zero)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 908
                self.match(VfrSyntaxParser.Number)
                self.state = 909
                self.match(VfrSyntaxParser.Colon)
                self.state = 910
                self.match(VfrSyntaxParser.Number)
                self.state = 911
                self.match(VfrSyntaxParser.Colon)
                self.state = 912
                self.match(VfrSyntaxParser.Number)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 913
                self.match(VfrSyntaxParser.Number)
                self.state = 914
                self.match(VfrSyntaxParser.Slash)
                self.state = 915
                self.match(VfrSyntaxParser.Number)
                self.state = 916
                self.match(VfrSyntaxParser.Slash)
                self.state = 917
                self.match(VfrSyntaxParser.Number)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 918
                self.match(VfrSyntaxParser.Number)
                self.state = 919
                self.match(VfrSyntaxParser.Semicolon)
                self.state = 920
                self.match(VfrSyntaxParser.Number)
                self.state = 921
                self.match(VfrSyntaxParser.Semicolon)
                self.state = 922
                self.guidDefinition()
                self.state = 923
                self.match(VfrSyntaxParser.Semicolon)
                self.state = 924
                self.match(VfrSyntaxParser.StringToken)
                self.state = 925
                self.match(VfrSyntaxParser.OpenParen)
                self.state = 926
                self.match(VfrSyntaxParser.Number)
                self.state = 927
                self.match(VfrSyntaxParser.CloseParen)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 929
                self.match(VfrSyntaxParser.StringToken)
                self.state = 930
                self.match(VfrSyntaxParser.OpenParen)
                self.state = 931
                self.match(VfrSyntaxParser.Number)
                self.state = 932
                self.match(VfrSyntaxParser.CloseParen)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 933
                self.match(VfrSyntaxParser.OpenBrace)
                self.state = 934
                self.match(VfrSyntaxParser.Number)
                self.state = 939
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==VfrSyntaxParser.Comma:
                    self.state = 935
                    self.match(VfrSyntaxParser.Comma)
                    self.state = 936
                    self.match(VfrSyntaxParser.Number)
                    self.state = 941
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 942
                self.match(VfrSyntaxParser.CloseBrace)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrImageTagContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.IObj = CIfrImage()

        def Image(self):
            return self.getToken(VfrSyntaxParser.Image, 0)

        def OpenParen(self):
            return self.getToken(VfrSyntaxParser.OpenParen, 0)

        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def CloseParen(self):
            return self.getToken(VfrSyntaxParser.CloseParen, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrImageTag

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrImageTag" ):
                return visitor.visitVfrImageTag(self)
            else:
                return visitor.visitChildren(self)




    def vfrImageTag(self):

        localctx = VfrSyntaxParser.VfrImageTagContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_vfrImageTag)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 945
            self.match(VfrSyntaxParser.Image)
            self.state = 946
            self.match(VfrSyntaxParser.T__5)
            self.state = 947
            self.match(VfrSyntaxParser.T__7)
            self.state = 948
            self.match(VfrSyntaxParser.OpenParen)
            self.state = 949
            self.match(VfrSyntaxParser.Number)
            self.state = 950
            self.match(VfrSyntaxParser.CloseParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrLockedTagContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.LObj = CIfrLocked()

        def Locked(self):
            return self.getToken(VfrSyntaxParser.Locked, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrLockedTag

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrLockedTag" ):
                return visitor.visitVfrLockedTag(self)
            else:
                return visitor.visitChildren(self)




    def vfrLockedTag(self):

        localctx = VfrSyntaxParser.VfrLockedTagContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_vfrLockedTag)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 952
            self.match(VfrSyntaxParser.Locked)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementStatTagContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vfrImageTag(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrImageTagContext,0)


        def vfrLockedTag(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrLockedTagContext,0)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementStatTag

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementStatTag" ):
                return visitor.visitVfrStatementStatTag(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementStatTag(self):

        localctx = VfrSyntaxParser.VfrStatementStatTagContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_vfrStatementStatTag)
        try:
            self.state = 956
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VfrSyntaxParser.Image]:
                self.enterOuterAlt(localctx, 1)
                self.state = 954
                self.vfrImageTag()
                pass
            elif token in [VfrSyntaxParser.Locked]:
                self.enterOuterAlt(localctx, 2)
                self.state = 955
                self.vfrLockedTag()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementStatTagListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vfrStatementStatTag(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrStatementStatTagContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementStatTagContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Comma)
            else:
                return self.getToken(VfrSyntaxParser.Comma, i)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementStatTagList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementStatTagList" ):
                return visitor.visitVfrStatementStatTagList(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementStatTagList(self):

        localctx = VfrSyntaxParser.VfrStatementStatTagListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_vfrStatementStatTagList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 958
            self.vfrStatementStatTag()
            self.state = 963
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,59,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 959
                    self.match(VfrSyntaxParser.Comma)
                    self.state = 960
                    self.vfrStatementStatTag() 
                self.state = 965
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,59,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrFormDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.FObj = CIfrForm()

        def Form(self):
            return self.getToken(VfrSyntaxParser.Form, 0)

        def FormId(self):
            return self.getToken(VfrSyntaxParser.FormId, 0)

        def Number(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Number)
            else:
                return self.getToken(VfrSyntaxParser.Number, i)

        def Comma(self):
            return self.getToken(VfrSyntaxParser.Comma, 0)

        def Title(self):
            return self.getToken(VfrSyntaxParser.Title, 0)

        def StringToken(self):
            return self.getToken(VfrSyntaxParser.StringToken, 0)

        def OpenParen(self):
            return self.getToken(VfrSyntaxParser.OpenParen, 0)

        def CloseParen(self):
            return self.getToken(VfrSyntaxParser.CloseParen, 0)

        def Semicolon(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Semicolon)
            else:
                return self.getToken(VfrSyntaxParser.Semicolon, i)

        def EndForm(self):
            return self.getToken(VfrSyntaxParser.EndForm, 0)

        def vfrStatementImage(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrStatementImageContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementImageContext,i)


        def vfrStatementLocked(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrStatementLockedContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementLockedContext,i)


        def vfrStatementRules(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrStatementRulesContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementRulesContext,i)


        def vfrStatementDefault(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrStatementDefaultContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementDefaultContext,i)


        def vfrStatementStat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrStatementStatContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementStatContext,i)


        def vfrStatementQuestions(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrStatementQuestionsContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementQuestionsContext,i)


        def vfrStatementConditional(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrStatementConditionalContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementConditionalContext,i)


        def vfrStatementLabel(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrStatementLabelContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementLabelContext,i)


        def vfrStatementBanner(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrStatementBannerContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementBannerContext,i)


        def vfrStatementExtension(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrStatementExtensionContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementExtensionContext,i)


        def vfrStatementModal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrStatementModalContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementModalContext,i)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrFormDefinition

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrFormDefinition" ):
                return visitor.visitVfrFormDefinition(self)
            else:
                return visitor.visitChildren(self)




    def vfrFormDefinition(self):

        localctx = VfrSyntaxParser.VfrFormDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_vfrFormDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 966
            self.match(VfrSyntaxParser.Form)
            self.state = 967
            self.match(VfrSyntaxParser.FormId)
            self.state = 968
            self.match(VfrSyntaxParser.T__5)
            self.state = 969
            self.match(VfrSyntaxParser.Number)
            self.state = 970
            self.match(VfrSyntaxParser.Comma)
            self.state = 971
            self.match(VfrSyntaxParser.Title)
            self.state = 972
            self.match(VfrSyntaxParser.T__5)
            self.state = 973
            self.match(VfrSyntaxParser.StringToken)
            self.state = 974
            self.match(VfrSyntaxParser.OpenParen)
            self.state = 975
            self.match(VfrSyntaxParser.Number)
            self.state = 976
            self.match(VfrSyntaxParser.CloseParen)
            self.state = 977
            self.match(VfrSyntaxParser.Semicolon)
            self.state = 991
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 59)) & ~0x3f) == 0 and ((1 << (_la - 59)) & ((1 << (VfrSyntaxParser.OneOf - 59)) | (1 << (VfrSyntaxParser.OrderedList - 59)) | (1 << (VfrSyntaxParser.Subtitle - 59)) | (1 << (VfrSyntaxParser.Text - 59)) | (1 << (VfrSyntaxParser.Date - 59)) | (1 << (VfrSyntaxParser.Time - 59)) | (1 << (VfrSyntaxParser.GrayOutIf - 59)) | (1 << (VfrSyntaxParser.Label - 59)) | (1 << (VfrSyntaxParser.CheckBox - 59)) | (1 << (VfrSyntaxParser.Numeric - 59)) | (1 << (VfrSyntaxParser.Default - 59)) | (1 << (VfrSyntaxParser.Password - 59)) | (1 << (VfrSyntaxParser.String - 59)) | (1 << (VfrSyntaxParser.SuppressIf - 59)) | (1 << (VfrSyntaxParser.DisableIf - 59)) | (1 << (VfrSyntaxParser.Goto - 59)))) != 0) or ((((_la - 147)) & ~0x3f) == 0 and ((1 << (_la - 147)) & ((1 << (VfrSyntaxParser.Banner - 147)) | (1 << (VfrSyntaxParser.Image - 147)) | (1 << (VfrSyntaxParser.Locked - 147)) | (1 << (VfrSyntaxParser.Rule - 147)) | (1 << (VfrSyntaxParser.ResetButton - 147)) | (1 << (VfrSyntaxParser.Action - 147)) | (1 << (VfrSyntaxParser.GuidOp - 147)) | (1 << (VfrSyntaxParser.Modal - 147)))) != 0):
                self.state = 989
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VfrSyntaxParser.Image]:
                    self.state = 978
                    self.vfrStatementImage()
                    pass
                elif token in [VfrSyntaxParser.Locked]:
                    self.state = 979
                    self.vfrStatementLocked()
                    pass
                elif token in [VfrSyntaxParser.Rule]:
                    self.state = 980
                    self.vfrStatementRules()
                    pass
                elif token in [VfrSyntaxParser.Default]:
                    self.state = 981
                    self.vfrStatementDefault()
                    pass
                elif token in [VfrSyntaxParser.Subtitle, VfrSyntaxParser.Text, VfrSyntaxParser.Goto, VfrSyntaxParser.ResetButton]:
                    self.state = 982
                    self.vfrStatementStat()
                    pass
                elif token in [VfrSyntaxParser.OneOf, VfrSyntaxParser.OrderedList, VfrSyntaxParser.Date, VfrSyntaxParser.Time, VfrSyntaxParser.CheckBox, VfrSyntaxParser.Numeric, VfrSyntaxParser.Password, VfrSyntaxParser.String, VfrSyntaxParser.Action]:
                    self.state = 983
                    self.vfrStatementQuestions()
                    pass
                elif token in [VfrSyntaxParser.GrayOutIf, VfrSyntaxParser.SuppressIf, VfrSyntaxParser.DisableIf]:
                    self.state = 984
                    self.vfrStatementConditional()
                    pass
                elif token in [VfrSyntaxParser.Label]:
                    self.state = 985
                    self.vfrStatementLabel()
                    pass
                elif token in [VfrSyntaxParser.Banner]:
                    self.state = 986
                    self.vfrStatementBanner()
                    pass
                elif token in [VfrSyntaxParser.GuidOp]:
                    self.state = 987
                    self.vfrStatementExtension()
                    pass
                elif token in [VfrSyntaxParser.Modal]:
                    self.state = 988
                    self.vfrStatementModal()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 993
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 994
            self.match(VfrSyntaxParser.EndForm)
            self.state = 995
            self.match(VfrSyntaxParser.Semicolon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrFormMapDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FormMap(self):
            return self.getToken(VfrSyntaxParser.FormMap, 0)

        def FormId(self):
            return self.getToken(VfrSyntaxParser.FormId, 0)

        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def Comma(self):
            return self.getToken(VfrSyntaxParser.Comma, 0)

        def EndForm(self):
            return self.getToken(VfrSyntaxParser.EndForm, 0)

        def Semicolon(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Semicolon)
            else:
                return self.getToken(VfrSyntaxParser.Semicolon, i)

        def MapTitle(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.MapTitle)
            else:
                return self.getToken(VfrSyntaxParser.MapTitle, i)

        def getStringId(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.GetStringIdContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.GetStringIdContext,i)


        def MapGuid(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.MapGuid)
            else:
                return self.getToken(VfrSyntaxParser.MapGuid, i)

        def guidDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.GuidDefinitionContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.GuidDefinitionContext,i)


        def vfrStatementImage(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrStatementImageContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementImageContext,i)


        def vfrStatementLocked(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrStatementLockedContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementLockedContext,i)


        def vfrStatementRules(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrStatementRulesContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementRulesContext,i)


        def vfrStatementDefault(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrStatementDefaultContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementDefaultContext,i)


        def vfrStatementStat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrStatementStatContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementStatContext,i)


        def vfrStatementQuestions(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrStatementQuestionsContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementQuestionsContext,i)


        def vfrStatementConditional(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrStatementConditionalContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementConditionalContext,i)


        def vfrStatementLabel(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrStatementLabelContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementLabelContext,i)


        def vfrStatementBanner(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrStatementBannerContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementBannerContext,i)


        def vfrStatementExtension(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrStatementExtensionContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementExtensionContext,i)


        def vfrStatementModal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrStatementModalContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementModalContext,i)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrFormMapDefinition

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrFormMapDefinition" ):
                return visitor.visitVfrFormMapDefinition(self)
            else:
                return visitor.visitChildren(self)




    def vfrFormMapDefinition(self):

        localctx = VfrSyntaxParser.VfrFormMapDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_vfrFormMapDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 997
            self.match(VfrSyntaxParser.FormMap)
            self.state = 998
            self.match(VfrSyntaxParser.FormId)
            self.state = 999
            self.match(VfrSyntaxParser.T__5)
            self.state = 1000
            self.match(VfrSyntaxParser.Number)
            self.state = 1001
            self.match(VfrSyntaxParser.Comma)
            self.state = 1013
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==VfrSyntaxParser.MapTitle:
                self.state = 1002
                self.match(VfrSyntaxParser.MapTitle)
                self.state = 1003
                self.match(VfrSyntaxParser.T__5)
                self.state = 1004
                self.getStringId()
                self.state = 1005
                self.match(VfrSyntaxParser.Semicolon)
                self.state = 1006
                self.match(VfrSyntaxParser.MapGuid)
                self.state = 1007
                self.match(VfrSyntaxParser.T__5)
                self.state = 1008
                self.guidDefinition()
                self.state = 1009
                self.match(VfrSyntaxParser.Semicolon)
                self.state = 1015
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1029
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 59)) & ~0x3f) == 0 and ((1 << (_la - 59)) & ((1 << (VfrSyntaxParser.OneOf - 59)) | (1 << (VfrSyntaxParser.OrderedList - 59)) | (1 << (VfrSyntaxParser.Subtitle - 59)) | (1 << (VfrSyntaxParser.Text - 59)) | (1 << (VfrSyntaxParser.Date - 59)) | (1 << (VfrSyntaxParser.Time - 59)) | (1 << (VfrSyntaxParser.GrayOutIf - 59)) | (1 << (VfrSyntaxParser.Label - 59)) | (1 << (VfrSyntaxParser.CheckBox - 59)) | (1 << (VfrSyntaxParser.Numeric - 59)) | (1 << (VfrSyntaxParser.Default - 59)) | (1 << (VfrSyntaxParser.Password - 59)) | (1 << (VfrSyntaxParser.String - 59)) | (1 << (VfrSyntaxParser.SuppressIf - 59)) | (1 << (VfrSyntaxParser.DisableIf - 59)) | (1 << (VfrSyntaxParser.Goto - 59)))) != 0) or ((((_la - 147)) & ~0x3f) == 0 and ((1 << (_la - 147)) & ((1 << (VfrSyntaxParser.Banner - 147)) | (1 << (VfrSyntaxParser.Image - 147)) | (1 << (VfrSyntaxParser.Locked - 147)) | (1 << (VfrSyntaxParser.Rule - 147)) | (1 << (VfrSyntaxParser.ResetButton - 147)) | (1 << (VfrSyntaxParser.Action - 147)) | (1 << (VfrSyntaxParser.GuidOp - 147)) | (1 << (VfrSyntaxParser.Modal - 147)))) != 0):
                self.state = 1027
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VfrSyntaxParser.Image]:
                    self.state = 1016
                    self.vfrStatementImage()
                    pass
                elif token in [VfrSyntaxParser.Locked]:
                    self.state = 1017
                    self.vfrStatementLocked()
                    pass
                elif token in [VfrSyntaxParser.Rule]:
                    self.state = 1018
                    self.vfrStatementRules()
                    pass
                elif token in [VfrSyntaxParser.Default]:
                    self.state = 1019
                    self.vfrStatementDefault()
                    pass
                elif token in [VfrSyntaxParser.Subtitle, VfrSyntaxParser.Text, VfrSyntaxParser.Goto, VfrSyntaxParser.ResetButton]:
                    self.state = 1020
                    self.vfrStatementStat()
                    pass
                elif token in [VfrSyntaxParser.OneOf, VfrSyntaxParser.OrderedList, VfrSyntaxParser.Date, VfrSyntaxParser.Time, VfrSyntaxParser.CheckBox, VfrSyntaxParser.Numeric, VfrSyntaxParser.Password, VfrSyntaxParser.String, VfrSyntaxParser.Action]:
                    self.state = 1021
                    self.vfrStatementQuestions()
                    pass
                elif token in [VfrSyntaxParser.GrayOutIf, VfrSyntaxParser.SuppressIf, VfrSyntaxParser.DisableIf]:
                    self.state = 1022
                    self.vfrStatementConditional()
                    pass
                elif token in [VfrSyntaxParser.Label]:
                    self.state = 1023
                    self.vfrStatementLabel()
                    pass
                elif token in [VfrSyntaxParser.Banner]:
                    self.state = 1024
                    self.vfrStatementBanner()
                    pass
                elif token in [VfrSyntaxParser.GuidOp]:
                    self.state = 1025
                    self.vfrStatementExtension()
                    pass
                elif token in [VfrSyntaxParser.Modal]:
                    self.state = 1026
                    self.vfrStatementModal()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1031
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1032
            self.match(VfrSyntaxParser.EndForm)
            self.state = 1033
            self.match(VfrSyntaxParser.Semicolon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementImageContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vfrImageTag(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrImageTagContext,0)


        def Semicolon(self):
            return self.getToken(VfrSyntaxParser.Semicolon, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementImage

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementImage" ):
                return visitor.visitVfrStatementImage(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementImage(self):

        localctx = VfrSyntaxParser.VfrStatementImageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_vfrStatementImage)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1035
            self.vfrImageTag()
            self.state = 1036
            self.match(VfrSyntaxParser.Semicolon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementLockedContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vfrLockedTag(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrLockedTagContext,0)


        def Semicolon(self):
            return self.getToken(VfrSyntaxParser.Semicolon, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementLocked

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementLocked" ):
                return visitor.visitVfrStatementLocked(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementLocked(self):

        localctx = VfrSyntaxParser.VfrStatementLockedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_vfrStatementLocked)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1038
            self.vfrLockedTag()
            self.state = 1039
            self.match(VfrSyntaxParser.Semicolon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementRulesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.RObj = CIfrRule()

        def Rule(self):
            return self.getToken(VfrSyntaxParser.Rule, 0)

        def StringIdentifier(self):
            return self.getToken(VfrSyntaxParser.StringIdentifier, 0)

        def Comma(self):
            return self.getToken(VfrSyntaxParser.Comma, 0)

        def vfrStatementExpression(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementExpressionContext,0)


        def EndRule(self):
            return self.getToken(VfrSyntaxParser.EndRule, 0)

        def Semicolon(self):
            return self.getToken(VfrSyntaxParser.Semicolon, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementRules

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementRules" ):
                return visitor.visitVfrStatementRules(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementRules(self):

        localctx = VfrSyntaxParser.VfrStatementRulesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_vfrStatementRules)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1041
            self.match(VfrSyntaxParser.Rule)
            self.state = 1042
            self.match(VfrSyntaxParser.StringIdentifier)
            self.state = 1043
            self.match(VfrSyntaxParser.Comma)
            self.state = 1044
            self.vfrStatementExpression()
            self.state = 1045
            self.match(VfrSyntaxParser.EndRule)
            self.state = 1046
            self.match(VfrSyntaxParser.Semicolon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementStatContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vfrStatementSubTitle(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementSubTitleContext,0)


        def vfrStatementStaticText(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementStaticTextContext,0)


        def vfrStatementCrossReference(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementCrossReferenceContext,0)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementStat

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementStat" ):
                return visitor.visitVfrStatementStat(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementStat(self):

        localctx = VfrSyntaxParser.VfrStatementStatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_vfrStatementStat)
        try:
            self.state = 1051
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VfrSyntaxParser.Subtitle]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1048
                self.vfrStatementSubTitle()
                pass
            elif token in [VfrSyntaxParser.Text]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1049
                self.vfrStatementStaticText()
                pass
            elif token in [VfrSyntaxParser.Goto, VfrSyntaxParser.ResetButton]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1050
                self.vfrStatementCrossReference()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementSubTitleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.OpObj = CIfrSubtitle()

        def Subtitle(self):
            return self.getToken(VfrSyntaxParser.Subtitle, 0)

        def Text(self):
            return self.getToken(VfrSyntaxParser.Text, 0)

        def StringToken(self):
            return self.getToken(VfrSyntaxParser.StringToken, 0)

        def OpenParen(self):
            return self.getToken(VfrSyntaxParser.OpenParen, 0)

        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def CloseParen(self):
            return self.getToken(VfrSyntaxParser.CloseParen, 0)

        def Semicolon(self):
            return self.getToken(VfrSyntaxParser.Semicolon, 0)

        def EndSubtitle(self):
            return self.getToken(VfrSyntaxParser.EndSubtitle, 0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Comma)
            else:
                return self.getToken(VfrSyntaxParser.Comma, i)

        def FLAGS(self):
            return self.getToken(VfrSyntaxParser.FLAGS, 0)

        def vfrSubtitleFlags(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrSubtitleFlagsContext,0)


        def vfrStatementStatTagList(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementStatTagListContext,0)


        def vfrStatementStat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrStatementStatContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementStatContext,i)


        def vfrStatementQuestions(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrStatementQuestionsContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementQuestionsContext,i)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementSubTitle

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementSubTitle" ):
                return visitor.visitVfrStatementSubTitle(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementSubTitle(self):

        localctx = VfrSyntaxParser.VfrStatementSubTitleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_vfrStatementSubTitle)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1053
            self.match(VfrSyntaxParser.Subtitle)
            self.state = 1054
            self.match(VfrSyntaxParser.Text)
            self.state = 1055
            self.match(VfrSyntaxParser.T__5)
            self.state = 1056
            self.match(VfrSyntaxParser.StringToken)
            self.state = 1057
            self.match(VfrSyntaxParser.OpenParen)
            self.state = 1058
            self.match(VfrSyntaxParser.Number)
            self.state = 1059
            self.match(VfrSyntaxParser.CloseParen)
            self.state = 1064
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
            if la_ == 1:
                self.state = 1060
                self.match(VfrSyntaxParser.Comma)
                self.state = 1061
                self.match(VfrSyntaxParser.FLAGS)
                self.state = 1062
                self.match(VfrSyntaxParser.T__5)
                self.state = 1063
                self.vfrSubtitleFlags()


            self.state = 1087
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
            if la_ == 1:
                self.state = 1068
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VfrSyntaxParser.Comma:
                    self.state = 1066
                    self.match(VfrSyntaxParser.Comma)
                    self.state = 1067
                    self.vfrStatementStatTagList()


                self.state = 1070
                self.match(VfrSyntaxParser.Semicolon)
                pass

            elif la_ == 2:
                self.state = 1073
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
                if la_ == 1:
                    self.state = 1071
                    self.match(VfrSyntaxParser.Comma)
                    self.state = 1072
                    self.vfrStatementStatTagList()


                self.state = 1083
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VfrSyntaxParser.Comma:
                    self.state = 1075
                    self.match(VfrSyntaxParser.Comma)
                    self.state = 1080
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while ((((_la - 59)) & ~0x3f) == 0 and ((1 << (_la - 59)) & ((1 << (VfrSyntaxParser.OneOf - 59)) | (1 << (VfrSyntaxParser.OrderedList - 59)) | (1 << (VfrSyntaxParser.Subtitle - 59)) | (1 << (VfrSyntaxParser.Text - 59)) | (1 << (VfrSyntaxParser.Date - 59)) | (1 << (VfrSyntaxParser.Time - 59)) | (1 << (VfrSyntaxParser.CheckBox - 59)) | (1 << (VfrSyntaxParser.Numeric - 59)) | (1 << (VfrSyntaxParser.Password - 59)) | (1 << (VfrSyntaxParser.String - 59)) | (1 << (VfrSyntaxParser.Goto - 59)))) != 0) or _la==VfrSyntaxParser.ResetButton or _la==VfrSyntaxParser.Action:
                        self.state = 1078
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [VfrSyntaxParser.Subtitle, VfrSyntaxParser.Text, VfrSyntaxParser.Goto, VfrSyntaxParser.ResetButton]:
                            self.state = 1076
                            self.vfrStatementStat()
                            pass
                        elif token in [VfrSyntaxParser.OneOf, VfrSyntaxParser.OrderedList, VfrSyntaxParser.Date, VfrSyntaxParser.Time, VfrSyntaxParser.CheckBox, VfrSyntaxParser.Numeric, VfrSyntaxParser.Password, VfrSyntaxParser.String, VfrSyntaxParser.Action]:
                            self.state = 1077
                            self.vfrStatementQuestions()
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 1082
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1085
                self.match(VfrSyntaxParser.EndSubtitle)
                self.state = 1086
                self.match(VfrSyntaxParser.Semicolon)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrSubtitleFlagsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.SubFlags = 0

        def subtitleFlagsField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.SubtitleFlagsFieldContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.SubtitleFlagsFieldContext,i)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrSubtitleFlags

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrSubtitleFlags" ):
                return visitor.visitVfrSubtitleFlags(self)
            else:
                return visitor.visitChildren(self)




    def vfrSubtitleFlags(self):

        localctx = VfrSyntaxParser.VfrSubtitleFlagsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_vfrSubtitleFlags)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1089
            self.subtitleFlagsField()
            self.state = 1094
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==VfrSyntaxParser.T__6:
                self.state = 1090
                self.match(VfrSyntaxParser.T__6)
                self.state = 1091
                self.subtitleFlagsField()
                self.state = 1096
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubtitleFlagsFieldContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Flag = 0

        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_subtitleFlagsField

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubtitleFlagsField" ):
                return visitor.visitSubtitleFlagsField(self)
            else:
                return visitor.visitChildren(self)




    def subtitleFlagsField(self):

        localctx = VfrSyntaxParser.SubtitleFlagsFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_subtitleFlagsField)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1097
            _la = self._input.LA(1)
            if not(_la==VfrSyntaxParser.T__8 or _la==VfrSyntaxParser.Number):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementStaticTextContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Text(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Text)
            else:
                return self.getToken(VfrSyntaxParser.Text, i)

        def Help(self):
            return self.getToken(VfrSyntaxParser.Help, 0)

        def StringToken(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.StringToken)
            else:
                return self.getToken(VfrSyntaxParser.StringToken, i)

        def OpenParen(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.OpenParen)
            else:
                return self.getToken(VfrSyntaxParser.OpenParen, i)

        def Number(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Number)
            else:
                return self.getToken(VfrSyntaxParser.Number, i)

        def CloseParen(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.CloseParen)
            else:
                return self.getToken(VfrSyntaxParser.CloseParen, i)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Comma)
            else:
                return self.getToken(VfrSyntaxParser.Comma, i)

        def Semicolon(self):
            return self.getToken(VfrSyntaxParser.Semicolon, 0)

        def FLAGS(self):
            return self.getToken(VfrSyntaxParser.FLAGS, 0)

        def staticTextFlagsField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.StaticTextFlagsFieldContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.StaticTextFlagsFieldContext,i)


        def Key(self):
            return self.getToken(VfrSyntaxParser.Key, 0)

        def vfrStatementStatTagList(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementStatTagListContext,0)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementStaticText

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementStaticText" ):
                return visitor.visitVfrStatementStaticText(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementStaticText(self):

        localctx = VfrSyntaxParser.VfrStatementStaticTextContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_vfrStatementStaticText)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1099
            self.match(VfrSyntaxParser.Text)
            self.state = 1100
            self.match(VfrSyntaxParser.Help)
            self.state = 1101
            self.match(VfrSyntaxParser.T__5)
            self.state = 1102
            self.match(VfrSyntaxParser.StringToken)
            self.state = 1103
            self.match(VfrSyntaxParser.OpenParen)
            self.state = 1104
            self.match(VfrSyntaxParser.Number)
            self.state = 1105
            self.match(VfrSyntaxParser.CloseParen)
            self.state = 1106
            self.match(VfrSyntaxParser.Comma)
            self.state = 1107
            self.match(VfrSyntaxParser.Text)
            self.state = 1108
            self.match(VfrSyntaxParser.T__5)
            self.state = 1109
            self.match(VfrSyntaxParser.StringToken)
            self.state = 1110
            self.match(VfrSyntaxParser.OpenParen)
            self.state = 1111
            self.match(VfrSyntaxParser.Number)
            self.state = 1112
            self.match(VfrSyntaxParser.CloseParen)
            self.state = 1120
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
            if la_ == 1:
                self.state = 1113
                self.match(VfrSyntaxParser.Comma)
                self.state = 1114
                self.match(VfrSyntaxParser.Text)
                self.state = 1115
                self.match(VfrSyntaxParser.T__5)
                self.state = 1116
                self.match(VfrSyntaxParser.StringToken)
                self.state = 1117
                self.match(VfrSyntaxParser.OpenParen)
                self.state = 1118
                self.match(VfrSyntaxParser.Number)
                self.state = 1119
                self.match(VfrSyntaxParser.CloseParen)


            self.state = 1138
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
            if la_ == 1:
                self.state = 1122
                self.match(VfrSyntaxParser.Comma)
                self.state = 1123
                self.match(VfrSyntaxParser.FLAGS)
                self.state = 1124
                self.match(VfrSyntaxParser.T__5)
                self.state = 1125
                self.staticTextFlagsField()
                self.state = 1130
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==VfrSyntaxParser.T__6:
                    self.state = 1126
                    self.match(VfrSyntaxParser.T__6)
                    self.state = 1127
                    self.staticTextFlagsField()
                    self.state = 1132
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1133
                self.match(VfrSyntaxParser.Comma)
                self.state = 1134
                self.match(VfrSyntaxParser.Key)
                self.state = 1135
                self.match(VfrSyntaxParser.T__5)
                self.state = 1136
                self.match(VfrSyntaxParser.Number)


            self.state = 1142
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.Comma:
                self.state = 1140
                self.match(VfrSyntaxParser.Comma)
                self.state = 1141
                self.vfrStatementStatTagList()


            self.state = 1144
            self.match(VfrSyntaxParser.Semicolon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StaticTextFlagsFieldContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Flag = 0
            self.Line = 0

        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def questionheaderFlagsField(self):
            return self.getTypedRuleContext(VfrSyntaxParser.QuestionheaderFlagsFieldContext,0)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_staticTextFlagsField

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStaticTextFlagsField" ):
                return visitor.visitStaticTextFlagsField(self)
            else:
                return visitor.visitChildren(self)




    def staticTextFlagsField(self):

        localctx = VfrSyntaxParser.StaticTextFlagsFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_staticTextFlagsField)
        try:
            self.state = 1148
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VfrSyntaxParser.Number]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1146
                self.match(VfrSyntaxParser.Number)
                pass
            elif token in [VfrSyntaxParser.InteractiveFlag, VfrSyntaxParser.NVAccessFlag, VfrSyntaxParser.ResetRequiredFlag, VfrSyntaxParser.ReconnectRequiredFlag, VfrSyntaxParser.LateCheckFlag, VfrSyntaxParser.ReadOnlyFlag, VfrSyntaxParser.OptionOnlyFlag, VfrSyntaxParser.RestStyleFlag]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1147
                self.questionheaderFlagsField()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementCrossReferenceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vfrStatementGoto(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementGotoContext,0)


        def vfrStatementResetButton(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementResetButtonContext,0)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementCrossReference

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementCrossReference" ):
                return visitor.visitVfrStatementCrossReference(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementCrossReference(self):

        localctx = VfrSyntaxParser.VfrStatementCrossReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_vfrStatementCrossReference)
        try:
            self.state = 1152
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VfrSyntaxParser.Goto]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1150
                self.vfrStatementGoto()
                pass
            elif token in [VfrSyntaxParser.ResetButton]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1151
                self.vfrStatementResetButton()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementGotoContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.OpObj = None
            self.OHObj = None
            self.QType = EFI_QUESION_TYPE.QUESTION_REF

        def Goto(self):
            return self.getToken(VfrSyntaxParser.Goto, 0)

        def vfrQuestionHeader(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrQuestionHeaderContext,0)


        def Semicolon(self):
            return self.getToken(VfrSyntaxParser.Semicolon, 0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Comma)
            else:
                return self.getToken(VfrSyntaxParser.Comma, i)

        def FLAGS(self):
            return self.getToken(VfrSyntaxParser.FLAGS, 0)

        def vfrGotoFlags(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrGotoFlagsContext,0)


        def Key(self):
            return self.getToken(VfrSyntaxParser.Key, 0)

        def Number(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Number)
            else:
                return self.getToken(VfrSyntaxParser.Number, i)

        def vfrStatementQuestionOptionList(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementQuestionOptionListContext,0)


        def DevicePath(self):
            return self.getToken(VfrSyntaxParser.DevicePath, 0)

        def StringToken(self):
            return self.getToken(VfrSyntaxParser.StringToken, 0)

        def OpenParen(self):
            return self.getToken(VfrSyntaxParser.OpenParen, 0)

        def CloseParen(self):
            return self.getToken(VfrSyntaxParser.CloseParen, 0)

        def FormSetGuid(self):
            return self.getToken(VfrSyntaxParser.FormSetGuid, 0)

        def guidDefinition(self):
            return self.getTypedRuleContext(VfrSyntaxParser.GuidDefinitionContext,0)


        def FormId(self):
            return self.getToken(VfrSyntaxParser.FormId, 0)

        def Question(self):
            return self.getToken(VfrSyntaxParser.Question, 0)

        def StringIdentifier(self):
            return self.getToken(VfrSyntaxParser.StringIdentifier, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementGoto

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementGoto" ):
                return visitor.visitVfrStatementGoto(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementGoto(self):

        localctx = VfrSyntaxParser.VfrStatementGotoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_vfrStatementGoto)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1154
            self.match(VfrSyntaxParser.Goto)
            self.state = 1202
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VfrSyntaxParser.DevicePath]:
                self.state = 1155
                self.match(VfrSyntaxParser.DevicePath)
                self.state = 1156
                self.match(VfrSyntaxParser.T__5)
                self.state = 1157
                self.match(VfrSyntaxParser.StringToken)
                self.state = 1158
                self.match(VfrSyntaxParser.OpenParen)
                self.state = 1159
                self.match(VfrSyntaxParser.Number)
                self.state = 1160
                self.match(VfrSyntaxParser.CloseParen)
                self.state = 1161
                self.match(VfrSyntaxParser.Comma)
                self.state = 1162
                self.match(VfrSyntaxParser.FormSetGuid)
                self.state = 1163
                self.match(VfrSyntaxParser.T__5)
                self.state = 1164
                self.guidDefinition()
                self.state = 1165
                self.match(VfrSyntaxParser.Comma)
                self.state = 1166
                self.match(VfrSyntaxParser.FormId)
                self.state = 1167
                self.match(VfrSyntaxParser.T__5)
                self.state = 1168
                self.match(VfrSyntaxParser.Number)
                self.state = 1169
                self.match(VfrSyntaxParser.Comma)
                self.state = 1170
                self.match(VfrSyntaxParser.Question)
                self.state = 1171
                self.match(VfrSyntaxParser.T__5)
                self.state = 1172
                self.match(VfrSyntaxParser.Number)
                self.state = 1173
                self.match(VfrSyntaxParser.Comma)
                pass
            elif token in [VfrSyntaxParser.FormSetGuid]:
                self.state = 1175
                self.match(VfrSyntaxParser.FormSetGuid)
                self.state = 1176
                self.match(VfrSyntaxParser.T__5)
                self.state = 1177
                self.guidDefinition()
                self.state = 1178
                self.match(VfrSyntaxParser.Comma)
                self.state = 1179
                self.match(VfrSyntaxParser.FormId)
                self.state = 1180
                self.match(VfrSyntaxParser.T__5)
                self.state = 1181
                self.match(VfrSyntaxParser.Number)
                self.state = 1182
                self.match(VfrSyntaxParser.Comma)
                self.state = 1183
                self.match(VfrSyntaxParser.Question)
                self.state = 1184
                self.match(VfrSyntaxParser.T__5)
                self.state = 1185
                self.match(VfrSyntaxParser.Number)
                self.state = 1186
                self.match(VfrSyntaxParser.Comma)
                pass
            elif token in [VfrSyntaxParser.FormId]:
                self.state = 1188
                self.match(VfrSyntaxParser.FormId)
                self.state = 1189
                self.match(VfrSyntaxParser.T__5)
                self.state = 1190
                self.match(VfrSyntaxParser.Number)
                self.state = 1191
                self.match(VfrSyntaxParser.Comma)
                self.state = 1192
                self.match(VfrSyntaxParser.Question)
                self.state = 1193
                self.match(VfrSyntaxParser.T__5)
                self.state = 1198
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VfrSyntaxParser.StringIdentifier]:
                    self.state = 1194
                    self.match(VfrSyntaxParser.StringIdentifier)
                    self.state = 1195
                    self.match(VfrSyntaxParser.Comma)
                    pass
                elif token in [VfrSyntaxParser.Number]:
                    self.state = 1196
                    self.match(VfrSyntaxParser.Number)
                    self.state = 1197
                    self.match(VfrSyntaxParser.Comma)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [VfrSyntaxParser.Number]:
                self.state = 1200
                self.match(VfrSyntaxParser.Number)
                self.state = 1201
                self.match(VfrSyntaxParser.Comma)
                pass
            elif token in [VfrSyntaxParser.Prompt, VfrSyntaxParser.Name, VfrSyntaxParser.VarId, VfrSyntaxParser.QuestionId]:
                pass
            else:
                pass
            self.state = 1204
            self.vfrQuestionHeader(localctx.OpObj, localctx.QType)
            self.state = 1209
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
            if la_ == 1:
                self.state = 1205
                self.match(VfrSyntaxParser.Comma)
                self.state = 1206
                self.match(VfrSyntaxParser.FLAGS)
                self.state = 1207
                self.match(VfrSyntaxParser.T__5)
                self.state = 1208
                self.vfrGotoFlags(localctx.OpObj)


            self.state = 1215
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
            if la_ == 1:
                self.state = 1211
                self.match(VfrSyntaxParser.Comma)
                self.state = 1212
                self.match(VfrSyntaxParser.Key)
                self.state = 1213
                self.match(VfrSyntaxParser.T__5)
                self.state = 1214
                self.match(VfrSyntaxParser.Number)


            self.state = 1219
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.Comma:
                self.state = 1217
                self.match(VfrSyntaxParser.Comma)
                self.state = 1218
                self.vfrStatementQuestionOptionList()


            self.state = 1221
            self.match(VfrSyntaxParser.Semicolon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrGotoFlagsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1, Obj=None):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Obj = None
            self.GotoFlags = 0
            self.Obj = Obj

        def gotoFlagsField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.GotoFlagsFieldContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.GotoFlagsFieldContext,i)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrGotoFlags

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrGotoFlags" ):
                return visitor.visitVfrGotoFlags(self)
            else:
                return visitor.visitChildren(self)




    def vfrGotoFlags(self, Obj):

        localctx = VfrSyntaxParser.VfrGotoFlagsContext(self, self._ctx, self.state, Obj)
        self.enterRule(localctx, 122, self.RULE_vfrGotoFlags)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1223
            self.gotoFlagsField()
            self.state = 1228
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==VfrSyntaxParser.T__6:
                self.state = 1224
                self.match(VfrSyntaxParser.T__6)
                self.state = 1225
                self.gotoFlagsField()
                self.state = 1230
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GotoFlagsFieldContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Flag = 0

        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def questionheaderFlagsField(self):
            return self.getTypedRuleContext(VfrSyntaxParser.QuestionheaderFlagsFieldContext,0)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_gotoFlagsField

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGotoFlagsField" ):
                return visitor.visitGotoFlagsField(self)
            else:
                return visitor.visitChildren(self)




    def gotoFlagsField(self):

        localctx = VfrSyntaxParser.GotoFlagsFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_gotoFlagsField)
        try:
            self.state = 1233
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VfrSyntaxParser.Number]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1231
                self.match(VfrSyntaxParser.Number)
                pass
            elif token in [VfrSyntaxParser.InteractiveFlag, VfrSyntaxParser.NVAccessFlag, VfrSyntaxParser.ResetRequiredFlag, VfrSyntaxParser.ReconnectRequiredFlag, VfrSyntaxParser.LateCheckFlag, VfrSyntaxParser.ReadOnlyFlag, VfrSyntaxParser.OptionOnlyFlag, VfrSyntaxParser.RestStyleFlag]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1232
                self.questionheaderFlagsField()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementResetButtonContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.OpObj = CIfrResetButton()

        def ResetButton(self):
            return self.getToken(VfrSyntaxParser.ResetButton, 0)

        def DefaultStore(self):
            return self.getToken(VfrSyntaxParser.DefaultStore, 0)

        def StringIdentifier(self):
            return self.getToken(VfrSyntaxParser.StringIdentifier, 0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Comma)
            else:
                return self.getToken(VfrSyntaxParser.Comma, i)

        def vfrStatementHeader(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementHeaderContext,0)


        def EndResetButton(self):
            return self.getToken(VfrSyntaxParser.EndResetButton, 0)

        def Semicolon(self):
            return self.getToken(VfrSyntaxParser.Semicolon, 0)

        def vfrStatementStatTagList(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementStatTagListContext,0)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementResetButton

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementResetButton" ):
                return visitor.visitVfrStatementResetButton(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementResetButton(self):

        localctx = VfrSyntaxParser.VfrStatementResetButtonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_vfrStatementResetButton)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1235
            self.match(VfrSyntaxParser.ResetButton)
            self.state = 1236
            self.match(VfrSyntaxParser.DefaultStore)
            self.state = 1237
            self.match(VfrSyntaxParser.T__5)
            self.state = 1238
            self.match(VfrSyntaxParser.StringIdentifier)
            self.state = 1239
            self.match(VfrSyntaxParser.Comma)
            self.state = 1240
            self.vfrStatementHeader(localctx.OpObj)
            self.state = 1241
            self.match(VfrSyntaxParser.Comma)
            self.state = 1245
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.Image or _la==VfrSyntaxParser.Locked:
                self.state = 1242
                self.vfrStatementStatTagList()
                self.state = 1243
                self.match(VfrSyntaxParser.Comma)


            self.state = 1247
            self.match(VfrSyntaxParser.EndResetButton)
            self.state = 1248
            self.match(VfrSyntaxParser.Semicolon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementQuestionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vfrStatementBooleanType(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementBooleanTypeContext,0)


        def vfrStatementDate(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementDateContext,0)


        def vfrStatementNumericType(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementNumericTypeContext,0)


        def vfrStatementStringType(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementStringTypeContext,0)


        def vfrStatementOrderedList(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementOrderedListContext,0)


        def vfrStatementTime(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementTimeContext,0)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementQuestions

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementQuestions" ):
                return visitor.visitVfrStatementQuestions(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementQuestions(self):

        localctx = VfrSyntaxParser.VfrStatementQuestionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_vfrStatementQuestions)
        try:
            self.state = 1256
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VfrSyntaxParser.CheckBox, VfrSyntaxParser.Action]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1250
                self.vfrStatementBooleanType()
                pass
            elif token in [VfrSyntaxParser.Date]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1251
                self.vfrStatementDate()
                pass
            elif token in [VfrSyntaxParser.OneOf, VfrSyntaxParser.Numeric]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1252
                self.vfrStatementNumericType()
                pass
            elif token in [VfrSyntaxParser.Password, VfrSyntaxParser.String]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1253
                self.vfrStatementStringType()
                pass
            elif token in [VfrSyntaxParser.OrderedList]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1254
                self.vfrStatementOrderedList()
                pass
            elif token in [VfrSyntaxParser.Time]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1255
                self.vfrStatementTime()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementQuestionTagContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vfrStatementStatTag(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementStatTagContext,0)


        def Comma(self):
            return self.getToken(VfrSyntaxParser.Comma, 0)

        def vfrStatementInconsistentIf(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementInconsistentIfContext,0)


        def vfrStatementNoSubmitIf(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementNoSubmitIfContext,0)


        def vfrStatementDisableIfQuest(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementDisableIfQuestContext,0)


        def vfrStatementRefresh(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementRefreshContext,0)


        def vfrStatementVarstoreDevice(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementVarstoreDeviceContext,0)


        def vfrStatementExtension(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementExtensionContext,0)


        def vfrStatementRefreshEvent(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementRefreshEventContext,0)


        def vfrStatementWarningIf(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementWarningIfContext,0)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementQuestionTag

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementQuestionTag" ):
                return visitor.visitVfrStatementQuestionTag(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementQuestionTag(self):

        localctx = VfrSyntaxParser.VfrStatementQuestionTagContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_vfrStatementQuestionTag)
        try:
            self.state = 1269
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VfrSyntaxParser.Image, VfrSyntaxParser.Locked]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1258
                self.vfrStatementStatTag()
                self.state = 1259
                self.match(VfrSyntaxParser.Comma)
                pass
            elif token in [VfrSyntaxParser.InconsistentIf]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1261
                self.vfrStatementInconsistentIf()
                pass
            elif token in [VfrSyntaxParser.NoSubmitIf]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1262
                self.vfrStatementNoSubmitIf()
                pass
            elif token in [VfrSyntaxParser.DisableIf]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1263
                self.vfrStatementDisableIfQuest()
                pass
            elif token in [VfrSyntaxParser.Refresh]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1264
                self.vfrStatementRefresh()
                pass
            elif token in [VfrSyntaxParser.VarstoreDevice]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1265
                self.vfrStatementVarstoreDevice()
                pass
            elif token in [VfrSyntaxParser.GuidOp]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1266
                self.vfrStatementExtension()
                pass
            elif token in [VfrSyntaxParser.RefreshGuid]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1267
                self.vfrStatementRefreshEvent()
                pass
            elif token in [VfrSyntaxParser.WarningIf]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1268
                self.vfrStatementWarningIf()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementInconsistentIfContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.IIObj = CIfrInconsistentIf()

        def InconsistentIf(self):
            return self.getToken(VfrSyntaxParser.InconsistentIf, 0)

        def Prompt(self):
            return self.getToken(VfrSyntaxParser.Prompt, 0)

        def StringToken(self):
            return self.getToken(VfrSyntaxParser.StringToken, 0)

        def OpenParen(self):
            return self.getToken(VfrSyntaxParser.OpenParen, 0)

        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def CloseParen(self):
            return self.getToken(VfrSyntaxParser.CloseParen, 0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Comma)
            else:
                return self.getToken(VfrSyntaxParser.Comma, i)

        def vfrStatementExpression(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementExpressionContext,0)


        def EndIf(self):
            return self.getToken(VfrSyntaxParser.EndIf, 0)

        def FLAGS(self):
            return self.getToken(VfrSyntaxParser.FLAGS, 0)

        def flagsField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.FlagsFieldContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.FlagsFieldContext,i)


        def Semicolon(self):
            return self.getToken(VfrSyntaxParser.Semicolon, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementInconsistentIf

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementInconsistentIf" ):
                return visitor.visitVfrStatementInconsistentIf(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementInconsistentIf(self):

        localctx = VfrSyntaxParser.VfrStatementInconsistentIfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_vfrStatementInconsistentIf)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1271
            self.match(VfrSyntaxParser.InconsistentIf)
            self.state = 1272
            self.match(VfrSyntaxParser.Prompt)
            self.state = 1273
            self.match(VfrSyntaxParser.T__5)
            self.state = 1274
            self.match(VfrSyntaxParser.StringToken)
            self.state = 1275
            self.match(VfrSyntaxParser.OpenParen)
            self.state = 1276
            self.match(VfrSyntaxParser.Number)
            self.state = 1277
            self.match(VfrSyntaxParser.CloseParen)
            self.state = 1278
            self.match(VfrSyntaxParser.Comma)
            self.state = 1291
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.FLAGS:
                self.state = 1279
                self.match(VfrSyntaxParser.FLAGS)
                self.state = 1280
                self.match(VfrSyntaxParser.T__5)
                self.state = 1281
                self.flagsField()
                self.state = 1286
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==VfrSyntaxParser.T__6:
                    self.state = 1282
                    self.match(VfrSyntaxParser.T__6)
                    self.state = 1283
                    self.flagsField()
                    self.state = 1288
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1289
                self.match(VfrSyntaxParser.Comma)


            self.state = 1293
            self.vfrStatementExpression()
            self.state = 1294
            self.match(VfrSyntaxParser.EndIf)
            self.state = 1296
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
            if la_ == 1:
                self.state = 1295
                self.match(VfrSyntaxParser.Semicolon)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementNoSubmitIfContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.NSIObj = CIfrNoSubmitIf()

        def NoSubmitIf(self):
            return self.getToken(VfrSyntaxParser.NoSubmitIf, 0)

        def Prompt(self):
            return self.getToken(VfrSyntaxParser.Prompt, 0)

        def StringToken(self):
            return self.getToken(VfrSyntaxParser.StringToken, 0)

        def OpenParen(self):
            return self.getToken(VfrSyntaxParser.OpenParen, 0)

        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def CloseParen(self):
            return self.getToken(VfrSyntaxParser.CloseParen, 0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Comma)
            else:
                return self.getToken(VfrSyntaxParser.Comma, i)

        def vfrStatementExpression(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementExpressionContext,0)


        def EndIf(self):
            return self.getToken(VfrSyntaxParser.EndIf, 0)

        def FLAGS(self):
            return self.getToken(VfrSyntaxParser.FLAGS, 0)

        def flagsField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.FlagsFieldContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.FlagsFieldContext,i)


        def Semicolon(self):
            return self.getToken(VfrSyntaxParser.Semicolon, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementNoSubmitIf

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementNoSubmitIf" ):
                return visitor.visitVfrStatementNoSubmitIf(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementNoSubmitIf(self):

        localctx = VfrSyntaxParser.VfrStatementNoSubmitIfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_vfrStatementNoSubmitIf)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1298
            self.match(VfrSyntaxParser.NoSubmitIf)
            self.state = 1299
            self.match(VfrSyntaxParser.Prompt)
            self.state = 1300
            self.match(VfrSyntaxParser.T__5)
            self.state = 1301
            self.match(VfrSyntaxParser.StringToken)
            self.state = 1302
            self.match(VfrSyntaxParser.OpenParen)
            self.state = 1303
            self.match(VfrSyntaxParser.Number)
            self.state = 1304
            self.match(VfrSyntaxParser.CloseParen)
            self.state = 1305
            self.match(VfrSyntaxParser.Comma)
            self.state = 1318
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.FLAGS:
                self.state = 1306
                self.match(VfrSyntaxParser.FLAGS)
                self.state = 1307
                self.match(VfrSyntaxParser.T__5)
                self.state = 1308
                self.flagsField()
                self.state = 1313
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==VfrSyntaxParser.T__6:
                    self.state = 1309
                    self.match(VfrSyntaxParser.T__6)
                    self.state = 1310
                    self.flagsField()
                    self.state = 1315
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1316
                self.match(VfrSyntaxParser.Comma)


            self.state = 1320
            self.vfrStatementExpression()
            self.state = 1321
            self.match(VfrSyntaxParser.EndIf)
            self.state = 1323
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
            if la_ == 1:
                self.state = 1322
                self.match(VfrSyntaxParser.Semicolon)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementDisableIfQuestContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.DIObj = CIfrDisableIf()

        def DisableIf(self):
            return self.getToken(VfrSyntaxParser.DisableIf, 0)

        def vfrStatementExpression(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementExpressionContext,0)


        def Semicolon(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Semicolon)
            else:
                return self.getToken(VfrSyntaxParser.Semicolon, i)

        def vfrStatementQuestionOptionList(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementQuestionOptionListContext,0)


        def EndIf(self):
            return self.getToken(VfrSyntaxParser.EndIf, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementDisableIfQuest

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementDisableIfQuest" ):
                return visitor.visitVfrStatementDisableIfQuest(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementDisableIfQuest(self):

        localctx = VfrSyntaxParser.VfrStatementDisableIfQuestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_vfrStatementDisableIfQuest)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1325
            self.match(VfrSyntaxParser.DisableIf)
            self.state = 1326
            self.vfrStatementExpression()
            self.state = 1327
            self.match(VfrSyntaxParser.Semicolon)
            self.state = 1328
            self.vfrStatementQuestionOptionList()
            self.state = 1329
            self.match(VfrSyntaxParser.EndIf)
            self.state = 1331
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
            if la_ == 1:
                self.state = 1330
                self.match(VfrSyntaxParser.Semicolon)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementRefreshContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.RObj = CIfrRefresh()

        def Refresh(self):
            return self.getToken(VfrSyntaxParser.Refresh, 0)

        def Interval(self):
            return self.getToken(VfrSyntaxParser.Interval, 0)

        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementRefresh

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementRefresh" ):
                return visitor.visitVfrStatementRefresh(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementRefresh(self):

        localctx = VfrSyntaxParser.VfrStatementRefreshContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_vfrStatementRefresh)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1333
            self.match(VfrSyntaxParser.Refresh)
            self.state = 1334
            self.match(VfrSyntaxParser.Interval)
            self.state = 1335
            self.match(VfrSyntaxParser.T__5)
            self.state = 1336
            self.match(VfrSyntaxParser.Number)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementVarstoreDeviceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.VDObj = CIfrVarStoreDevice()

        def VarstoreDevice(self):
            return self.getToken(VfrSyntaxParser.VarstoreDevice, 0)

        def StringToken(self):
            return self.getToken(VfrSyntaxParser.StringToken, 0)

        def OpenParen(self):
            return self.getToken(VfrSyntaxParser.OpenParen, 0)

        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def CloseParen(self):
            return self.getToken(VfrSyntaxParser.CloseParen, 0)

        def Comma(self):
            return self.getToken(VfrSyntaxParser.Comma, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementVarstoreDevice

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementVarstoreDevice" ):
                return visitor.visitVfrStatementVarstoreDevice(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementVarstoreDevice(self):

        localctx = VfrSyntaxParser.VfrStatementVarstoreDeviceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_vfrStatementVarstoreDevice)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1338
            self.match(VfrSyntaxParser.VarstoreDevice)
            self.state = 1339
            self.match(VfrSyntaxParser.T__5)
            self.state = 1340
            self.match(VfrSyntaxParser.StringToken)
            self.state = 1341
            self.match(VfrSyntaxParser.OpenParen)
            self.state = 1342
            self.match(VfrSyntaxParser.Number)
            self.state = 1343
            self.match(VfrSyntaxParser.CloseParen)
            self.state = 1344
            self.match(VfrSyntaxParser.Comma)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementRefreshEventContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.RiObj = CIfrRefreshId()

        def RefreshGuid(self):
            return self.getToken(VfrSyntaxParser.RefreshGuid, 0)

        def guidDefinition(self):
            return self.getTypedRuleContext(VfrSyntaxParser.GuidDefinitionContext,0)


        def Comma(self):
            return self.getToken(VfrSyntaxParser.Comma, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementRefreshEvent

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementRefreshEvent" ):
                return visitor.visitVfrStatementRefreshEvent(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementRefreshEvent(self):

        localctx = VfrSyntaxParser.VfrStatementRefreshEventContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_vfrStatementRefreshEvent)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1346
            self.match(VfrSyntaxParser.RefreshGuid)
            self.state = 1347
            self.match(VfrSyntaxParser.T__5)
            self.state = 1348
            self.guidDefinition()
            self.state = 1349
            self.match(VfrSyntaxParser.Comma)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementWarningIfContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.WIObj = CIfrWarningIf()

        def WarningIf(self):
            return self.getToken(VfrSyntaxParser.WarningIf, 0)

        def Prompt(self):
            return self.getToken(VfrSyntaxParser.Prompt, 0)

        def StringToken(self):
            return self.getToken(VfrSyntaxParser.StringToken, 0)

        def OpenParen(self):
            return self.getToken(VfrSyntaxParser.OpenParen, 0)

        def Number(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Number)
            else:
                return self.getToken(VfrSyntaxParser.Number, i)

        def CloseParen(self):
            return self.getToken(VfrSyntaxParser.CloseParen, 0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Comma)
            else:
                return self.getToken(VfrSyntaxParser.Comma, i)

        def vfrStatementExpression(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementExpressionContext,0)


        def EndIf(self):
            return self.getToken(VfrSyntaxParser.EndIf, 0)

        def Timeout(self):
            return self.getToken(VfrSyntaxParser.Timeout, 0)

        def Semicolon(self):
            return self.getToken(VfrSyntaxParser.Semicolon, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementWarningIf

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementWarningIf" ):
                return visitor.visitVfrStatementWarningIf(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementWarningIf(self):

        localctx = VfrSyntaxParser.VfrStatementWarningIfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_vfrStatementWarningIf)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1351
            self.match(VfrSyntaxParser.WarningIf)
            self.state = 1352
            self.match(VfrSyntaxParser.Prompt)
            self.state = 1353
            self.match(VfrSyntaxParser.T__5)
            self.state = 1354
            self.match(VfrSyntaxParser.StringToken)
            self.state = 1355
            self.match(VfrSyntaxParser.OpenParen)
            self.state = 1356
            self.match(VfrSyntaxParser.Number)
            self.state = 1357
            self.match(VfrSyntaxParser.CloseParen)
            self.state = 1358
            self.match(VfrSyntaxParser.Comma)
            self.state = 1363
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.Timeout:
                self.state = 1359
                self.match(VfrSyntaxParser.Timeout)
                self.state = 1360
                self.match(VfrSyntaxParser.T__5)
                self.state = 1361
                self.match(VfrSyntaxParser.Number)
                self.state = 1362
                self.match(VfrSyntaxParser.Comma)


            self.state = 1365
            self.vfrStatementExpression()
            self.state = 1366
            self.match(VfrSyntaxParser.EndIf)
            self.state = 1368
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
            if la_ == 1:
                self.state = 1367
                self.match(VfrSyntaxParser.Semicolon)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementQuestionTagListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vfrStatementQuestionTag(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrStatementQuestionTagContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementQuestionTagContext,i)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementQuestionTagList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementQuestionTagList" ):
                return visitor.visitVfrStatementQuestionTagList(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementQuestionTagList(self):

        localctx = VfrSyntaxParser.VfrStatementQuestionTagListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_vfrStatementQuestionTagList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1373
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 119)) & ~0x3f) == 0 and ((1 << (_la - 119)) & ((1 << (VfrSyntaxParser.DisableIf - 119)) | (1 << (VfrSyntaxParser.InconsistentIf - 119)) | (1 << (VfrSyntaxParser.WarningIf - 119)) | (1 << (VfrSyntaxParser.NoSubmitIf - 119)) | (1 << (VfrSyntaxParser.Image - 119)) | (1 << (VfrSyntaxParser.Locked - 119)) | (1 << (VfrSyntaxParser.Refresh - 119)) | (1 << (VfrSyntaxParser.VarstoreDevice - 119)) | (1 << (VfrSyntaxParser.GuidOp - 119)))) != 0) or _la==VfrSyntaxParser.RefreshGuid:
                self.state = 1370
                self.vfrStatementQuestionTag()
                self.state = 1375
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementQuestionOptionTagContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vfrStatementSuppressIfQuest(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementSuppressIfQuestContext,0)


        def vfrStatementValue(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementValueContext,0)


        def vfrStatementDefault(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementDefaultContext,0)


        def vfrStatementOptions(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementOptionsContext,0)


        def vfrStatementRead(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementReadContext,0)


        def vfrStatementWrite(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementWriteContext,0)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementQuestionOptionTag

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementQuestionOptionTag" ):
                return visitor.visitVfrStatementQuestionOptionTag(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementQuestionOptionTag(self):

        localctx = VfrSyntaxParser.VfrStatementQuestionOptionTagContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_vfrStatementQuestionOptionTag)
        try:
            self.state = 1382
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VfrSyntaxParser.SuppressIf]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1376
                self.vfrStatementSuppressIfQuest()
                pass
            elif token in [VfrSyntaxParser.Value]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1377
                self.vfrStatementValue()
                pass
            elif token in [VfrSyntaxParser.Default]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1378
                self.vfrStatementDefault()
                pass
            elif token in [VfrSyntaxParser.Option]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1379
                self.vfrStatementOptions()
                pass
            elif token in [VfrSyntaxParser.Read]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1380
                self.vfrStatementRead()
                pass
            elif token in [VfrSyntaxParser.Write]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1381
                self.vfrStatementWrite()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementSuppressIfQuestContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.SIObj = CIfrSuppressIf()

        def SuppressIf(self):
            return self.getToken(VfrSyntaxParser.SuppressIf, 0)

        def vfrStatementExpression(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementExpressionContext,0)


        def Semicolon(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Semicolon)
            else:
                return self.getToken(VfrSyntaxParser.Semicolon, i)

        def vfrStatementQuestionOptionList(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementQuestionOptionListContext,0)


        def EndIf(self):
            return self.getToken(VfrSyntaxParser.EndIf, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementSuppressIfQuest

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementSuppressIfQuest" ):
                return visitor.visitVfrStatementSuppressIfQuest(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementSuppressIfQuest(self):

        localctx = VfrSyntaxParser.VfrStatementSuppressIfQuestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_vfrStatementSuppressIfQuest)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1384
            self.match(VfrSyntaxParser.SuppressIf)
            self.state = 1385
            self.vfrStatementExpression()
            self.state = 1386
            self.match(VfrSyntaxParser.Semicolon)
            self.state = 1387
            self.vfrStatementQuestionOptionList()
            self.state = 1388
            self.match(VfrSyntaxParser.EndIf)
            self.state = 1390
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
            if la_ == 1:
                self.state = 1389
                self.match(VfrSyntaxParser.Semicolon)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FlagsFieldContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def InteractiveFlag(self):
            return self.getToken(VfrSyntaxParser.InteractiveFlag, 0)

        def ManufacturingFlag(self):
            return self.getToken(VfrSyntaxParser.ManufacturingFlag, 0)

        def DefaultFlag(self):
            return self.getToken(VfrSyntaxParser.DefaultFlag, 0)

        def ResetRequiredFlag(self):
            return self.getToken(VfrSyntaxParser.ResetRequiredFlag, 0)

        def ReconnectRequiredFlag(self):
            return self.getToken(VfrSyntaxParser.ReconnectRequiredFlag, 0)

        def NVAccessFlag(self):
            return self.getToken(VfrSyntaxParser.NVAccessFlag, 0)

        def LateCheckFlag(self):
            return self.getToken(VfrSyntaxParser.LateCheckFlag, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_flagsField

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFlagsField" ):
                return visitor.visitFlagsField(self)
            else:
                return visitor.visitChildren(self)




    def flagsField(self):

        localctx = VfrSyntaxParser.FlagsFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_flagsField)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1392
            _la = self._input.LA(1)
            if not(((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (VfrSyntaxParser.DefaultFlag - 128)) | (1 << (VfrSyntaxParser.ManufacturingFlag - 128)) | (1 << (VfrSyntaxParser.InteractiveFlag - 128)) | (1 << (VfrSyntaxParser.NVAccessFlag - 128)) | (1 << (VfrSyntaxParser.ResetRequiredFlag - 128)) | (1 << (VfrSyntaxParser.ReconnectRequiredFlag - 128)) | (1 << (VfrSyntaxParser.LateCheckFlag - 128)))) != 0) or _la==VfrSyntaxParser.Number):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementDefaultContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.DObj = None

        def Default(self):
            return self.getToken(VfrSyntaxParser.Default, 0)

        def vfrStatementValue(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementValueContext,0)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Comma)
            else:
                return self.getToken(VfrSyntaxParser.Comma, i)

        def vfrConstantValueField(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrConstantValueFieldContext,0)


        def DefaultStore(self):
            return self.getToken(VfrSyntaxParser.DefaultStore, 0)

        def StringIdentifier(self):
            return self.getToken(VfrSyntaxParser.StringIdentifier, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementDefault

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementDefault" ):
                return visitor.visitVfrStatementDefault(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementDefault(self):

        localctx = VfrSyntaxParser.VfrStatementDefaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_vfrStatementDefault)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1394
            self.match(VfrSyntaxParser.Default)

            self.state = 1402
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VfrSyntaxParser.Value]:
                self.state = 1395
                self.vfrStatementValue()
                self.state = 1396
                self.match(VfrSyntaxParser.Comma)
                pass
            elif token in [VfrSyntaxParser.T__5]:
                self.state = 1398
                self.match(VfrSyntaxParser.T__5)
                self.state = 1399
                self.vfrConstantValueField()
                self.state = 1400
                self.match(VfrSyntaxParser.Comma)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1408
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.DefaultStore:
                self.state = 1404
                self.match(VfrSyntaxParser.DefaultStore)
                self.state = 1405
                self.match(VfrSyntaxParser.T__5)
                self.state = 1406
                self.match(VfrSyntaxParser.StringIdentifier)
                self.state = 1407
                self.match(VfrSyntaxParser.Comma)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementValueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.VObj = CIfrValue()
            self.LineNum = 0

        def Value(self):
            return self.getToken(VfrSyntaxParser.Value, 0)

        def vfrStatementExpression(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementExpressionContext,0)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementValue

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementValue" ):
                return visitor.visitVfrStatementValue(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementValue(self):

        localctx = VfrSyntaxParser.VfrStatementValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_vfrStatementValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1410
            self.match(VfrSyntaxParser.Value)
            self.state = 1411
            self.match(VfrSyntaxParser.T__5)
            self.state = 1412
            self.vfrStatementExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementOptionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vfrStatementOneOfOption(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementOneOfOptionContext,0)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementOptions

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementOptions" ):
                return visitor.visitVfrStatementOptions(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementOptions(self):

        localctx = VfrSyntaxParser.VfrStatementOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_vfrStatementOptions)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1414
            self.vfrStatementOneOfOption()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementOneOfOptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Option(self):
            return self.getToken(VfrSyntaxParser.Option, 0)

        def Text(self):
            return self.getToken(VfrSyntaxParser.Text, 0)

        def getStringId(self):
            return self.getTypedRuleContext(VfrSyntaxParser.GetStringIdContext,0)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Comma)
            else:
                return self.getToken(VfrSyntaxParser.Comma, i)

        def Value(self):
            return self.getToken(VfrSyntaxParser.Value, 0)

        def vfrConstantValueField(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrConstantValueFieldContext,0)


        def FLAGS(self):
            return self.getToken(VfrSyntaxParser.FLAGS, 0)

        def vfrOneOfOptionFlags(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrOneOfOptionFlagsContext,0)


        def Semicolon(self):
            return self.getToken(VfrSyntaxParser.Semicolon, 0)

        def vfrImageTag(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrImageTagContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrImageTagContext,i)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementOneOfOption

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementOneOfOption" ):
                return visitor.visitVfrStatementOneOfOption(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementOneOfOption(self):

        localctx = VfrSyntaxParser.VfrStatementOneOfOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_vfrStatementOneOfOption)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1416
            self.match(VfrSyntaxParser.Option)
            self.state = 1417
            self.match(VfrSyntaxParser.Text)
            self.state = 1418
            self.match(VfrSyntaxParser.T__5)
            self.state = 1419
            self.getStringId()
            self.state = 1420
            self.match(VfrSyntaxParser.Comma)
            self.state = 1421
            self.match(VfrSyntaxParser.Value)
            self.state = 1422
            self.match(VfrSyntaxParser.T__5)
            self.state = 1423
            self.vfrConstantValueField()
            self.state = 1424
            self.match(VfrSyntaxParser.Comma)
            self.state = 1425
            self.match(VfrSyntaxParser.FLAGS)
            self.state = 1426
            self.match(VfrSyntaxParser.T__5)
            self.state = 1427
            self.vfrOneOfOptionFlags()
            self.state = 1432
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==VfrSyntaxParser.Comma:
                self.state = 1428
                self.match(VfrSyntaxParser.Comma)
                self.state = 1429
                self.vfrImageTag()
                self.state = 1434
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1435
            self.match(VfrSyntaxParser.Semicolon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrOneOfOptionFlagsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oneofoptionFlagsField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.OneofoptionFlagsFieldContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.OneofoptionFlagsFieldContext,i)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrOneOfOptionFlags

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrOneOfOptionFlags" ):
                return visitor.visitVfrOneOfOptionFlags(self)
            else:
                return visitor.visitChildren(self)




    def vfrOneOfOptionFlags(self):

        localctx = VfrSyntaxParser.VfrOneOfOptionFlagsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_vfrOneOfOptionFlags)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1437
            self.oneofoptionFlagsField()
            self.state = 1442
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==VfrSyntaxParser.T__6:
                self.state = 1438
                self.match(VfrSyntaxParser.T__6)
                self.state = 1439
                self.oneofoptionFlagsField()
                self.state = 1444
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OneofoptionFlagsFieldContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def InteractiveFlag(self):
            return self.getToken(VfrSyntaxParser.InteractiveFlag, 0)

        def ResetRequiredFlag(self):
            return self.getToken(VfrSyntaxParser.ResetRequiredFlag, 0)

        def RestStyleFlag(self):
            return self.getToken(VfrSyntaxParser.RestStyleFlag, 0)

        def ReconnectRequiredFlag(self):
            return self.getToken(VfrSyntaxParser.ReconnectRequiredFlag, 0)

        def ManufacturingFlag(self):
            return self.getToken(VfrSyntaxParser.ManufacturingFlag, 0)

        def DefaultFlag(self):
            return self.getToken(VfrSyntaxParser.DefaultFlag, 0)

        def NVAccessFlag(self):
            return self.getToken(VfrSyntaxParser.NVAccessFlag, 0)

        def LateCheckFlag(self):
            return self.getToken(VfrSyntaxParser.LateCheckFlag, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_oneofoptionFlagsField

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOneofoptionFlagsField" ):
                return visitor.visitOneofoptionFlagsField(self)
            else:
                return visitor.visitChildren(self)




    def oneofoptionFlagsField(self):

        localctx = VfrSyntaxParser.OneofoptionFlagsFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_oneofoptionFlagsField)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1445
            _la = self._input.LA(1)
            if not(_la==VfrSyntaxParser.T__9 or _la==VfrSyntaxParser.T__10 or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (VfrSyntaxParser.DefaultFlag - 128)) | (1 << (VfrSyntaxParser.ManufacturingFlag - 128)) | (1 << (VfrSyntaxParser.InteractiveFlag - 128)) | (1 << (VfrSyntaxParser.NVAccessFlag - 128)) | (1 << (VfrSyntaxParser.ResetRequiredFlag - 128)) | (1 << (VfrSyntaxParser.ReconnectRequiredFlag - 128)) | (1 << (VfrSyntaxParser.LateCheckFlag - 128)) | (1 << (VfrSyntaxParser.RestStyleFlag - 128)))) != 0) or _la==VfrSyntaxParser.Number):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementReadContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.RObj = CIfrRead()

        def Read(self):
            return self.getToken(VfrSyntaxParser.Read, 0)

        def vfrStatementExpression(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementExpressionContext,0)


        def Semicolon(self):
            return self.getToken(VfrSyntaxParser.Semicolon, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementRead

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementRead" ):
                return visitor.visitVfrStatementRead(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementRead(self):

        localctx = VfrSyntaxParser.VfrStatementReadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_vfrStatementRead)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1447
            self.match(VfrSyntaxParser.Read)
            self.state = 1448
            self.vfrStatementExpression()
            self.state = 1449
            self.match(VfrSyntaxParser.Semicolon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementWriteContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.WObj = CIfrWrite()

        def Write(self):
            return self.getToken(VfrSyntaxParser.Write, 0)

        def vfrStatementExpression(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementExpressionContext,0)


        def Semicolon(self):
            return self.getToken(VfrSyntaxParser.Semicolon, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementWrite

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementWrite" ):
                return visitor.visitVfrStatementWrite(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementWrite(self):

        localctx = VfrSyntaxParser.VfrStatementWriteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_vfrStatementWrite)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1451
            self.match(VfrSyntaxParser.Write)
            self.state = 1452
            self.vfrStatementExpression()
            self.state = 1453
            self.match(VfrSyntaxParser.Semicolon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementQuestionOptionListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vfrStatementQuestionTag(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrStatementQuestionTagContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementQuestionTagContext,i)


        def vfrStatementQuestionOptionTag(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrStatementQuestionOptionTagContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementQuestionOptionTagContext,i)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementQuestionOptionList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementQuestionOptionList" ):
                return visitor.visitVfrStatementQuestionOptionList(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementQuestionOptionList(self):

        localctx = VfrSyntaxParser.VfrStatementQuestionOptionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_vfrStatementQuestionOptionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1459
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & ((1 << (VfrSyntaxParser.Option - 74)) | (1 << (VfrSyntaxParser.Default - 74)) | (1 << (VfrSyntaxParser.SuppressIf - 74)) | (1 << (VfrSyntaxParser.DisableIf - 74)) | (1 << (VfrSyntaxParser.InconsistentIf - 74)) | (1 << (VfrSyntaxParser.WarningIf - 74)) | (1 << (VfrSyntaxParser.NoSubmitIf - 74)))) != 0) or ((((_la - 157)) & ~0x3f) == 0 and ((1 << (_la - 157)) & ((1 << (VfrSyntaxParser.Image - 157)) | (1 << (VfrSyntaxParser.Locked - 157)) | (1 << (VfrSyntaxParser.Value - 157)) | (1 << (VfrSyntaxParser.Read - 157)) | (1 << (VfrSyntaxParser.Write - 157)) | (1 << (VfrSyntaxParser.Refresh - 157)) | (1 << (VfrSyntaxParser.VarstoreDevice - 157)) | (1 << (VfrSyntaxParser.GuidOp - 157)))) != 0) or _la==VfrSyntaxParser.RefreshGuid:
                self.state = 1457
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VfrSyntaxParser.DisableIf, VfrSyntaxParser.InconsistentIf, VfrSyntaxParser.WarningIf, VfrSyntaxParser.NoSubmitIf, VfrSyntaxParser.Image, VfrSyntaxParser.Locked, VfrSyntaxParser.Refresh, VfrSyntaxParser.VarstoreDevice, VfrSyntaxParser.GuidOp, VfrSyntaxParser.RefreshGuid]:
                    self.state = 1455
                    self.vfrStatementQuestionTag()
                    pass
                elif token in [VfrSyntaxParser.Option, VfrSyntaxParser.Default, VfrSyntaxParser.SuppressIf, VfrSyntaxParser.Value, VfrSyntaxParser.Read, VfrSyntaxParser.Write]:
                    self.state = 1456
                    self.vfrStatementQuestionOptionTag()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1461
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementBooleanTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vfrStatementCheckBox(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementCheckBoxContext,0)


        def vfrStatementAction(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementActionContext,0)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementBooleanType

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementBooleanType" ):
                return visitor.visitVfrStatementBooleanType(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementBooleanType(self):

        localctx = VfrSyntaxParser.VfrStatementBooleanTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_vfrStatementBooleanType)
        try:
            self.state = 1464
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VfrSyntaxParser.CheckBox]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1462
                self.vfrStatementCheckBox()
                pass
            elif token in [VfrSyntaxParser.Action]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1463
                self.vfrStatementAction()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementCheckBoxContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.OpObj = CIfrCheckBox()
            self.BaseInfo = EFI_VARSTORE_INFO()
            self.QId = EFI_QUESTION_ID_INVALID

        def CheckBox(self):
            return self.getToken(VfrSyntaxParser.CheckBox, 0)

        def vfrQuestionBaseInfo(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrQuestionBaseInfoContext,0)


        def vfrStatementHeader(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementHeaderContext,0)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Comma)
            else:
                return self.getToken(VfrSyntaxParser.Comma, i)

        def vfrStatementQuestionOptionList(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementQuestionOptionListContext,0)


        def EndCheckBox(self):
            return self.getToken(VfrSyntaxParser.EndCheckBox, 0)

        def Semicolon(self):
            return self.getToken(VfrSyntaxParser.Semicolon, 0)

        def FLAGS(self):
            return self.getToken(VfrSyntaxParser.FLAGS, 0)

        def vfrCheckBoxFlags(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrCheckBoxFlagsContext,0)


        def Key(self):
            return self.getToken(VfrSyntaxParser.Key, 0)

        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementCheckBox

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementCheckBox" ):
                return visitor.visitVfrStatementCheckBox(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementCheckBox(self):

        localctx = VfrSyntaxParser.VfrStatementCheckBoxContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_vfrStatementCheckBox)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1466
            self.match(VfrSyntaxParser.CheckBox)
            self.state = 1467
            self.vfrQuestionBaseInfo(localctx.OpObj, EFI_QUESION_TYPE.QUESTION_NORMAL)
            self.state = 1468
            self.vfrStatementHeader(localctx.OpObj)
            self.state = 1469
            self.match(VfrSyntaxParser.Comma)
            self.state = 1475
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.FLAGS:
                self.state = 1470
                self.match(VfrSyntaxParser.FLAGS)
                self.state = 1471
                self.match(VfrSyntaxParser.T__5)
                self.state = 1472
                self.vfrCheckBoxFlags()
                self.state = 1473
                self.match(VfrSyntaxParser.Comma)


            self.state = 1481
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.Key:
                self.state = 1477
                self.match(VfrSyntaxParser.Key)
                self.state = 1478
                self.match(VfrSyntaxParser.T__5)
                self.state = 1479
                self.match(VfrSyntaxParser.Number)
                self.state = 1480
                self.match(VfrSyntaxParser.Comma)


            self.state = 1483
            self.vfrStatementQuestionOptionList()
            self.state = 1484
            self.match(VfrSyntaxParser.EndCheckBox)
            self.state = 1485
            self.match(VfrSyntaxParser.Semicolon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrCheckBoxFlagsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.LFlags = 0
            self.HFlags = 0

        def checkboxFlagsField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.CheckboxFlagsFieldContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.CheckboxFlagsFieldContext,i)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrCheckBoxFlags

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrCheckBoxFlags" ):
                return visitor.visitVfrCheckBoxFlags(self)
            else:
                return visitor.visitChildren(self)




    def vfrCheckBoxFlags(self):

        localctx = VfrSyntaxParser.VfrCheckBoxFlagsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_vfrCheckBoxFlags)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1487
            self.checkboxFlagsField()
            self.state = 1492
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==VfrSyntaxParser.T__6:
                self.state = 1488
                self.match(VfrSyntaxParser.T__6)
                self.state = 1489
                self.checkboxFlagsField()
                self.state = 1494
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CheckboxFlagsFieldContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.LFlag = 0
            self.HFlag = 0

        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def DefaultFlag(self):
            return self.getToken(VfrSyntaxParser.DefaultFlag, 0)

        def ManufacturingFlag(self):
            return self.getToken(VfrSyntaxParser.ManufacturingFlag, 0)

        def CheckBoxDefaultFlag(self):
            return self.getToken(VfrSyntaxParser.CheckBoxDefaultFlag, 0)

        def CheckBoxDefaultMfgFlag(self):
            return self.getToken(VfrSyntaxParser.CheckBoxDefaultMfgFlag, 0)

        def questionheaderFlagsField(self):
            return self.getTypedRuleContext(VfrSyntaxParser.QuestionheaderFlagsFieldContext,0)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_checkboxFlagsField

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCheckboxFlagsField" ):
                return visitor.visitCheckboxFlagsField(self)
            else:
                return visitor.visitChildren(self)




    def checkboxFlagsField(self):

        localctx = VfrSyntaxParser.CheckboxFlagsFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_checkboxFlagsField)
        try:
            self.state = 1501
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VfrSyntaxParser.Number]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1495
                self.match(VfrSyntaxParser.Number)
                pass
            elif token in [VfrSyntaxParser.DefaultFlag]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1496
                self.match(VfrSyntaxParser.DefaultFlag)
                pass
            elif token in [VfrSyntaxParser.ManufacturingFlag]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1497
                self.match(VfrSyntaxParser.ManufacturingFlag)
                pass
            elif token in [VfrSyntaxParser.CheckBoxDefaultFlag]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1498
                self.match(VfrSyntaxParser.CheckBoxDefaultFlag)
                pass
            elif token in [VfrSyntaxParser.CheckBoxDefaultMfgFlag]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1499
                self.match(VfrSyntaxParser.CheckBoxDefaultMfgFlag)
                pass
            elif token in [VfrSyntaxParser.InteractiveFlag, VfrSyntaxParser.NVAccessFlag, VfrSyntaxParser.ResetRequiredFlag, VfrSyntaxParser.ReconnectRequiredFlag, VfrSyntaxParser.LateCheckFlag, VfrSyntaxParser.ReadOnlyFlag, VfrSyntaxParser.OptionOnlyFlag, VfrSyntaxParser.RestStyleFlag]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1500
                self.questionheaderFlagsField()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementActionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.OpObj = CIfrAction()
            self.QType = EFI_QUESION_TYPE.QUESTION_NORMAL

        def Action(self):
            return self.getToken(VfrSyntaxParser.Action, 0)

        def vfrQuestionHeader(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrQuestionHeaderContext,0)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Comma)
            else:
                return self.getToken(VfrSyntaxParser.Comma, i)

        def Config(self):
            return self.getToken(VfrSyntaxParser.Config, 0)

        def StringToken(self):
            return self.getToken(VfrSyntaxParser.StringToken, 0)

        def OpenParen(self):
            return self.getToken(VfrSyntaxParser.OpenParen, 0)

        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def CloseParen(self):
            return self.getToken(VfrSyntaxParser.CloseParen, 0)

        def vfrStatementQuestionTagList(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementQuestionTagListContext,0)


        def EndAction(self):
            return self.getToken(VfrSyntaxParser.EndAction, 0)

        def Semicolon(self):
            return self.getToken(VfrSyntaxParser.Semicolon, 0)

        def FLAGS(self):
            return self.getToken(VfrSyntaxParser.FLAGS, 0)

        def vfrActionFlags(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrActionFlagsContext,0)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementAction

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementAction" ):
                return visitor.visitVfrStatementAction(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementAction(self):

        localctx = VfrSyntaxParser.VfrStatementActionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_vfrStatementAction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1503
            self.match(VfrSyntaxParser.Action)
            self.state = 1504
            self.vfrQuestionHeader(localctx.OpObj, localctx.QType)
            self.state = 1505
            self.match(VfrSyntaxParser.Comma)
            self.state = 1511
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.FLAGS:
                self.state = 1506
                self.match(VfrSyntaxParser.FLAGS)
                self.state = 1507
                self.match(VfrSyntaxParser.T__5)
                self.state = 1508
                self.vfrActionFlags()
                self.state = 1509
                self.match(VfrSyntaxParser.Comma)


            self.state = 1513
            self.match(VfrSyntaxParser.Config)
            self.state = 1514
            self.match(VfrSyntaxParser.T__5)
            self.state = 1515
            self.match(VfrSyntaxParser.StringToken)
            self.state = 1516
            self.match(VfrSyntaxParser.OpenParen)
            self.state = 1517
            self.match(VfrSyntaxParser.Number)
            self.state = 1518
            self.match(VfrSyntaxParser.CloseParen)
            self.state = 1519
            self.match(VfrSyntaxParser.Comma)
            self.state = 1520
            self.vfrStatementQuestionTagList()
            self.state = 1521
            self.match(VfrSyntaxParser.EndAction)
            self.state = 1522
            self.match(VfrSyntaxParser.Semicolon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrActionFlagsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.HFlags = 0
            self.LineNum = 0

        def actionFlagsField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.ActionFlagsFieldContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.ActionFlagsFieldContext,i)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrActionFlags

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrActionFlags" ):
                return visitor.visitVfrActionFlags(self)
            else:
                return visitor.visitChildren(self)




    def vfrActionFlags(self):

        localctx = VfrSyntaxParser.VfrActionFlagsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_vfrActionFlags)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1524
            self.actionFlagsField()
            self.state = 1529
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==VfrSyntaxParser.T__6:
                self.state = 1525
                self.match(VfrSyntaxParser.T__6)
                self.state = 1526
                self.actionFlagsField()
                self.state = 1531
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ActionFlagsFieldContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.HFlag = 0

        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def questionheaderFlagsField(self):
            return self.getTypedRuleContext(VfrSyntaxParser.QuestionheaderFlagsFieldContext,0)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_actionFlagsField

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitActionFlagsField" ):
                return visitor.visitActionFlagsField(self)
            else:
                return visitor.visitChildren(self)




    def actionFlagsField(self):

        localctx = VfrSyntaxParser.ActionFlagsFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_actionFlagsField)
        try:
            self.state = 1534
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VfrSyntaxParser.Number]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1532
                self.match(VfrSyntaxParser.Number)
                pass
            elif token in [VfrSyntaxParser.InteractiveFlag, VfrSyntaxParser.NVAccessFlag, VfrSyntaxParser.ResetRequiredFlag, VfrSyntaxParser.ReconnectRequiredFlag, VfrSyntaxParser.LateCheckFlag, VfrSyntaxParser.ReadOnlyFlag, VfrSyntaxParser.OptionOnlyFlag, VfrSyntaxParser.RestStyleFlag]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1533
                self.questionheaderFlagsField()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementNumericTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vfrStatementNumeric(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementNumericContext,0)


        def vfrStatementOneOf(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementOneOfContext,0)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementNumericType

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementNumericType" ):
                return visitor.visitVfrStatementNumericType(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementNumericType(self):

        localctx = VfrSyntaxParser.VfrStatementNumericTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_vfrStatementNumericType)
        try:
            self.state = 1538
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VfrSyntaxParser.Numeric]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1536
                self.vfrStatementNumeric()
                pass
            elif token in [VfrSyntaxParser.OneOf]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1537
                self.vfrStatementOneOf()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementNumericContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.OpObj = CIfrNumeric()
            self.BaseInfo = None
            self.QId = None

        def Numeric(self):
            return self.getToken(VfrSyntaxParser.Numeric, 0)

        def vfrQuestionBaseInfo(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrQuestionBaseInfoContext,0)


        def vfrStatementHeader(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementHeaderContext,0)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Comma)
            else:
                return self.getToken(VfrSyntaxParser.Comma, i)

        def vfrSetMinMaxStep(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrSetMinMaxStepContext,0)


        def vfrStatementQuestionOptionList(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementQuestionOptionListContext,0)


        def EndNumeric(self):
            return self.getToken(VfrSyntaxParser.EndNumeric, 0)

        def Semicolon(self):
            return self.getToken(VfrSyntaxParser.Semicolon, 0)

        def FLAGS(self):
            return self.getToken(VfrSyntaxParser.FLAGS, 0)

        def vfrNumericFlags(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrNumericFlagsContext,0)


        def Key(self):
            return self.getToken(VfrSyntaxParser.Key, 0)

        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementNumeric

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementNumeric" ):
                return visitor.visitVfrStatementNumeric(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementNumeric(self):

        localctx = VfrSyntaxParser.VfrStatementNumericContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_vfrStatementNumeric)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1540
            self.match(VfrSyntaxParser.Numeric)
            self.state = 1541
            self.vfrQuestionBaseInfo(localctx.OpObj, None)
            self.state = 1542
            self.vfrStatementHeader(localctx.OpObj)
            self.state = 1543
            self.match(VfrSyntaxParser.Comma)
            self.state = 1549
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.FLAGS:
                self.state = 1544
                self.match(VfrSyntaxParser.FLAGS)
                self.state = 1545
                self.match(VfrSyntaxParser.T__5)
                self.state = 1546
                self.vfrNumericFlags()
                self.state = 1547
                self.match(VfrSyntaxParser.Comma)


            self.state = 1555
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.Key:
                self.state = 1551
                self.match(VfrSyntaxParser.Key)
                self.state = 1552
                self.match(VfrSyntaxParser.T__5)
                self.state = 1553
                self.match(VfrSyntaxParser.Number)
                self.state = 1554
                self.match(VfrSyntaxParser.Comma)


            self.state = 1557
            self.vfrSetMinMaxStep()
            self.state = 1558
            self.vfrStatementQuestionOptionList()
            self.state = 1559
            self.match(VfrSyntaxParser.EndNumeric)
            self.state = 1560
            self.match(VfrSyntaxParser.Semicolon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrSetMinMaxStepContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Minimum(self):
            return self.getToken(VfrSyntaxParser.Minimum, 0)

        def Number(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Number)
            else:
                return self.getToken(VfrSyntaxParser.Number, i)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Comma)
            else:
                return self.getToken(VfrSyntaxParser.Comma, i)

        def Maximum(self):
            return self.getToken(VfrSyntaxParser.Maximum, 0)

        def STEP(self):
            return self.getToken(VfrSyntaxParser.STEP, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrSetMinMaxStep

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrSetMinMaxStep" ):
                return visitor.visitVfrSetMinMaxStep(self)
            else:
                return visitor.visitChildren(self)




    def vfrSetMinMaxStep(self):

        localctx = VfrSyntaxParser.VfrSetMinMaxStepContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_vfrSetMinMaxStep)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1562
            self.match(VfrSyntaxParser.Minimum)
            self.state = 1563
            self.match(VfrSyntaxParser.T__5)
            self.state = 1564
            self.match(VfrSyntaxParser.Number)
            self.state = 1565
            self.match(VfrSyntaxParser.Comma)
            self.state = 1566
            self.match(VfrSyntaxParser.Maximum)
            self.state = 1567
            self.match(VfrSyntaxParser.T__5)
            self.state = 1568
            self.match(VfrSyntaxParser.Number)
            self.state = 1569
            self.match(VfrSyntaxParser.Comma)
            self.state = 1574
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.STEP:
                self.state = 1570
                self.match(VfrSyntaxParser.STEP)
                self.state = 1571
                self.match(VfrSyntaxParser.T__5)
                self.state = 1572
                self.match(VfrSyntaxParser.Number)
                self.state = 1573
                self.match(VfrSyntaxParser.Comma)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrNumericFlagsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numericFlagsField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.NumericFlagsFieldContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.NumericFlagsFieldContext,i)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrNumericFlags

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrNumericFlags" ):
                return visitor.visitVfrNumericFlags(self)
            else:
                return visitor.visitChildren(self)




    def vfrNumericFlags(self):

        localctx = VfrSyntaxParser.VfrNumericFlagsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_vfrNumericFlags)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1576
            self.numericFlagsField()
            self.state = 1581
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==VfrSyntaxParser.T__6:
                self.state = 1577
                self.match(VfrSyntaxParser.T__6)
                self.state = 1578
                self.numericFlagsField()
                self.state = 1583
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumericFlagsFieldContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def questionheaderFlagsField(self):
            return self.getTypedRuleContext(VfrSyntaxParser.QuestionheaderFlagsFieldContext,0)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_numericFlagsField

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumericFlagsField" ):
                return visitor.visitNumericFlagsField(self)
            else:
                return visitor.visitChildren(self)




    def numericFlagsField(self):

        localctx = VfrSyntaxParser.NumericFlagsFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_numericFlagsField)
        try:
            self.state = 1593
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VfrSyntaxParser.Number]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1584
                self.match(VfrSyntaxParser.Number)
                pass
            elif token in [VfrSyntaxParser.T__11]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1585
                self.match(VfrSyntaxParser.T__11)
                pass
            elif token in [VfrSyntaxParser.T__12]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1586
                self.match(VfrSyntaxParser.T__12)
                pass
            elif token in [VfrSyntaxParser.T__13]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1587
                self.match(VfrSyntaxParser.T__13)
                pass
            elif token in [VfrSyntaxParser.T__14]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1588
                self.match(VfrSyntaxParser.T__14)
                pass
            elif token in [VfrSyntaxParser.T__15]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1589
                self.match(VfrSyntaxParser.T__15)
                pass
            elif token in [VfrSyntaxParser.T__16]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1590
                self.match(VfrSyntaxParser.T__16)
                pass
            elif token in [VfrSyntaxParser.T__17]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1591
                self.match(VfrSyntaxParser.T__17)
                pass
            elif token in [VfrSyntaxParser.InteractiveFlag, VfrSyntaxParser.NVAccessFlag, VfrSyntaxParser.ResetRequiredFlag, VfrSyntaxParser.ReconnectRequiredFlag, VfrSyntaxParser.LateCheckFlag, VfrSyntaxParser.ReadOnlyFlag, VfrSyntaxParser.OptionOnlyFlag, VfrSyntaxParser.RestStyleFlag]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1592
                self.questionheaderFlagsField()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementOneOfContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.OpObj = CIfrOneOf()
            self.BaseInfo = None
            self.QId = None

        def OneOf(self):
            return self.getToken(VfrSyntaxParser.OneOf, 0)

        def vfrQuestionBaseInfo(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrQuestionBaseInfoContext,0)


        def vfrStatementHeader(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementHeaderContext,0)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Comma)
            else:
                return self.getToken(VfrSyntaxParser.Comma, i)

        def vfrStatementQuestionOptionList(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementQuestionOptionListContext,0)


        def EndOneOf(self):
            return self.getToken(VfrSyntaxParser.EndOneOf, 0)

        def Semicolon(self):
            return self.getToken(VfrSyntaxParser.Semicolon, 0)

        def FLAGS(self):
            return self.getToken(VfrSyntaxParser.FLAGS, 0)

        def vfrOneofFlagsField(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrOneofFlagsFieldContext,0)


        def vfrSetMinMaxStep(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrSetMinMaxStepContext,0)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementOneOf

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementOneOf" ):
                return visitor.visitVfrStatementOneOf(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementOneOf(self):

        localctx = VfrSyntaxParser.VfrStatementOneOfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_vfrStatementOneOf)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1595
            self.match(VfrSyntaxParser.OneOf)
            self.state = 1596
            self.vfrQuestionBaseInfo(localctx.OpObj, None)
            self.state = 1597
            self.vfrStatementHeader(localctx.OpObj)
            self.state = 1598
            self.match(VfrSyntaxParser.Comma)
            self.state = 1604
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.FLAGS:
                self.state = 1599
                self.match(VfrSyntaxParser.FLAGS)
                self.state = 1600
                self.match(VfrSyntaxParser.T__5)
                self.state = 1601
                self.vfrOneofFlagsField()
                self.state = 1602
                self.match(VfrSyntaxParser.Comma)


            self.state = 1607
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.Minimum:
                self.state = 1606
                self.vfrSetMinMaxStep()


            self.state = 1609
            self.vfrStatementQuestionOptionList()
            self.state = 1610
            self.match(VfrSyntaxParser.EndOneOf)
            self.state = 1611
            self.match(VfrSyntaxParser.Semicolon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrOneofFlagsFieldContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numericFlagsField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.NumericFlagsFieldContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.NumericFlagsFieldContext,i)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrOneofFlagsField

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrOneofFlagsField" ):
                return visitor.visitVfrOneofFlagsField(self)
            else:
                return visitor.visitChildren(self)




    def vfrOneofFlagsField(self):

        localctx = VfrSyntaxParser.VfrOneofFlagsFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_vfrOneofFlagsField)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1613
            self.numericFlagsField()
            self.state = 1618
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==VfrSyntaxParser.T__6:
                self.state = 1614
                self.match(VfrSyntaxParser.T__6)
                self.state = 1615
                self.numericFlagsField()
                self.state = 1620
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementStringTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vfrStatementString(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementStringContext,0)


        def vfrStatementPassword(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementPasswordContext,0)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementStringType

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementStringType" ):
                return visitor.visitVfrStatementStringType(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementStringType(self):

        localctx = VfrSyntaxParser.VfrStatementStringTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_vfrStatementStringType)
        try:
            self.state = 1623
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VfrSyntaxParser.String]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1621
                self.vfrStatementString()
                pass
            elif token in [VfrSyntaxParser.Password]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1622
                self.vfrStatementPassword()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementStringContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.OpObj = CIfrString()
            self.QType = EFI_QUESION_TYPE.QUESTION_NORMAL

        def String(self):
            return self.getToken(VfrSyntaxParser.String, 0)

        def vfrQuestionHeader(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrQuestionHeaderContext,0)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Comma)
            else:
                return self.getToken(VfrSyntaxParser.Comma, i)

        def MinSize(self):
            return self.getToken(VfrSyntaxParser.MinSize, 0)

        def Number(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Number)
            else:
                return self.getToken(VfrSyntaxParser.Number, i)

        def MaxSize(self):
            return self.getToken(VfrSyntaxParser.MaxSize, 0)

        def vfrStatementQuestionOptionList(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementQuestionOptionListContext,0)


        def EndString(self):
            return self.getToken(VfrSyntaxParser.EndString, 0)

        def Semicolon(self):
            return self.getToken(VfrSyntaxParser.Semicolon, 0)

        def FLAGS(self):
            return self.getToken(VfrSyntaxParser.FLAGS, 0)

        def vfrStringFlagsField(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStringFlagsFieldContext,0)


        def Key(self):
            return self.getToken(VfrSyntaxParser.Key, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementString

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementString" ):
                return visitor.visitVfrStatementString(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementString(self):

        localctx = VfrSyntaxParser.VfrStatementStringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_vfrStatementString)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1625
            self.match(VfrSyntaxParser.String)
            self.state = 1626
            self.vfrQuestionHeader(localctx.OpObj, localctx.QType)
            self.state = 1627
            self.match(VfrSyntaxParser.Comma)
            self.state = 1633
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.FLAGS:
                self.state = 1628
                self.match(VfrSyntaxParser.FLAGS)
                self.state = 1629
                self.match(VfrSyntaxParser.T__5)
                self.state = 1630
                self.vfrStringFlagsField()
                self.state = 1631
                self.match(VfrSyntaxParser.Comma)


            self.state = 1639
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.Key:
                self.state = 1635
                self.match(VfrSyntaxParser.Key)
                self.state = 1636
                self.match(VfrSyntaxParser.T__5)
                self.state = 1637
                self.match(VfrSyntaxParser.Number)
                self.state = 1638
                self.match(VfrSyntaxParser.Comma)


            self.state = 1641
            self.match(VfrSyntaxParser.MinSize)
            self.state = 1642
            self.match(VfrSyntaxParser.T__5)
            self.state = 1643
            self.match(VfrSyntaxParser.Number)
            self.state = 1644
            self.match(VfrSyntaxParser.Comma)
            self.state = 1645
            self.match(VfrSyntaxParser.MaxSize)
            self.state = 1646
            self.match(VfrSyntaxParser.T__5)
            self.state = 1647
            self.match(VfrSyntaxParser.Number)
            self.state = 1648
            self.match(VfrSyntaxParser.Comma)
            self.state = 1649
            self.vfrStatementQuestionOptionList()
            self.state = 1650
            self.match(VfrSyntaxParser.EndString)
            self.state = 1651
            self.match(VfrSyntaxParser.Semicolon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStringFlagsFieldContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.HFlags = 0
            self.LFlags = 0
            self.LineNum = 0

        def stringFlagsField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.StringFlagsFieldContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.StringFlagsFieldContext,i)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStringFlagsField

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStringFlagsField" ):
                return visitor.visitVfrStringFlagsField(self)
            else:
                return visitor.visitChildren(self)




    def vfrStringFlagsField(self):

        localctx = VfrSyntaxParser.VfrStringFlagsFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_vfrStringFlagsField)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1653
            self.stringFlagsField()
            self.state = 1658
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==VfrSyntaxParser.T__6:
                self.state = 1654
                self.match(VfrSyntaxParser.T__6)
                self.state = 1655
                self.stringFlagsField()
                self.state = 1660
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringFlagsFieldContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.HFlag = 0
            self.LFlag = 0

        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def questionheaderFlagsField(self):
            return self.getTypedRuleContext(VfrSyntaxParser.QuestionheaderFlagsFieldContext,0)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_stringFlagsField

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringFlagsField" ):
                return visitor.visitStringFlagsField(self)
            else:
                return visitor.visitChildren(self)




    def stringFlagsField(self):

        localctx = VfrSyntaxParser.StringFlagsFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_stringFlagsField)
        try:
            self.state = 1664
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VfrSyntaxParser.Number]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1661
                self.match(VfrSyntaxParser.Number)
                pass
            elif token in [VfrSyntaxParser.T__18]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1662
                self.match(VfrSyntaxParser.T__18)
                pass
            elif token in [VfrSyntaxParser.InteractiveFlag, VfrSyntaxParser.NVAccessFlag, VfrSyntaxParser.ResetRequiredFlag, VfrSyntaxParser.ReconnectRequiredFlag, VfrSyntaxParser.LateCheckFlag, VfrSyntaxParser.ReadOnlyFlag, VfrSyntaxParser.OptionOnlyFlag, VfrSyntaxParser.RestStyleFlag]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1663
                self.questionheaderFlagsField()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementPasswordContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.OpObj = CIfrPassword()
            self.QType = EFI_QUESION_TYPE.QUESTION_NORMAL

        def Password(self):
            return self.getToken(VfrSyntaxParser.Password, 0)

        def vfrQuestionHeader(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrQuestionHeaderContext,0)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Comma)
            else:
                return self.getToken(VfrSyntaxParser.Comma, i)

        def MinSize(self):
            return self.getToken(VfrSyntaxParser.MinSize, 0)

        def Number(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Number)
            else:
                return self.getToken(VfrSyntaxParser.Number, i)

        def MaxSize(self):
            return self.getToken(VfrSyntaxParser.MaxSize, 0)

        def vfrStatementQuestionOptionList(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementQuestionOptionListContext,0)


        def EndPassword(self):
            return self.getToken(VfrSyntaxParser.EndPassword, 0)

        def Semicolon(self):
            return self.getToken(VfrSyntaxParser.Semicolon, 0)

        def FLAGS(self):
            return self.getToken(VfrSyntaxParser.FLAGS, 0)

        def vfrPasswordFlagsField(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrPasswordFlagsFieldContext,0)


        def Key(self):
            return self.getToken(VfrSyntaxParser.Key, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementPassword

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementPassword" ):
                return visitor.visitVfrStatementPassword(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementPassword(self):

        localctx = VfrSyntaxParser.VfrStatementPasswordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_vfrStatementPassword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1666
            self.match(VfrSyntaxParser.Password)
            self.state = 1667
            self.vfrQuestionHeader(localctx.OpObj, localctx.QType)
            self.state = 1668
            self.match(VfrSyntaxParser.Comma)
            self.state = 1674
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.FLAGS:
                self.state = 1669
                self.match(VfrSyntaxParser.FLAGS)
                self.state = 1670
                self.match(VfrSyntaxParser.T__5)
                self.state = 1671
                self.vfrPasswordFlagsField()
                self.state = 1672
                self.match(VfrSyntaxParser.Comma)


            self.state = 1680
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.Key:
                self.state = 1676
                self.match(VfrSyntaxParser.Key)
                self.state = 1677
                self.match(VfrSyntaxParser.T__5)
                self.state = 1678
                self.match(VfrSyntaxParser.Number)
                self.state = 1679
                self.match(VfrSyntaxParser.Comma)


            self.state = 1682
            self.match(VfrSyntaxParser.MinSize)
            self.state = 1683
            self.match(VfrSyntaxParser.T__5)
            self.state = 1684
            self.match(VfrSyntaxParser.Number)
            self.state = 1685
            self.match(VfrSyntaxParser.Comma)
            self.state = 1686
            self.match(VfrSyntaxParser.MaxSize)
            self.state = 1687
            self.match(VfrSyntaxParser.T__5)
            self.state = 1688
            self.match(VfrSyntaxParser.Number)
            self.state = 1689
            self.match(VfrSyntaxParser.Comma)
            self.state = 1690
            self.vfrStatementQuestionOptionList()
            self.state = 1691
            self.match(VfrSyntaxParser.EndPassword)
            self.state = 1692
            self.match(VfrSyntaxParser.Semicolon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrPasswordFlagsFieldContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.HFlags = 0
            self.LineNum = 0

        def passwordFlagsField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.PasswordFlagsFieldContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.PasswordFlagsFieldContext,i)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrPasswordFlagsField

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrPasswordFlagsField" ):
                return visitor.visitVfrPasswordFlagsField(self)
            else:
                return visitor.visitChildren(self)




    def vfrPasswordFlagsField(self):

        localctx = VfrSyntaxParser.VfrPasswordFlagsFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_vfrPasswordFlagsField)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1694
            self.passwordFlagsField()
            self.state = 1699
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==VfrSyntaxParser.T__6:
                self.state = 1695
                self.match(VfrSyntaxParser.T__6)
                self.state = 1696
                self.passwordFlagsField()
                self.state = 1701
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PasswordFlagsFieldContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.HFlag = 0

        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def questionheaderFlagsField(self):
            return self.getTypedRuleContext(VfrSyntaxParser.QuestionheaderFlagsFieldContext,0)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_passwordFlagsField

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPasswordFlagsField" ):
                return visitor.visitPasswordFlagsField(self)
            else:
                return visitor.visitChildren(self)




    def passwordFlagsField(self):

        localctx = VfrSyntaxParser.PasswordFlagsFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_passwordFlagsField)
        try:
            self.state = 1704
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VfrSyntaxParser.Number]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1702
                self.match(VfrSyntaxParser.Number)
                pass
            elif token in [VfrSyntaxParser.InteractiveFlag, VfrSyntaxParser.NVAccessFlag, VfrSyntaxParser.ResetRequiredFlag, VfrSyntaxParser.ReconnectRequiredFlag, VfrSyntaxParser.LateCheckFlag, VfrSyntaxParser.ReadOnlyFlag, VfrSyntaxParser.OptionOnlyFlag, VfrSyntaxParser.RestStyleFlag]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1703
                self.questionheaderFlagsField()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementOrderedListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.OpObj = CIfrOrderedList()
            self.QType = QType=EFI_QUESION_TYPE.QUESTION_NORMAL

        def OrderedList(self):
            return self.getToken(VfrSyntaxParser.OrderedList, 0)

        def vfrQuestionHeader(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrQuestionHeaderContext,0)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Comma)
            else:
                return self.getToken(VfrSyntaxParser.Comma, i)

        def vfrStatementQuestionOptionList(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementQuestionOptionListContext,0)


        def EndList(self):
            return self.getToken(VfrSyntaxParser.EndList, 0)

        def Semicolon(self):
            return self.getToken(VfrSyntaxParser.Semicolon, 0)

        def MaxContainers(self):
            return self.getToken(VfrSyntaxParser.MaxContainers, 0)

        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def FLAGS(self):
            return self.getToken(VfrSyntaxParser.FLAGS, 0)

        def vfrOrderedListFlags(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrOrderedListFlagsContext,0)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementOrderedList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementOrderedList" ):
                return visitor.visitVfrStatementOrderedList(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementOrderedList(self):

        localctx = VfrSyntaxParser.VfrStatementOrderedListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_vfrStatementOrderedList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1706
            self.match(VfrSyntaxParser.OrderedList)
            self.state = 1707
            self.vfrQuestionHeader(localctx.OpObj, localctx.QType)
            self.state = 1708
            self.match(VfrSyntaxParser.Comma)
            self.state = 1713
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.MaxContainers:
                self.state = 1709
                self.match(VfrSyntaxParser.MaxContainers)
                self.state = 1710
                self.match(VfrSyntaxParser.T__5)
                self.state = 1711
                self.match(VfrSyntaxParser.Number)
                self.state = 1712
                self.match(VfrSyntaxParser.Comma)


            self.state = 1720
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.FLAGS:
                self.state = 1715
                self.match(VfrSyntaxParser.FLAGS)
                self.state = 1716
                self.match(VfrSyntaxParser.T__5)
                self.state = 1717
                self.vfrOrderedListFlags()
                self.state = 1718
                self.match(VfrSyntaxParser.Comma)


            self.state = 1722
            self.vfrStatementQuestionOptionList()
            self.state = 1723
            self.match(VfrSyntaxParser.EndList)
            self.state = 1724
            self.match(VfrSyntaxParser.Semicolon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrOrderedListFlagsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.HFlags = 0
            self.LFlags = 0
            self.LineNum = 0

        def orderedlistFlagsField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.OrderedlistFlagsFieldContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.OrderedlistFlagsFieldContext,i)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrOrderedListFlags

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrOrderedListFlags" ):
                return visitor.visitVfrOrderedListFlags(self)
            else:
                return visitor.visitChildren(self)




    def vfrOrderedListFlags(self):

        localctx = VfrSyntaxParser.VfrOrderedListFlagsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_vfrOrderedListFlags)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1726
            self.orderedlistFlagsField()
            self.state = 1731
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==VfrSyntaxParser.T__6:
                self.state = 1727
                self.match(VfrSyntaxParser.T__6)
                self.state = 1728
                self.orderedlistFlagsField()
                self.state = 1733
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderedlistFlagsFieldContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.HFlag = 0
            self.LFlag = 0

        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def UniQueFlag(self):
            return self.getToken(VfrSyntaxParser.UniQueFlag, 0)

        def NoEmptyFlag(self):
            return self.getToken(VfrSyntaxParser.NoEmptyFlag, 0)

        def questionheaderFlagsField(self):
            return self.getTypedRuleContext(VfrSyntaxParser.QuestionheaderFlagsFieldContext,0)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_orderedlistFlagsField

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrderedlistFlagsField" ):
                return visitor.visitOrderedlistFlagsField(self)
            else:
                return visitor.visitChildren(self)




    def orderedlistFlagsField(self):

        localctx = VfrSyntaxParser.OrderedlistFlagsFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_orderedlistFlagsField)
        try:
            self.state = 1738
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VfrSyntaxParser.Number]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1734
                self.match(VfrSyntaxParser.Number)
                pass
            elif token in [VfrSyntaxParser.UniQueFlag]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1735
                self.match(VfrSyntaxParser.UniQueFlag)
                pass
            elif token in [VfrSyntaxParser.NoEmptyFlag]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1736
                self.match(VfrSyntaxParser.NoEmptyFlag)
                pass
            elif token in [VfrSyntaxParser.InteractiveFlag, VfrSyntaxParser.NVAccessFlag, VfrSyntaxParser.ResetRequiredFlag, VfrSyntaxParser.ReconnectRequiredFlag, VfrSyntaxParser.LateCheckFlag, VfrSyntaxParser.ReadOnlyFlag, VfrSyntaxParser.OptionOnlyFlag, VfrSyntaxParser.RestStyleFlag]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1737
                self.questionheaderFlagsField()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementDateContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.OpObj = CIfrDate()
            self.QType = EFI_QUESION_TYPE.QUESTION_DATE
            self.Val = EFI_IFR_TYPE_VALUE()

        def Date(self):
            return self.getToken(VfrSyntaxParser.Date, 0)

        def EndDate(self):
            return self.getToken(VfrSyntaxParser.EndDate, 0)

        def Semicolon(self):
            return self.getToken(VfrSyntaxParser.Semicolon, 0)

        def vfrQuestionHeader(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrQuestionHeaderContext,0)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Comma)
            else:
                return self.getToken(VfrSyntaxParser.Comma, i)

        def vfrStatementQuestionOptionList(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementQuestionOptionListContext,0)


        def Year(self):
            return self.getToken(VfrSyntaxParser.Year, 0)

        def VarId(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.VarId)
            else:
                return self.getToken(VfrSyntaxParser.VarId, i)

        def StringIdentifier(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.StringIdentifier)
            else:
                return self.getToken(VfrSyntaxParser.StringIdentifier, i)

        def Dot(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Dot)
            else:
                return self.getToken(VfrSyntaxParser.Dot, i)

        def Prompt(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Prompt)
            else:
                return self.getToken(VfrSyntaxParser.Prompt, i)

        def StringToken(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.StringToken)
            else:
                return self.getToken(VfrSyntaxParser.StringToken, i)

        def OpenParen(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.OpenParen)
            else:
                return self.getToken(VfrSyntaxParser.OpenParen, i)

        def Number(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Number)
            else:
                return self.getToken(VfrSyntaxParser.Number, i)

        def CloseParen(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.CloseParen)
            else:
                return self.getToken(VfrSyntaxParser.CloseParen, i)

        def Help(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Help)
            else:
                return self.getToken(VfrSyntaxParser.Help, i)

        def minMaxDateStepDefault(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.MinMaxDateStepDefaultContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.MinMaxDateStepDefaultContext,i)


        def Month(self):
            return self.getToken(VfrSyntaxParser.Month, 0)

        def Day(self):
            return self.getToken(VfrSyntaxParser.Day, 0)

        def FLAGS(self):
            return self.getToken(VfrSyntaxParser.FLAGS, 0)

        def vfrDateFlags(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrDateFlagsContext,0)


        def vfrStatementInconsistentIf(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrStatementInconsistentIfContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementInconsistentIfContext,i)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementDate

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementDate" ):
                return visitor.visitVfrStatementDate(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementDate(self):

        localctx = VfrSyntaxParser.VfrStatementDateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_vfrStatementDate)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1740
            self.match(VfrSyntaxParser.Date)
            self.state = 1831
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VfrSyntaxParser.Prompt, VfrSyntaxParser.Name, VfrSyntaxParser.VarId, VfrSyntaxParser.QuestionId]:
                self.state = 1741
                self.vfrQuestionHeader(localctx.OpObj, localctx.QType)
                self.state = 1742
                self.match(VfrSyntaxParser.Comma)
                self.state = 1748
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VfrSyntaxParser.FLAGS:
                    self.state = 1743
                    self.match(VfrSyntaxParser.FLAGS)
                    self.state = 1744
                    self.match(VfrSyntaxParser.T__5)
                    self.state = 1745
                    self.vfrDateFlags()
                    self.state = 1746
                    self.match(VfrSyntaxParser.Comma)


                self.state = 1750
                self.vfrStatementQuestionOptionList()
                pass
            elif token in [VfrSyntaxParser.Year]:
                self.state = 1752
                self.match(VfrSyntaxParser.Year)
                self.state = 1753
                self.match(VfrSyntaxParser.VarId)
                self.state = 1754
                self.match(VfrSyntaxParser.T__5)
                self.state = 1755
                self.match(VfrSyntaxParser.StringIdentifier)
                self.state = 1756
                self.match(VfrSyntaxParser.Dot)
                self.state = 1757
                self.match(VfrSyntaxParser.StringIdentifier)
                self.state = 1758
                self.match(VfrSyntaxParser.Comma)
                self.state = 1759
                self.match(VfrSyntaxParser.Prompt)
                self.state = 1760
                self.match(VfrSyntaxParser.T__5)
                self.state = 1761
                self.match(VfrSyntaxParser.StringToken)
                self.state = 1762
                self.match(VfrSyntaxParser.OpenParen)
                self.state = 1763
                self.match(VfrSyntaxParser.Number)
                self.state = 1764
                self.match(VfrSyntaxParser.CloseParen)
                self.state = 1765
                self.match(VfrSyntaxParser.Comma)
                self.state = 1766
                self.match(VfrSyntaxParser.Help)
                self.state = 1767
                self.match(VfrSyntaxParser.T__5)
                self.state = 1768
                self.match(VfrSyntaxParser.StringToken)
                self.state = 1769
                self.match(VfrSyntaxParser.OpenParen)
                self.state = 1770
                self.match(VfrSyntaxParser.Number)
                self.state = 1771
                self.match(VfrSyntaxParser.CloseParen)
                self.state = 1772
                self.match(VfrSyntaxParser.Comma)
                self.state = 1773
                self.minMaxDateStepDefault(Val.Date, 0)
                self.state = 1774
                self.match(VfrSyntaxParser.Month)
                self.state = 1775
                self.match(VfrSyntaxParser.VarId)
                self.state = 1776
                self.match(VfrSyntaxParser.T__5)
                self.state = 1777
                self.match(VfrSyntaxParser.StringIdentifier)
                self.state = 1778
                self.match(VfrSyntaxParser.Dot)
                self.state = 1779
                self.match(VfrSyntaxParser.StringIdentifier)
                self.state = 1780
                self.match(VfrSyntaxParser.Comma)
                self.state = 1781
                self.match(VfrSyntaxParser.Prompt)
                self.state = 1782
                self.match(VfrSyntaxParser.T__5)
                self.state = 1783
                self.match(VfrSyntaxParser.StringToken)
                self.state = 1784
                self.match(VfrSyntaxParser.OpenParen)
                self.state = 1785
                self.match(VfrSyntaxParser.Number)
                self.state = 1786
                self.match(VfrSyntaxParser.CloseParen)
                self.state = 1787
                self.match(VfrSyntaxParser.Comma)
                self.state = 1788
                self.match(VfrSyntaxParser.Help)
                self.state = 1789
                self.match(VfrSyntaxParser.T__5)
                self.state = 1790
                self.match(VfrSyntaxParser.StringToken)
                self.state = 1791
                self.match(VfrSyntaxParser.OpenParen)
                self.state = 1792
                self.match(VfrSyntaxParser.Number)
                self.state = 1793
                self.match(VfrSyntaxParser.CloseParen)
                self.state = 1794
                self.match(VfrSyntaxParser.Comma)
                self.state = 1795
                self.minMaxDateStepDefault(Val.Date, 1)
                self.state = 1796
                self.match(VfrSyntaxParser.Day)
                self.state = 1797
                self.match(VfrSyntaxParser.VarId)
                self.state = 1798
                self.match(VfrSyntaxParser.T__5)
                self.state = 1799
                self.match(VfrSyntaxParser.StringIdentifier)
                self.state = 1800
                self.match(VfrSyntaxParser.Dot)
                self.state = 1801
                self.match(VfrSyntaxParser.StringIdentifier)
                self.state = 1802
                self.match(VfrSyntaxParser.Comma)
                self.state = 1803
                self.match(VfrSyntaxParser.Prompt)
                self.state = 1804
                self.match(VfrSyntaxParser.T__5)
                self.state = 1805
                self.match(VfrSyntaxParser.StringToken)
                self.state = 1806
                self.match(VfrSyntaxParser.OpenParen)
                self.state = 1807
                self.match(VfrSyntaxParser.Number)
                self.state = 1808
                self.match(VfrSyntaxParser.CloseParen)
                self.state = 1809
                self.match(VfrSyntaxParser.Comma)
                self.state = 1810
                self.match(VfrSyntaxParser.Help)
                self.state = 1811
                self.match(VfrSyntaxParser.T__5)
                self.state = 1812
                self.match(VfrSyntaxParser.StringToken)
                self.state = 1813
                self.match(VfrSyntaxParser.OpenParen)
                self.state = 1814
                self.match(VfrSyntaxParser.Number)
                self.state = 1815
                self.match(VfrSyntaxParser.CloseParen)
                self.state = 1816
                self.match(VfrSyntaxParser.Comma)
                self.state = 1817
                self.minMaxDateStepDefault(Val.Date, 2)
                self.state = 1823
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VfrSyntaxParser.FLAGS:
                    self.state = 1818
                    self.match(VfrSyntaxParser.FLAGS)
                    self.state = 1819
                    self.match(VfrSyntaxParser.T__5)
                    self.state = 1820
                    self.vfrDateFlags()
                    self.state = 1821
                    self.match(VfrSyntaxParser.Comma)


                self.state = 1828
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==VfrSyntaxParser.InconsistentIf:
                    self.state = 1825
                    self.vfrStatementInconsistentIf()
                    self.state = 1830
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

            self.state = 1833
            self.match(VfrSyntaxParser.EndDate)
            self.state = 1834
            self.match(VfrSyntaxParser.Semicolon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MinMaxDateStepDefaultContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1, Date=None, KeyValue=None):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Date = None
            self.KeyValue = None
            self.Date = Date
            self.KeyValue = KeyValue

        def Minimum(self):
            return self.getToken(VfrSyntaxParser.Minimum, 0)

        def Number(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Number)
            else:
                return self.getToken(VfrSyntaxParser.Number, i)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Comma)
            else:
                return self.getToken(VfrSyntaxParser.Comma, i)

        def Maximum(self):
            return self.getToken(VfrSyntaxParser.Maximum, 0)

        def STEP(self):
            return self.getToken(VfrSyntaxParser.STEP, 0)

        def Default(self):
            return self.getToken(VfrSyntaxParser.Default, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_minMaxDateStepDefault

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMinMaxDateStepDefault" ):
                return visitor.visitMinMaxDateStepDefault(self)
            else:
                return visitor.visitChildren(self)




    def minMaxDateStepDefault(self, Date, KeyValue):

        localctx = VfrSyntaxParser.MinMaxDateStepDefaultContext(self, self._ctx, self.state, Date, KeyValue)
        self.enterRule(localctx, 222, self.RULE_minMaxDateStepDefault)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1836
            self.match(VfrSyntaxParser.Minimum)
            self.state = 1837
            self.match(VfrSyntaxParser.T__5)
            self.state = 1838
            self.match(VfrSyntaxParser.Number)
            self.state = 1839
            self.match(VfrSyntaxParser.Comma)
            self.state = 1840
            self.match(VfrSyntaxParser.Maximum)
            self.state = 1841
            self.match(VfrSyntaxParser.T__5)
            self.state = 1842
            self.match(VfrSyntaxParser.Number)
            self.state = 1843
            self.match(VfrSyntaxParser.Comma)
            self.state = 1848
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.STEP:
                self.state = 1844
                self.match(VfrSyntaxParser.STEP)
                self.state = 1845
                self.match(VfrSyntaxParser.T__5)
                self.state = 1846
                self.match(VfrSyntaxParser.Number)
                self.state = 1847
                self.match(VfrSyntaxParser.Comma)


            self.state = 1854
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.Default:
                self.state = 1850
                self.match(VfrSyntaxParser.Default)
                self.state = 1851
                self.match(VfrSyntaxParser.T__5)
                self.state = 1852
                self.match(VfrSyntaxParser.Number)
                self.state = 1853
                self.match(VfrSyntaxParser.Comma)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrDateFlagsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.LFlags = 0
            self.LineNum = 0

        def dateFlagsField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.DateFlagsFieldContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.DateFlagsFieldContext,i)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrDateFlags

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrDateFlags" ):
                return visitor.visitVfrDateFlags(self)
            else:
                return visitor.visitChildren(self)




    def vfrDateFlags(self):

        localctx = VfrSyntaxParser.VfrDateFlagsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_vfrDateFlags)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1856
            self.dateFlagsField()
            self.state = 1861
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==VfrSyntaxParser.T__6:
                self.state = 1857
                self.match(VfrSyntaxParser.T__6)
                self.state = 1858
                self.dateFlagsField()
                self.state = 1863
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DateFlagsFieldContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.LFlag = 0

        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def YearSupppressFlag(self):
            return self.getToken(VfrSyntaxParser.YearSupppressFlag, 0)

        def MonthSuppressFlag(self):
            return self.getToken(VfrSyntaxParser.MonthSuppressFlag, 0)

        def DaySuppressFlag(self):
            return self.getToken(VfrSyntaxParser.DaySuppressFlag, 0)

        def StorageNormalFlag(self):
            return self.getToken(VfrSyntaxParser.StorageNormalFlag, 0)

        def StorageTimeFlag(self):
            return self.getToken(VfrSyntaxParser.StorageTimeFlag, 0)

        def StorageWakeUpFlag(self):
            return self.getToken(VfrSyntaxParser.StorageWakeUpFlag, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_dateFlagsField

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDateFlagsField" ):
                return visitor.visitDateFlagsField(self)
            else:
                return visitor.visitChildren(self)




    def dateFlagsField(self):

        localctx = VfrSyntaxParser.DateFlagsFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_dateFlagsField)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1864
            _la = self._input.LA(1)
            if not(((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & ((1 << (VfrSyntaxParser.YearSupppressFlag - 194)) | (1 << (VfrSyntaxParser.MonthSuppressFlag - 194)) | (1 << (VfrSyntaxParser.DaySuppressFlag - 194)) | (1 << (VfrSyntaxParser.StorageNormalFlag - 194)) | (1 << (VfrSyntaxParser.StorageTimeFlag - 194)) | (1 << (VfrSyntaxParser.StorageWakeUpFlag - 194)) | (1 << (VfrSyntaxParser.Number - 194)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementTimeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.OpObj = CIfrTime()
            self.QType = EFI_QUESION_TYPE.QUESTION_TIME
            self.Val = EFI_IFR_TYPE_VALUE()

        def Time(self):
            return self.getToken(VfrSyntaxParser.Time, 0)

        def EndTime(self):
            return self.getToken(VfrSyntaxParser.EndTime, 0)

        def Semicolon(self):
            return self.getToken(VfrSyntaxParser.Semicolon, 0)

        def vfrQuestionHeader(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrQuestionHeaderContext,0)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Comma)
            else:
                return self.getToken(VfrSyntaxParser.Comma, i)

        def vfrStatementQuestionOptionList(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementQuestionOptionListContext,0)


        def Hour(self):
            return self.getToken(VfrSyntaxParser.Hour, 0)

        def VarId(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.VarId)
            else:
                return self.getToken(VfrSyntaxParser.VarId, i)

        def StringIdentifier(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.StringIdentifier)
            else:
                return self.getToken(VfrSyntaxParser.StringIdentifier, i)

        def Dot(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Dot)
            else:
                return self.getToken(VfrSyntaxParser.Dot, i)

        def Prompt(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Prompt)
            else:
                return self.getToken(VfrSyntaxParser.Prompt, i)

        def StringToken(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.StringToken)
            else:
                return self.getToken(VfrSyntaxParser.StringToken, i)

        def OpenParen(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.OpenParen)
            else:
                return self.getToken(VfrSyntaxParser.OpenParen, i)

        def Number(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Number)
            else:
                return self.getToken(VfrSyntaxParser.Number, i)

        def CloseParen(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.CloseParen)
            else:
                return self.getToken(VfrSyntaxParser.CloseParen, i)

        def Help(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Help)
            else:
                return self.getToken(VfrSyntaxParser.Help, i)

        def minMaxTimeStepDefault(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.MinMaxTimeStepDefaultContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.MinMaxTimeStepDefaultContext,i)


        def Minute(self):
            return self.getToken(VfrSyntaxParser.Minute, 0)

        def Second(self):
            return self.getToken(VfrSyntaxParser.Second, 0)

        def FLAGS(self):
            return self.getToken(VfrSyntaxParser.FLAGS, 0)

        def vfrTimeFlags(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrTimeFlagsContext,0)


        def vfrStatementInconsistentIf(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrStatementInconsistentIfContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementInconsistentIfContext,i)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementTime

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementTime" ):
                return visitor.visitVfrStatementTime(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementTime(self):

        localctx = VfrSyntaxParser.VfrStatementTimeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_vfrStatementTime)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1866
            self.match(VfrSyntaxParser.Time)
            self.state = 1957
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VfrSyntaxParser.Prompt, VfrSyntaxParser.Name, VfrSyntaxParser.VarId, VfrSyntaxParser.QuestionId]:
                self.state = 1867
                self.vfrQuestionHeader(localctx.OpObj, localctx.QType)
                self.state = 1868
                self.match(VfrSyntaxParser.Comma)
                self.state = 1874
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VfrSyntaxParser.FLAGS:
                    self.state = 1869
                    self.match(VfrSyntaxParser.FLAGS)
                    self.state = 1870
                    self.match(VfrSyntaxParser.T__5)
                    self.state = 1871
                    self.vfrTimeFlags()
                    self.state = 1872
                    self.match(VfrSyntaxParser.Comma)


                self.state = 1876
                self.vfrStatementQuestionOptionList()
                pass
            elif token in [VfrSyntaxParser.Hour]:
                self.state = 1878
                self.match(VfrSyntaxParser.Hour)
                self.state = 1879
                self.match(VfrSyntaxParser.VarId)
                self.state = 1880
                self.match(VfrSyntaxParser.T__5)
                self.state = 1881
                self.match(VfrSyntaxParser.StringIdentifier)
                self.state = 1882
                self.match(VfrSyntaxParser.Dot)
                self.state = 1883
                self.match(VfrSyntaxParser.StringIdentifier)
                self.state = 1884
                self.match(VfrSyntaxParser.Comma)
                self.state = 1885
                self.match(VfrSyntaxParser.Prompt)
                self.state = 1886
                self.match(VfrSyntaxParser.T__5)
                self.state = 1887
                self.match(VfrSyntaxParser.StringToken)
                self.state = 1888
                self.match(VfrSyntaxParser.OpenParen)
                self.state = 1889
                self.match(VfrSyntaxParser.Number)
                self.state = 1890
                self.match(VfrSyntaxParser.CloseParen)
                self.state = 1891
                self.match(VfrSyntaxParser.Comma)
                self.state = 1892
                self.match(VfrSyntaxParser.Help)
                self.state = 1893
                self.match(VfrSyntaxParser.T__5)
                self.state = 1894
                self.match(VfrSyntaxParser.StringToken)
                self.state = 1895
                self.match(VfrSyntaxParser.OpenParen)
                self.state = 1896
                self.match(VfrSyntaxParser.Number)
                self.state = 1897
                self.match(VfrSyntaxParser.CloseParen)
                self.state = 1898
                self.match(VfrSyntaxParser.Comma)
                self.state = 1899
                self.minMaxTimeStepDefault(Val.Time, 0)
                self.state = 1900
                self.match(VfrSyntaxParser.Minute)
                self.state = 1901
                self.match(VfrSyntaxParser.VarId)
                self.state = 1902
                self.match(VfrSyntaxParser.T__5)
                self.state = 1903
                self.match(VfrSyntaxParser.StringIdentifier)
                self.state = 1904
                self.match(VfrSyntaxParser.Dot)
                self.state = 1905
                self.match(VfrSyntaxParser.StringIdentifier)
                self.state = 1906
                self.match(VfrSyntaxParser.Comma)
                self.state = 1907
                self.match(VfrSyntaxParser.Prompt)
                self.state = 1908
                self.match(VfrSyntaxParser.T__5)
                self.state = 1909
                self.match(VfrSyntaxParser.StringToken)
                self.state = 1910
                self.match(VfrSyntaxParser.OpenParen)
                self.state = 1911
                self.match(VfrSyntaxParser.Number)
                self.state = 1912
                self.match(VfrSyntaxParser.CloseParen)
                self.state = 1913
                self.match(VfrSyntaxParser.Comma)
                self.state = 1914
                self.match(VfrSyntaxParser.Help)
                self.state = 1915
                self.match(VfrSyntaxParser.T__5)
                self.state = 1916
                self.match(VfrSyntaxParser.StringToken)
                self.state = 1917
                self.match(VfrSyntaxParser.OpenParen)
                self.state = 1918
                self.match(VfrSyntaxParser.Number)
                self.state = 1919
                self.match(VfrSyntaxParser.CloseParen)
                self.state = 1920
                self.match(VfrSyntaxParser.Comma)
                self.state = 1921
                self.minMaxTimeStepDefault(Val.Time, 1)
                self.state = 1922
                self.match(VfrSyntaxParser.Second)
                self.state = 1923
                self.match(VfrSyntaxParser.VarId)
                self.state = 1924
                self.match(VfrSyntaxParser.T__5)
                self.state = 1925
                self.match(VfrSyntaxParser.StringIdentifier)
                self.state = 1926
                self.match(VfrSyntaxParser.Dot)
                self.state = 1927
                self.match(VfrSyntaxParser.StringIdentifier)
                self.state = 1928
                self.match(VfrSyntaxParser.Comma)
                self.state = 1929
                self.match(VfrSyntaxParser.Prompt)
                self.state = 1930
                self.match(VfrSyntaxParser.T__5)
                self.state = 1931
                self.match(VfrSyntaxParser.StringToken)
                self.state = 1932
                self.match(VfrSyntaxParser.OpenParen)
                self.state = 1933
                self.match(VfrSyntaxParser.Number)
                self.state = 1934
                self.match(VfrSyntaxParser.CloseParen)
                self.state = 1935
                self.match(VfrSyntaxParser.Comma)
                self.state = 1936
                self.match(VfrSyntaxParser.Help)
                self.state = 1937
                self.match(VfrSyntaxParser.T__5)
                self.state = 1938
                self.match(VfrSyntaxParser.StringToken)
                self.state = 1939
                self.match(VfrSyntaxParser.OpenParen)
                self.state = 1940
                self.match(VfrSyntaxParser.Number)
                self.state = 1941
                self.match(VfrSyntaxParser.CloseParen)
                self.state = 1942
                self.match(VfrSyntaxParser.Comma)
                self.state = 1943
                self.minMaxTimeStepDefault(Val.Time, 2)
                self.state = 1949
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VfrSyntaxParser.FLAGS:
                    self.state = 1944
                    self.match(VfrSyntaxParser.FLAGS)
                    self.state = 1945
                    self.match(VfrSyntaxParser.T__5)
                    self.state = 1946
                    self.vfrTimeFlags()
                    self.state = 1947
                    self.match(VfrSyntaxParser.Comma)


                self.state = 1954
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==VfrSyntaxParser.InconsistentIf:
                    self.state = 1951
                    self.vfrStatementInconsistentIf()
                    self.state = 1956
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

            self.state = 1959
            self.match(VfrSyntaxParser.EndTime)
            self.state = 1960
            self.match(VfrSyntaxParser.Semicolon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MinMaxTimeStepDefaultContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1, Time=None, KeyValue=None):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Time = None
            self.KeyValue = None
            self.Time = Time
            self.KeyValue = KeyValue

        def Minimum(self):
            return self.getToken(VfrSyntaxParser.Minimum, 0)

        def Number(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Number)
            else:
                return self.getToken(VfrSyntaxParser.Number, i)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Comma)
            else:
                return self.getToken(VfrSyntaxParser.Comma, i)

        def Maximum(self):
            return self.getToken(VfrSyntaxParser.Maximum, 0)

        def STEP(self):
            return self.getToken(VfrSyntaxParser.STEP, 0)

        def Default(self):
            return self.getToken(VfrSyntaxParser.Default, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_minMaxTimeStepDefault

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMinMaxTimeStepDefault" ):
                return visitor.visitMinMaxTimeStepDefault(self)
            else:
                return visitor.visitChildren(self)




    def minMaxTimeStepDefault(self, Time, KeyValue):

        localctx = VfrSyntaxParser.MinMaxTimeStepDefaultContext(self, self._ctx, self.state, Time, KeyValue)
        self.enterRule(localctx, 230, self.RULE_minMaxTimeStepDefault)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1962
            self.match(VfrSyntaxParser.Minimum)
            self.state = 1963
            self.match(VfrSyntaxParser.T__5)
            self.state = 1964
            self.match(VfrSyntaxParser.Number)
            self.state = 1965
            self.match(VfrSyntaxParser.Comma)
            self.state = 1966
            self.match(VfrSyntaxParser.Maximum)
            self.state = 1967
            self.match(VfrSyntaxParser.T__5)
            self.state = 1968
            self.match(VfrSyntaxParser.Number)
            self.state = 1969
            self.match(VfrSyntaxParser.Comma)
            self.state = 1974
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.STEP:
                self.state = 1970
                self.match(VfrSyntaxParser.STEP)
                self.state = 1971
                self.match(VfrSyntaxParser.T__5)
                self.state = 1972
                self.match(VfrSyntaxParser.Number)
                self.state = 1973
                self.match(VfrSyntaxParser.Comma)


            self.state = 1980
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.Default:
                self.state = 1976
                self.match(VfrSyntaxParser.Default)
                self.state = 1977
                self.match(VfrSyntaxParser.T__5)
                self.state = 1978
                self.match(VfrSyntaxParser.Number)
                self.state = 1979
                self.match(VfrSyntaxParser.Comma)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrTimeFlagsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.LFlags = 0
            self.LineNum = 0

        def timeFlagsField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.TimeFlagsFieldContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.TimeFlagsFieldContext,i)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrTimeFlags

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrTimeFlags" ):
                return visitor.visitVfrTimeFlags(self)
            else:
                return visitor.visitChildren(self)




    def vfrTimeFlags(self):

        localctx = VfrSyntaxParser.VfrTimeFlagsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_vfrTimeFlags)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1982
            self.timeFlagsField()
            self.state = 1987
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==VfrSyntaxParser.T__6:
                self.state = 1983
                self.match(VfrSyntaxParser.T__6)
                self.state = 1984
                self.timeFlagsField()
                self.state = 1989
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TimeFlagsFieldContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.LFlag = 0

        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def HourSupppressFlag(self):
            return self.getToken(VfrSyntaxParser.HourSupppressFlag, 0)

        def MinuteSuppressFlag(self):
            return self.getToken(VfrSyntaxParser.MinuteSuppressFlag, 0)

        def SecondSuppressFlag(self):
            return self.getToken(VfrSyntaxParser.SecondSuppressFlag, 0)

        def StorageNormalFlag(self):
            return self.getToken(VfrSyntaxParser.StorageNormalFlag, 0)

        def StorageTimeFlag(self):
            return self.getToken(VfrSyntaxParser.StorageTimeFlag, 0)

        def StorageWakeUpFlag(self):
            return self.getToken(VfrSyntaxParser.StorageWakeUpFlag, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_timeFlagsField

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTimeFlagsField" ):
                return visitor.visitTimeFlagsField(self)
            else:
                return visitor.visitChildren(self)




    def timeFlagsField(self):

        localctx = VfrSyntaxParser.TimeFlagsFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_timeFlagsField)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1990
            _la = self._input.LA(1)
            if not(((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & ((1 << (VfrSyntaxParser.HourSupppressFlag - 197)) | (1 << (VfrSyntaxParser.MinuteSuppressFlag - 197)) | (1 << (VfrSyntaxParser.SecondSuppressFlag - 197)) | (1 << (VfrSyntaxParser.StorageNormalFlag - 197)) | (1 << (VfrSyntaxParser.StorageTimeFlag - 197)) | (1 << (VfrSyntaxParser.StorageWakeUpFlag - 197)) | (1 << (VfrSyntaxParser.Number - 197)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementConditionalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vfrStatementDisableIfStat(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementDisableIfStatContext,0)


        def vfrStatementSuppressIfStat(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementSuppressIfStatContext,0)


        def vfrStatementGrayOutIfStat(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementGrayOutIfStatContext,0)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementConditional

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementConditional" ):
                return visitor.visitVfrStatementConditional(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementConditional(self):

        localctx = VfrSyntaxParser.VfrStatementConditionalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_vfrStatementConditional)
        try:
            self.state = 1995
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VfrSyntaxParser.DisableIf]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1992
                self.vfrStatementDisableIfStat()
                pass
            elif token in [VfrSyntaxParser.SuppressIf]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1993
                self.vfrStatementSuppressIfStat()
                pass
            elif token in [VfrSyntaxParser.GrayOutIf]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1994
                self.vfrStatementGrayOutIfStat()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementStatListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vfrStatementStat(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementStatContext,0)


        def vfrStatementQuestions(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementQuestionsContext,0)


        def vfrStatementConditional(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementConditionalContext,0)


        def vfrStatementLabel(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementLabelContext,0)


        def vfrStatementExtension(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementExtensionContext,0)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementStatList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementStatList" ):
                return visitor.visitVfrStatementStatList(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementStatList(self):

        localctx = VfrSyntaxParser.VfrStatementStatListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_vfrStatementStatList)
        try:
            self.state = 2002
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VfrSyntaxParser.Subtitle, VfrSyntaxParser.Text, VfrSyntaxParser.Goto, VfrSyntaxParser.ResetButton]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1997
                self.vfrStatementStat()
                pass
            elif token in [VfrSyntaxParser.OneOf, VfrSyntaxParser.OrderedList, VfrSyntaxParser.Date, VfrSyntaxParser.Time, VfrSyntaxParser.CheckBox, VfrSyntaxParser.Numeric, VfrSyntaxParser.Password, VfrSyntaxParser.String, VfrSyntaxParser.Action]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1998
                self.vfrStatementQuestions()
                pass
            elif token in [VfrSyntaxParser.GrayOutIf, VfrSyntaxParser.SuppressIf, VfrSyntaxParser.DisableIf]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1999
                self.vfrStatementConditional()
                pass
            elif token in [VfrSyntaxParser.Label]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2000
                self.vfrStatementLabel()
                pass
            elif token in [VfrSyntaxParser.GuidOp]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2001
                self.vfrStatementExtension()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementDisableIfStatContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DisableIf(self):
            return self.getToken(VfrSyntaxParser.DisableIf, 0)

        def vfrStatementExpression(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementExpressionContext,0)


        def Semicolon(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Semicolon)
            else:
                return self.getToken(VfrSyntaxParser.Semicolon, i)

        def EndIf(self):
            return self.getToken(VfrSyntaxParser.EndIf, 0)

        def vfrStatementStatList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrStatementStatListContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementStatListContext,i)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementDisableIfStat

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementDisableIfStat" ):
                return visitor.visitVfrStatementDisableIfStat(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementDisableIfStat(self):

        localctx = VfrSyntaxParser.VfrStatementDisableIfStatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_vfrStatementDisableIfStat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2004
            self.match(VfrSyntaxParser.DisableIf)
            self.state = 2005
            self.vfrStatementExpression()
            self.state = 2006
            self.match(VfrSyntaxParser.Semicolon)
            self.state = 2010
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 59)) & ~0x3f) == 0 and ((1 << (_la - 59)) & ((1 << (VfrSyntaxParser.OneOf - 59)) | (1 << (VfrSyntaxParser.OrderedList - 59)) | (1 << (VfrSyntaxParser.Subtitle - 59)) | (1 << (VfrSyntaxParser.Text - 59)) | (1 << (VfrSyntaxParser.Date - 59)) | (1 << (VfrSyntaxParser.Time - 59)) | (1 << (VfrSyntaxParser.GrayOutIf - 59)) | (1 << (VfrSyntaxParser.Label - 59)) | (1 << (VfrSyntaxParser.CheckBox - 59)) | (1 << (VfrSyntaxParser.Numeric - 59)) | (1 << (VfrSyntaxParser.Password - 59)) | (1 << (VfrSyntaxParser.String - 59)) | (1 << (VfrSyntaxParser.SuppressIf - 59)) | (1 << (VfrSyntaxParser.DisableIf - 59)) | (1 << (VfrSyntaxParser.Goto - 59)))) != 0) or ((((_la - 164)) & ~0x3f) == 0 and ((1 << (_la - 164)) & ((1 << (VfrSyntaxParser.ResetButton - 164)) | (1 << (VfrSyntaxParser.Action - 164)) | (1 << (VfrSyntaxParser.GuidOp - 164)))) != 0):
                self.state = 2007
                self.vfrStatementStatList()
                self.state = 2012
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2013
            self.match(VfrSyntaxParser.EndIf)
            self.state = 2014
            self.match(VfrSyntaxParser.Semicolon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementSuppressIfStatContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SuppressIf(self):
            return self.getToken(VfrSyntaxParser.SuppressIf, 0)

        def vfrStatementExpression(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementExpressionContext,0)


        def Semicolon(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Semicolon)
            else:
                return self.getToken(VfrSyntaxParser.Semicolon, i)

        def EndIf(self):
            return self.getToken(VfrSyntaxParser.EndIf, 0)

        def vfrStatementStatList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrStatementStatListContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementStatListContext,i)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementSuppressIfStat

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementSuppressIfStat" ):
                return visitor.visitVfrStatementSuppressIfStat(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementSuppressIfStat(self):

        localctx = VfrSyntaxParser.VfrStatementSuppressIfStatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_vfrStatementSuppressIfStat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2016
            self.match(VfrSyntaxParser.SuppressIf)
            self.state = 2017
            self.vfrStatementExpression()
            self.state = 2018
            self.match(VfrSyntaxParser.Semicolon)
            self.state = 2022
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 59)) & ~0x3f) == 0 and ((1 << (_la - 59)) & ((1 << (VfrSyntaxParser.OneOf - 59)) | (1 << (VfrSyntaxParser.OrderedList - 59)) | (1 << (VfrSyntaxParser.Subtitle - 59)) | (1 << (VfrSyntaxParser.Text - 59)) | (1 << (VfrSyntaxParser.Date - 59)) | (1 << (VfrSyntaxParser.Time - 59)) | (1 << (VfrSyntaxParser.GrayOutIf - 59)) | (1 << (VfrSyntaxParser.Label - 59)) | (1 << (VfrSyntaxParser.CheckBox - 59)) | (1 << (VfrSyntaxParser.Numeric - 59)) | (1 << (VfrSyntaxParser.Password - 59)) | (1 << (VfrSyntaxParser.String - 59)) | (1 << (VfrSyntaxParser.SuppressIf - 59)) | (1 << (VfrSyntaxParser.DisableIf - 59)) | (1 << (VfrSyntaxParser.Goto - 59)))) != 0) or ((((_la - 164)) & ~0x3f) == 0 and ((1 << (_la - 164)) & ((1 << (VfrSyntaxParser.ResetButton - 164)) | (1 << (VfrSyntaxParser.Action - 164)) | (1 << (VfrSyntaxParser.GuidOp - 164)))) != 0):
                self.state = 2019
                self.vfrStatementStatList()
                self.state = 2024
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2025
            self.match(VfrSyntaxParser.EndIf)
            self.state = 2026
            self.match(VfrSyntaxParser.Semicolon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementGrayOutIfStatContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GrayOutIf(self):
            return self.getToken(VfrSyntaxParser.GrayOutIf, 0)

        def vfrStatementExpression(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementExpressionContext,0)


        def Semicolon(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Semicolon)
            else:
                return self.getToken(VfrSyntaxParser.Semicolon, i)

        def EndIf(self):
            return self.getToken(VfrSyntaxParser.EndIf, 0)

        def vfrStatementStatList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrStatementStatListContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementStatListContext,i)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementGrayOutIfStat

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementGrayOutIfStat" ):
                return visitor.visitVfrStatementGrayOutIfStat(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementGrayOutIfStat(self):

        localctx = VfrSyntaxParser.VfrStatementGrayOutIfStatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_vfrStatementGrayOutIfStat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2028
            self.match(VfrSyntaxParser.GrayOutIf)
            self.state = 2029
            self.vfrStatementExpression()
            self.state = 2030
            self.match(VfrSyntaxParser.Semicolon)
            self.state = 2034
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 59)) & ~0x3f) == 0 and ((1 << (_la - 59)) & ((1 << (VfrSyntaxParser.OneOf - 59)) | (1 << (VfrSyntaxParser.OrderedList - 59)) | (1 << (VfrSyntaxParser.Subtitle - 59)) | (1 << (VfrSyntaxParser.Text - 59)) | (1 << (VfrSyntaxParser.Date - 59)) | (1 << (VfrSyntaxParser.Time - 59)) | (1 << (VfrSyntaxParser.GrayOutIf - 59)) | (1 << (VfrSyntaxParser.Label - 59)) | (1 << (VfrSyntaxParser.CheckBox - 59)) | (1 << (VfrSyntaxParser.Numeric - 59)) | (1 << (VfrSyntaxParser.Password - 59)) | (1 << (VfrSyntaxParser.String - 59)) | (1 << (VfrSyntaxParser.SuppressIf - 59)) | (1 << (VfrSyntaxParser.DisableIf - 59)) | (1 << (VfrSyntaxParser.Goto - 59)))) != 0) or ((((_la - 164)) & ~0x3f) == 0 and ((1 << (_la - 164)) & ((1 << (VfrSyntaxParser.ResetButton - 164)) | (1 << (VfrSyntaxParser.Action - 164)) | (1 << (VfrSyntaxParser.GuidOp - 164)))) != 0):
                self.state = 2031
                self.vfrStatementStatList()
                self.state = 2036
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2037
            self.match(VfrSyntaxParser.EndIf)
            self.state = 2038
            self.match(VfrSyntaxParser.Semicolon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementLabelContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.LObj = CIfrLabel()

        def Label(self):
            return self.getToken(VfrSyntaxParser.Label, 0)

        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def Semicolon(self):
            return self.getToken(VfrSyntaxParser.Semicolon, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementLabel

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementLabel" ):
                return visitor.visitVfrStatementLabel(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementLabel(self):

        localctx = VfrSyntaxParser.VfrStatementLabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_vfrStatementLabel)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2040
            self.match(VfrSyntaxParser.Label)
            self.state = 2041
            self.match(VfrSyntaxParser.Number)
            self.state = 2042
            self.match(VfrSyntaxParser.Semicolon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementBannerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.BObj = CIfrBanner()
            self.TObj = CIfrTimeout()

        def Banner(self):
            return self.getToken(VfrSyntaxParser.Banner, 0)

        def Title(self):
            return self.getToken(VfrSyntaxParser.Title, 0)

        def StringToken(self):
            return self.getToken(VfrSyntaxParser.StringToken, 0)

        def OpenParen(self):
            return self.getToken(VfrSyntaxParser.OpenParen, 0)

        def Number(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Number)
            else:
                return self.getToken(VfrSyntaxParser.Number, i)

        def CloseParen(self):
            return self.getToken(VfrSyntaxParser.CloseParen, 0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Comma)
            else:
                return self.getToken(VfrSyntaxParser.Comma, i)

        def Line(self):
            return self.getToken(VfrSyntaxParser.Line, 0)

        def Align(self):
            return self.getToken(VfrSyntaxParser.Align, 0)

        def Semicolon(self):
            return self.getToken(VfrSyntaxParser.Semicolon, 0)

        def Timeout(self):
            return self.getToken(VfrSyntaxParser.Timeout, 0)

        def Left(self):
            return self.getToken(VfrSyntaxParser.Left, 0)

        def Center(self):
            return self.getToken(VfrSyntaxParser.Center, 0)

        def Right(self):
            return self.getToken(VfrSyntaxParser.Right, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementBanner

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementBanner" ):
                return visitor.visitVfrStatementBanner(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementBanner(self):

        localctx = VfrSyntaxParser.VfrStatementBannerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_vfrStatementBanner)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2044
            self.match(VfrSyntaxParser.Banner)
            self.state = 2046
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.Comma:
                self.state = 2045
                self.match(VfrSyntaxParser.Comma)


            self.state = 2048
            self.match(VfrSyntaxParser.Title)
            self.state = 2049
            self.match(VfrSyntaxParser.T__5)
            self.state = 2050
            self.match(VfrSyntaxParser.StringToken)
            self.state = 2051
            self.match(VfrSyntaxParser.OpenParen)
            self.state = 2052
            self.match(VfrSyntaxParser.Number)
            self.state = 2053
            self.match(VfrSyntaxParser.CloseParen)
            self.state = 2054
            self.match(VfrSyntaxParser.Comma)
            self.state = 2065
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VfrSyntaxParser.Line]:
                self.state = 2055
                self.match(VfrSyntaxParser.Line)
                self.state = 2056
                self.match(VfrSyntaxParser.Number)
                self.state = 2057
                self.match(VfrSyntaxParser.Comma)
                self.state = 2058
                self.match(VfrSyntaxParser.Align)
                self.state = 2059
                _la = self._input.LA(1)
                if not(((((_la - 149)) & ~0x3f) == 0 and ((1 << (_la - 149)) & ((1 << (VfrSyntaxParser.Left - 149)) | (1 << (VfrSyntaxParser.Right - 149)) | (1 << (VfrSyntaxParser.Center - 149)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2060
                self.match(VfrSyntaxParser.Semicolon)
                pass
            elif token in [VfrSyntaxParser.Timeout]:
                self.state = 2061
                self.match(VfrSyntaxParser.Timeout)
                self.state = 2062
                self.match(VfrSyntaxParser.T__5)
                self.state = 2063
                self.match(VfrSyntaxParser.Number)
                self.state = 2064
                self.match(VfrSyntaxParser.Semicolon)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementExtensionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GuidOp(self):
            return self.getToken(VfrSyntaxParser.GuidOp, 0)

        def Uuid(self):
            return self.getToken(VfrSyntaxParser.Uuid, 0)

        def guidDefinition(self):
            return self.getTypedRuleContext(VfrSyntaxParser.GuidDefinitionContext,0)


        def Semicolon(self):
            return self.getToken(VfrSyntaxParser.Semicolon, 0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Comma)
            else:
                return self.getToken(VfrSyntaxParser.Comma, i)

        def DataType(self):
            return self.getToken(VfrSyntaxParser.DataType, 0)

        def vfrExtensionData(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrExtensionDataContext,0)


        def EndGuidOp(self):
            return self.getToken(VfrSyntaxParser.EndGuidOp, 0)

        def Uint64(self):
            return self.getToken(VfrSyntaxParser.Uint64, 0)

        def Uint32(self):
            return self.getToken(VfrSyntaxParser.Uint32, 0)

        def Uint16(self):
            return self.getToken(VfrSyntaxParser.Uint16, 0)

        def Uint8(self):
            return self.getToken(VfrSyntaxParser.Uint8, 0)

        def Boolean(self):
            return self.getToken(VfrSyntaxParser.Boolean, 0)

        def EFI_STRING_ID(self):
            return self.getToken(VfrSyntaxParser.EFI_STRING_ID, 0)

        def EFI_HII_DATE(self):
            return self.getToken(VfrSyntaxParser.EFI_HII_DATE, 0)

        def EFI_HII_TIME(self):
            return self.getToken(VfrSyntaxParser.EFI_HII_TIME, 0)

        def EFI_HII_REF(self):
            return self.getToken(VfrSyntaxParser.EFI_HII_REF, 0)

        def StringIdentifier(self):
            return self.getToken(VfrSyntaxParser.StringIdentifier, 0)

        def vfrStatementExtension(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrStatementExtensionContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementExtensionContext,i)


        def OpenBracket(self):
            return self.getToken(VfrSyntaxParser.OpenBracket, 0)

        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def CloseBracket(self):
            return self.getToken(VfrSyntaxParser.CloseBracket, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementExtension

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementExtension" ):
                return visitor.visitVfrStatementExtension(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementExtension(self):

        localctx = VfrSyntaxParser.VfrStatementExtensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_vfrStatementExtension)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2067
            self.match(VfrSyntaxParser.GuidOp)
            self.state = 2068
            self.match(VfrSyntaxParser.Uuid)
            self.state = 2069
            self.match(VfrSyntaxParser.T__5)
            self.state = 2070
            self.guidDefinition()
            self.state = 2137
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,170,self._ctx)
            if la_ == 1:
                self.state = 2071
                self.match(VfrSyntaxParser.Comma)
                self.state = 2072
                self.match(VfrSyntaxParser.DataType)
                self.state = 2073
                self.match(VfrSyntaxParser.T__5)
                self.state = 2134
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VfrSyntaxParser.Uint64]:
                    self.state = 2074
                    self.match(VfrSyntaxParser.Uint64)
                    self.state = 2078
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VfrSyntaxParser.OpenBracket:
                        self.state = 2075
                        self.match(VfrSyntaxParser.OpenBracket)
                        self.state = 2076
                        self.match(VfrSyntaxParser.Number)
                        self.state = 2077
                        self.match(VfrSyntaxParser.CloseBracket)


                    pass
                elif token in [VfrSyntaxParser.Uint32]:
                    self.state = 2080
                    self.match(VfrSyntaxParser.Uint32)
                    self.state = 2084
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VfrSyntaxParser.OpenBracket:
                        self.state = 2081
                        self.match(VfrSyntaxParser.OpenBracket)
                        self.state = 2082
                        self.match(VfrSyntaxParser.Number)
                        self.state = 2083
                        self.match(VfrSyntaxParser.CloseBracket)


                    pass
                elif token in [VfrSyntaxParser.Uint16]:
                    self.state = 2086
                    self.match(VfrSyntaxParser.Uint16)
                    self.state = 2090
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VfrSyntaxParser.OpenBracket:
                        self.state = 2087
                        self.match(VfrSyntaxParser.OpenBracket)
                        self.state = 2088
                        self.match(VfrSyntaxParser.Number)
                        self.state = 2089
                        self.match(VfrSyntaxParser.CloseBracket)


                    pass
                elif token in [VfrSyntaxParser.Uint8]:
                    self.state = 2092
                    self.match(VfrSyntaxParser.Uint8)
                    self.state = 2096
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VfrSyntaxParser.OpenBracket:
                        self.state = 2093
                        self.match(VfrSyntaxParser.OpenBracket)
                        self.state = 2094
                        self.match(VfrSyntaxParser.Number)
                        self.state = 2095
                        self.match(VfrSyntaxParser.CloseBracket)


                    pass
                elif token in [VfrSyntaxParser.Boolean]:
                    self.state = 2098
                    self.match(VfrSyntaxParser.Boolean)
                    self.state = 2102
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VfrSyntaxParser.OpenBracket:
                        self.state = 2099
                        self.match(VfrSyntaxParser.OpenBracket)
                        self.state = 2100
                        self.match(VfrSyntaxParser.Number)
                        self.state = 2101
                        self.match(VfrSyntaxParser.CloseBracket)


                    pass
                elif token in [VfrSyntaxParser.EFI_STRING_ID]:
                    self.state = 2104
                    self.match(VfrSyntaxParser.EFI_STRING_ID)
                    self.state = 2108
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VfrSyntaxParser.OpenBracket:
                        self.state = 2105
                        self.match(VfrSyntaxParser.OpenBracket)
                        self.state = 2106
                        self.match(VfrSyntaxParser.Number)
                        self.state = 2107
                        self.match(VfrSyntaxParser.CloseBracket)


                    pass
                elif token in [VfrSyntaxParser.EFI_HII_DATE]:
                    self.state = 2110
                    self.match(VfrSyntaxParser.EFI_HII_DATE)
                    self.state = 2114
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VfrSyntaxParser.OpenBracket:
                        self.state = 2111
                        self.match(VfrSyntaxParser.OpenBracket)
                        self.state = 2112
                        self.match(VfrSyntaxParser.Number)
                        self.state = 2113
                        self.match(VfrSyntaxParser.CloseBracket)


                    pass
                elif token in [VfrSyntaxParser.EFI_HII_TIME]:
                    self.state = 2116
                    self.match(VfrSyntaxParser.EFI_HII_TIME)
                    self.state = 2120
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VfrSyntaxParser.OpenBracket:
                        self.state = 2117
                        self.match(VfrSyntaxParser.OpenBracket)
                        self.state = 2118
                        self.match(VfrSyntaxParser.Number)
                        self.state = 2119
                        self.match(VfrSyntaxParser.CloseBracket)


                    pass
                elif token in [VfrSyntaxParser.EFI_HII_REF]:
                    self.state = 2122
                    self.match(VfrSyntaxParser.EFI_HII_REF)
                    self.state = 2126
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VfrSyntaxParser.OpenBracket:
                        self.state = 2123
                        self.match(VfrSyntaxParser.OpenBracket)
                        self.state = 2124
                        self.match(VfrSyntaxParser.Number)
                        self.state = 2125
                        self.match(VfrSyntaxParser.CloseBracket)


                    pass
                elif token in [VfrSyntaxParser.StringIdentifier]:
                    self.state = 2128
                    self.match(VfrSyntaxParser.StringIdentifier)
                    self.state = 2132
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VfrSyntaxParser.OpenBracket:
                        self.state = 2129
                        self.match(VfrSyntaxParser.OpenBracket)
                        self.state = 2130
                        self.match(VfrSyntaxParser.Number)
                        self.state = 2131
                        self.match(VfrSyntaxParser.CloseBracket)


                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2136
                self.vfrExtensionData()


            self.state = 2147
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.Comma:
                self.state = 2139
                self.match(VfrSyntaxParser.Comma)
                self.state = 2143
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==VfrSyntaxParser.GuidOp:
                    self.state = 2140
                    self.vfrStatementExtension()
                    self.state = 2145
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2146
                self.match(VfrSyntaxParser.EndGuidOp)


            self.state = 2149
            self.match(VfrSyntaxParser.Semicolon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrExtensionDataContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vfrExtensionDataComponent(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrExtensionDataComponentContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrExtensionDataComponentContext,i)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrExtensionData

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrExtensionData" ):
                return visitor.visitVfrExtensionData(self)
            else:
                return visitor.visitChildren(self)




    def vfrExtensionData(self):

        localctx = VfrSyntaxParser.VfrExtensionDataContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_vfrExtensionData)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2154
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,173,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2151
                    self.vfrExtensionDataComponent() 
                self.state = 2156
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,173,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrExtensionDataComponentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Comma(self):
            return self.getToken(VfrSyntaxParser.Comma, 0)

        def Data(self):
            return self.getToken(VfrSyntaxParser.Data, 0)

        def Number(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Number)
            else:
                return self.getToken(VfrSyntaxParser.Number, i)

        def OpenBracket(self):
            return self.getToken(VfrSyntaxParser.OpenBracket, 0)

        def CloseBracket(self):
            return self.getToken(VfrSyntaxParser.CloseBracket, 0)

        def vfrExtensionDataDotArea(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrExtensionDataDotAreaContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrExtensionDataDotAreaContext,i)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrExtensionDataComponent

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrExtensionDataComponent" ):
                return visitor.visitVfrExtensionDataComponent(self)
            else:
                return visitor.visitChildren(self)




    def vfrExtensionDataComponent(self):

        localctx = VfrSyntaxParser.VfrExtensionDataComponentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_vfrExtensionDataComponent)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2157
            self.match(VfrSyntaxParser.Comma)
            self.state = 2158
            self.match(VfrSyntaxParser.Data)
            self.state = 2162
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.OpenBracket:
                self.state = 2159
                self.match(VfrSyntaxParser.OpenBracket)
                self.state = 2160
                self.match(VfrSyntaxParser.Number)
                self.state = 2161
                self.match(VfrSyntaxParser.CloseBracket)


            self.state = 2167
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==VfrSyntaxParser.Dot:
                self.state = 2164
                self.vfrExtensionDataDotArea()
                self.state = 2169
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2170
            self.match(VfrSyntaxParser.T__5)
            self.state = 2171
            self.match(VfrSyntaxParser.Number)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrExtensionDataDotAreaContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Dot(self):
            return self.getToken(VfrSyntaxParser.Dot, 0)

        def StringIdentifier(self):
            return self.getToken(VfrSyntaxParser.StringIdentifier, 0)

        def OpenBracket(self):
            return self.getToken(VfrSyntaxParser.OpenBracket, 0)

        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def CloseBracket(self):
            return self.getToken(VfrSyntaxParser.CloseBracket, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrExtensionDataDotArea

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrExtensionDataDotArea" ):
                return visitor.visitVfrExtensionDataDotArea(self)
            else:
                return visitor.visitChildren(self)




    def vfrExtensionDataDotArea(self):

        localctx = VfrSyntaxParser.VfrExtensionDataDotAreaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_vfrExtensionDataDotArea)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2173
            self.match(VfrSyntaxParser.Dot)
            self.state = 2174
            self.match(VfrSyntaxParser.StringIdentifier)
            self.state = 2178
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.OpenBracket:
                self.state = 2175
                self.match(VfrSyntaxParser.OpenBracket)
                self.state = 2176
                self.match(VfrSyntaxParser.Number)
                self.state = 2177
                self.match(VfrSyntaxParser.CloseBracket)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementModalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Modal(self):
            return self.getToken(VfrSyntaxParser.Modal, 0)

        def Semicolon(self):
            return self.getToken(VfrSyntaxParser.Semicolon, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementModal

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementModal" ):
                return visitor.visitVfrStatementModal(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementModal(self):

        localctx = VfrSyntaxParser.VfrStatementModalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_vfrStatementModal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2180
            self.match(VfrSyntaxParser.Modal)
            self.state = 2181
            self.match(VfrSyntaxParser.Semicolon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.RootLevel = 0
            self.ExpOpCount = 0

        def andTerm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.AndTermContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.AndTermContext,i)


        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.OR)
            else:
                return self.getToken(VfrSyntaxParser.OR, i)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementExpression" ):
                return visitor.visitVfrStatementExpression(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementExpression(self):

        localctx = VfrSyntaxParser.VfrStatementExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_vfrStatementExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2183
            self.andTerm()
            self.state = 2188
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==VfrSyntaxParser.OR:
                self.state = 2184
                self.match(VfrSyntaxParser.OR)
                self.state = 2185
                self.andTerm()
                self.state = 2190
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementExpressionSubContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.RootLevel = 0
            self.ExpOpCount = 0

        def andTerm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.AndTermContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.AndTermContext,i)


        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.OR)
            else:
                return self.getToken(VfrSyntaxParser.OR, i)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementExpressionSub

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementExpressionSub" ):
                return visitor.visitVfrStatementExpressionSub(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementExpressionSub(self):

        localctx = VfrSyntaxParser.VfrStatementExpressionSubContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_vfrStatementExpressionSub)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2191
            self.andTerm()
            self.state = 2196
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==VfrSyntaxParser.OR:
                self.state = 2192
                self.match(VfrSyntaxParser.OR)
                self.state = 2193
                self.andTerm()
                self.state = 2198
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AndTermContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.RootLevel = 0
            self.ExpOpCount = 0

        def bitwiseorTerm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.BitwiseorTermContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.BitwiseorTermContext,i)


        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.AND)
            else:
                return self.getToken(VfrSyntaxParser.AND, i)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_andTerm

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAndTerm" ):
                return visitor.visitAndTerm(self)
            else:
                return visitor.visitChildren(self)




    def andTerm(self):

        localctx = VfrSyntaxParser.AndTermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_andTerm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2199
            self.bitwiseorTerm()
            self.state = 2204
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==VfrSyntaxParser.AND:
                self.state = 2200
                self.match(VfrSyntaxParser.AND)
                self.state = 2201
                self.bitwiseorTerm()
                self.state = 2206
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BitwiseorTermContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.RootLevel = 0
            self.ExpOpCount = 0

        def bitwiseandTerm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.BitwiseandTermContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.BitwiseandTermContext,i)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_bitwiseorTerm

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitwiseorTerm" ):
                return visitor.visitBitwiseorTerm(self)
            else:
                return visitor.visitChildren(self)




    def bitwiseorTerm(self):

        localctx = VfrSyntaxParser.BitwiseorTermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_bitwiseorTerm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2207
            self.bitwiseandTerm()
            self.state = 2212
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==VfrSyntaxParser.T__6:
                self.state = 2208
                self.match(VfrSyntaxParser.T__6)
                self.state = 2209
                self.bitwiseandTerm()
                self.state = 2214
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BitwiseandTermContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.RootLevel = 0
            self.ExpOpCount = 0

        def equalTerm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.EqualTermContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.EqualTermContext,i)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_bitwiseandTerm

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitwiseandTerm" ):
                return visitor.visitBitwiseandTerm(self)
            else:
                return visitor.visitChildren(self)




    def bitwiseandTerm(self):

        localctx = VfrSyntaxParser.BitwiseandTermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_bitwiseandTerm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2215
            self.equalTerm()
            self.state = 2220
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==VfrSyntaxParser.T__19:
                self.state = 2216
                self.match(VfrSyntaxParser.T__19)
                self.state = 2217
                self.equalTerm()
                self.state = 2222
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EqualTermContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.RootLevel = 0
            self.ExpOpCount = 0

        def compareTerm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.CompareTermContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.CompareTermContext,i)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_equalTerm

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEqualTerm" ):
                return visitor.visitEqualTerm(self)
            else:
                return visitor.visitChildren(self)




    def equalTerm(self):

        localctx = VfrSyntaxParser.EqualTermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_equalTerm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2223
            self.compareTerm()
            self.state = 2230
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==VfrSyntaxParser.T__20 or _la==VfrSyntaxParser.T__21:
                self.state = 2228
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VfrSyntaxParser.T__20]:
                    self.state = 2224
                    self.match(VfrSyntaxParser.T__20)
                    self.state = 2225
                    self.compareTerm()
                    pass
                elif token in [VfrSyntaxParser.T__21]:
                    self.state = 2226
                    self.match(VfrSyntaxParser.T__21)
                    self.state = 2227
                    self.compareTerm()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2232
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompareTermContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.RootLevel = 0
            self.ExpOpCount = 0

        def shiftTerm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.ShiftTermContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.ShiftTermContext,i)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_compareTerm

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompareTerm" ):
                return visitor.visitCompareTerm(self)
            else:
                return visitor.visitChildren(self)




    def compareTerm(self):

        localctx = VfrSyntaxParser.CompareTermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_compareTerm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2233
            self.shiftTerm()
            self.state = 2244
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VfrSyntaxParser.T__22) | (1 << VfrSyntaxParser.T__23) | (1 << VfrSyntaxParser.T__24) | (1 << VfrSyntaxParser.T__25))) != 0):
                self.state = 2242
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VfrSyntaxParser.T__22]:
                    self.state = 2234
                    self.match(VfrSyntaxParser.T__22)
                    self.state = 2235
                    self.shiftTerm()
                    pass
                elif token in [VfrSyntaxParser.T__23]:
                    self.state = 2236
                    self.match(VfrSyntaxParser.T__23)
                    self.state = 2237
                    self.shiftTerm()
                    pass
                elif token in [VfrSyntaxParser.T__24]:
                    self.state = 2238
                    self.match(VfrSyntaxParser.T__24)
                    self.state = 2239
                    self.shiftTerm()
                    pass
                elif token in [VfrSyntaxParser.T__25]:
                    self.state = 2240
                    self.match(VfrSyntaxParser.T__25)
                    self.state = 2241
                    self.shiftTerm()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2246
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShiftTermContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.RootLevel = 0
            self.ExpOpCount = 0

        def addMinusTerm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.AddMinusTermContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.AddMinusTermContext,i)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_shiftTerm

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShiftTerm" ):
                return visitor.visitShiftTerm(self)
            else:
                return visitor.visitChildren(self)




    def shiftTerm(self):

        localctx = VfrSyntaxParser.ShiftTermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_shiftTerm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2247
            self.addMinusTerm()
            self.state = 2254
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==VfrSyntaxParser.T__26 or _la==VfrSyntaxParser.T__27:
                self.state = 2252
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VfrSyntaxParser.T__26]:
                    self.state = 2248
                    self.match(VfrSyntaxParser.T__26)
                    self.state = 2249
                    self.addMinusTerm()
                    pass
                elif token in [VfrSyntaxParser.T__27]:
                    self.state = 2250
                    self.match(VfrSyntaxParser.T__27)
                    self.state = 2251
                    self.addMinusTerm()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2256
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AddMinusTermContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.RootLevel = 0
            self.ExpOpCount = 0

        def multdivmodTerm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.MultdivmodTermContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.MultdivmodTermContext,i)


        def Negative(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Negative)
            else:
                return self.getToken(VfrSyntaxParser.Negative, i)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_addMinusTerm

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAddMinusTerm" ):
                return visitor.visitAddMinusTerm(self)
            else:
                return visitor.visitChildren(self)




    def addMinusTerm(self):

        localctx = VfrSyntaxParser.AddMinusTermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_addMinusTerm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2257
            self.multdivmodTerm()
            self.state = 2264
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==VfrSyntaxParser.T__28 or _la==VfrSyntaxParser.Negative:
                self.state = 2262
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VfrSyntaxParser.T__28]:
                    self.state = 2258
                    self.match(VfrSyntaxParser.T__28)
                    self.state = 2259
                    self.multdivmodTerm()
                    pass
                elif token in [VfrSyntaxParser.Negative]:
                    self.state = 2260
                    self.match(VfrSyntaxParser.Negative)
                    self.state = 2261
                    self.multdivmodTerm()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2266
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultdivmodTermContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.RootLevel = 0
            self.ExpOpCount = 0

        def castTerm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.CastTermContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.CastTermContext,i)


        def Slash(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Slash)
            else:
                return self.getToken(VfrSyntaxParser.Slash, i)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_multdivmodTerm

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultdivmodTerm" ):
                return visitor.visitMultdivmodTerm(self)
            else:
                return visitor.visitChildren(self)




    def multdivmodTerm(self):

        localctx = VfrSyntaxParser.MultdivmodTermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_multdivmodTerm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2267
            self.castTerm()
            self.state = 2276
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VfrSyntaxParser.T__29) | (1 << VfrSyntaxParser.T__30) | (1 << VfrSyntaxParser.Slash))) != 0):
                self.state = 2274
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VfrSyntaxParser.T__29]:
                    self.state = 2268
                    self.match(VfrSyntaxParser.T__29)
                    self.state = 2269
                    self.castTerm()
                    pass
                elif token in [VfrSyntaxParser.Slash]:
                    self.state = 2270
                    self.match(VfrSyntaxParser.Slash)
                    self.state = 2271
                    self.castTerm()
                    pass
                elif token in [VfrSyntaxParser.T__30]:
                    self.state = 2272
                    self.match(VfrSyntaxParser.T__30)
                    self.state = 2273
                    self.castTerm()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2278
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CastTermContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.RootLevel = 0
            self.ExpOpCount = 0

        def atomTerm(self):
            return self.getTypedRuleContext(VfrSyntaxParser.AtomTermContext,0)


        def OpenParen(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.OpenParen)
            else:
                return self.getToken(VfrSyntaxParser.OpenParen, i)

        def CloseParen(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.CloseParen)
            else:
                return self.getToken(VfrSyntaxParser.CloseParen, i)

        def Boolean(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Boolean)
            else:
                return self.getToken(VfrSyntaxParser.Boolean, i)

        def Uint64(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Uint64)
            else:
                return self.getToken(VfrSyntaxParser.Uint64, i)

        def Uint32(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Uint32)
            else:
                return self.getToken(VfrSyntaxParser.Uint32, i)

        def Uint16(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Uint16)
            else:
                return self.getToken(VfrSyntaxParser.Uint16, i)

        def Uint8(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Uint8)
            else:
                return self.getToken(VfrSyntaxParser.Uint8, i)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_castTerm

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCastTerm" ):
                return visitor.visitCastTerm(self)
            else:
                return visitor.visitChildren(self)




    def castTerm(self):

        localctx = VfrSyntaxParser.CastTermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_castTerm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2284
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,192,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2279
                    self.match(VfrSyntaxParser.OpenParen)
                    self.state = 2280
                    _la = self._input.LA(1)
                    if not(((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & ((1 << (VfrSyntaxParser.Boolean - 93)) | (1 << (VfrSyntaxParser.Uint64 - 93)) | (1 << (VfrSyntaxParser.Uint32 - 93)) | (1 << (VfrSyntaxParser.Uint16 - 93)) | (1 << (VfrSyntaxParser.Uint8 - 93)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2281
                    self.match(VfrSyntaxParser.CloseParen) 
                self.state = 2286
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,192,self._ctx)

            self.state = 2287
            self.atomTerm()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AtomTermContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.RootLevel = 0
            self.ExpOpCount = 0

        def vfrExpressionCatenate(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrExpressionCatenateContext,0)


        def vfrExpressionMatch(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrExpressionMatchContext,0)


        def vfrExpressionMatch2(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrExpressionMatch2Context,0)


        def vfrExpressionParen(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrExpressionParenContext,0)


        def vfrExpressionBuildInFunction(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrExpressionBuildInFunctionContext,0)


        def vfrExpressionConstant(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrExpressionConstantContext,0)


        def vfrExpressionUnaryOp(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrExpressionUnaryOpContext,0)


        def vfrExpressionTernaryOp(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrExpressionTernaryOpContext,0)


        def vfrExpressionMap(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrExpressionMapContext,0)


        def NOT(self):
            return self.getToken(VfrSyntaxParser.NOT, 0)

        def atomTerm(self):
            return self.getTypedRuleContext(VfrSyntaxParser.AtomTermContext,0)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_atomTerm

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtomTerm" ):
                return visitor.visitAtomTerm(self)
            else:
                return visitor.visitChildren(self)




    def atomTerm(self):

        localctx = VfrSyntaxParser.AtomTermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_atomTerm)
        try:
            self.state = 2301
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,193,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2289
                self.vfrExpressionCatenate()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2290
                self.vfrExpressionMatch()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2291
                self.vfrExpressionMatch2()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2292
                self.vfrExpressionParen()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2293
                self.vfrExpressionBuildInFunction()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2294
                self.vfrExpressionConstant()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2295
                self.vfrExpressionUnaryOp()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2296
                self.vfrExpressionTernaryOp()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2297
                self.vfrExpressionMap()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2298
                self.match(VfrSyntaxParser.NOT)
                self.state = 2299
                self.atomTerm()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 2300
                self.vfrExpressionMatch2()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrExpressionCatenateContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.RootLevel = 0
            self.ExpOpCount = 0

        def Catenate(self):
            return self.getToken(VfrSyntaxParser.Catenate, 0)

        def OpenParen(self):
            return self.getToken(VfrSyntaxParser.OpenParen, 0)

        def vfrStatementExpressionSub(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrStatementExpressionSubContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementExpressionSubContext,i)


        def Comma(self):
            return self.getToken(VfrSyntaxParser.Comma, 0)

        def CloseParen(self):
            return self.getToken(VfrSyntaxParser.CloseParen, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrExpressionCatenate

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrExpressionCatenate" ):
                return visitor.visitVfrExpressionCatenate(self)
            else:
                return visitor.visitChildren(self)




    def vfrExpressionCatenate(self):

        localctx = VfrSyntaxParser.VfrExpressionCatenateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_vfrExpressionCatenate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2303
            self.match(VfrSyntaxParser.Catenate)
            self.state = 2304
            self.match(VfrSyntaxParser.OpenParen)
            self.state = 2305
            self.vfrStatementExpressionSub()
            self.state = 2306
            self.match(VfrSyntaxParser.Comma)
            self.state = 2307
            self.vfrStatementExpressionSub()
            self.state = 2308
            self.match(VfrSyntaxParser.CloseParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrExpressionMatchContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.RootLevel = 0
            self.ExpOpCount = 0

        def Match(self):
            return self.getToken(VfrSyntaxParser.Match, 0)

        def OpenParen(self):
            return self.getToken(VfrSyntaxParser.OpenParen, 0)

        def vfrStatementExpressionSub(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrStatementExpressionSubContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementExpressionSubContext,i)


        def Comma(self):
            return self.getToken(VfrSyntaxParser.Comma, 0)

        def CloseParen(self):
            return self.getToken(VfrSyntaxParser.CloseParen, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrExpressionMatch

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrExpressionMatch" ):
                return visitor.visitVfrExpressionMatch(self)
            else:
                return visitor.visitChildren(self)




    def vfrExpressionMatch(self):

        localctx = VfrSyntaxParser.VfrExpressionMatchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_vfrExpressionMatch)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2310
            self.match(VfrSyntaxParser.Match)
            self.state = 2311
            self.match(VfrSyntaxParser.OpenParen)
            self.state = 2312
            self.vfrStatementExpressionSub()
            self.state = 2313
            self.match(VfrSyntaxParser.Comma)
            self.state = 2314
            self.vfrStatementExpressionSub()
            self.state = 2315
            self.match(VfrSyntaxParser.CloseParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrExpressionMatch2Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.RootLevel = 0
            self.ExpOpCount = 0

        def Match2(self):
            return self.getToken(VfrSyntaxParser.Match2, 0)

        def OpenParen(self):
            return self.getToken(VfrSyntaxParser.OpenParen, 0)

        def vfrStatementExpressionSub(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrStatementExpressionSubContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementExpressionSubContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Comma)
            else:
                return self.getToken(VfrSyntaxParser.Comma, i)

        def guidDefinition(self):
            return self.getTypedRuleContext(VfrSyntaxParser.GuidDefinitionContext,0)


        def CloseParen(self):
            return self.getToken(VfrSyntaxParser.CloseParen, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrExpressionMatch2

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrExpressionMatch2" ):
                return visitor.visitVfrExpressionMatch2(self)
            else:
                return visitor.visitChildren(self)




    def vfrExpressionMatch2(self):

        localctx = VfrSyntaxParser.VfrExpressionMatch2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_vfrExpressionMatch2)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2317
            self.match(VfrSyntaxParser.Match2)
            self.state = 2318
            self.match(VfrSyntaxParser.OpenParen)
            self.state = 2319
            self.vfrStatementExpressionSub()
            self.state = 2320
            self.match(VfrSyntaxParser.Comma)
            self.state = 2321
            self.vfrStatementExpressionSub()
            self.state = 2322
            self.match(VfrSyntaxParser.Comma)
            self.state = 2323
            self.guidDefinition()
            self.state = 2324
            self.match(VfrSyntaxParser.CloseParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrExpressionParenContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.RootLevel = 0
            self.ExpOpCount = 0

        def OpenParen(self):
            return self.getToken(VfrSyntaxParser.OpenParen, 0)

        def vfrStatementExpressionSub(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementExpressionSubContext,0)


        def CloseParen(self):
            return self.getToken(VfrSyntaxParser.CloseParen, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrExpressionParen

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrExpressionParen" ):
                return visitor.visitVfrExpressionParen(self)
            else:
                return visitor.visitChildren(self)




    def vfrExpressionParen(self):

        localctx = VfrSyntaxParser.VfrExpressionParenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_vfrExpressionParen)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2326
            self.match(VfrSyntaxParser.OpenParen)
            self.state = 2327
            self.vfrStatementExpressionSub()
            self.state = 2328
            self.match(VfrSyntaxParser.CloseParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrExpressionBuildInFunctionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.RootLevel = 0
            self.ExpOpCount = 0

        def dupExp(self):
            return self.getTypedRuleContext(VfrSyntaxParser.DupExpContext,0)


        def vareqvalExp(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VareqvalExpContext,0)


        def ideqvalExp(self):
            return self.getTypedRuleContext(VfrSyntaxParser.IdeqvalExpContext,0)


        def ideqidExp(self):
            return self.getTypedRuleContext(VfrSyntaxParser.IdeqidExpContext,0)


        def ideqvallistExp(self):
            return self.getTypedRuleContext(VfrSyntaxParser.IdeqvallistExpContext,0)


        def questionref1Exp(self):
            return self.getTypedRuleContext(VfrSyntaxParser.Questionref1ExpContext,0)


        def rulerefExp(self):
            return self.getTypedRuleContext(VfrSyntaxParser.RulerefExpContext,0)


        def stringref1Exp(self):
            return self.getTypedRuleContext(VfrSyntaxParser.Stringref1ExpContext,0)


        def pushthisExp(self):
            return self.getTypedRuleContext(VfrSyntaxParser.PushthisExpContext,0)


        def securityExp(self):
            return self.getTypedRuleContext(VfrSyntaxParser.SecurityExpContext,0)


        def getExp(self):
            return self.getTypedRuleContext(VfrSyntaxParser.GetExpContext,0)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrExpressionBuildInFunction

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrExpressionBuildInFunction" ):
                return visitor.visitVfrExpressionBuildInFunction(self)
            else:
                return visitor.visitChildren(self)




    def vfrExpressionBuildInFunction(self):

        localctx = VfrSyntaxParser.VfrExpressionBuildInFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_vfrExpressionBuildInFunction)
        try:
            self.state = 2341
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VfrSyntaxParser.Dup]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2330
                self.dupExp()
                pass
            elif token in [VfrSyntaxParser.T__6, VfrSyntaxParser.T__19, VfrSyntaxParser.T__20, VfrSyntaxParser.T__21, VfrSyntaxParser.T__22, VfrSyntaxParser.T__23, VfrSyntaxParser.T__24, VfrSyntaxParser.T__25, VfrSyntaxParser.T__26, VfrSyntaxParser.T__27, VfrSyntaxParser.T__28, VfrSyntaxParser.T__29, VfrSyntaxParser.T__30, VfrSyntaxParser.T__32, VfrSyntaxParser.CloseParen, VfrSyntaxParser.Negative, VfrSyntaxParser.Colon, VfrSyntaxParser.Slash, VfrSyntaxParser.Semicolon, VfrSyntaxParser.Comma, VfrSyntaxParser.EndOneOf, VfrSyntaxParser.EndList, VfrSyntaxParser.Option, VfrSyntaxParser.EndDate, VfrSyntaxParser.EndTime, VfrSyntaxParser.EndCheckBox, VfrSyntaxParser.EndNumeric, VfrSyntaxParser.Default, VfrSyntaxParser.EndPassword, VfrSyntaxParser.EndString, VfrSyntaxParser.SuppressIf, VfrSyntaxParser.DisableIf, VfrSyntaxParser.InconsistentIf, VfrSyntaxParser.WarningIf, VfrSyntaxParser.NoSubmitIf, VfrSyntaxParser.EndIf, VfrSyntaxParser.Image, VfrSyntaxParser.Locked, VfrSyntaxParser.EndRule, VfrSyntaxParser.Value, VfrSyntaxParser.Read, VfrSyntaxParser.Write, VfrSyntaxParser.Refresh, VfrSyntaxParser.VarstoreDevice, VfrSyntaxParser.GuidOp, VfrSyntaxParser.AND, VfrSyntaxParser.OR, VfrSyntaxParser.RefreshGuid]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2331
                self.vareqvalExp()
                pass
            elif token in [VfrSyntaxParser.IdEqVal]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2332
                self.ideqvalExp()
                pass
            elif token in [VfrSyntaxParser.IdEqId]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2333
                self.ideqidExp()
                pass
            elif token in [VfrSyntaxParser.IdEqValList]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2334
                self.ideqvallistExp()
                pass
            elif token in [VfrSyntaxParser.QuestionRef, VfrSyntaxParser.Number]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2335
                self.questionref1Exp()
                pass
            elif token in [VfrSyntaxParser.RuleRef]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2336
                self.rulerefExp()
                pass
            elif token in [VfrSyntaxParser.StringRef]:
                self.enterOuterAlt(localctx, 8)
                self.state = 2337
                self.stringref1Exp()
                pass
            elif token in [VfrSyntaxParser.PushThis]:
                self.enterOuterAlt(localctx, 9)
                self.state = 2338
                self.pushthisExp()
                pass
            elif token in [VfrSyntaxParser.Security]:
                self.enterOuterAlt(localctx, 10)
                self.state = 2339
                self.securityExp()
                pass
            elif token in [VfrSyntaxParser.Get]:
                self.enterOuterAlt(localctx, 11)
                self.state = 2340
                self.getExp()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DupExpContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.RootLevel = 0
            self.ExpOpCount = 0

        def Dup(self):
            return self.getToken(VfrSyntaxParser.Dup, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_dupExp

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDupExp" ):
                return visitor.visitDupExp(self)
            else:
                return visitor.visitChildren(self)




    def dupExp(self):

        localctx = VfrSyntaxParser.DupExpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_dupExp)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2343
            self.match(VfrSyntaxParser.Dup)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VareqvalExpContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.RootLevel = 0
            self.ExpOpCount = 0


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vareqvalExp

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVareqvalExp" ):
                return visitor.visitVareqvalExp(self)
            else:
                return visitor.visitChildren(self)




    def vareqvalExp(self):

        localctx = VfrSyntaxParser.VareqvalExpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_vareqvalExp)
        try:
            self.enterOuterAlt(localctx, 1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdeqvalExpContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.RootLevel = 0
            self.ExpOpCount = 0

        def IdEqVal(self):
            return self.getToken(VfrSyntaxParser.IdEqVal, 0)

        def vfrQuestionDataFieldName(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrQuestionDataFieldNameContext,0)


        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_ideqvalExp

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdeqvalExp" ):
                return visitor.visitIdeqvalExp(self)
            else:
                return visitor.visitChildren(self)




    def ideqvalExp(self):

        localctx = VfrSyntaxParser.IdeqvalExpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_ideqvalExp)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2347
            self.match(VfrSyntaxParser.IdEqVal)
            self.state = 2348
            self.vfrQuestionDataFieldName()
            self.state = 2349
            self.match(VfrSyntaxParser.T__20)
            self.state = 2350
            self.match(VfrSyntaxParser.Number)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdeqidExpContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.RootLevel = 0
            self.ExpOpCount = 0

        def IdEqId(self):
            return self.getToken(VfrSyntaxParser.IdEqId, 0)

        def vfrQuestionDataFieldName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrQuestionDataFieldNameContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrQuestionDataFieldNameContext,i)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_ideqidExp

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdeqidExp" ):
                return visitor.visitIdeqidExp(self)
            else:
                return visitor.visitChildren(self)




    def ideqidExp(self):

        localctx = VfrSyntaxParser.IdeqidExpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_ideqidExp)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2352
            self.match(VfrSyntaxParser.IdEqId)
            self.state = 2353
            self.vfrQuestionDataFieldName()
            self.state = 2354
            self.match(VfrSyntaxParser.T__20)
            self.state = 2355
            self.vfrQuestionDataFieldName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdeqvallistExpContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.RootLevel = 0
            self.ExpOpCount = 0

        def IdEqValList(self):
            return self.getToken(VfrSyntaxParser.IdEqValList, 0)

        def vfrQuestionDataFieldName(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrQuestionDataFieldNameContext,0)


        def Number(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Number)
            else:
                return self.getToken(VfrSyntaxParser.Number, i)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_ideqvallistExp

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdeqvallistExp" ):
                return visitor.visitIdeqvallistExp(self)
            else:
                return visitor.visitChildren(self)




    def ideqvallistExp(self):

        localctx = VfrSyntaxParser.IdeqvallistExpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_ideqvallistExp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2357
            self.match(VfrSyntaxParser.IdEqValList)
            self.state = 2358
            self.vfrQuestionDataFieldName()
            self.state = 2359
            self.match(VfrSyntaxParser.T__20)
            self.state = 2361 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2360
                self.match(VfrSyntaxParser.Number)
                self.state = 2363 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==VfrSyntaxParser.Number):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrQuestionDataFieldNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.RootLevel = 0
            self.ExpOpCount = 0

        def StringIdentifier(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.StringIdentifier)
            else:
                return self.getToken(VfrSyntaxParser.StringIdentifier, i)

        def OpenBracket(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.OpenBracket)
            else:
                return self.getToken(VfrSyntaxParser.OpenBracket, i)

        def Number(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Number)
            else:
                return self.getToken(VfrSyntaxParser.Number, i)

        def CloseBracket(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.CloseBracket)
            else:
                return self.getToken(VfrSyntaxParser.CloseBracket, i)

        def Dot(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Dot)
            else:
                return self.getToken(VfrSyntaxParser.Dot, i)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrQuestionDataFieldName

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrQuestionDataFieldName" ):
                return visitor.visitVfrQuestionDataFieldName(self)
            else:
                return visitor.visitChildren(self)




    def vfrQuestionDataFieldName(self):

        localctx = VfrSyntaxParser.VfrQuestionDataFieldNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_vfrQuestionDataFieldName)
        self._la = 0 # Token type
        try:
            self.state = 2382
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,198,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2365
                self.match(VfrSyntaxParser.StringIdentifier)
                self.state = 2366
                self.match(VfrSyntaxParser.OpenBracket)
                self.state = 2367
                self.match(VfrSyntaxParser.Number)
                self.state = 2368
                self.match(VfrSyntaxParser.CloseBracket)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2369
                self.match(VfrSyntaxParser.StringIdentifier)
                self.state = 2379
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==VfrSyntaxParser.Dot:
                    self.state = 2370
                    self.match(VfrSyntaxParser.Dot)
                    self.state = 2371
                    self.match(VfrSyntaxParser.StringIdentifier)
                    self.state = 2375
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VfrSyntaxParser.OpenBracket:
                        self.state = 2372
                        self.match(VfrSyntaxParser.OpenBracket)
                        self.state = 2373
                        self.match(VfrSyntaxParser.Number)
                        self.state = 2374
                        self.match(VfrSyntaxParser.CloseBracket)


                    self.state = 2381
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Questionref1ExpContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.RootLevel = 0
            self.ExpOpCount = 0

        def QuestionRef(self):
            return self.getToken(VfrSyntaxParser.QuestionRef, 0)

        def OpenParen(self):
            return self.getToken(VfrSyntaxParser.OpenParen, 0)

        def StringIdentifier(self):
            return self.getToken(VfrSyntaxParser.StringIdentifier, 0)

        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def CloseParen(self):
            return self.getToken(VfrSyntaxParser.CloseParen, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_questionref1Exp

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuestionref1Exp" ):
                return visitor.visitQuestionref1Exp(self)
            else:
                return visitor.visitChildren(self)




    def questionref1Exp(self):

        localctx = VfrSyntaxParser.Questionref1ExpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_questionref1Exp)
        try:
            self.state = 2389
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VfrSyntaxParser.QuestionRef]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2384
                self.match(VfrSyntaxParser.QuestionRef)
                self.state = 2385
                self.match(VfrSyntaxParser.OpenParen)
                self.state = 2386
                self.match(VfrSyntaxParser.StringIdentifier)
                pass
            elif token in [VfrSyntaxParser.Number]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2387
                self.match(VfrSyntaxParser.Number)
                self.state = 2388
                self.match(VfrSyntaxParser.CloseParen)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RulerefExpContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.RootLevel = 0
            self.ExpOpCount = 0

        def RuleRef(self):
            return self.getToken(VfrSyntaxParser.RuleRef, 0)

        def OpenParen(self):
            return self.getToken(VfrSyntaxParser.OpenParen, 0)

        def StringIdentifier(self):
            return self.getToken(VfrSyntaxParser.StringIdentifier, 0)

        def CloseParen(self):
            return self.getToken(VfrSyntaxParser.CloseParen, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_rulerefExp

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRulerefExp" ):
                return visitor.visitRulerefExp(self)
            else:
                return visitor.visitChildren(self)




    def rulerefExp(self):

        localctx = VfrSyntaxParser.RulerefExpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_rulerefExp)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2391
            self.match(VfrSyntaxParser.RuleRef)
            self.state = 2392
            self.match(VfrSyntaxParser.OpenParen)
            self.state = 2393
            self.match(VfrSyntaxParser.StringIdentifier)
            self.state = 2394
            self.match(VfrSyntaxParser.CloseParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Stringref1ExpContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.RootLevel = 0
            self.ExpOpCount = 0

        def StringRef(self):
            return self.getToken(VfrSyntaxParser.StringRef, 0)

        def OpenParen(self):
            return self.getToken(VfrSyntaxParser.OpenParen, 0)

        def getStringId(self):
            return self.getTypedRuleContext(VfrSyntaxParser.GetStringIdContext,0)


        def CloseParen(self):
            return self.getToken(VfrSyntaxParser.CloseParen, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_stringref1Exp

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringref1Exp" ):
                return visitor.visitStringref1Exp(self)
            else:
                return visitor.visitChildren(self)




    def stringref1Exp(self):

        localctx = VfrSyntaxParser.Stringref1ExpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_stringref1Exp)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2396
            self.match(VfrSyntaxParser.StringRef)
            self.state = 2397
            self.match(VfrSyntaxParser.OpenParen)
            self.state = 2398
            self.getStringId()
            self.state = 2399
            self.match(VfrSyntaxParser.CloseParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PushthisExpContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.RootLevel = 0
            self.ExpOpCount = 0

        def PushThis(self):
            return self.getToken(VfrSyntaxParser.PushThis, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_pushthisExp

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPushthisExp" ):
                return visitor.visitPushthisExp(self)
            else:
                return visitor.visitChildren(self)




    def pushthisExp(self):

        localctx = VfrSyntaxParser.PushthisExpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_pushthisExp)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2401
            self.match(VfrSyntaxParser.PushThis)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SecurityExpContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.RootLevel = 0
            self.ExpOpCount = 0

        def Security(self):
            return self.getToken(VfrSyntaxParser.Security, 0)

        def OpenParen(self):
            return self.getToken(VfrSyntaxParser.OpenParen, 0)

        def guidDefinition(self):
            return self.getTypedRuleContext(VfrSyntaxParser.GuidDefinitionContext,0)


        def CloseParen(self):
            return self.getToken(VfrSyntaxParser.CloseParen, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_securityExp

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSecurityExp" ):
                return visitor.visitSecurityExp(self)
            else:
                return visitor.visitChildren(self)




    def securityExp(self):

        localctx = VfrSyntaxParser.SecurityExpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_securityExp)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2403
            self.match(VfrSyntaxParser.Security)
            self.state = 2404
            self.match(VfrSyntaxParser.OpenParen)
            self.state = 2405
            self.guidDefinition()
            self.state = 2406
            self.match(VfrSyntaxParser.CloseParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GetExpContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.BaseInfo = EFI_VARSTORE_INFO()

        def Get(self):
            return self.getToken(VfrSyntaxParser.Get, 0)

        def OpenParen(self):
            return self.getToken(VfrSyntaxParser.OpenParen, 0)

        def vfrStorageVarId(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStorageVarIdContext,0)


        def CloseParen(self):
            return self.getToken(VfrSyntaxParser.CloseParen, 0)

        def FLAGS(self):
            return self.getToken(VfrSyntaxParser.FLAGS, 0)

        def vfrNumericFlags(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrNumericFlagsContext,0)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_getExp

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGetExp" ):
                return visitor.visitGetExp(self)
            else:
                return visitor.visitChildren(self)




    def getExp(self):

        localctx = VfrSyntaxParser.GetExpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_getExp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2408
            self.match(VfrSyntaxParser.Get)
            self.state = 2409
            self.match(VfrSyntaxParser.OpenParen)
            self.state = 2410
            self.vfrStorageVarId(localctx.BaseInfo, False)
            self.state = 2415
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.T__6:
                self.state = 2411
                self.match(VfrSyntaxParser.T__6)
                self.state = 2412
                self.match(VfrSyntaxParser.FLAGS)
                self.state = 2413
                self.match(VfrSyntaxParser.T__5)
                self.state = 2414
                self.vfrNumericFlags()


            self.state = 2417
            self.match(VfrSyntaxParser.CloseParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrExpressionConstantContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.RootLevel = 0
            self.ExpOpCount = 0

        def TrueSymbol(self):
            return self.getToken(VfrSyntaxParser.TrueSymbol, 0)

        def FalseSymbol(self):
            return self.getToken(VfrSyntaxParser.FalseSymbol, 0)

        def One(self):
            return self.getToken(VfrSyntaxParser.One, 0)

        def Ones(self):
            return self.getToken(VfrSyntaxParser.Ones, 0)

        def Zero(self):
            return self.getToken(VfrSyntaxParser.Zero, 0)

        def Undefined(self):
            return self.getToken(VfrSyntaxParser.Undefined, 0)

        def Version(self):
            return self.getToken(VfrSyntaxParser.Version, 0)

        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrExpressionConstant

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrExpressionConstant" ):
                return visitor.visitVfrExpressionConstant(self)
            else:
                return visitor.visitChildren(self)




    def vfrExpressionConstant(self):

        localctx = VfrSyntaxParser.VfrExpressionConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_vfrExpressionConstant)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2419
            _la = self._input.LA(1)
            if not(((((_la - 222)) & ~0x3f) == 0 and ((1 << (_la - 222)) & ((1 << (VfrSyntaxParser.TrueSymbol - 222)) | (1 << (VfrSyntaxParser.FalseSymbol - 222)) | (1 << (VfrSyntaxParser.One - 222)) | (1 << (VfrSyntaxParser.Ones - 222)) | (1 << (VfrSyntaxParser.Zero - 222)) | (1 << (VfrSyntaxParser.Undefined - 222)) | (1 << (VfrSyntaxParser.Version - 222)) | (1 << (VfrSyntaxParser.Number - 222)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrExpressionUnaryOpContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.RootLevel = 0
            self.ExpOpCount = 0

        def lengthExp(self):
            return self.getTypedRuleContext(VfrSyntaxParser.LengthExpContext,0)


        def bitwisenotExp(self):
            return self.getTypedRuleContext(VfrSyntaxParser.BitwisenotExpContext,0)


        def question23refExp(self):
            return self.getTypedRuleContext(VfrSyntaxParser.Question23refExpContext,0)


        def stringref2Exp(self):
            return self.getTypedRuleContext(VfrSyntaxParser.Stringref2ExpContext,0)


        def toboolExp(self):
            return self.getTypedRuleContext(VfrSyntaxParser.ToboolExpContext,0)


        def tostringExp(self):
            return self.getTypedRuleContext(VfrSyntaxParser.TostringExpContext,0)


        def unintExp(self):
            return self.getTypedRuleContext(VfrSyntaxParser.UnintExpContext,0)


        def toupperExp(self):
            return self.getTypedRuleContext(VfrSyntaxParser.ToupperExpContext,0)


        def tolwerExp(self):
            return self.getTypedRuleContext(VfrSyntaxParser.TolwerExpContext,0)


        def setExp(self):
            return self.getTypedRuleContext(VfrSyntaxParser.SetExpContext,0)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrExpressionUnaryOp

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrExpressionUnaryOp" ):
                return visitor.visitVfrExpressionUnaryOp(self)
            else:
                return visitor.visitChildren(self)




    def vfrExpressionUnaryOp(self):

        localctx = VfrSyntaxParser.VfrExpressionUnaryOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_vfrExpressionUnaryOp)
        try:
            self.state = 2431
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VfrSyntaxParser.Length]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2421
                self.lengthExp()
                pass
            elif token in [VfrSyntaxParser.BitWiseNot]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2422
                self.bitwisenotExp()
                pass
            elif token in [VfrSyntaxParser.QuestionRefVal]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2423
                self.question23refExp()
                pass
            elif token in [VfrSyntaxParser.StringRefVal]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2424
                self.stringref2Exp()
                pass
            elif token in [VfrSyntaxParser.BoolVal]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2425
                self.toboolExp()
                pass
            elif token in [VfrSyntaxParser.StringVal]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2426
                self.tostringExp()
                pass
            elif token in [VfrSyntaxParser.UnIntVal]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2427
                self.unintExp()
                pass
            elif token in [VfrSyntaxParser.ToUpper]:
                self.enterOuterAlt(localctx, 8)
                self.state = 2428
                self.toupperExp()
                pass
            elif token in [VfrSyntaxParser.ToLower]:
                self.enterOuterAlt(localctx, 9)
                self.state = 2429
                self.tolwerExp()
                pass
            elif token in [VfrSyntaxParser.Set]:
                self.enterOuterAlt(localctx, 10)
                self.state = 2430
                self.setExp()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LengthExpContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.RootLevel = 0
            self.ExpOpCount = 0

        def Length(self):
            return self.getToken(VfrSyntaxParser.Length, 0)

        def OpenParen(self):
            return self.getToken(VfrSyntaxParser.OpenParen, 0)

        def vfrStatementExpression(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementExpressionContext,0)


        def CloseParen(self):
            return self.getToken(VfrSyntaxParser.CloseParen, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_lengthExp

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLengthExp" ):
                return visitor.visitLengthExp(self)
            else:
                return visitor.visitChildren(self)




    def lengthExp(self):

        localctx = VfrSyntaxParser.LengthExpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_lengthExp)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2433
            self.match(VfrSyntaxParser.Length)
            self.state = 2434
            self.match(VfrSyntaxParser.OpenParen)
            self.state = 2435
            self.vfrStatementExpression()
            self.state = 2436
            self.match(VfrSyntaxParser.CloseParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BitwisenotExpContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.RootLevel = 0
            self.ExpOpCount = 0

        def BitWiseNot(self):
            return self.getToken(VfrSyntaxParser.BitWiseNot, 0)

        def OpenParen(self):
            return self.getToken(VfrSyntaxParser.OpenParen, 0)

        def vfrStatementExpression(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementExpressionContext,0)


        def CloseParen(self):
            return self.getToken(VfrSyntaxParser.CloseParen, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_bitwisenotExp

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitwisenotExp" ):
                return visitor.visitBitwisenotExp(self)
            else:
                return visitor.visitChildren(self)




    def bitwisenotExp(self):

        localctx = VfrSyntaxParser.BitwisenotExpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_bitwisenotExp)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2438
            self.match(VfrSyntaxParser.BitWiseNot)
            self.state = 2439
            self.match(VfrSyntaxParser.OpenParen)
            self.state = 2440
            self.vfrStatementExpression()
            self.state = 2441
            self.match(VfrSyntaxParser.CloseParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Question23refExpContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.RootLevel = 0
            self.ExpOpCount = 0

        def QuestionRefVal(self):
            return self.getToken(VfrSyntaxParser.QuestionRefVal, 0)

        def OpenParen(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.OpenParen)
            else:
                return self.getToken(VfrSyntaxParser.OpenParen, i)

        def vfrStatementExpressionSub(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementExpressionSubContext,0)


        def CloseParen(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.CloseParen)
            else:
                return self.getToken(VfrSyntaxParser.CloseParen, i)

        def DevicePath(self):
            return self.getToken(VfrSyntaxParser.DevicePath, 0)

        def StringToken(self):
            return self.getToken(VfrSyntaxParser.StringToken, 0)

        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Comma)
            else:
                return self.getToken(VfrSyntaxParser.Comma, i)

        def Uuid(self):
            return self.getToken(VfrSyntaxParser.Uuid, 0)

        def guidDefinition(self):
            return self.getTypedRuleContext(VfrSyntaxParser.GuidDefinitionContext,0)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_question23refExp

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuestion23refExp" ):
                return visitor.visitQuestion23refExp(self)
            else:
                return visitor.visitChildren(self)




    def question23refExp(self):

        localctx = VfrSyntaxParser.Question23refExpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_question23refExp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2443
            self.match(VfrSyntaxParser.QuestionRefVal)
            self.state = 2444
            self.match(VfrSyntaxParser.OpenParen)
            self.state = 2452
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.DevicePath:
                self.state = 2445
                self.match(VfrSyntaxParser.DevicePath)
                self.state = 2446
                self.match(VfrSyntaxParser.T__5)
                self.state = 2447
                self.match(VfrSyntaxParser.StringToken)
                self.state = 2448
                self.match(VfrSyntaxParser.OpenParen)
                self.state = 2449
                self.match(VfrSyntaxParser.Number)
                self.state = 2450
                self.match(VfrSyntaxParser.CloseParen)
                self.state = 2451
                self.match(VfrSyntaxParser.Comma)


            self.state = 2459
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.Uuid:
                self.state = 2454
                self.match(VfrSyntaxParser.Uuid)
                self.state = 2455
                self.match(VfrSyntaxParser.T__5)
                self.state = 2456
                self.guidDefinition()
                self.state = 2457
                self.match(VfrSyntaxParser.Comma)


            self.state = 2461
            self.vfrStatementExpressionSub()
            self.state = 2462
            self.match(VfrSyntaxParser.CloseParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Stringref2ExpContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.RootLevel = 0
            self.ExpOpCount = 0

        def StringRefVal(self):
            return self.getToken(VfrSyntaxParser.StringRefVal, 0)

        def OpenParen(self):
            return self.getToken(VfrSyntaxParser.OpenParen, 0)

        def vfrStatementExpressionSub(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementExpressionSubContext,0)


        def CloseParen(self):
            return self.getToken(VfrSyntaxParser.CloseParen, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_stringref2Exp

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringref2Exp" ):
                return visitor.visitStringref2Exp(self)
            else:
                return visitor.visitChildren(self)




    def stringref2Exp(self):

        localctx = VfrSyntaxParser.Stringref2ExpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_stringref2Exp)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2464
            self.match(VfrSyntaxParser.StringRefVal)
            self.state = 2465
            self.match(VfrSyntaxParser.OpenParen)
            self.state = 2466
            self.vfrStatementExpressionSub()
            self.state = 2467
            self.match(VfrSyntaxParser.CloseParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ToboolExpContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.RootLevel = 0
            self.ExpOpCount = 0

        def BoolVal(self):
            return self.getToken(VfrSyntaxParser.BoolVal, 0)

        def OpenParen(self):
            return self.getToken(VfrSyntaxParser.OpenParen, 0)

        def vfrStatementExpressionSub(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementExpressionSubContext,0)


        def CloseParen(self):
            return self.getToken(VfrSyntaxParser.CloseParen, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_toboolExp

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitToboolExp" ):
                return visitor.visitToboolExp(self)
            else:
                return visitor.visitChildren(self)




    def toboolExp(self):

        localctx = VfrSyntaxParser.ToboolExpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_toboolExp)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2469
            self.match(VfrSyntaxParser.BoolVal)
            self.state = 2470
            self.match(VfrSyntaxParser.OpenParen)
            self.state = 2471
            self.vfrStatementExpressionSub()
            self.state = 2472
            self.match(VfrSyntaxParser.CloseParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TostringExpContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.RootLevel = 0
            self.ExpOpCount = 0

        def StringVal(self):
            return self.getToken(VfrSyntaxParser.StringVal, 0)

        def OpenParen(self):
            return self.getToken(VfrSyntaxParser.OpenParen, 0)

        def vfrStatementExpressionSub(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementExpressionSubContext,0)


        def CloseParen(self):
            return self.getToken(VfrSyntaxParser.CloseParen, 0)

        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def Comma(self):
            return self.getToken(VfrSyntaxParser.Comma, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_tostringExp

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTostringExp" ):
                return visitor.visitTostringExp(self)
            else:
                return visitor.visitChildren(self)




    def tostringExp(self):

        localctx = VfrSyntaxParser.TostringExpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_tostringExp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2474
            self.match(VfrSyntaxParser.StringVal)
            self.state = 2479
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.T__31:
                self.state = 2475
                self.match(VfrSyntaxParser.T__31)
                self.state = 2476
                self.match(VfrSyntaxParser.T__5)
                self.state = 2477
                self.match(VfrSyntaxParser.Number)
                self.state = 2478
                self.match(VfrSyntaxParser.Comma)


            self.state = 2481
            self.match(VfrSyntaxParser.OpenParen)
            self.state = 2482
            self.vfrStatementExpressionSub()
            self.state = 2483
            self.match(VfrSyntaxParser.CloseParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnintExpContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.RootLevel = 0
            self.ExpOpCount = 0

        def UnIntVal(self):
            return self.getToken(VfrSyntaxParser.UnIntVal, 0)

        def OpenParen(self):
            return self.getToken(VfrSyntaxParser.OpenParen, 0)

        def vfrStatementExpressionSub(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementExpressionSubContext,0)


        def CloseParen(self):
            return self.getToken(VfrSyntaxParser.CloseParen, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_unintExp

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnintExp" ):
                return visitor.visitUnintExp(self)
            else:
                return visitor.visitChildren(self)




    def unintExp(self):

        localctx = VfrSyntaxParser.UnintExpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_unintExp)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2485
            self.match(VfrSyntaxParser.UnIntVal)
            self.state = 2486
            self.match(VfrSyntaxParser.OpenParen)
            self.state = 2487
            self.vfrStatementExpressionSub()
            self.state = 2488
            self.match(VfrSyntaxParser.CloseParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ToupperExpContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.RootLevel = 0
            self.ExpOpCount = 0

        def ToUpper(self):
            return self.getToken(VfrSyntaxParser.ToUpper, 0)

        def OpenParen(self):
            return self.getToken(VfrSyntaxParser.OpenParen, 0)

        def vfrStatementExpressionSub(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementExpressionSubContext,0)


        def CloseParen(self):
            return self.getToken(VfrSyntaxParser.CloseParen, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_toupperExp

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitToupperExp" ):
                return visitor.visitToupperExp(self)
            else:
                return visitor.visitChildren(self)




    def toupperExp(self):

        localctx = VfrSyntaxParser.ToupperExpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_toupperExp)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2490
            self.match(VfrSyntaxParser.ToUpper)
            self.state = 2491
            self.match(VfrSyntaxParser.OpenParen)
            self.state = 2492
            self.vfrStatementExpressionSub()
            self.state = 2493
            self.match(VfrSyntaxParser.CloseParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TolwerExpContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.RootLevel = 0
            self.ExpOpCount = 0

        def ToLower(self):
            return self.getToken(VfrSyntaxParser.ToLower, 0)

        def OpenParen(self):
            return self.getToken(VfrSyntaxParser.OpenParen, 0)

        def vfrStatementExpressionSub(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementExpressionSubContext,0)


        def CloseParen(self):
            return self.getToken(VfrSyntaxParser.CloseParen, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_tolwerExp

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTolwerExp" ):
                return visitor.visitTolwerExp(self)
            else:
                return visitor.visitChildren(self)




    def tolwerExp(self):

        localctx = VfrSyntaxParser.TolwerExpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_tolwerExp)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2495
            self.match(VfrSyntaxParser.ToLower)
            self.state = 2496
            self.match(VfrSyntaxParser.OpenParen)
            self.state = 2497
            self.vfrStatementExpressionSub()
            self.state = 2498
            self.match(VfrSyntaxParser.CloseParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetExpContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.BaseInfo = EFI_VARSTORE_INFO()
            self.RootLevel = 0
            self.ExpOpCount = 0

        def Set(self):
            return self.getToken(VfrSyntaxParser.Set, 0)

        def OpenParen(self):
            return self.getToken(VfrSyntaxParser.OpenParen, 0)

        def vfrStorageVarId(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStorageVarIdContext,0)


        def Comma(self):
            return self.getToken(VfrSyntaxParser.Comma, 0)

        def vfrStatementExpressionSub(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementExpressionSubContext,0)


        def CloseParen(self):
            return self.getToken(VfrSyntaxParser.CloseParen, 0)

        def FLAGS(self):
            return self.getToken(VfrSyntaxParser.FLAGS, 0)

        def vfrNumericFlags(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrNumericFlagsContext,0)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_setExp

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetExp" ):
                return visitor.visitSetExp(self)
            else:
                return visitor.visitChildren(self)




    def setExp(self):

        localctx = VfrSyntaxParser.SetExpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_setExp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2500
            self.match(VfrSyntaxParser.Set)
            self.state = 2501
            self.match(VfrSyntaxParser.OpenParen)
            self.state = 2502
            self.vfrStorageVarId(localctx.BaseInfo, False)
            self.state = 2507
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.T__6:
                self.state = 2503
                self.match(VfrSyntaxParser.T__6)
                self.state = 2504
                self.match(VfrSyntaxParser.FLAGS)
                self.state = 2505
                self.match(VfrSyntaxParser.T__5)
                self.state = 2506
                self.vfrNumericFlags()


            self.state = 2509
            self.match(VfrSyntaxParser.Comma)
            self.state = 2510
            self.vfrStatementExpressionSub()
            self.state = 2511
            self.match(VfrSyntaxParser.CloseParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrExpressionTernaryOpContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.RootLevel = 0
            self.ExpOpCount = 0

        def conditionalExp(self):
            return self.getTypedRuleContext(VfrSyntaxParser.ConditionalExpContext,0)


        def findExp(self):
            return self.getTypedRuleContext(VfrSyntaxParser.FindExpContext,0)


        def midExp(self):
            return self.getTypedRuleContext(VfrSyntaxParser.MidExpContext,0)


        def tokenExp(self):
            return self.getTypedRuleContext(VfrSyntaxParser.TokenExpContext,0)


        def spanExp(self):
            return self.getTypedRuleContext(VfrSyntaxParser.SpanExpContext,0)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrExpressionTernaryOp

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrExpressionTernaryOp" ):
                return visitor.visitVfrExpressionTernaryOp(self)
            else:
                return visitor.visitChildren(self)




    def vfrExpressionTernaryOp(self):

        localctx = VfrSyntaxParser.VfrExpressionTernaryOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_vfrExpressionTernaryOp)
        try:
            self.state = 2518
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VfrSyntaxParser.Cond]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2513
                self.conditionalExp()
                pass
            elif token in [VfrSyntaxParser.Find]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2514
                self.findExp()
                pass
            elif token in [VfrSyntaxParser.Mid]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2515
                self.midExp()
                pass
            elif token in [VfrSyntaxParser.Tok]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2516
                self.tokenExp()
                pass
            elif token in [VfrSyntaxParser.Span]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2517
                self.spanExp()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConditionalExpContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.RootLevel = 0
            self.ExpOpCount = 0

        def Cond(self):
            return self.getToken(VfrSyntaxParser.Cond, 0)

        def OpenParen(self):
            return self.getToken(VfrSyntaxParser.OpenParen, 0)

        def vfrStatementExpressionSub(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrStatementExpressionSubContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementExpressionSubContext,i)


        def Colon(self):
            return self.getToken(VfrSyntaxParser.Colon, 0)

        def CloseParen(self):
            return self.getToken(VfrSyntaxParser.CloseParen, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_conditionalExp

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConditionalExp" ):
                return visitor.visitConditionalExp(self)
            else:
                return visitor.visitChildren(self)




    def conditionalExp(self):

        localctx = VfrSyntaxParser.ConditionalExpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_conditionalExp)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2520
            self.match(VfrSyntaxParser.Cond)
            self.state = 2521
            self.match(VfrSyntaxParser.OpenParen)
            self.state = 2522
            self.vfrStatementExpressionSub()
            self.state = 2523
            self.match(VfrSyntaxParser.T__32)
            self.state = 2524
            self.vfrStatementExpressionSub()
            self.state = 2525
            self.match(VfrSyntaxParser.Colon)
            self.state = 2526
            self.vfrStatementExpressionSub()
            self.state = 2527
            self.match(VfrSyntaxParser.CloseParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FindExpContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.RootLevel = 0
            self.ExpOpCount = 0

        def Find(self):
            return self.getToken(VfrSyntaxParser.Find, 0)

        def OpenParen(self):
            return self.getToken(VfrSyntaxParser.OpenParen, 0)

        def findFormat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.FindFormatContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.FindFormatContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Comma)
            else:
                return self.getToken(VfrSyntaxParser.Comma, i)

        def vfrStatementExpressionSub(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrStatementExpressionSubContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementExpressionSubContext,i)


        def CloseParen(self):
            return self.getToken(VfrSyntaxParser.CloseParen, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_findExp

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFindExp" ):
                return visitor.visitFindExp(self)
            else:
                return visitor.visitChildren(self)




    def findExp(self):

        localctx = VfrSyntaxParser.FindExpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 346, self.RULE_findExp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2529
            self.match(VfrSyntaxParser.Find)
            self.state = 2530
            self.match(VfrSyntaxParser.OpenParen)
            self.state = 2531
            self.findFormat()
            self.state = 2536
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==VfrSyntaxParser.T__6:
                self.state = 2532
                self.match(VfrSyntaxParser.T__6)
                self.state = 2533
                self.findFormat()
                self.state = 2538
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2539
            self.match(VfrSyntaxParser.Comma)
            self.state = 2540
            self.vfrStatementExpressionSub()
            self.state = 2541
            self.match(VfrSyntaxParser.Comma)
            self.state = 2542
            self.vfrStatementExpressionSub()
            self.state = 2543
            self.match(VfrSyntaxParser.Comma)
            self.state = 2544
            self.vfrStatementExpressionSub()
            self.state = 2545
            self.match(VfrSyntaxParser.CloseParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FindFormatContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.RootLevel = 0
            self.ExpOpCount = 0


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_findFormat

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFindFormat" ):
                return visitor.visitFindFormat(self)
            else:
                return visitor.visitChildren(self)




    def findFormat(self):

        localctx = VfrSyntaxParser.FindFormatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 348, self.RULE_findFormat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2547
            _la = self._input.LA(1)
            if not(_la==VfrSyntaxParser.T__33 or _la==VfrSyntaxParser.T__34):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MidExpContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.RootLevel = 0
            self.ExpOpCount = 0

        def Mid(self):
            return self.getToken(VfrSyntaxParser.Mid, 0)

        def OpenParen(self):
            return self.getToken(VfrSyntaxParser.OpenParen, 0)

        def vfrStatementExpressionSub(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrStatementExpressionSubContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementExpressionSubContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Comma)
            else:
                return self.getToken(VfrSyntaxParser.Comma, i)

        def CloseParen(self):
            return self.getToken(VfrSyntaxParser.CloseParen, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_midExp

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMidExp" ):
                return visitor.visitMidExp(self)
            else:
                return visitor.visitChildren(self)




    def midExp(self):

        localctx = VfrSyntaxParser.MidExpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_midExp)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2549
            self.match(VfrSyntaxParser.Mid)
            self.state = 2550
            self.match(VfrSyntaxParser.OpenParen)
            self.state = 2551
            self.vfrStatementExpressionSub()
            self.state = 2552
            self.match(VfrSyntaxParser.Comma)
            self.state = 2553
            self.vfrStatementExpressionSub()
            self.state = 2554
            self.match(VfrSyntaxParser.Comma)
            self.state = 2555
            self.vfrStatementExpressionSub()
            self.state = 2556
            self.match(VfrSyntaxParser.CloseParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TokenExpContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.RootLevel = 0
            self.ExpOpCount = 0

        def Tok(self):
            return self.getToken(VfrSyntaxParser.Tok, 0)

        def OpenParen(self):
            return self.getToken(VfrSyntaxParser.OpenParen, 0)

        def vfrStatementExpressionSub(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrStatementExpressionSubContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementExpressionSubContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Comma)
            else:
                return self.getToken(VfrSyntaxParser.Comma, i)

        def CloseParen(self):
            return self.getToken(VfrSyntaxParser.CloseParen, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_tokenExp

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTokenExp" ):
                return visitor.visitTokenExp(self)
            else:
                return visitor.visitChildren(self)




    def tokenExp(self):

        localctx = VfrSyntaxParser.TokenExpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_tokenExp)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2558
            self.match(VfrSyntaxParser.Tok)
            self.state = 2559
            self.match(VfrSyntaxParser.OpenParen)
            self.state = 2560
            self.vfrStatementExpressionSub()
            self.state = 2561
            self.match(VfrSyntaxParser.Comma)
            self.state = 2562
            self.vfrStatementExpressionSub()
            self.state = 2563
            self.match(VfrSyntaxParser.Comma)
            self.state = 2564
            self.vfrStatementExpressionSub()
            self.state = 2565
            self.match(VfrSyntaxParser.CloseParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpanExpContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.RootLevel = 0
            self.ExpOpCount = 0

        def Span(self):
            return self.getToken(VfrSyntaxParser.Span, 0)

        def OpenParen(self):
            return self.getToken(VfrSyntaxParser.OpenParen, 0)

        def FLAGS(self):
            return self.getToken(VfrSyntaxParser.FLAGS, 0)

        def spanFlags(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.SpanFlagsContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.SpanFlagsContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Comma)
            else:
                return self.getToken(VfrSyntaxParser.Comma, i)

        def vfrStatementExpressionSub(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrStatementExpressionSubContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementExpressionSubContext,i)


        def CloseParen(self):
            return self.getToken(VfrSyntaxParser.CloseParen, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_spanExp

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSpanExp" ):
                return visitor.visitSpanExp(self)
            else:
                return visitor.visitChildren(self)




    def spanExp(self):

        localctx = VfrSyntaxParser.SpanExpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 354, self.RULE_spanExp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2567
            self.match(VfrSyntaxParser.Span)
            self.state = 2568
            self.match(VfrSyntaxParser.OpenParen)
            self.state = 2569
            self.match(VfrSyntaxParser.FLAGS)
            self.state = 2570
            self.match(VfrSyntaxParser.T__5)
            self.state = 2571
            self.spanFlags()
            self.state = 2576
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==VfrSyntaxParser.T__6:
                self.state = 2572
                self.match(VfrSyntaxParser.T__6)
                self.state = 2573
                self.spanFlags()
                self.state = 2578
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2579
            self.match(VfrSyntaxParser.Comma)
            self.state = 2580
            self.vfrStatementExpressionSub()
            self.state = 2581
            self.match(VfrSyntaxParser.Comma)
            self.state = 2582
            self.vfrStatementExpressionSub()
            self.state = 2583
            self.match(VfrSyntaxParser.Comma)
            self.state = 2584
            self.vfrStatementExpressionSub()
            self.state = 2585
            self.match(VfrSyntaxParser.CloseParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpanFlagsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.RootLevel = 0
            self.ExpOpCount = 0

        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_spanFlags

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSpanFlags" ):
                return visitor.visitSpanFlags(self)
            else:
                return visitor.visitChildren(self)




    def spanFlags(self):

        localctx = VfrSyntaxParser.SpanFlagsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_spanFlags)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2587
            _la = self._input.LA(1)
            if not(_la==VfrSyntaxParser.T__35 or _la==VfrSyntaxParser.T__36 or _la==VfrSyntaxParser.Number):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrExpressionMapContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.RootLevel = 0
            self.ExpOpCount = 0

        def Map(self):
            return self.getToken(VfrSyntaxParser.Map, 0)

        def OpenParen(self):
            return self.getToken(VfrSyntaxParser.OpenParen, 0)

        def vfrStatementExpressionSub(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementExpressionSubContext,0)


        def Colon(self):
            return self.getToken(VfrSyntaxParser.Colon, 0)

        def CloseParen(self):
            return self.getToken(VfrSyntaxParser.CloseParen, 0)

        def vfrStatementExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrStatementExpressionContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementExpressionContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Comma)
            else:
                return self.getToken(VfrSyntaxParser.Comma, i)

        def Semicolon(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Semicolon)
            else:
                return self.getToken(VfrSyntaxParser.Semicolon, i)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrExpressionMap

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrExpressionMap" ):
                return visitor.visitVfrExpressionMap(self)
            else:
                return visitor.visitChildren(self)




    def vfrExpressionMap(self):

        localctx = VfrSyntaxParser.VfrExpressionMapContext(self, self._ctx, self.state)
        self.enterRule(localctx, 358, self.RULE_vfrExpressionMap)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2589
            self.match(VfrSyntaxParser.Map)
            self.state = 2590
            self.match(VfrSyntaxParser.OpenParen)
            self.state = 2591
            self.vfrStatementExpressionSub()
            self.state = 2592
            self.match(VfrSyntaxParser.Colon)
            self.state = 2600
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VfrSyntaxParser.T__6) | (1 << VfrSyntaxParser.T__19) | (1 << VfrSyntaxParser.T__20) | (1 << VfrSyntaxParser.T__21) | (1 << VfrSyntaxParser.T__22) | (1 << VfrSyntaxParser.T__23) | (1 << VfrSyntaxParser.T__24) | (1 << VfrSyntaxParser.T__25) | (1 << VfrSyntaxParser.T__26) | (1 << VfrSyntaxParser.T__27) | (1 << VfrSyntaxParser.T__28) | (1 << VfrSyntaxParser.T__29) | (1 << VfrSyntaxParser.T__30) | (1 << VfrSyntaxParser.OpenParen) | (1 << VfrSyntaxParser.Negative) | (1 << VfrSyntaxParser.Slash) | (1 << VfrSyntaxParser.Comma))) != 0) or ((((_la - 205)) & ~0x3f) == 0 and ((1 << (_la - 205)) & ((1 << (VfrSyntaxParser.Cond - 205)) | (1 << (VfrSyntaxParser.Find - 205)) | (1 << (VfrSyntaxParser.Mid - 205)) | (1 << (VfrSyntaxParser.Tok - 205)) | (1 << (VfrSyntaxParser.Span - 205)) | (1 << (VfrSyntaxParser.Dup - 205)) | (1 << (VfrSyntaxParser.IdEqVal - 205)) | (1 << (VfrSyntaxParser.IdEqId - 205)) | (1 << (VfrSyntaxParser.IdEqValList - 205)) | (1 << (VfrSyntaxParser.QuestionRef - 205)) | (1 << (VfrSyntaxParser.RuleRef - 205)) | (1 << (VfrSyntaxParser.StringRef - 205)) | (1 << (VfrSyntaxParser.PushThis - 205)) | (1 << (VfrSyntaxParser.Security - 205)) | (1 << (VfrSyntaxParser.Get - 205)) | (1 << (VfrSyntaxParser.TrueSymbol - 205)) | (1 << (VfrSyntaxParser.FalseSymbol - 205)) | (1 << (VfrSyntaxParser.One - 205)) | (1 << (VfrSyntaxParser.Ones - 205)) | (1 << (VfrSyntaxParser.Zero - 205)) | (1 << (VfrSyntaxParser.Undefined - 205)) | (1 << (VfrSyntaxParser.Version - 205)) | (1 << (VfrSyntaxParser.Length - 205)) | (1 << (VfrSyntaxParser.AND - 205)) | (1 << (VfrSyntaxParser.OR - 205)) | (1 << (VfrSyntaxParser.NOT - 205)) | (1 << (VfrSyntaxParser.Set - 205)) | (1 << (VfrSyntaxParser.BitWiseNot - 205)) | (1 << (VfrSyntaxParser.BoolVal - 205)) | (1 << (VfrSyntaxParser.StringVal - 205)) | (1 << (VfrSyntaxParser.UnIntVal - 205)) | (1 << (VfrSyntaxParser.ToUpper - 205)) | (1 << (VfrSyntaxParser.ToLower - 205)) | (1 << (VfrSyntaxParser.Match - 205)) | (1 << (VfrSyntaxParser.Match2 - 205)) | (1 << (VfrSyntaxParser.Catenate - 205)) | (1 << (VfrSyntaxParser.QuestionRefVal - 205)) | (1 << (VfrSyntaxParser.StringRefVal - 205)) | (1 << (VfrSyntaxParser.Map - 205)) | (1 << (VfrSyntaxParser.Number - 205)))) != 0):
                self.state = 2593
                self.vfrStatementExpression()
                self.state = 2594
                self.match(VfrSyntaxParser.Comma)
                self.state = 2595
                self.vfrStatementExpression()
                self.state = 2596
                self.match(VfrSyntaxParser.Semicolon)
                self.state = 2602
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2603
            self.match(VfrSyntaxParser.CloseParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





