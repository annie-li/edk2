# Generated from VfrSyntax.g4 by ANTLR 4.7.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys



from CommonCtypes import *
from VfrFormPkg import *
from VfrUtility import *


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u0100")
        buf.write("\u09a6\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4")
        buf.write("q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4w\tw\4x\tx\4y\ty\4")
        buf.write("z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080")
        buf.write("\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084")
        buf.write("\t\u0084\4\u0085\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087")
        buf.write("\4\u0088\t\u0088\4\u0089\t\u0089\4\u008a\t\u008a\4\u008b")
        buf.write("\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e\t\u008e")
        buf.write("\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092")
        buf.write("\t\u0092\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095")
        buf.write("\4\u0096\t\u0096\4\u0097\t\u0097\4\u0098\t\u0098\4\u0099")
        buf.write("\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b\4\u009c\t\u009c")
        buf.write("\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0")
        buf.write("\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3")
        buf.write("\4\u00a4\t\u00a4\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7")
        buf.write("\t\u00a7\4\u00a8\t\u00a8\4\u00a9\t\u00a9\4\u00aa\t\u00aa")
        buf.write("\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad\4\u00ae")
        buf.write("\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1")
        buf.write("\4\u00b2\t\u00b2\3\2\3\2\3\2\7\2\u0168\n\2\f\2\16\2\u016b")
        buf.write("\13\2\3\2\3\2\3\3\3\3\3\4\3\4\3\4\5\4\u0174\n\4\3\4\3")
        buf.write("\4\5\4\u0178\n\4\3\5\5\5\u017b\n\5\3\6\3\6\3\6\3\6\3\6")
        buf.write("\3\6\5\6\u0183\n\6\3\6\3\6\3\7\5\7\u0188\n\7\3\7\3\7\5")
        buf.write("\7\u018c\n\7\3\7\5\7\u018f\n\7\3\7\3\7\3\7\3\7\5\7\u0195")
        buf.write("\n\7\3\7\3\7\3\b\5\b\u019a\n\b\3\b\3\b\5\b\u019e\n\b\3")
        buf.write("\b\5\b\u01a1\n\b\3\b\3\b\3\b\3\b\5\b\u01a7\n\b\3\b\3\b")
        buf.write("\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3")
        buf.write("\t\7\t\u01b9\n\t\f\t\16\t\u01bc\13\t\3\n\3\n\3\n\3\n\3")
        buf.write("\n\5\n\u01c3\n\n\3\n\3\n\3\13\3\13\3\13\3\13\3\13\5\13")
        buf.write("\u01cc\n\13\3\13\3\13\3\f\3\f\3\f\3\f\3\f\5\f\u01d5\n")
        buf.write("\f\3\f\3\f\3\r\3\r\3\r\3\r\3\r\5\r\u01de\n\r\3\r\3\r\3")
        buf.write("\16\3\16\3\16\3\16\3\16\5\16\u01e7\n\16\3\16\3\16\3\17")
        buf.write("\3\17\3\17\3\17\3\17\5\17\u01f0\n\17\3\17\3\17\3\20\3")
        buf.write("\20\3\20\3\20\3\20\5\20\u01f9\n\20\3\20\3\20\3\21\3\21")
        buf.write("\3\21\3\21\3\21\5\21\u0202\n\21\3\21\3\21\3\22\3\22\3")
        buf.write("\22\3\22\3\22\5\22\u020b\n\22\3\22\3\22\3\23\3\23\3\23")
        buf.write("\3\23\3\23\5\23\u0214\n\23\3\23\3\23\3\24\3\24\5\24\u021a")
        buf.write("\n\24\3\24\3\24\3\24\3\24\3\25\3\25\5\25\u0222\n\25\3")
        buf.write("\25\3\25\3\25\3\25\3\26\3\26\5\26\u022a\n\26\3\26\3\26")
        buf.write("\3\26\3\26\3\27\3\27\5\27\u0232\n\27\3\27\3\27\3\27\3")
        buf.write("\27\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30")
        buf.write("\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30")
        buf.write("\3\30\3\30\3\30\5\30\u0250\n\30\3\30\3\30\3\30\3\30\3")
        buf.write("\30\5\30\u0257\n\30\3\30\3\30\3\30\3\30\3\30\5\30\u025e")
        buf.write("\n\30\3\30\3\30\3\30\3\30\3\31\3\31\3\31\5\31\u0267\n")
        buf.write("\31\3\31\3\31\5\31\u026b\n\31\3\31\3\31\5\31\u026f\n\31")
        buf.write("\3\32\3\32\3\32\7\32\u0274\n\32\f\32\16\32\u0277\13\32")
        buf.write("\3\33\3\33\3\34\3\34\3\35\3\35\3\35\3\35\3\35\3\35\3\35")
        buf.write("\3\35\3\35\3\35\7\35\u0287\n\35\f\35\16\35\u028a\13\35")
        buf.write("\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36")
        buf.write("\3\36\3\36\5\36\u0299\n\36\3\36\3\36\3\37\3\37\3\37\3")
        buf.write("\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37")
        buf.write("\3\37\3\37\3\37\5\37\u02ae\n\37\3\37\3\37\3\37\3\37\5")
        buf.write("\37\u02b4\n\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37")
        buf.write("\3\37\3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 ")
        buf.write("\3 \5 \u02d0\n \3 \3 \3 \3 \5 \u02d6\n \3 \3 \3 \3 \3")
        buf.write(" \7 \u02dd\n \f \16 \u02e0\13 \3 \3 \3 \3 \3 \3 \3 \3")
        buf.write(" \3 \3 \3 \3 \3 \3 \3 \3 \5 \u02f2\n \3 \3 \3 \3 \3 \3")
        buf.write("!\3!\3\"\3\"\3\"\3\"\3\"\3\"\3\"\5\"\u0302\n\"\3\"\3\"")
        buf.write("\3\"\3\"\3\"\3\"\3\"\6\"\u030b\n\"\r\"\16\"\u030c\3\"")
        buf.write("\3\"\3\"\3\"\3\"\3#\3#\3#\3#\3#\3#\3#\3$\3$\3$\3$\3$\3")
        buf.write("$\3$\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3")
        buf.write("&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\5&\u033e\n&\3&\3&\3")
        buf.write("\'\3\'\3\'\3\'\3\'\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3")
        buf.write("(\3(\3(\3)\3)\3)\3*\3*\3*\3*\5*\u035c\n*\3*\3*\3*\3*\3")
        buf.write("*\5*\u0363\n*\3*\3*\3*\3*\5*\u0369\n*\3+\3+\3,\3,\3,\3")
        buf.write(",\3,\3,\3,\3,\3,\3,\5,\u0377\n,\7,\u0379\n,\f,\16,\u037c")
        buf.write("\13,\5,\u037e\n,\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3")
        buf.write("-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\7-\u0397\n-\f-\16-\u039a")
        buf.write("\13-\5-\u039c\n-\5-\u039e\n-\3.\3.\3.\3.\3.\3.\3.\3/\3")
        buf.write("/\3\60\3\60\5\60\u03ab\n\60\3\61\3\61\3\61\7\61\u03b0")
        buf.write("\n\61\f\61\16\61\u03b3\13\61\3\62\3\62\3\62\3\62\3\62")
        buf.write("\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62")
        buf.write("\3\62\3\62\3\62\3\62\3\62\3\62\3\62\7\62\u03cc\n\62\f")
        buf.write("\62\16\62\u03cf\13\62\3\62\3\62\3\62\3\63\3\63\3\63\3")
        buf.write("\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63")
        buf.write("\7\63\u03e2\n\63\f\63\16\63\u03e5\13\63\3\63\3\63\3\63")
        buf.write("\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\7\63\u03f2\n")
        buf.write("\63\f\63\16\63\u03f5\13\63\3\63\3\63\3\63\3\64\3\64\3")
        buf.write("\64\3\65\3\65\3\65\3\66\3\66\3\66\3\66\3\66\3\66\3\66")
        buf.write("\3\67\3\67\3\67\5\67\u040a\n\67\38\38\38\38\38\38\38\3")
        buf.write("8\38\38\38\58\u0417\n8\38\38\58\u041b\n8\38\38\38\58\u0420")
        buf.write("\n8\38\38\38\78\u0425\n8\f8\168\u0428\138\58\u042a\n8")
        buf.write("\38\38\58\u042e\n8\39\39\39\79\u0433\n9\f9\169\u0436\13")
        buf.write("9\3:\3:\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3")
        buf.write(";\3;\3;\3;\3;\3;\5;\u044f\n;\3;\3;\3;\3;\3;\3;\7;\u0457")
        buf.write("\n;\f;\16;\u045a\13;\3;\3;\3;\3;\3;\5;\u0461\n;\3;\3;")
        buf.write("\5;\u0465\n;\3;\3;\3<\3<\5<\u046b\n<\3=\3=\5=\u046f\n")
        buf.write("=\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3")
        buf.write(">\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3")
        buf.write(">\3>\3>\3>\3>\3>\3>\3>\3>\5>\u049d\n>\3>\3>\5>\u04a1\n")
        buf.write(">\3>\3>\3>\3>\3>\5>\u04a8\n>\3>\3>\3>\3>\5>\u04ae\n>\3")
        buf.write(">\3>\5>\u04b2\n>\3>\3>\3?\3?\3?\7?\u04b9\n?\f?\16?\u04bc")
        buf.write("\13?\3@\3@\5@\u04c0\n@\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\5")
        buf.write("A\u04cc\nA\3A\3A\3A\3B\3B\3B\3B\3B\3B\5B\u04d7\nB\3C\3")
        buf.write("C\3C\3C\3C\3C\3C\3C\3C\3C\3C\5C\u04e4\nC\3D\3D\3D\3D\3")
        buf.write("D\3D\3D\3D\3E\3E\3E\3E\3E\3E\3E\3E\3F\3F\3F\3F\3F\3F\3")
        buf.write("G\3G\3G\3G\3G\3H\3H\3H\3H\3H\3I\3I\3I\3I\3I\3J\3J\3J\3")
        buf.write("J\3J\3J\3J\3J\3J\5J\u0514\nJ\3J\3J\3J\3K\7K\u051a\nK\f")
        buf.write("K\16K\u051d\13K\3L\3L\3L\3L\3L\3L\5L\u0525\nL\3M\3M\3")
        buf.write("M\3M\3M\3M\3N\3N\3N\3N\3N\3N\3N\3N\5N\u0535\nN\3N\3N\3")
        buf.write("N\3N\5N\u053b\nN\3O\3O\3O\3O\3O\3P\3P\3Q\3Q\3Q\3Q\3Q\3")
        buf.write("Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\7Q\u0552\nQ\fQ\16Q\u0555\13")
        buf.write("Q\3Q\3Q\3R\3R\3R\7R\u055c\nR\fR\16R\u055f\13R\3S\3S\3")
        buf.write("T\3T\3T\3T\3U\3U\3U\3U\3V\3V\7V\u056d\nV\fV\16V\u0570")
        buf.write("\13V\3W\3W\5W\u0574\nW\3X\3X\3X\3X\3X\3X\3X\3X\3X\5X\u057f")
        buf.write("\nX\3X\3X\3X\3X\5X\u0585\nX\3X\3X\3X\3X\3Y\3Y\3Y\7Y\u058e")
        buf.write("\nY\fY\16Y\u0591\13Y\3Z\3Z\3Z\3Z\3Z\3Z\5Z\u0599\nZ\3[")
        buf.write("\3[\3[\3[\3[\3[\3[\3[\5[\u05a3\n[\3[\3[\3[\3[\3[\3[\3")
        buf.write("[\3[\3\\\3\\\3\\\7\\\u05b0\n\\\f\\\16\\\u05b3\13\\\3]")
        buf.write("\3]\5]\u05b7\n]\3^\3^\5^\u05bb\n^\3_\3_\3_\3_\3_\3_\3")
        buf.write("_\3_\3_\5_\u05c6\n_\3_\3_\3_\3_\5_\u05cc\n_\3_\3_\3_\3")
        buf.write("_\3_\3`\3`\3`\3`\3`\3`\3`\3`\3`\3`\3`\3`\5`\u05df\n`\3")
        buf.write("a\3a\3a\7a\u05e4\na\fa\16a\u05e7\13a\3b\3b\3b\3b\3b\3")
        buf.write("b\3b\3b\3b\5b\u05f2\nb\3c\3c\3c\3c\3c\3c\3c\3c\3c\5c\u05fd")
        buf.write("\nc\3c\5c\u0600\nc\3c\3c\3c\3c\3d\3d\3d\7d\u0609\nd\f")
        buf.write("d\16d\u060c\13d\3e\3e\5e\u0610\ne\3f\3f\3f\3f\3f\3f\3")
        buf.write("f\3f\5f\u061a\nf\3f\3f\3f\3f\5f\u0620\nf\3f\3f\3f\3f\3")
        buf.write("f\3f\3f\3f\3f\3f\3f\3f\3g\3g\3g\7g\u0631\ng\fg\16g\u0634")
        buf.write("\13g\3h\3h\3h\5h\u0639\nh\3i\3i\3i\3i\3i\3i\3i\3i\5i\u0643")
        buf.write("\ni\3i\3i\3i\3i\5i\u0649\ni\3i\3i\3i\3i\3i\3i\3i\3i\3")
        buf.write("i\3i\3i\3i\3j\3j\3j\7j\u065a\nj\fj\16j\u065d\13j\3k\3")
        buf.write("k\5k\u0661\nk\3l\3l\3l\3l\3l\3l\3l\5l\u066a\nl\3l\3l\3")
        buf.write("l\5l\u066f\nl\3l\3l\3l\3l\3m\3m\3m\7m\u0678\nm\fm\16m")
        buf.write("\u067b\13m\3n\3n\3n\3n\5n\u0681\nn\3o\3o\3o\3o\3o\3o\3")
        buf.write("o\3o\5o\u068b\no\3o\3o\3o\3o\3o\3o\3o\3o\3o\3o\3o\3o\3")
        buf.write("o\3o\3o\3o\3o\3o\3o\3o\3o\3o\3o\3o\3o\3o\3o\3o\3o\3o\3")
        buf.write("o\3o\3o\3o\3o\3o\3o\3o\3o\3o\3o\3o\3o\3o\3o\3o\3o\3o\3")
        buf.write("o\3o\3o\7o\u06c0\no\fo\16o\u06c3\13o\5o\u06c5\no\3o\3")
        buf.write("o\3o\3p\3p\3p\3p\3p\3p\3p\3p\3p\3p\3p\3p\5p\u06d6\np\3")
        buf.write("p\3p\3p\3p\5p\u06dc\np\3q\3q\3q\7q\u06e1\nq\fq\16q\u06e4")
        buf.write("\13q\3r\3r\3s\3s\3s\3s\3s\3s\3s\3s\5s\u06f0\ns\3s\3s\3")
        buf.write("s\3s\3s\3s\3s\3s\3s\3s\3s\3s\3s\3s\3s\3s\3s\3s\3s\3s\3")
        buf.write("s\3s\3s\3s\3s\3s\3s\3s\3s\3s\3s\3s\3s\3s\3s\3s\3s\3s\3")
        buf.write("s\3s\3s\3s\3s\3s\3s\3s\3s\3s\3s\3s\3s\7s\u0725\ns\fs\16")
        buf.write("s\u0728\13s\5s\u072a\ns\3s\3s\3s\3t\3t\3t\3t\3t\3t\3t")
        buf.write("\3t\3t\3t\3t\3t\5t\u073b\nt\3t\3t\3t\3t\5t\u0741\nt\3")
        buf.write("u\3u\3u\7u\u0746\nu\fu\16u\u0749\13u\3v\3v\3w\3w\3w\5")
        buf.write("w\u0750\nw\3x\3x\3x\3x\3x\5x\u0757\nx\3y\3y\3y\3y\7y\u075d")
        buf.write("\ny\fy\16y\u0760\13y\3y\3y\3y\3z\3z\3z\3z\7z\u0769\nz")
        buf.write("\fz\16z\u076c\13z\3z\3z\3z\3{\3{\3{\3{\7{\u0775\n{\f{")
        buf.write("\16{\u0778\13{\3{\3{\3{\3|\3|\3|\3|\3}\3}\5}\u0783\n}")
        buf.write("\3}\3}\3}\3}\3}\3}\3}\3}\3}\3}\3}\3}\3}\3}\3}\3}\3}\5")
        buf.write("}\u0796\n}\3~\3~\3~\3~\3~\3~\3~\3~\3~\3~\3~\5~\u07a3\n")
        buf.write("~\3~\3~\3~\3~\5~\u07a9\n~\3~\3~\3~\3~\5~\u07af\n~\3~\3")
        buf.write("~\3~\3~\5~\u07b5\n~\3~\3~\3~\3~\5~\u07bb\n~\3~\3~\3~\3")
        buf.write("~\5~\u07c1\n~\3~\3~\3~\3~\5~\u07c7\n~\3~\3~\3~\3~\5~\u07cd")
        buf.write("\n~\3~\3~\3~\3~\5~\u07d3\n~\3~\3~\3~\3~\5~\u07d9\n~\5")
        buf.write("~\u07db\n~\3~\5~\u07de\n~\3~\3~\7~\u07e2\n~\f~\16~\u07e5")
        buf.write("\13~\3~\5~\u07e8\n~\3~\3~\3\177\7\177\u07ed\n\177\f\177")
        buf.write("\16\177\u07f0\13\177\3\u0080\3\u0080\3\u0080\3\u0080\3")
        buf.write("\u0080\5\u0080\u07f7\n\u0080\3\u0080\7\u0080\u07fa\n\u0080")
        buf.write("\f\u0080\16\u0080\u07fd\13\u0080\3\u0080\3\u0080\3\u0080")
        buf.write("\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\5\u0081\u0807")
        buf.write("\n\u0081\3\u0082\3\u0082\3\u0082\3\u0083\3\u0083\3\u0083")
        buf.write("\7\u0083\u080f\n\u0083\f\u0083\16\u0083\u0812\13\u0083")
        buf.write("\3\u0084\3\u0084\3\u0084\7\u0084\u0817\n\u0084\f\u0084")
        buf.write("\16\u0084\u081a\13\u0084\3\u0085\3\u0085\3\u0085\7\u0085")
        buf.write("\u081f\n\u0085\f\u0085\16\u0085\u0822\13\u0085\3\u0086")
        buf.write("\3\u0086\3\u0086\7\u0086\u0827\n\u0086\f\u0086\16\u0086")
        buf.write("\u082a\13\u0086\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087")
        buf.write("\7\u0087\u0831\n\u0087\f\u0087\16\u0087\u0834\13\u0087")
        buf.write("\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088")
        buf.write("\3\u0088\3\u0088\7\u0088\u083f\n\u0088\f\u0088\16\u0088")
        buf.write("\u0842\13\u0088\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089")
        buf.write("\7\u0089\u0849\n\u0089\f\u0089\16\u0089\u084c\13\u0089")
        buf.write("\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\7\u008a\u0853")
        buf.write("\n\u008a\f\u008a\16\u008a\u0856\13\u008a\3\u008b\3\u008b")
        buf.write("\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b\7\u008b\u085f")
        buf.write("\n\u008b\f\u008b\16\u008b\u0862\13\u008b\3\u008c\3\u008c")
        buf.write("\3\u008c\7\u008c\u0867\n\u008c\f\u008c\16\u008c\u086a")
        buf.write("\13\u008c\3\u008c\3\u008c\3\u008d\3\u008d\3\u008d\3\u008d")
        buf.write("\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d")
        buf.write("\5\u008d\u0879\n\u008d\3\u008e\3\u008e\3\u008e\3\u008e")
        buf.write("\3\u008e\3\u008e\3\u008e\3\u008f\3\u008f\3\u008f\3\u008f")
        buf.write("\3\u008f\3\u008f\3\u008f\3\u0090\3\u0090\3\u0090\3\u0090")
        buf.write("\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091")
        buf.write("\3\u0091\3\u0091\3\u0091\5\u0091\u0897\n\u0091\3\u0092")
        buf.write("\3\u0092\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0094")
        buf.write("\3\u0094\3\u0094\3\u0094\3\u0094\3\u0095\3\u0095\3\u0095")
        buf.write("\3\u0095\6\u0095\u08a9\n\u0095\r\u0095\16\u0095\u08aa")
        buf.write("\3\u0096\3\u0096\3\u0096\3\u0096\3\u0096\3\u0096\3\u0096")
        buf.write("\3\u0096\3\u0096\3\u0096\5\u0096\u08b7\n\u0096\7\u0096")
        buf.write("\u08b9\n\u0096\f\u0096\16\u0096\u08bc\13\u0096\5\u0096")
        buf.write("\u08be\n\u0096\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097")
        buf.write("\5\u0097\u08c5\n\u0097\3\u0098\3\u0098\3\u0098\3\u0098")
        buf.write("\3\u0098\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u009a")
        buf.write("\3\u009a\3\u009b\3\u009b\3\u009b\3\u009b\3\u009b\3\u009c")
        buf.write("\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c\5\u009c")
        buf.write("\u08df\n\u009c\3\u009c\3\u009c\3\u009d\3\u009d\3\u009e")
        buf.write("\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e")
        buf.write("\3\u009e\3\u009e\5\u009e\u08ef\n\u009e\3\u009f\3\u009f")
        buf.write("\3\u009f\3\u009f\3\u009f\3\u00a0\3\u00a0\3\u00a0\3\u00a0")
        buf.write("\3\u00a0\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1")
        buf.write("\3\u00a1\3\u00a1\3\u00a1\5\u00a1\u0904\n\u00a1\3\u00a1")
        buf.write("\3\u00a1\3\u00a1\3\u00a1\3\u00a1\5\u00a1\u090b\n\u00a1")
        buf.write("\3\u00a1\3\u00a1\3\u00a1\3\u00a2\3\u00a2\3\u00a2\3\u00a2")
        buf.write("\3\u00a2\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a4")
        buf.write("\3\u00a4\3\u00a4\3\u00a4\3\u00a4\5\u00a4\u091f\n\u00a4")
        buf.write("\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a5\3\u00a5\3\u00a5")
        buf.write("\3\u00a5\3\u00a5\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6")
        buf.write("\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a8\3\u00a8")
        buf.write("\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\5\u00a8\u093b")
        buf.write("\n\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a9\3\u00a9")
        buf.write("\3\u00a9\3\u00a9\3\u00a9\5\u00a9\u0946\n\u00a9\3\u00aa")
        buf.write("\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa")
        buf.write("\3\u00aa\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\7\u00ab")
        buf.write("\u0956\n\u00ab\f\u00ab\16\u00ab\u0959\13\u00ab\3\u00ab")
        buf.write("\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab")
        buf.write("\3\u00ac\3\u00ac\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad")
        buf.write("\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ae\3\u00ae\3\u00ae")
        buf.write("\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00af")
        buf.write("\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\7\u00af")
        buf.write("\u097e\n\u00af\f\u00af\16\u00af\u0981\13\u00af\3\u00af")
        buf.write("\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af")
        buf.write("\3\u00b0\3\u00b0\3\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1")
        buf.write("\3\u00b1\3\u00b1\3\u00b1\3\u00b1\7\u00b1\u0996\n\u00b1")
        buf.write("\f\u00b1\16\u00b1\u0999\13\u00b1\3\u00b1\3\u00b1\3\u00b2")
        buf.write("\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2")
        buf.write("\3\u00b2\3\u00b2\2\2\u00b3\2\4\6\b\n\f\16\20\22\24\26")
        buf.write("\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\")
        buf.write("^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a")
        buf.write("\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c")
        buf.write("\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae")
        buf.write("\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0")
        buf.write("\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2")
        buf.write("\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4")
        buf.write("\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6")
        buf.write("\u00f8\u00fa\u00fc\u00fe\u0100\u0102\u0104\u0106\u0108")
        buf.write("\u010a\u010c\u010e\u0110\u0112\u0114\u0116\u0118\u011a")
        buf.write("\u011c\u011e\u0120\u0122\u0124\u0126\u0128\u012a\u012c")
        buf.write("\u012e\u0130\u0132\u0134\u0136\u0138\u013a\u013c\u013e")
        buf.write("\u0140\u0142\u0144\u0146\u0148\u014a\u014c\u014e\u0150")
        buf.write("\u0152\u0154\u0156\u0158\u015a\u015c\u015e\u0160\u0162")
        buf.write("\2\17\3\2\4\5\4\2\u00e8\u00ee\u00f8\u00f8\4\2\u00ef\u00f2")
        buf.write("\u00f8\u00f8\3\2\u00b5\u00bc\4\2\25\25\u00f8\u00f8\7\2")
        buf.write("\27\30\u00b3\u00b3\u00b5\u00b5\u00b7\u00b7\u00f8\u00f8")
        buf.write("\4\2%*\u00f8\u00f8\4\2(-\u00f8\u00f8\3\2\u00c6\u00c8\3")
        buf.write("\2\u0090\u0094\5\2\16\22JK\u00f8\u00f8\3\2XY\4\2Z[\u00f8")
        buf.write("\u00f8\2\u0a42\2\u0169\3\2\2\2\4\u016e\3\2\2\2\6\u0170")
        buf.write("\3\2\2\2\b\u017a\3\2\2\2\n\u017c\3\2\2\2\f\u0187\3\2\2")
        buf.write("\2\16\u0199\3\2\2\2\20\u01ba\3\2\2\2\22\u01bd\3\2\2\2")
        buf.write("\24\u01c6\3\2\2\2\26\u01cf\3\2\2\2\30\u01d8\3\2\2\2\32")
        buf.write("\u01e1\3\2\2\2\34\u01ea\3\2\2\2\36\u01f3\3\2\2\2 \u01fc")
        buf.write("\3\2\2\2\"\u0205\3\2\2\2$\u020e\3\2\2\2&\u0217\3\2\2\2")
        buf.write("(\u021f\3\2\2\2*\u0227\3\2\2\2,\u022f\3\2\2\2.\u0237\3")
        buf.write("\2\2\2\60\u0263\3\2\2\2\62\u0270\3\2\2\2\64\u0278\3\2")
        buf.write("\2\2\66\u027a\3\2\2\28\u0288\3\2\2\2:\u028b\3\2\2\2<\u029c")
        buf.write("\3\2\2\2>\u02be\3\2\2\2@\u02f8\3\2\2\2B\u02fa\3\2\2\2")
        buf.write("D\u0313\3\2\2\2F\u031a\3\2\2\2H\u0321\3\2\2\2J\u0331\3")
        buf.write("\2\2\2L\u0341\3\2\2\2N\u0346\3\2\2\2P\u0354\3\2\2\2R\u035b")
        buf.write("\3\2\2\2T\u036a\3\2\2\2V\u037d\3\2\2\2X\u039d\3\2\2\2")
        buf.write("Z\u039f\3\2\2\2\\\u03a6\3\2\2\2^\u03aa\3\2\2\2`\u03ac")
        buf.write("\3\2\2\2b\u03b4\3\2\2\2d\u03d3\3\2\2\2f\u03f9\3\2\2\2")
        buf.write("h\u03fc\3\2\2\2j\u03ff\3\2\2\2l\u0409\3\2\2\2n\u040b\3")
        buf.write("\2\2\2p\u042f\3\2\2\2r\u0437\3\2\2\2t\u0439\3\2\2\2v\u046a")
        buf.write("\3\2\2\2x\u046e\3\2\2\2z\u0470\3\2\2\2|\u04b5\3\2\2\2")
        buf.write("~\u04bf\3\2\2\2\u0080\u04c1\3\2\2\2\u0082\u04d6\3\2\2")
        buf.write("\2\u0084\u04e3\3\2\2\2\u0086\u04e5\3\2\2\2\u0088\u04ed")
        buf.write("\3\2\2\2\u008a\u04f5\3\2\2\2\u008c\u04fb\3\2\2\2\u008e")
        buf.write("\u0500\3\2\2\2\u0090\u0505\3\2\2\2\u0092\u050a\3\2\2\2")
        buf.write("\u0094\u051b\3\2\2\2\u0096\u0524\3\2\2\2\u0098\u0526\3")
        buf.write("\2\2\2\u009a\u052c\3\2\2\2\u009c\u053c\3\2\2\2\u009e\u0541")
        buf.write("\3\2\2\2\u00a0\u0543\3\2\2\2\u00a2\u0558\3\2\2\2\u00a4")
        buf.write("\u0560\3\2\2\2\u00a6\u0562\3\2\2\2\u00a8\u0566\3\2\2\2")
        buf.write("\u00aa\u056e\3\2\2\2\u00ac\u0573\3\2\2\2\u00ae\u0575\3")
        buf.write("\2\2\2\u00b0\u058a\3\2\2\2\u00b2\u0598\3\2\2\2\u00b4\u059a")
        buf.write("\3\2\2\2\u00b6\u05ac\3\2\2\2\u00b8\u05b6\3\2\2\2\u00ba")
        buf.write("\u05ba\3\2\2\2\u00bc\u05bc\3\2\2\2\u00be\u05d2\3\2\2\2")
        buf.write("\u00c0\u05e0\3\2\2\2\u00c2\u05f1\3\2\2\2\u00c4\u05f3\3")
        buf.write("\2\2\2\u00c6\u0605\3\2\2\2\u00c8\u060f\3\2\2\2\u00ca\u0611")
        buf.write("\3\2\2\2\u00cc\u062d\3\2\2\2\u00ce\u0638\3\2\2\2\u00d0")
        buf.write("\u063a\3\2\2\2\u00d2\u0656\3\2\2\2\u00d4\u0660\3\2\2\2")
        buf.write("\u00d6\u0662\3\2\2\2\u00d8\u0674\3\2\2\2\u00da\u0680\3")
        buf.write("\2\2\2\u00dc\u0682\3\2\2\2\u00de\u06c9\3\2\2\2\u00e0\u06dd")
        buf.write("\3\2\2\2\u00e2\u06e5\3\2\2\2\u00e4\u06e7\3\2\2\2\u00e6")
        buf.write("\u072e\3\2\2\2\u00e8\u0742\3\2\2\2\u00ea\u074a\3\2\2\2")
        buf.write("\u00ec\u074f\3\2\2\2\u00ee\u0756\3\2\2\2\u00f0\u0758\3")
        buf.write("\2\2\2\u00f2\u0764\3\2\2\2\u00f4\u0770\3\2\2\2\u00f6\u077c")
        buf.write("\3\2\2\2\u00f8\u0780\3\2\2\2\u00fa\u0797\3\2\2\2\u00fc")
        buf.write("\u07ee\3\2\2\2\u00fe\u07f1\3\2\2\2\u0100\u0801\3\2\2\2")
        buf.write("\u0102\u0808\3\2\2\2\u0104\u080b\3\2\2\2\u0106\u0813\3")
        buf.write("\2\2\2\u0108\u081b\3\2\2\2\u010a\u0823\3\2\2\2\u010c\u082b")
        buf.write("\3\2\2\2\u010e\u0835\3\2\2\2\u0110\u0843\3\2\2\2\u0112")
        buf.write("\u084d\3\2\2\2\u0114\u0857\3\2\2\2\u0116\u0868\3\2\2\2")
        buf.write("\u0118\u0878\3\2\2\2\u011a\u087a\3\2\2\2\u011c\u0881\3")
        buf.write("\2\2\2\u011e\u0888\3\2\2\2\u0120\u0896\3\2\2\2\u0122\u0898")
        buf.write("\3\2\2\2\u0124\u089a\3\2\2\2\u0126\u089f\3\2\2\2\u0128")
        buf.write("\u08a4\3\2\2\2\u012a\u08bd\3\2\2\2\u012c\u08c4\3\2\2\2")
        buf.write("\u012e\u08c6\3\2\2\2\u0130\u08cb\3\2\2\2\u0132\u08d0\3")
        buf.write("\2\2\2\u0134\u08d2\3\2\2\2\u0136\u08d7\3\2\2\2\u0138\u08e2")
        buf.write("\3\2\2\2\u013a\u08ee\3\2\2\2\u013c\u08f0\3\2\2\2\u013e")
        buf.write("\u08f5\3\2\2\2\u0140\u08fa\3\2\2\2\u0142\u090f\3\2\2\2")
        buf.write("\u0144\u0914\3\2\2\2\u0146\u0919\3\2\2\2\u0148\u0924\3")
        buf.write("\2\2\2\u014a\u0929\3\2\2\2\u014c\u092e\3\2\2\2\u014e\u0933")
        buf.write("\3\2\2\2\u0150\u0945\3\2\2\2\u0152\u0947\3\2\2\2\u0154")
        buf.write("\u0950\3\2\2\2\u0156\u0962\3\2\2\2\u0158\u0964\3\2\2\2")
        buf.write("\u015a\u096d\3\2\2\2\u015c\u0976\3\2\2\2\u015e\u098a\3")
        buf.write("\2\2\2\u0160\u098c\3\2\2\2\u0162\u099c\3\2\2\2\u0164\u0168")
        buf.write("\5\n\6\2\u0165\u0168\5\f\7\2\u0166\u0168\5\16\b\2\u0167")
        buf.write("\u0164\3\2\2\2\u0167\u0165\3\2\2\2\u0167\u0166\3\2\2\2")
        buf.write("\u0168\u016b\3\2\2\2\u0169\u0167\3\2\2\2\u0169\u016a\3")
        buf.write("\2\2\2\u016a\u016c\3\2\2\2\u016b\u0169\3\2\2\2\u016c\u016d")
        buf.write("\5.\30\2\u016d\3\3\2\2\2\u016e\u016f\7\3\2\2\u016f\5\3")
        buf.write("\2\2\2\u0170\u0173\t\2\2\2\u0171\u0172\7\6\2\2\u0172\u0174")
        buf.write("\7\u00f9\2\2\u0173\u0171\3\2\2\2\u0173\u0174\3\2\2\2\u0174")
        buf.write("\u0177\3\2\2\2\u0175\u0176\7\6\2\2\u0176\u0178\7\u00f8")
        buf.write("\2\2\u0177\u0175\3\2\2\2\u0177\u0178\3\2\2\2\u0178\7\3")
        buf.write("\2\2\2\u0179\u017b\7\u00f8\2\2\u017a\u0179\3\2\2\2\u017a")
        buf.write("\u017b\3\2\2\2\u017b\t\3\2\2\2\u017c\u017d\7\7\2\2\u017d")
        buf.write("\u017e\7\b\2\2\u017e\u0182\7c\2\2\u017f\u0183\5\4\3\2")
        buf.write("\u0180\u0183\5\6\4\2\u0181\u0183\5\b\5\2\u0182\u017f\3")
        buf.write("\2\2\2\u0182\u0180\3\2\2\2\u0182\u0181\3\2\2\2\u0182\u0183")
        buf.write("\3\2\2\2\u0183\u0184\3\2\2\2\u0184\u0185\7d\2\2\u0185")
        buf.write("\13\3\2\2\2\u0186\u0188\7\u00c0\2\2\u0187\u0186\3\2\2")
        buf.write("\2\u0187\u0188\3\2\2\2\u0188\u0189\3\2\2\2\u0189\u018b")
        buf.write("\7\u008e\2\2\u018a\u018c\7\u008d\2\2\u018b\u018a\3\2\2")
        buf.write("\2\u018b\u018c\3\2\2\2\u018c\u018e\3\2\2\2\u018d\u018f")
        buf.write("\7\u00f9\2\2\u018e\u018d\3\2\2\2\u018e\u018f\3\2\2\2\u018f")
        buf.write("\u0190\3\2\2\2\u0190\u0191\7a\2\2\u0191\u0192\5\20\t\2")
        buf.write("\u0192\u0194\7b\2\2\u0193\u0195\7\u00f9\2\2\u0194\u0193")
        buf.write("\3\2\2\2\u0194\u0195\3\2\2\2\u0195\u0196\3\2\2\2\u0196")
        buf.write("\u0197\7\t\2\2\u0197\r\3\2\2\2\u0198\u019a\7\u00c0\2\2")
        buf.write("\u0199\u0198\3\2\2\2\u0199\u019a\3\2\2\2\u019a\u019b\3")
        buf.write("\2\2\2\u019b\u019d\7\u008f\2\2\u019c\u019e\7\u008d\2\2")
        buf.write("\u019d\u019c\3\2\2\2\u019d\u019e\3\2\2\2\u019e\u01a0\3")
        buf.write("\2\2\2\u019f\u01a1\7\u00f9\2\2\u01a0\u019f\3\2\2\2\u01a0")
        buf.write("\u01a1\3\2\2\2\u01a1\u01a2\3\2\2\2\u01a2\u01a3\7a\2\2")
        buf.write("\u01a3\u01a4\5\20\t\2\u01a4\u01a6\7b\2\2\u01a5\u01a7\7")
        buf.write("\u00f9\2\2\u01a6\u01a5\3\2\2\2\u01a6\u01a7\3\2\2\2\u01a7")
        buf.write("\u01a8\3\2\2\2\u01a8\u01a9\7\t\2\2\u01a9\17\3\2\2\2\u01aa")
        buf.write("\u01b9\5\22\n\2\u01ab\u01b9\5\24\13\2\u01ac\u01b9\5\26")
        buf.write("\f\2\u01ad\u01b9\5\30\r\2\u01ae\u01b9\5\32\16\2\u01af")
        buf.write("\u01b9\5\34\17\2\u01b0\u01b9\5\36\20\2\u01b1\u01b9\5 ")
        buf.write("\21\2\u01b2\u01b9\5\"\22\2\u01b3\u01b9\5$\23\2\u01b4\u01b9")
        buf.write("\5&\24\2\u01b5\u01b9\5(\25\2\u01b6\u01b9\5*\26\2\u01b7")
        buf.write("\u01b9\5,\27\2\u01b8\u01aa\3\2\2\2\u01b8\u01ab\3\2\2\2")
        buf.write("\u01b8\u01ac\3\2\2\2\u01b8\u01ad\3\2\2\2\u01b8\u01ae\3")
        buf.write("\2\2\2\u01b8\u01af\3\2\2\2\u01b8\u01b0\3\2\2\2\u01b8\u01b1")
        buf.write("\3\2\2\2\u01b8\u01b2\3\2\2\2\u01b8\u01b3\3\2\2\2\u01b8")
        buf.write("\u01b4\3\2\2\2\u01b8\u01b5\3\2\2\2\u01b8\u01b6\3\2\2\2")
        buf.write("\u01b8\u01b7\3\2\2\2\u01b9\u01bc\3\2\2\2\u01ba\u01b8\3")
        buf.write("\2\2\2\u01ba\u01bb\3\2\2\2\u01bb\21\3\2\2\2\u01bc\u01ba")
        buf.write("\3\2\2\2\u01bd\u01be\7\u0091\2\2\u01be\u01c2\7\u00f9\2")
        buf.write("\2\u01bf\u01c0\7e\2\2\u01c0\u01c1\7\u00f8\2\2\u01c1\u01c3")
        buf.write("\7f\2\2\u01c2\u01bf\3\2\2\2\u01c2\u01c3\3\2\2\2\u01c3")
        buf.write("\u01c4\3\2\2\2\u01c4\u01c5\7\t\2\2\u01c5\23\3\2\2\2\u01c6")
        buf.write("\u01c7\7\u0092\2\2\u01c7\u01cb\7\u00f9\2\2\u01c8\u01c9")
        buf.write("\7e\2\2\u01c9\u01ca\7\u00f8\2\2\u01ca\u01cc\7f\2\2\u01cb")
        buf.write("\u01c8\3\2\2\2\u01cb\u01cc\3\2\2\2\u01cc\u01cd\3\2\2\2")
        buf.write("\u01cd\u01ce\7\t\2\2\u01ce\25\3\2\2\2\u01cf\u01d0\7\u0093")
        buf.write("\2\2\u01d0\u01d4\7\u00f9\2\2\u01d1\u01d2\7e\2\2\u01d2")
        buf.write("\u01d3\7\u00f8\2\2\u01d3\u01d5\7f\2\2\u01d4\u01d1\3\2")
        buf.write("\2\2\u01d4\u01d5\3\2\2\2\u01d5\u01d6\3\2\2\2\u01d6\u01d7")
        buf.write("\7\t\2\2\u01d7\27\3\2\2\2\u01d8\u01d9\7\u0094\2\2\u01d9")
        buf.write("\u01dd\7\u00f9\2\2\u01da\u01db\7e\2\2\u01db\u01dc\7\u00f8")
        buf.write("\2\2\u01dc\u01de\7f\2\2\u01dd\u01da\3\2\2\2\u01dd\u01de")
        buf.write("\3\2\2\2\u01de\u01df\3\2\2\2\u01df\u01e0\7\t\2\2\u01e0")
        buf.write("\31\3\2\2\2\u01e1\u01e2\7\u0090\2\2\u01e2\u01e6\7\u00f9")
        buf.write("\2\2\u01e3\u01e4\7e\2\2\u01e4\u01e5\7\u00f8\2\2\u01e5")
        buf.write("\u01e7\7f\2\2\u01e6\u01e3\3\2\2\2\u01e6\u01e7\3\2\2\2")
        buf.write("\u01e7\u01e8\3\2\2\2\u01e8\u01e9\7\t\2\2\u01e9\33\3\2")
        buf.write("\2\2\u01ea\u01eb\7\u0095\2\2\u01eb\u01ef\7\u00f9\2\2\u01ec")
        buf.write("\u01ed\7e\2\2\u01ed\u01ee\7\u00f8\2\2\u01ee\u01f0\7f\2")
        buf.write("\2\u01ef\u01ec\3\2\2\2\u01ef\u01f0\3\2\2\2\u01f0\u01f1")
        buf.write("\3\2\2\2\u01f1\u01f2\7\t\2\2\u01f2\35\3\2\2\2\u01f3\u01f4")
        buf.write("\7\u0096\2\2\u01f4\u01f8\7\u00f9\2\2\u01f5\u01f6\7e\2")
        buf.write("\2\u01f6\u01f7\7\u00f8\2\2\u01f7\u01f9\7f\2\2\u01f8\u01f5")
        buf.write("\3\2\2\2\u01f8\u01f9\3\2\2\2\u01f9\u01fa\3\2\2\2\u01fa")
        buf.write("\u01fb\7\t\2\2\u01fb\37\3\2\2\2\u01fc\u01fd\7\u0097\2")
        buf.write("\2\u01fd\u0201\7\u00f9\2\2\u01fe\u01ff\7e\2\2\u01ff\u0200")
        buf.write("\7\u00f8\2\2\u0200\u0202\7f\2\2\u0201\u01fe\3\2\2\2\u0201")
        buf.write("\u0202\3\2\2\2\u0202\u0203\3\2\2\2\u0203\u0204\7\t\2\2")
        buf.write("\u0204!\3\2\2\2\u0205\u0206\7\u0098\2\2\u0206\u020a\7")
        buf.write("\u00f9\2\2\u0207\u0208\7e\2\2\u0208\u0209\7\u00f8\2\2")
        buf.write("\u0209\u020b\7f\2\2\u020a\u0207\3\2\2\2\u020a\u020b\3")
        buf.write("\2\2\2\u020b\u020c\3\2\2\2\u020c\u020d\7\t\2\2\u020d#")
        buf.write("\3\2\2\2\u020e\u020f\7\u00f9\2\2\u020f\u0213\7\u00f9\2")
        buf.write("\2\u0210\u0211\7e\2\2\u0211\u0212\7\u00f8\2\2\u0212\u0214")
        buf.write("\7f\2\2\u0213\u0210\3\2\2\2\u0213\u0214\3\2\2\2\u0214")
        buf.write("\u0215\3\2\2\2\u0215\u0216\7\t\2\2\u0216%\3\2\2\2\u0217")
        buf.write("\u0219\7\u0091\2\2\u0218\u021a\7\u00f9\2\2\u0219\u0218")
        buf.write("\3\2\2\2\u0219\u021a\3\2\2\2\u021a\u021b\3\2\2\2\u021b")
        buf.write("\u021c\7\n\2\2\u021c\u021d\7\u00f8\2\2\u021d\u021e\7\t")
        buf.write("\2\2\u021e\'\3\2\2\2\u021f\u0221\7\u0092\2\2\u0220\u0222")
        buf.write("\7\u00f9\2\2\u0221\u0220\3\2\2\2\u0221\u0222\3\2\2\2\u0222")
        buf.write("\u0223\3\2\2\2\u0223\u0224\7\n\2\2\u0224\u0225\7\u00f8")
        buf.write("\2\2\u0225\u0226\7\t\2\2\u0226)\3\2\2\2\u0227\u0229\7")
        buf.write("\u0093\2\2\u0228\u022a\7\u00f9\2\2\u0229\u0228\3\2\2\2")
        buf.write("\u0229\u022a\3\2\2\2\u022a\u022b\3\2\2\2\u022b\u022c\7")
        buf.write("\n\2\2\u022c\u022d\7\u00f8\2\2\u022d\u022e\7\t\2\2\u022e")
        buf.write("+\3\2\2\2\u022f\u0231\7\u0094\2\2\u0230\u0232\7\u00f9")
        buf.write("\2\2\u0231\u0230\3\2\2\2\u0231\u0232\3\2\2\2\u0232\u0233")
        buf.write("\3\2\2\2\u0233\u0234\7\n\2\2\u0234\u0235\7\u00f8\2\2\u0235")
        buf.write("\u0236\7\t\2\2\u0236-\3\2\2\2\u0237\u0238\7i\2\2\u0238")
        buf.write("\u0239\7\u0099\2\2\u0239\u023a\7\13\2\2\u023a\u023b\5")
        buf.write("J&\2\u023b\u023c\7\6\2\2\u023c\u023d\7l\2\2\u023d\u023e")
        buf.write("\7\13\2\2\u023e\u023f\7\f\2\2\u023f\u0240\7c\2\2\u0240")
        buf.write("\u0241\7\u00f8\2\2\u0241\u0242\7d\2\2\u0242\u0243\7\6")
        buf.write("\2\2\u0243\u0244\7{\2\2\u0244\u0245\7\13\2\2\u0245\u0246")
        buf.write("\7\f\2\2\u0246\u0247\7c\2\2\u0247\u0248\7\u00f8\2\2\u0248")
        buf.write("\u0249\7d\2\2\u0249\u024f\7\6\2\2\u024a\u024b\7\u00bf")
        buf.write("\2\2\u024b\u024c\7\13\2\2\u024c\u024d\5\60\31\2\u024d")
        buf.write("\u024e\7\6\2\2\u024e\u0250\3\2\2\2\u024f\u024a\3\2\2\2")
        buf.write("\u024f\u0250\3\2\2\2\u0250\u0256\3\2\2\2\u0251\u0252\7")
        buf.write("\u00bd\2\2\u0252\u0253\7\13\2\2\u0253\u0254\5\62\32\2")
        buf.write("\u0254\u0255\7\6\2\2\u0255\u0257\3\2\2\2\u0256\u0251\3")
        buf.write("\2\2\2\u0256\u0257\3\2\2\2\u0257\u025d\3\2\2\2\u0258\u0259")
        buf.write("\7\u00be\2\2\u0259\u025a\7\13\2\2\u025a\u025b\5\66\34")
        buf.write("\2\u025b\u025c\7\6\2\2\u025c\u025e\3\2\2\2\u025d\u0258")
        buf.write("\3\2\2\2\u025d\u025e\3\2\2\2\u025e\u025f\3\2\2\2\u025f")
        buf.write("\u0260\58\35\2\u0260\u0261\7k\2\2\u0261\u0262\7\t\2\2")
        buf.write("\u0262/\3\2\2\2\u0263\u0266\5J&\2\u0264\u0265\7\r\2\2")
        buf.write("\u0265\u0267\5J&\2\u0266\u0264\3\2\2\2\u0266\u0267\3\2")
        buf.write("\2\2\u0267\u026a\3\2\2\2\u0268\u0269\7\r\2\2\u0269\u026b")
        buf.write("\5J&\2\u026a\u0268\3\2\2\2\u026a\u026b\3\2\2\2\u026b\u026e")
        buf.write("\3\2\2\2\u026c\u026d\7\r\2\2\u026d\u026f\5J&\2\u026e\u026c")
        buf.write("\3\2\2\2\u026e\u026f\3\2\2\2\u026f\61\3\2\2\2\u0270\u0275")
        buf.write("\5\64\33\2\u0271\u0272\7\r\2\2\u0272\u0274\5\64\33\2\u0273")
        buf.write("\u0271\3\2\2\2\u0274\u0277\3\2\2\2\u0275\u0273\3\2\2\2")
        buf.write("\u0275\u0276\3\2\2\2\u0276\63\3\2\2\2\u0277\u0275\3\2")
        buf.write("\2\2\u0278\u0279\t\3\2\2\u0279\65\3\2\2\2\u027a\u027b")
        buf.write("\t\4\2\2\u027b\67\3\2\2\2\u027c\u0287\5b\62\2\u027d\u0287")
        buf.write("\5d\63\2\u027e\u0287\5f\64\2\u027f\u0287\5<\37\2\u0280")
        buf.write("\u0287\5> \2\u0281\u0287\5B\"\2\u0282\u0287\5:\36\2\u0283")
        buf.write("\u0287\5D#\2\u0284\u0287\5F$\2\u0285\u0287\5\u00fa~\2")
        buf.write("\u0286\u027c\3\2\2\2\u0286\u027d\3\2\2\2\u0286\u027e\3")
        buf.write("\2\2\2\u0286\u027f\3\2\2\2\u0286\u0280\3\2\2\2\u0286\u0281")
        buf.write("\3\2\2\2\u0286\u0282\3\2\2\2\u0286\u0283\3\2\2\2\u0286")
        buf.write("\u0284\3\2\2\2\u0286\u0285\3\2\2\2\u0287\u028a\3\2\2\2")
        buf.write("\u0288\u0286\3\2\2\2\u0288\u0289\3\2\2\2\u02899\3\2\2")
        buf.write("\2\u028a\u0288\3\2\2\2\u028b\u028c\7\u00d7\2\2\u028c\u028d")
        buf.write("\7\u00f9\2\2\u028d\u028e\7\6\2\2\u028e\u028f\7p\2\2\u028f")
        buf.write("\u0290\7\13\2\2\u0290\u0291\7\f\2\2\u0291\u0292\7c\2\2")
        buf.write("\u0292\u0293\7\u00f8\2\2\u0293\u0298\7d\2\2\u0294\u0295")
        buf.write("\7\6\2\2\u0295\u0296\7\u00d8\2\2\u0296\u0297\7\13\2\2")
        buf.write("\u0297\u0299\7\u00f8\2\2\u0298\u0294\3\2\2\2\u0298\u0299")
        buf.write("\3\2\2\2\u0299\u029a\3\2\2\2\u029a\u029b\7\t\2\2\u029b")
        buf.write(";\3\2\2\2\u029c\u02ad\7\u00d9\2\2\u029d\u029e\7\u00f9")
        buf.write("\2\2\u029e\u02ae\7\6\2\2\u029f\u02a0\7\u0094\2\2\u02a0")
        buf.write("\u02ae\7\6\2\2\u02a1\u02a2\7\u0093\2\2\u02a2\u02ae\7\6")
        buf.write("\2\2\u02a3\u02a4\7\u0092\2\2\u02a4\u02ae\7\6\2\2\u02a5")
        buf.write("\u02a6\7\u0091\2\2\u02a6\u02ae\7\6\2\2\u02a7\u02a8\7\u0096")
        buf.write("\2\2\u02a8\u02ae\7\6\2\2\u02a9\u02aa\7\u0097\2\2\u02aa")
        buf.write("\u02ae\7\6\2\2\u02ab\u02ac\7\u0098\2\2\u02ac\u02ae\7\6")
        buf.write("\2\2\u02ad\u029d\3\2\2\2\u02ad\u029f\3\2\2\2\u02ad\u02a1")
        buf.write("\3\2\2\2\u02ad\u02a3\3\2\2\2\u02ad\u02a5\3\2\2\2\u02ad")
        buf.write("\u02a7\3\2\2\2\u02ad\u02a9\3\2\2\2\u02ad\u02ab\3\2\2\2")
        buf.write("\u02ae\u02b3\3\2\2\2\u02af\u02b0\7\u00cb\2\2\u02b0\u02b1")
        buf.write("\7\13\2\2\u02b1\u02b2\7\u00f8\2\2\u02b2\u02b4\7\6\2\2")
        buf.write("\u02b3\u02af\3\2\2\2\u02b3\u02b4\3\2\2\2\u02b4\u02b5\3")
        buf.write("\2\2\2\u02b5\u02b6\7\u00ca\2\2\u02b6\u02b7\7\13\2\2\u02b7")
        buf.write("\u02b8\7\u00f9\2\2\u02b8\u02b9\7\6\2\2\u02b9\u02ba\7\u0099")
        buf.write("\2\2\u02ba\u02bb\7\13\2\2\u02bb\u02bc\5J&\2\u02bc\u02bd")
        buf.write("\7\t\2\2\u02bd=\3\2\2\2\u02be\u02cf\7\u00da\2\2\u02bf")
        buf.write("\u02c0\7\u00f9\2\2\u02c0\u02d0\7\6\2\2\u02c1\u02c2\7\u0094")
        buf.write("\2\2\u02c2\u02d0\7\6\2\2\u02c3\u02c4\7\u0093\2\2\u02c4")
        buf.write("\u02d0\7\6\2\2\u02c5\u02c6\7\u0092\2\2\u02c6\u02d0\7\6")
        buf.write("\2\2\u02c7\u02c8\7\u0091\2\2\u02c8\u02d0\7\6\2\2\u02c9")
        buf.write("\u02ca\7\u0096\2\2\u02ca\u02d0\7\6\2\2\u02cb\u02cc\7\u0097")
        buf.write("\2\2\u02cc\u02d0\7\6\2\2\u02cd\u02ce\7\u0098\2\2\u02ce")
        buf.write("\u02d0\7\6\2\2\u02cf\u02bf\3\2\2\2\u02cf\u02c1\3\2\2\2")
        buf.write("\u02cf\u02c3\3\2\2\2\u02cf\u02c5\3\2\2\2\u02cf\u02c7\3")
        buf.write("\2\2\2\u02cf\u02c9\3\2\2\2\u02cf\u02cb\3\2\2\2\u02cf\u02cd")
        buf.write("\3\2\2\2\u02d0\u02d5\3\2\2\2\u02d1\u02d2\7\u00cb\2\2\u02d2")
        buf.write("\u02d3\7\13\2\2\u02d3\u02d4\7\u00f8\2\2\u02d4\u02d6\7")
        buf.write("\6\2\2\u02d5\u02d1\3\2\2\2\u02d5\u02d6\3\2\2\2\u02d6\u02d7")
        buf.write("\3\2\2\2\u02d7\u02d8\7\u00d8\2\2\u02d8\u02d9\7\13\2\2")
        buf.write("\u02d9\u02de\5@!\2\u02da\u02db\7\r\2\2\u02db\u02dd\5@")
        buf.write("!\2\u02dc\u02da\3\2\2\2\u02dd\u02e0\3\2\2\2\u02de\u02dc")
        buf.write("\3\2\2\2\u02de\u02df\3\2\2\2\u02df\u02e1\3\2\2\2\u02e0")
        buf.write("\u02de\3\2\2\2\u02e1\u02f1\7\6\2\2\u02e2\u02e3\7\u00ca")
        buf.write("\2\2\u02e3\u02e4\7\13\2\2\u02e4\u02e5\7\u00f9\2\2\u02e5")
        buf.write("\u02f2\7\6\2\2\u02e6\u02e7\7\u00ca\2\2\u02e7\u02e8\7\13")
        buf.write("\2\2\u02e8\u02e9\7\f\2\2\u02e9\u02ea\7c\2\2\u02ea\u02eb")
        buf.write("\7\u00f8\2\2\u02eb\u02ec\7d\2\2\u02ec\u02ed\7\6\2\2\u02ed")
        buf.write("\u02ee\7\u00db\2\2\u02ee\u02ef\7\13\2\2\u02ef\u02f0\7")
        buf.write("\u00f8\2\2\u02f0\u02f2\7\6\2\2\u02f1\u02e2\3\2\2\2\u02f1")
        buf.write("\u02e6\3\2\2\2\u02f2\u02f3\3\2\2\2\u02f3\u02f4\7\u0099")
        buf.write("\2\2\u02f4\u02f5\7\13\2\2\u02f5\u02f6\5J&\2\u02f6\u02f7")
        buf.write("\7\t\2\2\u02f7?\3\2\2\2\u02f8\u02f9\7\u00f8\2\2\u02f9")
        buf.write("A\3\2\2\2\u02fa\u02fb\7\u00dc\2\2\u02fb\u02fc\7\u00f9")
        buf.write("\2\2\u02fc\u0301\7\6\2\2\u02fd\u02fe\7\u00cb\2\2\u02fe")
        buf.write("\u02ff\7\13\2\2\u02ff\u0300\7\u00f8\2\2\u0300\u0302\7")
        buf.write("\6\2\2\u0301\u02fd\3\2\2\2\u0301\u0302\3\2\2\2\u0302\u030a")
        buf.write("\3\2\2\2\u0303\u0304\7\u00ca\2\2\u0304\u0305\7\13\2\2")
        buf.write("\u0305\u0306\7\f\2\2\u0306\u0307\7c\2\2\u0307\u0308\7")
        buf.write("\u00f8\2\2\u0308\u0309\7d\2\2\u0309\u030b\7\6\2\2\u030a")
        buf.write("\u0303\3\2\2\2\u030b\u030c\3\2\2\2\u030c\u030a\3\2\2\2")
        buf.write("\u030c\u030d\3\2\2\2\u030d\u030e\3\2\2\2\u030e\u030f\7")
        buf.write("\u0099\2\2\u030f\u0310\7\13\2\2\u0310\u0311\5J&\2\u0311")
        buf.write("\u0312\7\t\2\2\u0312C\3\2\2\2\u0313\u0314\7\u00aa\2\2")
        buf.write("\u0314\u0315\5\u0104\u0083\2\u0315\u0316\7\t\2\2\u0316")
        buf.write("\u0317\58\35\2\u0317\u0318\7\u00b1\2\2\u0318\u0319\7\t")
        buf.write("\2\2\u0319E\3\2\2\2\u031a\u031b\7\u00a9\2\2\u031b\u031c")
        buf.write("\5\u0104\u0083\2\u031c\u031d\7\t\2\2\u031d\u031e\58\35")
        buf.write("\2\u031e\u031f\7\u00b1\2\2\u031f\u0320\7\t\2\2\u0320G")
        buf.write("\3\2\2\2\u0321\u0322\7\u00f8\2\2\u0322\u0323\7\6\2\2\u0323")
        buf.write("\u0324\7\u00f8\2\2\u0324\u0325\7\6\2\2\u0325\u0326\7\u00f8")
        buf.write("\2\2\u0326\u0327\7\6\2\2\u0327\u0328\7\u00f8\2\2\u0328")
        buf.write("\u0329\7\6\2\2\u0329\u032a\7\u00f8\2\2\u032a\u032b\7\6")
        buf.write("\2\2\u032b\u032c\7\u00f8\2\2\u032c\u032d\7\6\2\2\u032d")
        buf.write("\u032e\7\u00f8\2\2\u032e\u032f\7\6\2\2\u032f\u0330\7\u00f8")
        buf.write("\2\2\u0330I\3\2\2\2\u0331\u0332\7a\2\2\u0332\u0333\7\u00f8")
        buf.write("\2\2\u0333\u0334\7\6\2\2\u0334\u0335\7\u00f8\2\2\u0335")
        buf.write("\u0336\7\6\2\2\u0336\u0337\7\u00f8\2\2\u0337\u033d\7\6")
        buf.write("\2\2\u0338\u0339\7a\2\2\u0339\u033a\5H%\2\u033a\u033b")
        buf.write("\7b\2\2\u033b\u033e\3\2\2\2\u033c\u033e\5H%\2\u033d\u0338")
        buf.write("\3\2\2\2\u033d\u033c\3\2\2\2\u033e\u033f\3\2\2\2\u033f")
        buf.write("\u0340\7b\2\2\u0340K\3\2\2\2\u0341\u0342\7\f\2\2\u0342")
        buf.write("\u0343\7c\2\2\u0343\u0344\7\u00f8\2\2\u0344\u0345\7d\2")
        buf.write("\2\u0345M\3\2\2\2\u0346\u0347\7p\2\2\u0347\u0348\7\13")
        buf.write("\2\2\u0348\u0349\7\f\2\2\u0349\u034a\7c\2\2\u034a\u034b")
        buf.write("\7\u00f8\2\2\u034b\u034c\7d\2\2\u034c\u034d\7\6\2\2\u034d")
        buf.write("\u034e\7{\2\2\u034e\u034f\7\13\2\2\u034f\u0350\7\f\2\2")
        buf.write("\u0350\u0351\7c\2\2\u0351\u0352\7\u00f8\2\2\u0352\u0353")
        buf.write("\7d\2\2\u0353O\3\2\2\2\u0354\u0355\5R*\2\u0355\u0356\5")
        buf.write("N(\2\u0356Q\3\2\2\2\u0357\u0358\7\u00ca\2\2\u0358\u0359")
        buf.write("\7\13\2\2\u0359\u035a\7\u00f9\2\2\u035a\u035c\7\6\2\2")
        buf.write("\u035b\u0357\3\2\2\2\u035b\u035c\3\2\2\2\u035c\u0362\3")
        buf.write("\2\2\2\u035d\u035e\7\u00cb\2\2\u035e\u035f\7\13\2\2\u035f")
        buf.write("\u0360\5V,\2\u0360\u0361\7\6\2\2\u0361\u0363\3\2\2\2\u0362")
        buf.write("\u035d\3\2\2\2\u0362\u0363\3\2\2\2\u0363\u0368\3\2\2\2")
        buf.write("\u0364\u0365\7\u00cd\2\2\u0365\u0366\7\13\2\2\u0366\u0367")
        buf.write("\7\u00f8\2\2\u0367\u0369\7\6\2\2\u0368\u0364\3\2\2\2\u0368")
        buf.write("\u0369\3\2\2\2\u0369S\3\2\2\2\u036a\u036b\t\5\2\2\u036b")
        buf.write("U\3\2\2\2\u036c\u036d\7\u00f9\2\2\u036d\u036e\7e\2\2\u036e")
        buf.write("\u036f\7\u00f8\2\2\u036f\u037e\7f\2\2\u0370\u037a\7\u00f9")
        buf.write("\2\2\u0371\u0372\7g\2\2\u0372\u0376\7\u00f9\2\2\u0373")
        buf.write("\u0374\7e\2\2\u0374\u0375\7\u00f8\2\2\u0375\u0377\7f\2")
        buf.write("\2\u0376\u0373\3\2\2\2\u0376\u0377\3\2\2\2\u0377\u0379")
        buf.write("\3\2\2\2\u0378\u0371\3\2\2\2\u0379\u037c\3\2\2\2\u037a")
        buf.write("\u0378\3\2\2\2\u037a\u037b\3\2\2\2\u037b\u037e\3\2\2\2")
        buf.write("\u037c\u037a\3\2\2\2\u037d\u036c\3\2\2\2\u037d\u0370\3")
        buf.write("\2\2\2\u037eW\3\2\2\2\u037f\u039e\7\u00f8\2\2\u0380\u039e")
        buf.write("\7\16\2\2\u0381\u039e\7\17\2\2\u0382\u039e\7\20\2\2\u0383")
        buf.write("\u039e\7\21\2\2\u0384\u039e\7\22\2\2\u0385\u0386\7\u00f8")
        buf.write("\2\2\u0386\u0387\7\n\2\2\u0387\u0388\7\u00f8\2\2\u0388")
        buf.write("\u0389\7\n\2\2\u0389\u039e\7\u00f8\2\2\u038a\u038b\7\u00f8")
        buf.write("\2\2\u038b\u038c\7\23\2\2\u038c\u038d\7\u00f8\2\2\u038d")
        buf.write("\u038e\7\23\2\2\u038e\u039e\7\u00f8\2\2\u038f\u0390\7")
        buf.write("\f\2\2\u0390\u0391\7c\2\2\u0391\u0392\7\u00f8\2\2\u0392")
        buf.write("\u039e\7d\2\2\u0393\u0398\7\u00f8\2\2\u0394\u0395\7\6")
        buf.write("\2\2\u0395\u0397\7\u00f8\2\2\u0396\u0394\3\2\2\2\u0397")
        buf.write("\u039a\3\2\2\2\u0398\u0396\3\2\2\2\u0398\u0399\3\2\2\2")
        buf.write("\u0399\u039c\3\2\2\2\u039a\u0398\3\2\2\2\u039b\u0393\3")
        buf.write("\2\2\2\u039b\u039c\3\2\2\2\u039c\u039e\3\2\2\2\u039d\u037f")
        buf.write("\3\2\2\2\u039d\u0380\3\2\2\2\u039d\u0381\3\2\2\2\u039d")
        buf.write("\u0382\3\2\2\2\u039d\u0383\3\2\2\2\u039d\u0384\3\2\2\2")
        buf.write("\u039d\u0385\3\2\2\2\u039d\u038a\3\2\2\2\u039d\u038f\3")
        buf.write("\2\2\2\u039d\u039b\3\2\2\2\u039eY\3\2\2\2\u039f\u03a0")
        buf.write("\7\u00ce\2\2\u03a0\u03a1\7\13\2\2\u03a1\u03a2\7\24\2\2")
        buf.write("\u03a2\u03a3\7c\2\2\u03a3\u03a4\7\u00f8\2\2\u03a4\u03a5")
        buf.write("\7d\2\2\u03a5[\3\2\2\2\u03a6\u03a7\7\u00cf\2\2\u03a7]")
        buf.write("\3\2\2\2\u03a8\u03ab\5Z.\2\u03a9\u03ab\5\\/\2\u03aa\u03a8")
        buf.write("\3\2\2\2\u03aa\u03a9\3\2\2\2\u03ab_\3\2\2\2\u03ac\u03b1")
        buf.write("\5^\60\2\u03ad\u03ae\7\6\2\2\u03ae\u03b0\5^\60\2\u03af")
        buf.write("\u03ad\3\2\2\2\u03b0\u03b3\3\2\2\2\u03b1\u03af\3\2\2\2")
        buf.write("\u03b1\u03b2\3\2\2\2\u03b2a\3\2\2\2\u03b3\u03b1\3\2\2")
        buf.write("\2\u03b4\u03b5\7u\2\2\u03b5\u03b6\7m\2\2\u03b6\u03b7\7")
        buf.write("\13\2\2\u03b7\u03b8\7\u00f8\2\2\u03b8\u03b9\7\6\2\2\u03b9")
        buf.write("\u03ba\7l\2\2\u03ba\u03bb\7\13\2\2\u03bb\u03bc\7\f\2\2")
        buf.write("\u03bc\u03bd\7c\2\2\u03bd\u03be\7\u00f8\2\2\u03be\u03bf")
        buf.write("\7d\2\2\u03bf\u03cd\7\t\2\2\u03c0\u03cc\5f\64\2\u03c1")
        buf.write("\u03cc\5h\65\2\u03c2\u03cc\5j\66\2\u03c3\u03cc\5\u009a")
        buf.write("N\2\u03c4\u03cc\5l\67\2\u03c5\u03cc\5\u0082B\2\u03c6\u03cc")
        buf.write("\5\u00ecw\2\u03c7\u03cc\5\u00f6|\2\u03c8\u03cc\5\u00f8")
        buf.write("}\2\u03c9\u03cc\5\u00fa~\2\u03ca\u03cc\5\u0102\u0082\2")
        buf.write("\u03cb\u03c0\3\2\2\2\u03cb\u03c1\3\2\2\2\u03cb\u03c2\3")
        buf.write("\2\2\2\u03cb\u03c3\3\2\2\2\u03cb\u03c4\3\2\2\2\u03cb\u03c5")
        buf.write("\3\2\2\2\u03cb\u03c6\3\2\2\2\u03cb\u03c7\3\2\2\2\u03cb")
        buf.write("\u03c8\3\2\2\2\u03cb\u03c9\3\2\2\2\u03cb\u03ca\3\2\2\2")
        buf.write("\u03cc\u03cf\3\2\2\2\u03cd\u03cb\3\2\2\2\u03cd\u03ce\3")
        buf.write("\2\2\2\u03ce\u03d0\3\2\2\2\u03cf\u03cd\3\2\2\2\u03d0\u03d1")
        buf.write("\7t\2\2\u03d1\u03d2\7\t\2\2\u03d2c\3\2\2\2\u03d3\u03d4")
        buf.write("\7v\2\2\u03d4\u03d5\7m\2\2\u03d5\u03d6\7\13\2\2\u03d6")
        buf.write("\u03d7\7\u00f8\2\2\u03d7\u03e3\7\6\2\2\u03d8\u03d9\7w")
        buf.write("\2\2\u03d9\u03da\7\13\2\2\u03da\u03db\5L\'\2\u03db\u03dc")
        buf.write("\7\t\2\2\u03dc\u03dd\7x\2\2\u03dd\u03de\7\13\2\2\u03de")
        buf.write("\u03df\5J&\2\u03df\u03e0\7\t\2\2\u03e0\u03e2\3\2\2\2\u03e1")
        buf.write("\u03d8\3\2\2\2\u03e2\u03e5\3\2\2\2\u03e3\u03e1\3\2\2\2")
        buf.write("\u03e3\u03e4\3\2\2\2\u03e4\u03f3\3\2\2\2\u03e5\u03e3\3")
        buf.write("\2\2\2\u03e6\u03f2\5f\64\2\u03e7\u03f2\5h\65\2\u03e8\u03f2")
        buf.write("\5j\66\2\u03e9\u03f2\5\u009aN\2\u03ea\u03f2\5l\67\2\u03eb")
        buf.write("\u03f2\5\u0082B\2\u03ec\u03f2\5\u00ecw\2\u03ed\u03f2\5")
        buf.write("\u00f6|\2\u03ee\u03f2\5\u00f8}\2\u03ef\u03f2\5\u00fa~")
        buf.write("\2\u03f0\u03f2\5\u0102\u0082\2\u03f1\u03e6\3\2\2\2\u03f1")
        buf.write("\u03e7\3\2\2\2\u03f1\u03e8\3\2\2\2\u03f1\u03e9\3\2\2\2")
        buf.write("\u03f1\u03ea\3\2\2\2\u03f1\u03eb\3\2\2\2\u03f1\u03ec\3")
        buf.write("\2\2\2\u03f1\u03ed\3\2\2\2\u03f1\u03ee\3\2\2\2\u03f1\u03ef")
        buf.write("\3\2\2\2\u03f1\u03f0\3\2\2\2\u03f2\u03f5\3\2\2\2\u03f3")
        buf.write("\u03f1\3\2\2\2\u03f3\u03f4\3\2\2\2\u03f4\u03f6\3\2\2\2")
        buf.write("\u03f5\u03f3\3\2\2\2\u03f6\u03f7\7t\2\2\u03f7\u03f8\7")
        buf.write("\t\2\2\u03f8e\3\2\2\2\u03f9\u03fa\5Z.\2\u03fa\u03fb\7")
        buf.write("\t\2\2\u03fbg\3\2\2\2\u03fc\u03fd\5\\/\2\u03fd\u03fe\7")
        buf.write("\t\2\2\u03fei\3\2\2\2\u03ff\u0400\7\u00d0\2\2\u0400\u0401")
        buf.write("\7\u00f9\2\2\u0401\u0402\7\6\2\2\u0402\u0403\5\u0104\u0083")
        buf.write("\2\u0403\u0404\7\u00d1\2\2\u0404\u0405\7\t\2\2\u0405k")
        buf.write("\3\2\2\2\u0406\u040a\5n8\2\u0407\u040a\5t;\2\u0408\u040a")
        buf.write("\5x=\2\u0409\u0406\3\2\2\2\u0409\u0407\3\2\2\2\u0409\u0408")
        buf.write("\3\2\2\2\u040am\3\2\2\2\u040b\u040c\7y\2\2\u040c\u040d")
        buf.write("\7|\2\2\u040d\u040e\7\13\2\2\u040e\u040f\7\f\2\2\u040f")
        buf.write("\u0410\7c\2\2\u0410\u0411\7\u00f8\2\2\u0411\u0416\7d\2")
        buf.write("\2\u0412\u0413\7\6\2\2\u0413\u0414\7~\2\2\u0414\u0415")
        buf.write("\7\13\2\2\u0415\u0417\5p9\2\u0416\u0412\3\2\2\2\u0416")
        buf.write("\u0417\3\2\2\2\u0417\u042d\3\2\2\2\u0418\u0419\7\6\2\2")
        buf.write("\u0419\u041b\5`\61\2\u041a\u0418\3\2\2\2\u041a\u041b\3")
        buf.write("\2\2\2\u041b\u041c\3\2\2\2\u041c\u042e\7\t\2\2\u041d\u041e")
        buf.write("\7\6\2\2\u041e\u0420\5`\61\2\u041f\u041d\3\2\2\2\u041f")
        buf.write("\u0420\3\2\2\2\u0420\u0429\3\2\2\2\u0421\u0426\7\6\2\2")
        buf.write("\u0422\u0425\5l\67\2\u0423\u0425\5\u0082B\2\u0424\u0422")
        buf.write("\3\2\2\2\u0424\u0423\3\2\2\2\u0425\u0428\3\2\2\2\u0426")
        buf.write("\u0424\3\2\2\2\u0426\u0427\3\2\2\2\u0427\u042a\3\2\2\2")
        buf.write("\u0428\u0426\3\2\2\2\u0429\u0421\3\2\2\2\u0429\u042a\3")
        buf.write("\2\2\2\u042a\u042b\3\2\2\2\u042b\u042c\7z\2\2\u042c\u042e")
        buf.write("\7\t\2\2\u042d\u041a\3\2\2\2\u042d\u041f\3\2\2\2\u042e")
        buf.write("o\3\2\2\2\u042f\u0434\5r:\2\u0430\u0431\7\r\2\2\u0431")
        buf.write("\u0433\5r:\2\u0432\u0430\3\2\2\2\u0433\u0436\3\2\2\2\u0434")
        buf.write("\u0432\3\2\2\2\u0434\u0435\3\2\2\2\u0435q\3\2\2\2\u0436")
        buf.write("\u0434\3\2\2\2\u0437\u0438\t\6\2\2\u0438s\3\2\2\2\u0439")
        buf.write("\u043a\7|\2\2\u043a\u043b\7{\2\2\u043b\u043c\7\13\2\2")
        buf.write("\u043c\u043d\7\f\2\2\u043d\u043e\7c\2\2\u043e\u043f\7")
        buf.write("\u00f8\2\2\u043f\u0440\7d\2\2\u0440\u0441\7\6\2\2\u0441")
        buf.write("\u0442\7|\2\2\u0442\u0443\7\13\2\2\u0443\u0444\7\f\2\2")
        buf.write("\u0444\u0445\7c\2\2\u0445\u0446\7\u00f8\2\2\u0446\u044e")
        buf.write("\7d\2\2\u0447\u0448\7\6\2\2\u0448\u0449\7|\2\2\u0449\u044a")
        buf.write("\7\13\2\2\u044a\u044b\7\f\2\2\u044b\u044c\7c\2\2\u044c")
        buf.write("\u044d\7\u00f8\2\2\u044d\u044f\7d\2\2\u044e\u0447\3\2")
        buf.write("\2\2\u044e\u044f\3\2\2\2\u044f\u0460\3\2\2\2\u0450\u0451")
        buf.write("\7\6\2\2\u0451\u0452\7~\2\2\u0452\u0453\7\13\2\2\u0453")
        buf.write("\u0458\5v<\2\u0454\u0455\7\r\2\2\u0455\u0457\5v<\2\u0456")
        buf.write("\u0454\3\2\2\2\u0457\u045a\3\2\2\2\u0458\u0456\3\2\2\2")
        buf.write("\u0458\u0459\3\2\2\2\u0459\u045b\3\2\2\2\u045a\u0458\3")
        buf.write("\2\2\2\u045b\u045c\7\6\2\2\u045c\u045d\7\u00b2\2\2\u045d")
        buf.write("\u045e\7\13\2\2\u045e\u045f\7\u00f8\2\2\u045f\u0461\3")
        buf.write("\2\2\2\u0460\u0450\3\2\2\2\u0460\u0461\3\2\2\2\u0461\u0464")
        buf.write("\3\2\2\2\u0462\u0463\7\6\2\2\u0463\u0465\5`\61\2\u0464")
        buf.write("\u0462\3\2\2\2\u0464\u0465\3\2\2\2\u0465\u0466\3\2\2\2")
        buf.write("\u0466\u0467\7\t\2\2\u0467u\3\2\2\2\u0468\u046b\7\u00f8")
        buf.write("\2\2\u0469\u046b\5T+\2\u046a\u0468\3\2\2\2\u046a\u0469")
        buf.write("\3\2\2\2\u046bw\3\2\2\2\u046c\u046f\5z>\2\u046d\u046f")
        buf.write("\5\u0080A\2\u046e\u046c\3\2\2\2\u046e\u046d\3\2\2\2\u046f")
        buf.write("y\3\2\2\2\u0470\u04a0\7\u00ac\2\2\u0471\u0472\7h\2\2\u0472")
        buf.write("\u0473\7\13\2\2\u0473\u0474\7\f\2\2\u0474\u0475\7c\2\2")
        buf.write("\u0475\u0476\7\u00f8\2\2\u0476\u0477\7d\2\2\u0477\u0478")
        buf.write("\7\6\2\2\u0478\u0479\7\u00ad\2\2\u0479\u047a\7\13\2\2")
        buf.write("\u047a\u047b\5J&\2\u047b\u047c\7\6\2\2\u047c\u047d\7m")
        buf.write("\2\2\u047d\u047e\7\13\2\2\u047e\u047f\7\u00f8\2\2\u047f")
        buf.write("\u0480\7\6\2\2\u0480\u0481\7\u00cc\2\2\u0481\u0482\7\13")
        buf.write("\2\2\u0482\u0483\7\u00f8\2\2\u0483\u0484\7\6\2\2\u0484")
        buf.write("\u04a1\3\2\2\2\u0485\u0486\7\u00ad\2\2\u0486\u0487\7\13")
        buf.write("\2\2\u0487\u0488\5J&\2\u0488\u0489\7\6\2\2\u0489\u048a")
        buf.write("\7m\2\2\u048a\u048b\7\13\2\2\u048b\u048c\7\u00f8\2\2\u048c")
        buf.write("\u048d\7\6\2\2\u048d\u048e\7\u00cc\2\2\u048e\u048f\7\13")
        buf.write("\2\2\u048f\u0490\7\u00f8\2\2\u0490\u0491\7\6\2\2\u0491")
        buf.write("\u04a1\3\2\2\2\u0492\u0493\7m\2\2\u0493\u0494\7\13\2\2")
        buf.write("\u0494\u0495\7\u00f8\2\2\u0495\u0496\7\6\2\2\u0496\u0497")
        buf.write("\7\u00cc\2\2\u0497\u049c\7\13\2\2\u0498\u0499\7\u00f9")
        buf.write("\2\2\u0499\u049d\7\6\2\2\u049a\u049b\7\u00f8\2\2\u049b")
        buf.write("\u049d\7\6\2\2\u049c\u0498\3\2\2\2\u049c\u049a\3\2\2\2")
        buf.write("\u049d\u04a1\3\2\2\2\u049e\u049f\7\u00f8\2\2\u049f\u04a1")
        buf.write("\7\6\2\2\u04a0\u0471\3\2\2\2\u04a0\u0485\3\2\2\2\u04a0")
        buf.write("\u0492\3\2\2\2\u04a0\u049e\3\2\2\2\u04a0\u04a1\3\2\2\2")
        buf.write("\u04a1\u04a2\3\2\2\2\u04a2\u04a7\5P)\2\u04a3\u04a4\7\6")
        buf.write("\2\2\u04a4\u04a5\7~\2\2\u04a5\u04a6\7\13\2\2\u04a6\u04a8")
        buf.write("\5|?\2\u04a7\u04a3\3\2\2\2\u04a7\u04a8\3\2\2\2\u04a8\u04ad")
        buf.write("\3\2\2\2\u04a9\u04aa\7\6\2\2\u04aa\u04ab\7\u00b2\2\2\u04ab")
        buf.write("\u04ac\7\13\2\2\u04ac\u04ae\7\u00f8\2\2\u04ad\u04a9\3")
        buf.write("\2\2\2\u04ad\u04ae\3\2\2\2\u04ae\u04b1\3\2\2\2\u04af\u04b0")
        buf.write("\7\6\2\2\u04b0\u04b2\5\u00aaV\2\u04b1\u04af\3\2\2\2\u04b1")
        buf.write("\u04b2\3\2\2\2\u04b2\u04b3\3\2\2\2\u04b3\u04b4\7\t\2\2")
        buf.write("\u04b4{\3\2\2\2\u04b5\u04ba\5~@\2\u04b6\u04b7\7\r\2\2")
        buf.write("\u04b7\u04b9\5~@\2\u04b8\u04b6\3\2\2\2\u04b9\u04bc\3\2")
        buf.write("\2\2\u04ba\u04b8\3\2\2\2\u04ba\u04bb\3\2\2\2\u04bb}\3")
        buf.write("\2\2\2\u04bc\u04ba\3\2\2\2\u04bd\u04c0\7\u00f8\2\2\u04be")
        buf.write("\u04c0\5T+\2\u04bf\u04bd\3\2\2\2\u04bf\u04be\3\2\2\2\u04c0")
        buf.write("\177\3\2\2\2\u04c1\u04c2\7\u00d5\2\2\u04c2\u04c3\7\u00d7")
        buf.write("\2\2\u04c3\u04c4\7\13\2\2\u04c4\u04c5\7\u00f9\2\2\u04c5")
        buf.write("\u04c6\7\6\2\2\u04c6\u04c7\5N(\2\u04c7\u04cb\7\6\2\2\u04c8")
        buf.write("\u04c9\5`\61\2\u04c9\u04ca\7\6\2\2\u04ca\u04cc\3\2\2\2")
        buf.write("\u04cb\u04c8\3\2\2\2\u04cb\u04cc\3\2\2\2\u04cc\u04cd\3")
        buf.write("\2\2\2\u04cd\u04ce\7\u00d6\2\2\u04ce\u04cf\7\t\2\2\u04cf")
        buf.write("\u0081\3\2\2\2\u04d0\u04d7\5\u00acW\2\u04d1\u04d7\5\u00dc")
        buf.write("o\2\u04d2\u04d7\5\u00ba^\2\u04d3\u04d7\5\u00c8e\2\u04d4")
        buf.write("\u04d7\5\u00d6l\2\u04d5\u04d7\5\u00e4s\2\u04d6\u04d0\3")
        buf.write("\2\2\2\u04d6\u04d1\3\2\2\2\u04d6\u04d2\3\2\2\2\u04d6\u04d3")
        buf.write("\3\2\2\2\u04d6\u04d4\3\2\2\2\u04d6\u04d5\3\2\2\2\u04d7")
        buf.write("\u0083\3\2\2\2\u04d8\u04d9\5^\60\2\u04d9\u04da\7\6\2\2")
        buf.write("\u04da\u04e4\3\2\2\2\u04db\u04e4\5\u0086D\2\u04dc\u04e4")
        buf.write("\5\u0088E\2\u04dd\u04e4\5\u008aF\2\u04de\u04e4\5\u008c")
        buf.write("G\2\u04df\u04e4\5\u008eH\2\u04e0\u04e4\5\u00fa~\2\u04e1")
        buf.write("\u04e4\5\u0090I\2\u04e2\u04e4\5\u0092J\2\u04e3\u04d8\3")
        buf.write("\2\2\2\u04e3\u04db\3\2\2\2\u04e3\u04dc\3\2\2\2\u04e3\u04dd")
        buf.write("\3\2\2\2\u04e3\u04de\3\2\2\2\u04e3\u04df\3\2\2\2\u04e3")
        buf.write("\u04e0\3\2\2\2\u04e3\u04e1\3\2\2\2\u04e3\u04e2\3\2\2\2")
        buf.write("\u04e4\u0085\3\2\2\2\u04e5\u04e6\7\u00ae\2\2\u04e6\u04e7")
        buf.write("\7p\2\2\u04e7\u04e8\7\13\2\2\u04e8\u04e9\5L\'\2\u04e9")
        buf.write("\u04ea\7\6\2\2\u04ea\u04eb\5\u0104\u0083\2\u04eb\u04ec")
        buf.write("\7\u00b1\2\2\u04ec\u0087\3\2\2\2\u04ed\u04ee\7\u00b0\2")
        buf.write("\2\u04ee\u04ef\7p\2\2\u04ef\u04f0\7\13\2\2\u04f0\u04f1")
        buf.write("\5L\'\2\u04f1\u04f2\7\6\2\2\u04f2\u04f3\5\u0104\u0083")
        buf.write("\2\u04f3\u04f4\7\u00b1\2\2\u04f4\u0089\3\2\2\2\u04f5\u04f6")
        buf.write("\7\u00aa\2\2\u04f6\u04f7\5\u0104\u0083\2\u04f7\u04f8\7")
        buf.write("\t\2\2\u04f8\u04f9\5\u00aaV\2\u04f9\u04fa\7\u00b1\2\2")
        buf.write("\u04fa\u008b\3\2\2\2\u04fb\u04fc\7\u00e0\2\2\u04fc\u04fd")
        buf.write("\7\u00e1\2\2\u04fd\u04fe\7\13\2\2\u04fe\u04ff\7\u00f8")
        buf.write("\2\2\u04ff\u008d\3\2\2\2\u0500\u0501\7\u00e2\2\2\u0501")
        buf.write("\u0502\7\13\2\2\u0502\u0503\5L\'\2\u0503\u0504\7\6\2\2")
        buf.write("\u0504\u008f\3\2\2\2\u0505\u0506\7\26\2\2\u0506\u0507")
        buf.write("\7\13\2\2\u0507\u0508\5J&\2\u0508\u0509\7\6\2\2\u0509")
        buf.write("\u0091\3\2\2\2\u050a\u050b\7\u00af\2\2\u050b\u050c\7p")
        buf.write("\2\2\u050c\u050d\7\13\2\2\u050d\u050e\5L\'\2\u050e\u0513")
        buf.write("\7\6\2\2\u050f\u0510\7\u008b\2\2\u0510\u0511\7\13\2\2")
        buf.write("\u0511\u0512\7\u00f8\2\2\u0512\u0514\7\6\2\2\u0513\u050f")
        buf.write("\3\2\2\2\u0513\u0514\3\2\2\2\u0514\u0515\3\2\2\2\u0515")
        buf.write("\u0516\5\u0104\u0083\2\u0516\u0517\7\u00b1\2\2\u0517\u0093")
        buf.write("\3\2\2\2\u0518\u051a\5\u0084C\2\u0519\u0518\3\2\2\2\u051a")
        buf.write("\u051d\3\2\2\2\u051b\u0519\3\2\2\2\u051b\u051c\3\2\2\2")
        buf.write("\u051c\u0095\3\2\2\2\u051d\u051b\3\2\2\2\u051e\u0525\5")
        buf.write("\u0098M\2\u051f\u0525\5\u009cO\2\u0520\u0525\5\u009aN")
        buf.write("\2\u0521\u0525\5\u009eP\2\u0522\u0525\5\u00a6T\2\u0523")
        buf.write("\u0525\5\u00a8U\2\u0524\u051e\3\2\2\2\u0524\u051f\3\2")
        buf.write("\2\2\u0524\u0520\3\2\2\2\u0524\u0521\3\2\2\2\u0524\u0522")
        buf.write("\3\2\2\2\u0524\u0523\3\2\2\2\u0525\u0097\3\2\2\2\u0526")
        buf.write("\u0527\7\u00a9\2\2\u0527\u0528\5\u0104\u0083\2\u0528\u0529")
        buf.write("\7\t\2\2\u0529\u052a\5\u00aaV\2\u052a\u052b\7\u00b1\2")
        buf.write("\2\u052b\u0099\3\2\2\2\u052c\u0534\7\u00a1\2\2\u052d\u052e")
        buf.write("\5\u009cO\2\u052e\u052f\7\6\2\2\u052f\u0535\3\2\2\2\u0530")
        buf.write("\u0531\7\13\2\2\u0531\u0532\5X-\2\u0532\u0533\7\6\2\2")
        buf.write("\u0533\u0535\3\2\2\2\u0534\u052d\3\2\2\2\u0534\u0530\3")
        buf.write("\2\2\2\u0535\u053a\3\2\2\2\u0536\u0537\7\u00d7\2\2\u0537")
        buf.write("\u0538\7\13\2\2\u0538\u0539\7\u00f9\2\2\u0539\u053b\7")
        buf.write("\6\2\2\u053a\u0536\3\2\2\2\u053a\u053b\3\2\2\2\u053b\u009b")
        buf.write("\3\2\2\2\u053c\u053d\7\u00d2\2\2\u053d\u053e\7\13\2\2")
        buf.write("\u053e\u053f\5\u0104\u0083\2\u053f\u0540\7\t\2\2\u0540")
        buf.write("\u009d\3\2\2\2\u0541\u0542\5\u00a0Q\2\u0542\u009f\3\2")
        buf.write("\2\2\u0543\u0544\7}\2\2\u0544\u0545\7|\2\2\u0545\u0546")
        buf.write("\7\13\2\2\u0546\u0547\5L\'\2\u0547\u0548\7\6\2\2\u0548")
        buf.write("\u0549\7\u00d2\2\2\u0549\u054a\7\13\2\2\u054a\u054b\5")
        buf.write("X-\2\u054b\u054c\7\6\2\2\u054c\u054d\7~\2\2\u054d\u054e")
        buf.write("\7\13\2\2\u054e\u0553\5\u00a2R\2\u054f\u0550\7\6\2\2\u0550")
        buf.write("\u0552\5Z.\2\u0551\u054f\3\2\2\2\u0552\u0555\3\2\2\2\u0553")
        buf.write("\u0551\3\2\2\2\u0553\u0554\3\2\2\2\u0554\u0556\3\2\2\2")
        buf.write("\u0555\u0553\3\2\2\2\u0556\u0557\7\t\2\2\u0557\u00a1\3")
        buf.write("\2\2\2\u0558\u055d\5\u00a4S\2\u0559\u055a\7\r\2\2\u055a")
        buf.write("\u055c\5\u00a4S\2\u055b\u0559\3\2\2\2\u055c\u055f\3\2")
        buf.write("\2\2\u055d\u055b\3\2\2\2\u055d\u055e\3\2\2\2\u055e\u00a3")
        buf.write("\3\2\2\2\u055f\u055d\3\2\2\2\u0560\u0561\t\7\2\2\u0561")
        buf.write("\u00a5\3\2\2\2\u0562\u0563\7\u00d3\2\2\u0563\u0564\5\u0104")
        buf.write("\u0083\2\u0564\u0565\7\t\2\2\u0565\u00a7\3\2\2\2\u0566")
        buf.write("\u0567\7\u00d4\2\2\u0567\u0568\5\u0104\u0083\2\u0568\u0569")
        buf.write("\7\t\2\2\u0569\u00a9\3\2\2\2\u056a\u056d\5\u0084C\2\u056b")
        buf.write("\u056d\5\u0096L\2\u056c\u056a\3\2\2\2\u056c\u056b\3\2")
        buf.write("\2\2\u056d\u0570\3\2\2\2\u056e\u056c\3\2\2\2\u056e\u056f")
        buf.write("\3\2\2\2\u056f\u00ab\3\2\2\2\u0570\u056e\3\2\2\2\u0571")
        buf.write("\u0574\5\u00aeX\2\u0572\u0574\5\u00b4[\2\u0573\u0571\3")
        buf.write("\2\2\2\u0573\u0572\3\2\2\2\u0574\u00ad\3\2\2\2\u0575\u0576")
        buf.write("\7\u009a\2\2\u0576\u0577\5R*\2\u0577\u0578\5N(\2\u0578")
        buf.write("\u057e\7\6\2\2\u0579\u057a\7~\2\2\u057a\u057b\7\13\2\2")
        buf.write("\u057b\u057c\5\u00b0Y\2\u057c\u057d\7\6\2\2\u057d\u057f")
        buf.write("\3\2\2\2\u057e\u0579\3\2\2\2\u057e\u057f\3\2\2\2\u057f")
        buf.write("\u0584\3\2\2\2\u0580\u0581\7\u00b2\2\2\u0581\u0582\7\13")
        buf.write("\2\2\u0582\u0583\7\u00f8\2\2\u0583\u0585\7\6\2\2\u0584")
        buf.write("\u0580\3\2\2\2\u0584\u0585\3\2\2\2\u0585\u0586\3\2\2\2")
        buf.write("\u0586\u0587\5\u00aaV\2\u0587\u0588\7\u009b\2\2\u0588")
        buf.write("\u0589\7\t\2\2\u0589\u00af\3\2\2\2\u058a\u058f\5\u00b2")
        buf.write("Z\2\u058b\u058c\7\r\2\2\u058c\u058e\5\u00b2Z\2\u058d\u058b")
        buf.write("\3\2\2\2\u058e\u0591\3\2\2\2\u058f\u058d\3\2\2\2\u058f")
        buf.write("\u0590\3\2\2\2\u0590\u00b1\3\2\2\2\u0591\u058f\3\2\2\2")
        buf.write("\u0592\u0599\7\u00f8\2\2\u0593\u0599\7\u00b3\2\2\u0594")
        buf.write("\u0599\7\u00b4\2\2\u0595\u0599\7\31\2\2\u0596\u0599\7")
        buf.write("\32\2\2\u0597\u0599\5T+\2\u0598\u0592\3\2\2\2\u0598\u0593")
        buf.write("\3\2\2\2\u0598\u0594\3\2\2\2\u0598\u0595\3\2\2\2\u0598")
        buf.write("\u0596\3\2\2\2\u0598\u0597\3\2\2\2\u0599\u00b3\3\2\2\2")
        buf.write("\u059a\u059b\7\u00dd\2\2\u059b\u059c\5P)\2\u059c\u05a2")
        buf.write("\7\6\2\2\u059d\u059e\7~\2\2\u059e\u059f\7\13\2\2\u059f")
        buf.write("\u05a0\5\u00b6\\\2\u05a0\u05a1\7\6\2\2\u05a1\u05a3\3\2")
        buf.write("\2\2\u05a2\u059d\3\2\2\2\u05a2\u05a3\3\2\2\2\u05a3\u05a4")
        buf.write("\3\2\2\2\u05a4\u05a5\7\u00de\2\2\u05a5\u05a6\7\13\2\2")
        buf.write("\u05a6\u05a7\5L\'\2\u05a7\u05a8\7\6\2\2\u05a8\u05a9\5")
        buf.write("\u0094K\2\u05a9\u05aa\7\u00df\2\2\u05aa\u05ab\7\t\2\2")
        buf.write("\u05ab\u00b5\3\2\2\2\u05ac\u05b1\5\u00b8]\2\u05ad\u05ae")
        buf.write("\7\r\2\2\u05ae\u05b0\5\u00b8]\2\u05af\u05ad\3\2\2\2\u05b0")
        buf.write("\u05b3\3\2\2\2\u05b1\u05af\3\2\2\2\u05b1\u05b2\3\2\2\2")
        buf.write("\u05b2\u00b7\3\2\2\2\u05b3\u05b1\3\2\2\2\u05b4\u05b7\7")
        buf.write("\u00f8\2\2\u05b5\u05b7\5T+\2\u05b6\u05b4\3\2\2\2\u05b6")
        buf.write("\u05b5\3\2\2\2\u05b7\u00b9\3\2\2\2\u05b8\u05bb\5\u00bc")
        buf.write("_\2\u05b9\u05bb\5\u00c4c\2\u05ba\u05b8\3\2\2\2\u05ba\u05b9")
        buf.write("\3\2\2\2\u05bb\u00bb\3\2\2\2\u05bc\u05bd\7\u009c\2\2\u05bd")
        buf.write("\u05be\5R*\2\u05be\u05bf\5N(\2\u05bf\u05c5\7\6\2\2\u05c0")
        buf.write("\u05c1\7~\2\2\u05c1\u05c2\7\13\2\2\u05c2\u05c3\5\u00c0")
        buf.write("a\2\u05c3\u05c4\7\6\2\2\u05c4\u05c6\3\2\2\2\u05c5\u05c0")
        buf.write("\3\2\2\2\u05c5\u05c6\3\2\2\2\u05c6\u05cb\3\2\2\2\u05c7")
        buf.write("\u05c8\7\u00b2\2\2\u05c8\u05c9\7\13\2\2\u05c9\u05ca\7")
        buf.write("\u00f8\2\2\u05ca\u05cc\7\6\2\2\u05cb\u05c7\3\2\2\2\u05cb")
        buf.write("\u05cc\3\2\2\2\u05cc\u05cd\3\2\2\2\u05cd\u05ce\5\u00be")
        buf.write("`\2\u05ce\u05cf\5\u00aaV\2\u05cf\u05d0\7\u009d\2\2\u05d0")
        buf.write("\u05d1\7\t\2\2\u05d1\u00bd\3\2\2\2\u05d2\u05d3\7\u009e")
        buf.write("\2\2\u05d3\u05d4\7\13\2\2\u05d4\u05d5\7\u00f8\2\2\u05d5")
        buf.write("\u05d6\7\6\2\2\u05d6\u05d7\7\u009f\2\2\u05d7\u05d8\7\13")
        buf.write("\2\2\u05d8\u05d9\7\u00f8\2\2\u05d9\u05de\7\6\2\2\u05da")
        buf.write("\u05db\7\u00a0\2\2\u05db\u05dc\7\13\2\2\u05dc\u05dd\7")
        buf.write("\u00f8\2\2\u05dd\u05df\7\6\2\2\u05de\u05da\3\2\2\2\u05de")
        buf.write("\u05df\3\2\2\2\u05df\u00bf\3\2\2\2\u05e0\u05e5\5\u00c2")
        buf.write("b\2\u05e1\u05e2\7\r\2\2\u05e2\u05e4\5\u00c2b\2\u05e3\u05e1")
        buf.write("\3\2\2\2\u05e4\u05e7\3\2\2\2\u05e5\u05e3\3\2\2\2\u05e5")
        buf.write("\u05e6\3\2\2\2\u05e6\u00c1\3\2\2\2\u05e7\u05e5\3\2\2\2")
        buf.write("\u05e8\u05f2\7\u00f8\2\2\u05e9\u05f2\7\33\2\2\u05ea\u05f2")
        buf.write("\7\34\2\2\u05eb\u05f2\7\35\2\2\u05ec\u05f2\7\36\2\2\u05ed")
        buf.write("\u05f2\7\37\2\2\u05ee\u05f2\7 \2\2\u05ef\u05f2\7!\2\2")
        buf.write("\u05f0\u05f2\5T+\2\u05f1\u05e8\3\2\2\2\u05f1\u05e9\3\2")
        buf.write("\2\2\u05f1\u05ea\3\2\2\2\u05f1\u05eb\3\2\2\2\u05f1\u05ec")
        buf.write("\3\2\2\2\u05f1\u05ed\3\2\2\2\u05f1\u05ee\3\2\2\2\u05f1")
        buf.write("\u05ef\3\2\2\2\u05f1\u05f0\3\2\2\2\u05f2\u00c3\3\2\2\2")
        buf.write("\u05f3\u05f4\7n\2\2\u05f4\u05f5\5R*\2\u05f5\u05f6\5N(")
        buf.write("\2\u05f6\u05fc\7\6\2\2\u05f7\u05f8\7~\2\2\u05f8\u05f9")
        buf.write("\7\13\2\2\u05f9\u05fa\5\u00c6d\2\u05fa\u05fb\7\6\2\2\u05fb")
        buf.write("\u05fd\3\2\2\2\u05fc\u05f7\3\2\2\2\u05fc\u05fd\3\2\2\2")
        buf.write("\u05fd\u05ff\3\2\2\2\u05fe\u0600\5\u00be`\2\u05ff\u05fe")
        buf.write("\3\2\2\2\u05ff\u0600\3\2\2\2\u0600\u0601\3\2\2\2\u0601")
        buf.write("\u0602\5\u00aaV\2\u0602\u0603\7o\2\2\u0603\u0604\7\t\2")
        buf.write("\2\u0604\u00c5\3\2\2\2\u0605\u060a\5\u00c2b\2\u0606\u0607")
        buf.write("\7\r\2\2\u0607\u0609\5\u00c2b\2\u0608\u0606\3\2\2\2\u0609")
        buf.write("\u060c\3\2\2\2\u060a\u0608\3\2\2\2\u060a\u060b\3\2\2\2")
        buf.write("\u060b\u00c7\3\2\2\2\u060c\u060a\3\2\2\2\u060d\u0610\5")
        buf.write("\u00caf\2\u060e\u0610\5\u00d0i\2\u060f\u060d\3\2\2\2\u060f")
        buf.write("\u060e\3\2\2\2\u0610\u00c9\3\2\2\2\u0611\u0612\7\u00a4")
        buf.write("\2\2\u0612\u0613\5P)\2\u0613\u0619\7\6\2\2\u0614\u0615")
        buf.write("\7~\2\2\u0615\u0616\7\13\2\2\u0616\u0617\5\u00ccg\2\u0617")
        buf.write("\u0618\7\6\2\2\u0618\u061a\3\2\2\2\u0619\u0614\3\2\2\2")
        buf.write("\u0619\u061a\3\2\2\2\u061a\u061f\3\2\2\2\u061b\u061c\7")
        buf.write("\u00b2\2\2\u061c\u061d\7\13\2\2\u061d\u061e\7\u00f8\2")
        buf.write("\2\u061e\u0620\7\6\2\2\u061f\u061b\3\2\2\2\u061f\u0620")
        buf.write("\3\2\2\2\u0620\u0621\3\2\2\2\u0621\u0622\7\u00a6\2\2\u0622")
        buf.write("\u0623\7\13\2\2\u0623\u0624\7\u00f8\2\2\u0624\u0625\7")
        buf.write("\6\2\2\u0625\u0626\7\u00a7\2\2\u0626\u0627\7\13\2\2\u0627")
        buf.write("\u0628\7\u00f8\2\2\u0628\u0629\7\6\2\2\u0629\u062a\5\u00aa")
        buf.write("V\2\u062a\u062b\7\u00a5\2\2\u062b\u062c\7\t\2\2\u062c")
        buf.write("\u00cb\3\2\2\2\u062d\u0632\5\u00ceh\2\u062e\u062f\7\r")
        buf.write("\2\2\u062f\u0631\5\u00ceh\2\u0630\u062e\3\2\2\2\u0631")
        buf.write("\u0634\3\2\2\2\u0632\u0630\3\2\2\2\u0632\u0633\3\2\2\2")
        buf.write("\u0633\u00cd\3\2\2\2\u0634\u0632\3\2\2\2\u0635\u0639\7")
        buf.write("\u00f8\2\2\u0636\u0639\7\"\2\2\u0637\u0639\5T+\2\u0638")
        buf.write("\u0635\3\2\2\2\u0638\u0636\3\2\2\2\u0638\u0637\3\2\2\2")
        buf.write("\u0639\u00cf\3\2\2\2\u063a\u063b\7\u00a2\2\2\u063b\u063c")
        buf.write("\5P)\2\u063c\u0642\7\6\2\2\u063d\u063e\7~\2\2\u063e\u063f")
        buf.write("\7\13\2\2\u063f\u0640\5\u00d2j\2\u0640\u0641\7\6\2\2\u0641")
        buf.write("\u0643\3\2\2\2\u0642\u063d\3\2\2\2\u0642\u0643\3\2\2\2")
        buf.write("\u0643\u0648\3\2\2\2\u0644\u0645\7\u00b2\2\2\u0645\u0646")
        buf.write("\7\13\2\2\u0646\u0647\7\u00f8\2\2\u0647\u0649\7\6\2\2")
        buf.write("\u0648\u0644\3\2\2\2\u0648\u0649\3\2\2\2\u0649\u064a\3")
        buf.write("\2\2\2\u064a\u064b\7\u00a6\2\2\u064b\u064c\7\13\2\2\u064c")
        buf.write("\u064d\7\u00f8\2\2\u064d\u064e\7\6\2\2\u064e\u064f\7\u00a7")
        buf.write("\2\2\u064f\u0650\7\13\2\2\u0650\u0651\7\u00f8\2\2\u0651")
        buf.write("\u0652\7\6\2\2\u0652\u0653\5\u00aaV\2\u0653\u0654\7\u00a3")
        buf.write("\2\2\u0654\u0655\7\t\2\2\u0655\u00d1\3\2\2\2\u0656\u065b")
        buf.write("\5\u00d4k\2\u0657\u0658\7\r\2\2\u0658\u065a\5\u00d4k\2")
        buf.write("\u0659\u0657\3\2\2\2\u065a\u065d\3\2\2\2\u065b\u0659\3")
        buf.write("\2\2\2\u065b\u065c\3\2\2\2\u065c\u00d3\3\2\2\2\u065d\u065b")
        buf.write("\3\2\2\2\u065e\u0661\7\u00f8\2\2\u065f\u0661\5T+\2\u0660")
        buf.write("\u065e\3\2\2\2\u0660\u065f\3\2\2\2\u0661\u00d5\3\2\2\2")
        buf.write("\u0662\u0663\7q\2\2\u0663\u0664\5P)\2\u0664\u0669\7\6")
        buf.write("\2\2\u0665\u0666\7r\2\2\u0666\u0667\7\13\2\2\u0667\u0668")
        buf.write("\7\u00f8\2\2\u0668\u066a\7\6\2\2\u0669\u0665\3\2\2\2\u0669")
        buf.write("\u066a\3\2\2\2\u066a\u066e\3\2\2\2\u066b\u066c\7~\2\2")
        buf.write("\u066c\u066d\7\13\2\2\u066d\u066f\5\u00d8m\2\u066e\u066b")
        buf.write("\3\2\2\2\u066e\u066f\3\2\2\2\u066f\u0670\3\2\2\2\u0670")
        buf.write("\u0671\5\u00aaV\2\u0671\u0672\7s\2\2\u0672\u0673\7\t\2")
        buf.write("\2\u0673\u00d7\3\2\2\2\u0674\u0679\5\u00dan\2\u0675\u0676")
        buf.write("\7\r\2\2\u0676\u0678\5\u00dan\2\u0677\u0675\3\2\2\2\u0678")
        buf.write("\u067b\3\2\2\2\u0679\u0677\3\2\2\2\u0679\u067a\3\2\2\2")
        buf.write("\u067a\u00d9\3\2\2\2\u067b\u0679\3\2\2\2\u067c\u0681\7")
        buf.write("\u00f8\2\2\u067d\u0681\7#\2\2\u067e\u0681\7$\2\2\u067f")
        buf.write("\u0681\5T+\2\u0680\u067c\3\2\2\2\u0680\u067d\3\2\2\2\u0680")
        buf.write("\u067e\3\2\2\2\u0680\u067f\3\2\2\2\u0681\u00db\3\2\2\2")
        buf.write("\u0682\u06c4\7\177\2\2\u0683\u0684\5P)\2\u0684\u068a\7")
        buf.write("\6\2\2\u0685\u0686\7~\2\2\u0686\u0687\7\13\2\2\u0687\u0688")
        buf.write("\5\u00e0q\2\u0688\u0689\7\6\2\2\u0689\u068b\3\2\2\2\u068a")
        buf.write("\u0685\3\2\2\2\u068a\u068b\3\2\2\2\u068b\u068c\3\2\2\2")
        buf.write("\u068c\u068d\5\u00aaV\2\u068d\u06c5\3\2\2\2\u068e\u068f")
        buf.write("\7\u0081\2\2\u068f\u0690\7\u00cb\2\2\u0690\u0691\7\13")
        buf.write("\2\2\u0691\u0692\7\u00f9\2\2\u0692\u0693\7g\2\2\u0693")
        buf.write("\u0694\7\u00f9\2\2\u0694\u0695\7\6\2\2\u0695\u0696\7p")
        buf.write("\2\2\u0696\u0697\7\13\2\2\u0697\u0698\5L\'\2\u0698\u0699")
        buf.write("\7\6\2\2\u0699\u069a\7{\2\2\u069a\u069b\7\13\2\2\u069b")
        buf.write("\u069c\5L\'\2\u069c\u069d\7\6\2\2\u069d\u069e\5\u00de")
        buf.write("p\2\u069e\u069f\7\u0082\2\2\u069f\u06a0\7\u00cb\2\2\u06a0")
        buf.write("\u06a1\7\13\2\2\u06a1\u06a2\7\u00f9\2\2\u06a2\u06a3\7")
        buf.write("g\2\2\u06a3\u06a4\7\u00f9\2\2\u06a4\u06a5\7\6\2\2\u06a5")
        buf.write("\u06a6\7p\2\2\u06a6\u06a7\7\13\2\2\u06a7\u06a8\5L\'\2")
        buf.write("\u06a8\u06a9\7\6\2\2\u06a9\u06aa\7{\2\2\u06aa\u06ab\7")
        buf.write("\13\2\2\u06ab\u06ac\5L\'\2\u06ac\u06ad\7\6\2\2\u06ad\u06ae")
        buf.write("\5\u00dep\2\u06ae\u06af\7\u0083\2\2\u06af\u06b0\7\u00cb")
        buf.write("\2\2\u06b0\u06b1\7\13\2\2\u06b1\u06b2\7\u00f9\2\2\u06b2")
        buf.write("\u06b3\7g\2\2\u06b3\u06b4\7\u00f9\2\2\u06b4\u06b5\7\6")
        buf.write("\2\2\u06b5\u06b6\7p\2\2\u06b6\u06b7\7\13\2\2\u06b7\u06b8")
        buf.write("\5L\'\2\u06b8\u06b9\7\6\2\2\u06b9\u06ba\7{\2\2\u06ba\u06bb")
        buf.write("\7\13\2\2\u06bb\u06bc\5L\'\2\u06bc\u06bd\7\6\2\2\u06bd")
        buf.write("\u06c1\5\u00dep\2\u06be\u06c0\5\u0086D\2\u06bf\u06be\3")
        buf.write("\2\2\2\u06c0\u06c3\3\2\2\2\u06c1\u06bf\3\2\2\2\u06c1\u06c2")
        buf.write("\3\2\2\2\u06c2\u06c5\3\2\2\2\u06c3\u06c1\3\2\2\2\u06c4")
        buf.write("\u0683\3\2\2\2\u06c4\u068e\3\2\2\2\u06c5\u06c6\3\2\2\2")
        buf.write("\u06c6\u06c7\7\u0080\2\2\u06c7\u06c8\7\t\2\2\u06c8\u00dd")
        buf.write("\3\2\2\2\u06c9\u06ca\7\u009e\2\2\u06ca\u06cb\7\13\2\2")
        buf.write("\u06cb\u06cc\7\u00f8\2\2\u06cc\u06cd\7\6\2\2\u06cd\u06ce")
        buf.write("\7\u009f\2\2\u06ce\u06cf\7\13\2\2\u06cf\u06d0\7\u00f8")
        buf.write("\2\2\u06d0\u06d5\7\6\2\2\u06d1\u06d2\7\u00a0\2\2\u06d2")
        buf.write("\u06d3\7\13\2\2\u06d3\u06d4\7\u00f8\2\2\u06d4\u06d6\7")
        buf.write("\6\2\2\u06d5\u06d1\3\2\2\2\u06d5\u06d6\3\2\2\2\u06d6\u06db")
        buf.write("\3\2\2\2\u06d7\u06d8\7\u00a1\2\2\u06d8\u06d9\7\13\2\2")
        buf.write("\u06d9\u06da\7\u00f8\2\2\u06da\u06dc\7\6\2\2\u06db\u06d7")
        buf.write("\3\2\2\2\u06db\u06dc\3\2\2\2\u06dc\u00df\3\2\2\2\u06dd")
        buf.write("\u06e2\5\u00e2r\2\u06de\u06df\7\r\2\2\u06df\u06e1\5\u00e2")
        buf.write("r\2\u06e0\u06de\3\2\2\2\u06e1\u06e4\3\2\2\2\u06e2\u06e0")
        buf.write("\3\2\2\2\u06e2\u06e3\3\2\2\2\u06e3\u00e1\3\2\2\2\u06e4")
        buf.write("\u06e2\3\2\2\2\u06e5\u06e6\t\b\2\2\u06e6\u00e3\3\2\2\2")
        buf.write("\u06e7\u0729\7\u0084\2\2\u06e8\u06e9\5P)\2\u06e9\u06ef")
        buf.write("\7\6\2\2\u06ea\u06eb\7~\2\2\u06eb\u06ec\7\13\2\2\u06ec")
        buf.write("\u06ed\5\u00e8u\2\u06ed\u06ee\7\6\2\2\u06ee\u06f0\3\2")
        buf.write("\2\2\u06ef\u06ea\3\2\2\2\u06ef\u06f0\3\2\2\2\u06f0\u06f1")
        buf.write("\3\2\2\2\u06f1\u06f2\5\u00aaV\2\u06f2\u072a\3\2\2\2\u06f3")
        buf.write("\u06f4\7\u0086\2\2\u06f4\u06f5\7\u00cb\2\2\u06f5\u06f6")
        buf.write("\7\13\2\2\u06f6\u06f7\7\u00f9\2\2\u06f7\u06f8\7g\2\2\u06f8")
        buf.write("\u06f9\7\u00f9\2\2\u06f9\u06fa\7\6\2\2\u06fa\u06fb\7p")
        buf.write("\2\2\u06fb\u06fc\7\13\2\2\u06fc\u06fd\5L\'\2\u06fd\u06fe")
        buf.write("\7\6\2\2\u06fe\u06ff\7{\2\2\u06ff\u0700\7\13\2\2\u0700")
        buf.write("\u0701\5L\'\2\u0701\u0702\7\6\2\2\u0702\u0703\5\u00e6")
        buf.write("t\2\u0703\u0704\7\u0087\2\2\u0704\u0705\7\u00cb\2\2\u0705")
        buf.write("\u0706\7\13\2\2\u0706\u0707\7\u00f9\2\2\u0707\u0708\7")
        buf.write("g\2\2\u0708\u0709\7\u00f9\2\2\u0709\u070a\7\6\2\2\u070a")
        buf.write("\u070b\7p\2\2\u070b\u070c\7\13\2\2\u070c\u070d\5L\'\2")
        buf.write("\u070d\u070e\7\6\2\2\u070e\u070f\7{\2\2\u070f\u0710\7")
        buf.write("\13\2\2\u0710\u0711\5L\'\2\u0711\u0712\7\6\2\2\u0712\u0713")
        buf.write("\5\u00e6t\2\u0713\u0714\7\u0088\2\2\u0714\u0715\7\u00cb")
        buf.write("\2\2\u0715\u0716\7\13\2\2\u0716\u0717\7\u00f9\2\2\u0717")
        buf.write("\u0718\7g\2\2\u0718\u0719\7\u00f9\2\2\u0719\u071a\7\6")
        buf.write("\2\2\u071a\u071b\7p\2\2\u071b\u071c\7\13\2\2\u071c\u071d")
        buf.write("\5L\'\2\u071d\u071e\7\6\2\2\u071e\u071f\7{\2\2\u071f\u0720")
        buf.write("\7\13\2\2\u0720\u0721\5L\'\2\u0721\u0722\7\6\2\2\u0722")
        buf.write("\u0726\5\u00e6t\2\u0723\u0725\5\u0086D\2\u0724\u0723\3")
        buf.write("\2\2\2\u0725\u0728\3\2\2\2\u0726\u0724\3\2\2\2\u0726\u0727")
        buf.write("\3\2\2\2\u0727\u072a\3\2\2\2\u0728\u0726\3\2\2\2\u0729")
        buf.write("\u06e8\3\2\2\2\u0729\u06f3\3\2\2\2\u072a\u072b\3\2\2\2")
        buf.write("\u072b\u072c\7\u0085\2\2\u072c\u072d\7\t\2\2\u072d\u00e5")
        buf.write("\3\2\2\2\u072e\u072f\7\u009e\2\2\u072f\u0730\7\13\2\2")
        buf.write("\u0730\u0731\7\u00f8\2\2\u0731\u0732\7\6\2\2\u0732\u0733")
        buf.write("\7\u009f\2\2\u0733\u0734\7\13\2\2\u0734\u0735\7\u00f8")
        buf.write("\2\2\u0735\u073a\7\6\2\2\u0736\u0737\7\u00a0\2\2\u0737")
        buf.write("\u0738\7\13\2\2\u0738\u0739\7\u00f8\2\2\u0739\u073b\7")
        buf.write("\6\2\2\u073a\u0736\3\2\2\2\u073a\u073b\3\2\2\2\u073b\u0740")
        buf.write("\3\2\2\2\u073c\u073d\7\u00a1\2\2\u073d\u073e\7\13\2\2")
        buf.write("\u073e\u073f\7\u00f8\2\2\u073f\u0741\7\6\2\2\u0740\u073c")
        buf.write("\3\2\2\2\u0740\u0741\3\2\2\2\u0741\u00e7\3\2\2\2\u0742")
        buf.write("\u0747\5\u00eav\2\u0743\u0744\7\r\2\2\u0744\u0746\5\u00ea")
        buf.write("v\2\u0745\u0743\3\2\2\2\u0746\u0749\3\2\2\2\u0747\u0745")
        buf.write("\3\2\2\2\u0747\u0748\3\2\2\2\u0748\u00e9\3\2\2\2\u0749")
        buf.write("\u0747\3\2\2\2\u074a\u074b\t\t\2\2\u074b\u00eb\3\2\2\2")
        buf.write("\u074c\u0750\5\u00f0y\2\u074d\u0750\5\u00f2z\2\u074e\u0750")
        buf.write("\5\u00f4{\2\u074f\u074c\3\2\2\2\u074f\u074d\3\2\2\2\u074f")
        buf.write("\u074e\3\2\2\2\u0750\u00ed\3\2\2\2\u0751\u0757\5l\67\2")
        buf.write("\u0752\u0757\5\u0082B\2\u0753\u0757\5\u00ecw\2\u0754\u0757")
        buf.write("\5\u00f6|\2\u0755\u0757\5\u00fa~\2\u0756\u0751\3\2\2\2")
        buf.write("\u0756\u0752\3\2\2\2\u0756\u0753\3\2\2\2\u0756\u0754\3")
        buf.write("\2\2\2\u0756\u0755\3\2\2\2\u0757\u00ef\3\2\2\2\u0758\u0759")
        buf.write("\7\u00aa\2\2\u0759\u075a\5\u0104\u0083\2\u075a\u075e\7")
        buf.write("\t\2\2\u075b\u075d\5\u00eex\2\u075c\u075b\3\2\2\2\u075d")
        buf.write("\u0760\3\2\2\2\u075e\u075c\3\2\2\2\u075e\u075f\3\2\2\2")
        buf.write("\u075f\u0761\3\2\2\2\u0760\u075e\3\2\2\2\u0761\u0762\7")
        buf.write("\u00b1\2\2\u0762\u0763\7\t\2\2\u0763\u00f1\3\2\2\2\u0764")
        buf.write("\u0765\7\u00a9\2\2\u0765\u0766\5\u0104\u0083\2\u0766\u076a")
        buf.write("\7\t\2\2\u0767\u0769\5\u00eex\2\u0768\u0767\3\2\2\2\u0769")
        buf.write("\u076c\3\2\2\2\u076a\u0768\3\2\2\2\u076a\u076b\3\2\2\2")
        buf.write("\u076b\u076d\3\2\2\2\u076c\u076a\3\2\2\2\u076d\u076e\7")
        buf.write("\u00b1\2\2\u076e\u076f\7\t\2\2\u076f\u00f3\3\2\2\2\u0770")
        buf.write("\u0771\7\u0089\2\2\u0771\u0772\5\u0104\u0083\2\u0772\u0776")
        buf.write("\7\t\2\2\u0773\u0775\5\u00eex\2\u0774\u0773\3\2\2\2\u0775")
        buf.write("\u0778\3\2\2\2\u0776\u0774\3\2\2\2\u0776\u0777\3\2\2\2")
        buf.write("\u0777\u0779\3\2\2\2\u0778\u0776\3\2\2\2\u0779\u077a\7")
        buf.write("\u00b1\2\2\u077a\u077b\7\t\2\2\u077b\u00f5\3\2\2\2\u077c")
        buf.write("\u077d\7\u008a\2\2\u077d\u077e\7\u00f8\2\2\u077e\u077f")
        buf.write("\7\t\2\2\u077f\u00f7\3\2\2\2\u0780\u0782\7\u00c4\2\2\u0781")
        buf.write("\u0783\7\6\2\2\u0782\u0781\3\2\2\2\u0782\u0783\3\2\2\2")
        buf.write("\u0783\u0784\3\2\2\2\u0784\u0785\7l\2\2\u0785\u0786\7")
        buf.write("\13\2\2\u0786\u0787\7\f\2\2\u0787\u0788\7c\2\2\u0788\u0789")
        buf.write("\7\u00f8\2\2\u0789\u078a\7d\2\2\u078a\u0795\7\6\2\2\u078b")
        buf.write("\u078c\7\u00c9\2\2\u078c\u078d\7\u00f8\2\2\u078d\u078e")
        buf.write("\7\6\2\2\u078e\u078f\7\u00c5\2\2\u078f\u0790\t\n\2\2\u0790")
        buf.write("\u0796\7\t\2\2\u0791\u0792\7\u008b\2\2\u0792\u0793\7\13")
        buf.write("\2\2\u0793\u0794\7\u00f8\2\2\u0794\u0796\7\t\2\2\u0795")
        buf.write("\u078b\3\2\2\2\u0795\u0791\3\2\2\2\u0796\u00f9\3\2\2\2")
        buf.write("\u0797\u0798\7\u00e3\2\2\u0798\u0799\7\u0099\2\2\u0799")
        buf.write("\u079a\7\13\2\2\u079a\u07dd\5J&\2\u079b\u079c\7\6\2\2")
        buf.write("\u079c\u079d\7\u00e5\2\2\u079d\u07da\7\13\2\2\u079e\u07a2")
        buf.write("\7\u0091\2\2\u079f\u07a0\7e\2\2\u07a0\u07a1\7\u00f8\2")
        buf.write("\2\u07a1\u07a3\7f\2\2\u07a2\u079f\3\2\2\2\u07a2\u07a3")
        buf.write("\3\2\2\2\u07a3\u07db\3\2\2\2\u07a4\u07a8\7\u0092\2\2\u07a5")
        buf.write("\u07a6\7e\2\2\u07a6\u07a7\7\u00f8\2\2\u07a7\u07a9\7f\2")
        buf.write("\2\u07a8\u07a5\3\2\2\2\u07a8\u07a9\3\2\2\2\u07a9\u07db")
        buf.write("\3\2\2\2\u07aa\u07ae\7\u0093\2\2\u07ab\u07ac\7e\2\2\u07ac")
        buf.write("\u07ad\7\u00f8\2\2\u07ad\u07af\7f\2\2\u07ae\u07ab\3\2")
        buf.write("\2\2\u07ae\u07af\3\2\2\2\u07af\u07db\3\2\2\2\u07b0\u07b4")
        buf.write("\7\u0094\2\2\u07b1\u07b2\7e\2\2\u07b2\u07b3\7\u00f8\2")
        buf.write("\2\u07b3\u07b5\7f\2\2\u07b4\u07b1\3\2\2\2\u07b4\u07b5")
        buf.write("\3\2\2\2\u07b5\u07db\3\2\2\2\u07b6\u07ba\7\u0090\2\2\u07b7")
        buf.write("\u07b8\7e\2\2\u07b8\u07b9\7\u00f8\2\2\u07b9\u07bb\7f\2")
        buf.write("\2\u07ba\u07b7\3\2\2\2\u07ba\u07bb\3\2\2\2\u07bb\u07db")
        buf.write("\3\2\2\2\u07bc\u07c0\7\u0095\2\2\u07bd\u07be\7e\2\2\u07be")
        buf.write("\u07bf\7\u00f8\2\2\u07bf\u07c1\7f\2\2\u07c0\u07bd\3\2")
        buf.write("\2\2\u07c0\u07c1\3\2\2\2\u07c1\u07db\3\2\2\2\u07c2\u07c6")
        buf.write("\7\u0096\2\2\u07c3\u07c4\7e\2\2\u07c4\u07c5\7\u00f8\2")
        buf.write("\2\u07c5\u07c7\7f\2\2\u07c6\u07c3\3\2\2\2\u07c6\u07c7")
        buf.write("\3\2\2\2\u07c7\u07db\3\2\2\2\u07c8\u07cc\7\u0097\2\2\u07c9")
        buf.write("\u07ca\7e\2\2\u07ca\u07cb\7\u00f8\2\2\u07cb\u07cd\7f\2")
        buf.write("\2\u07cc\u07c9\3\2\2\2\u07cc\u07cd\3\2\2\2\u07cd\u07db")
        buf.write("\3\2\2\2\u07ce\u07d2\7\u0098\2\2\u07cf\u07d0\7e\2\2\u07d0")
        buf.write("\u07d1\7\u00f8\2\2\u07d1\u07d3\7f\2\2\u07d2\u07cf\3\2")
        buf.write("\2\2\u07d2\u07d3\3\2\2\2\u07d3\u07db\3\2\2\2\u07d4\u07d8")
        buf.write("\7\u00f9\2\2\u07d5\u07d6\7e\2\2\u07d6\u07d7\7\u00f8\2")
        buf.write("\2\u07d7\u07d9\7f\2\2\u07d8\u07d5\3\2\2\2\u07d8\u07d9")
        buf.write("\3\2\2\2\u07d9\u07db\3\2\2\2\u07da\u079e\3\2\2\2\u07da")
        buf.write("\u07a4\3\2\2\2\u07da\u07aa\3\2\2\2\u07da\u07b0\3\2\2\2")
        buf.write("\u07da\u07b6\3\2\2\2\u07da\u07bc\3\2\2\2\u07da\u07c2\3")
        buf.write("\2\2\2\u07da\u07c8\3\2\2\2\u07da\u07ce\3\2\2\2\u07da\u07d4")
        buf.write("\3\2\2\2\u07db\u07dc\3\2\2\2\u07dc\u07de\5\u00fc\177\2")
        buf.write("\u07dd\u079b\3\2\2\2\u07dd\u07de\3\2\2\2\u07de\u07e7\3")
        buf.write("\2\2\2\u07df\u07e3\7\6\2\2\u07e0\u07e2\5\u00fa~\2\u07e1")
        buf.write("\u07e0\3\2\2\2\u07e2\u07e5\3\2\2\2\u07e3\u07e1\3\2\2\2")
        buf.write("\u07e3\u07e4\3\2\2\2\u07e4\u07e6\3\2\2\2\u07e5\u07e3\3")
        buf.write("\2\2\2\u07e6\u07e8\7\u00e4\2\2\u07e7\u07df\3\2\2\2\u07e7")
        buf.write("\u07e8\3\2\2\2\u07e8\u07e9\3\2\2\2\u07e9\u07ea\7\t\2\2")
        buf.write("\u07ea\u00fb\3\2\2\2\u07eb\u07ed\5\u00fe\u0080\2\u07ec")
        buf.write("\u07eb\3\2\2\2\u07ed\u07f0\3\2\2\2\u07ee\u07ec\3\2\2\2")
        buf.write("\u07ee\u07ef\3\2\2\2\u07ef\u00fd\3\2\2\2\u07f0\u07ee\3")
        buf.write("\2\2\2\u07f1\u07f2\7\6\2\2\u07f2\u07f6\7\u00e6\2\2\u07f3")
        buf.write("\u07f4\7e\2\2\u07f4\u07f5\7\u00f8\2\2\u07f5\u07f7\7f\2")
        buf.write("\2\u07f6\u07f3\3\2\2\2\u07f6\u07f7\3\2\2\2\u07f7\u07fb")
        buf.write("\3\2\2\2\u07f8\u07fa\5\u0100\u0081\2\u07f9\u07f8\3\2\2")
        buf.write("\2\u07fa\u07fd\3\2\2\2\u07fb\u07f9\3\2\2\2\u07fb\u07fc")
        buf.write("\3\2\2\2\u07fc\u07fe\3\2\2\2\u07fd\u07fb\3\2\2\2\u07fe")
        buf.write("\u07ff\7\13\2\2\u07ff\u0800\7\u00f8\2\2\u0800\u00ff\3")
        buf.write("\2\2\2\u0801\u0802\7g\2\2\u0802\u0806\7\u00f9\2\2\u0803")
        buf.write("\u0804\7e\2\2\u0804\u0805\7\u00f8\2\2\u0805\u0807\7f\2")
        buf.write("\2\u0806\u0803\3\2\2\2\u0806\u0807\3\2\2\2\u0807\u0101")
        buf.write("\3\2\2\2\u0808\u0809\7\u00e7\2\2\u0809\u080a\7\t\2\2\u080a")
        buf.write("\u0103\3\2\2\2\u080b\u0810\5\u0106\u0084\2\u080c\u080d")
        buf.write("\7.\2\2\u080d\u080f\5\u0106\u0084\2\u080e\u080c\3\2\2")
        buf.write("\2\u080f\u0812\3\2\2\2\u0810\u080e\3\2\2\2\u0810\u0811")
        buf.write("\3\2\2\2\u0811\u0105\3\2\2\2\u0812\u0810\3\2\2\2\u0813")
        buf.write("\u0818\5\u0108\u0085\2\u0814\u0815\7/\2\2\u0815\u0817")
        buf.write("\5\u0108\u0085\2\u0816\u0814\3\2\2\2\u0817\u081a\3\2\2")
        buf.write("\2\u0818\u0816\3\2\2\2\u0818\u0819\3\2\2\2\u0819\u0107")
        buf.write("\3\2\2\2\u081a\u0818\3\2\2\2\u081b\u0820\5\u010a\u0086")
        buf.write("\2\u081c\u081d\7\r\2\2\u081d\u081f\5\u010a\u0086\2\u081e")
        buf.write("\u081c\3\2\2\2\u081f\u0822\3\2\2\2\u0820\u081e\3\2\2\2")
        buf.write("\u0820\u0821\3\2\2\2\u0821\u0109\3\2\2\2\u0822\u0820\3")
        buf.write("\2\2\2\u0823\u0828\5\u010c\u0087\2\u0824\u0825\7\60\2")
        buf.write("\2\u0825\u0827\5\u010c\u0087\2\u0826\u0824\3\2\2\2\u0827")
        buf.write("\u082a\3\2\2\2\u0828\u0826\3\2\2\2\u0828\u0829\3\2\2\2")
        buf.write("\u0829\u010b\3\2\2\2\u082a\u0828\3\2\2\2\u082b\u0832\5")
        buf.write("\u010e\u0088\2\u082c\u082d\7\61\2\2\u082d\u0831\5\u010e")
        buf.write("\u0088\2\u082e\u082f\7\62\2\2\u082f\u0831\5\u010e\u0088")
        buf.write("\2\u0830\u082c\3\2\2\2\u0830\u082e\3\2\2\2\u0831\u0834")
        buf.write("\3\2\2\2\u0832\u0830\3\2\2\2\u0832\u0833\3\2\2\2\u0833")
        buf.write("\u010d\3\2\2\2\u0834\u0832\3\2\2\2\u0835\u0840\5\u0110")
        buf.write("\u0089\2\u0836\u0837\7\63\2\2\u0837\u083f\5\u0110\u0089")
        buf.write("\2\u0838\u0839\7\64\2\2\u0839\u083f\5\u0110\u0089\2\u083a")
        buf.write("\u083b\7\65\2\2\u083b\u083f\5\u0110\u0089\2\u083c\u083d")
        buf.write("\7\66\2\2\u083d\u083f\5\u0110\u0089\2\u083e\u0836\3\2")
        buf.write("\2\2\u083e\u0838\3\2\2\2\u083e\u083a\3\2\2\2\u083e\u083c")
        buf.write("\3\2\2\2\u083f\u0842\3\2\2\2\u0840\u083e\3\2\2\2\u0840")
        buf.write("\u0841\3\2\2\2\u0841\u010f\3\2\2\2\u0842\u0840\3\2\2\2")
        buf.write("\u0843\u084a\5\u0112\u008a\2\u0844\u0845\7\67\2\2\u0845")
        buf.write("\u0849\5\u0112\u008a\2\u0846\u0847\78\2\2\u0847\u0849")
        buf.write("\5\u0112\u008a\2\u0848\u0844\3\2\2\2\u0848\u0846\3\2\2")
        buf.write("\2\u0849\u084c\3\2\2\2\u084a\u0848\3\2\2\2\u084a\u084b")
        buf.write("\3\2\2\2\u084b\u0111\3\2\2\2\u084c\u084a\3\2\2\2\u084d")
        buf.write("\u0854\5\u0114\u008b\2\u084e\u084f\79\2\2\u084f\u0853")
        buf.write("\5\u0114\u008b\2\u0850\u0851\7:\2\2\u0851\u0853\5\u0114")
        buf.write("\u008b\2\u0852\u084e\3\2\2\2\u0852\u0850\3\2\2\2\u0853")
        buf.write("\u0856\3\2\2\2\u0854\u0852\3\2\2\2\u0854\u0855\3\2\2\2")
        buf.write("\u0855\u0113\3\2\2\2\u0856\u0854\3\2\2\2\u0857\u0860\5")
        buf.write("\u0116\u008c\2\u0858\u0859\7;\2\2\u0859\u085f\5\u0116")
        buf.write("\u008c\2\u085a\u085b\7\23\2\2\u085b\u085f\5\u0116\u008c")
        buf.write("\2\u085c\u085d\7<\2\2\u085d\u085f\5\u0116\u008c\2\u085e")
        buf.write("\u0858\3\2\2\2\u085e\u085a\3\2\2\2\u085e\u085c\3\2\2\2")
        buf.write("\u085f\u0862\3\2\2\2\u0860\u085e\3\2\2\2\u0860\u0861\3")
        buf.write("\2\2\2\u0861\u0115\3\2\2\2\u0862\u0860\3\2\2\2\u0863\u0864")
        buf.write("\7c\2\2\u0864\u0865\t\13\2\2\u0865\u0867\7d\2\2\u0866")
        buf.write("\u0863\3\2\2\2\u0867\u086a\3\2\2\2\u0868\u0866\3\2\2\2")
        buf.write("\u0868\u0869\3\2\2\2\u0869\u086b\3\2\2\2\u086a\u0868\3")
        buf.write("\2\2\2\u086b\u086c\5\u0118\u008d\2\u086c\u0117\3\2\2\2")
        buf.write("\u086d\u0879\5\u011a\u008e\2\u086e\u0879\5\u011c\u008f")
        buf.write("\2\u086f\u0879\5\u011e\u0090\2\u0870\u0879\5\u0120\u0091")
        buf.write("\2\u0871\u0879\5\u0138\u009d\2\u0872\u0879\5\u013a\u009e")
        buf.write("\2\u0873\u0879\5\u0150\u00a9\2\u0874\u0879\5\u0160\u00b1")
        buf.write("\2\u0875\u0876\7=\2\2\u0876\u0879\5\u0118\u008d\2\u0877")
        buf.write("\u0879\5\u0162\u00b2\2\u0878\u086d\3\2\2\2\u0878\u086e")
        buf.write("\3\2\2\2\u0878\u086f\3\2\2\2\u0878\u0870\3\2\2\2\u0878")
        buf.write("\u0871\3\2\2\2\u0878\u0872\3\2\2\2\u0878\u0873\3\2\2\2")
        buf.write("\u0878\u0874\3\2\2\2\u0878\u0875\3\2\2\2\u0878\u0877\3")
        buf.write("\2\2\2\u0879\u0119\3\2\2\2\u087a\u087b\7>\2\2\u087b\u087c")
        buf.write("\7c\2\2\u087c\u087d\5\u0104\u0083\2\u087d\u087e\7\6\2")
        buf.write("\2\u087e\u087f\5\u0104\u0083\2\u087f\u0880\7d\2\2\u0880")
        buf.write("\u011b\3\2\2\2\u0881\u0882\7?\2\2\u0882\u0883\7c\2\2\u0883")
        buf.write("\u0884\5\u0104\u0083\2\u0884\u0885\7\6\2\2\u0885\u0886")
        buf.write("\5\u0104\u0083\2\u0886\u0887\7d\2\2\u0887\u011d\3\2\2")
        buf.write("\2\u0888\u0889\7c\2\2\u0889\u088a\5\u0104\u0083\2\u088a")
        buf.write("\u088b\7d\2\2\u088b\u011f\3\2\2\2\u088c\u0897\5\u0122")
        buf.write("\u0092\2\u088d\u0897\5\u0124\u0093\2\u088e\u0897\5\u0126")
        buf.write("\u0094\2\u088f\u0897\5\u0128\u0095\2\u0890\u0897\5\u012c")
        buf.write("\u0097\2\u0891\u0897\5\u012e\u0098\2\u0892\u0897\5\u0130")
        buf.write("\u0099\2\u0893\u0897\5\u0132\u009a\2\u0894\u0897\5\u0134")
        buf.write("\u009b\2\u0895\u0897\5\u0136\u009c\2\u0896\u088c\3\2\2")
        buf.write("\2\u0896\u088d\3\2\2\2\u0896\u088e\3\2\2\2\u0896\u088f")
        buf.write("\3\2\2\2\u0896\u0890\3\2\2\2\u0896\u0891\3\2\2\2\u0896")
        buf.write("\u0892\3\2\2\2\u0896\u0893\3\2\2\2\u0896\u0894\3\2\2\2")
        buf.write("\u0896\u0895\3\2\2\2\u0897\u0121\3\2\2\2\u0898\u0899\7")
        buf.write("@\2\2\u0899\u0123\3\2\2\2\u089a\u089b\7A\2\2\u089b\u089c")
        buf.write("\5\u012a\u0096\2\u089c\u089d\7\61\2\2\u089d\u089e\7\u00f8")
        buf.write("\2\2\u089e\u0125\3\2\2\2\u089f\u08a0\7B\2\2\u08a0\u08a1")
        buf.write("\5\u012a\u0096\2\u08a1\u08a2\7\61\2\2\u08a2\u08a3\5\u012a")
        buf.write("\u0096\2\u08a3\u0127\3\2\2\2\u08a4\u08a5\7C\2\2\u08a5")
        buf.write("\u08a6\5\u012a\u0096\2\u08a6\u08a8\7\61\2\2\u08a7\u08a9")
        buf.write("\7\u00f8\2\2\u08a8\u08a7\3\2\2\2\u08a9\u08aa\3\2\2\2\u08aa")
        buf.write("\u08a8\3\2\2\2\u08aa\u08ab\3\2\2\2\u08ab\u0129\3\2\2\2")
        buf.write("\u08ac\u08ad\7\u00f9\2\2\u08ad\u08ae\7e\2\2\u08ae\u08af")
        buf.write("\7\u00f8\2\2\u08af\u08be\7f\2\2\u08b0\u08ba\7\u00f9\2")
        buf.write("\2\u08b1\u08b2\7g\2\2\u08b2\u08b6\7\u00f9\2\2\u08b3\u08b4")
        buf.write("\7e\2\2\u08b4\u08b5\7\u00f8\2\2\u08b5\u08b7\7f\2\2\u08b6")
        buf.write("\u08b3\3\2\2\2\u08b6\u08b7\3\2\2\2\u08b7\u08b9\3\2\2\2")
        buf.write("\u08b8\u08b1\3\2\2\2\u08b9\u08bc\3\2\2\2\u08ba\u08b8\3")
        buf.write("\2\2\2\u08ba\u08bb\3\2\2\2\u08bb\u08be\3\2\2\2\u08bc\u08ba")
        buf.write("\3\2\2\2\u08bd\u08ac\3\2\2\2\u08bd\u08b0\3\2\2\2\u08be")
        buf.write("\u012b\3\2\2\2\u08bf\u08c0\7D\2\2\u08c0\u08c1\7c\2\2\u08c1")
        buf.write("\u08c5\7\u00f9\2\2\u08c2\u08c3\7\u00f8\2\2\u08c3\u08c5")
        buf.write("\7d\2\2\u08c4\u08bf\3\2\2\2\u08c4\u08c2\3\2\2\2\u08c5")
        buf.write("\u012d\3\2\2\2\u08c6\u08c7\7E\2\2\u08c7\u08c8\7c\2\2\u08c8")
        buf.write("\u08c9\7\u00f9\2\2\u08c9\u08ca\7d\2\2\u08ca\u012f\3\2")
        buf.write("\2\2\u08cb\u08cc\7F\2\2\u08cc\u08cd\7c\2\2\u08cd\u08ce")
        buf.write("\5L\'\2\u08ce\u08cf\7d\2\2\u08cf\u0131\3\2\2\2\u08d0\u08d1")
        buf.write("\7G\2\2\u08d1\u0133\3\2\2\2\u08d2\u08d3\7H\2\2\u08d3\u08d4")
        buf.write("\7c\2\2\u08d4\u08d5\5J&\2\u08d5\u08d6\7d\2\2\u08d6\u0135")
        buf.write("\3\2\2\2\u08d7\u08d8\7I\2\2\u08d8\u08d9\7c\2\2\u08d9\u08de")
        buf.write("\5V,\2\u08da\u08db\7\r\2\2\u08db\u08dc\7~\2\2\u08dc\u08dd")
        buf.write("\7\13\2\2\u08dd\u08df\5\u00c0a\2\u08de\u08da\3\2\2\2\u08de")
        buf.write("\u08df\3\2\2\2\u08df\u08e0\3\2\2\2\u08e0\u08e1\7d\2\2")
        buf.write("\u08e1\u0137\3\2\2\2\u08e2\u08e3\t\f\2\2\u08e3\u0139\3")
        buf.write("\2\2\2\u08e4\u08ef\5\u013c\u009f\2\u08e5\u08ef\5\u013e")
        buf.write("\u00a0\2\u08e6\u08ef\5\u0140\u00a1\2\u08e7\u08ef\5\u0142")
        buf.write("\u00a2\2\u08e8\u08ef\5\u0144\u00a3\2\u08e9\u08ef\5\u0146")
        buf.write("\u00a4\2\u08ea\u08ef\5\u0148\u00a5\2\u08eb\u08ef\5\u014a")
        buf.write("\u00a6\2\u08ec\u08ef\5\u014c\u00a7\2\u08ed\u08ef\5\u014e")
        buf.write("\u00a8\2\u08ee\u08e4\3\2\2\2\u08ee\u08e5\3\2\2\2\u08ee")
        buf.write("\u08e6\3\2\2\2\u08ee\u08e7\3\2\2\2\u08ee\u08e8\3\2\2\2")
        buf.write("\u08ee\u08e9\3\2\2\2\u08ee\u08ea\3\2\2\2\u08ee\u08eb\3")
        buf.write("\2\2\2\u08ee\u08ec\3\2\2\2\u08ee\u08ed\3\2\2\2\u08ef\u013b")
        buf.write("\3\2\2\2\u08f0\u08f1\7L\2\2\u08f1\u08f2\7c\2\2\u08f2\u08f3")
        buf.write("\5\u0104\u0083\2\u08f3\u08f4\7d\2\2\u08f4\u013d\3\2\2")
        buf.write("\2\u08f5\u08f6\7M\2\2\u08f6\u08f7\7c\2\2\u08f7\u08f8\5")
        buf.write("\u0104\u0083\2\u08f8\u08f9\7d\2\2\u08f9\u013f\3\2\2\2")
        buf.write("\u08fa\u08fb\7N\2\2\u08fb\u0903\7c\2\2\u08fc\u08fd\7h")
        buf.write("\2\2\u08fd\u08fe\7\13\2\2\u08fe\u08ff\7\f\2\2\u08ff\u0900")
        buf.write("\7c\2\2\u0900\u0901\7\u00f8\2\2\u0901\u0902\7d\2\2\u0902")
        buf.write("\u0904\7\6\2\2\u0903\u08fc\3\2\2\2\u0903\u0904\3\2\2\2")
        buf.write("\u0904\u090a\3\2\2\2\u0905\u0906\7\u0099\2\2\u0906\u0907")
        buf.write("\7\13\2\2\u0907\u0908\5J&\2\u0908\u0909\7\6\2\2\u0909")
        buf.write("\u090b\3\2\2\2\u090a\u0905\3\2\2\2\u090a\u090b\3\2\2\2")
        buf.write("\u090b\u090c\3\2\2\2\u090c\u090d\7d\2\2\u090d\u090e\5")
        buf.write("\u0104\u0083\2\u090e\u0141\3\2\2\2\u090f\u0910\7O\2\2")
        buf.write("\u0910\u0911\7c\2\2\u0911\u0912\5\u0104\u0083\2\u0912")
        buf.write("\u0913\7d\2\2\u0913\u0143\3\2\2\2\u0914\u0915\7P\2\2\u0915")
        buf.write("\u0916\7c\2\2\u0916\u0917\5\u0104\u0083\2\u0917\u0918")
        buf.write("\7d\2\2\u0918\u0145\3\2\2\2\u0919\u091e\7Q\2\2\u091a\u091b")
        buf.write("\7R\2\2\u091b\u091c\7\13\2\2\u091c\u091d\7\u00f8\2\2\u091d")
        buf.write("\u091f\7\6\2\2\u091e\u091a\3\2\2\2\u091e\u091f\3\2\2\2")
        buf.write("\u091f\u0920\3\2\2\2\u0920\u0921\7c\2\2\u0921\u0922\5")
        buf.write("\u0104\u0083\2\u0922\u0923\7d\2\2\u0923\u0147\3\2\2\2")
        buf.write("\u0924\u0925\7S\2\2\u0925\u0926\7c\2\2\u0926\u0927\5\u0104")
        buf.write("\u0083\2\u0927\u0928\7d\2\2\u0928\u0149\3\2\2\2\u0929")
        buf.write("\u092a\7T\2\2\u092a\u092b\7c\2\2\u092b\u092c\5\u0104\u0083")
        buf.write("\2\u092c\u092d\7d\2\2\u092d\u014b\3\2\2\2\u092e\u092f")
        buf.write("\7U\2\2\u092f\u0930\7c\2\2\u0930\u0931\5\u0104\u0083\2")
        buf.write("\u0931\u0932\7d\2\2\u0932\u014d\3\2\2\2\u0933\u0934\7")
        buf.write("V\2\2\u0934\u0935\7c\2\2\u0935\u093a\5V,\2\u0936\u0937")
        buf.write("\7\r\2\2\u0937\u0938\7~\2\2\u0938\u0939\7\13\2\2\u0939")
        buf.write("\u093b\5\u00c0a\2\u093a\u0936\3\2\2\2\u093a\u093b\3\2")
        buf.write("\2\2\u093b\u093c\3\2\2\2\u093c\u093d\7\6\2\2\u093d\u093e")
        buf.write("\5\u0104\u0083\2\u093e\u093f\7d\2\2\u093f\u014f\3\2\2")
        buf.write("\2\u0940\u0946\5\u0152\u00aa\2\u0941\u0946\5\u0154\u00ab")
        buf.write("\2\u0942\u0946\5\u0158\u00ad\2\u0943\u0946\5\u015a\u00ae")
        buf.write("\2\u0944\u0946\5\u015c\u00af\2\u0945\u0940\3\2\2\2\u0945")
        buf.write("\u0941\3\2\2\2\u0945\u0942\3\2\2\2\u0945\u0943\3\2\2\2")
        buf.write("\u0945\u0944\3\2\2\2\u0946\u0151\3\2\2\2\u0947\u0948\7")
        buf.write("\u00f3\2\2\u0948\u0949\7c\2\2\u0949\u094a\5\u0104\u0083")
        buf.write("\2\u094a\u094b\7W\2\2\u094b\u094c\5\u0104\u0083\2\u094c")
        buf.write("\u094d\7\n\2\2\u094d\u094e\5\u0104\u0083\2\u094e\u094f")
        buf.write("\7d\2\2\u094f\u0153\3\2\2\2\u0950\u0951\7\u00f4\2\2\u0951")
        buf.write("\u0952\7c\2\2\u0952\u0957\5\u0156\u00ac\2\u0953\u0954")
        buf.write("\7\r\2\2\u0954\u0956\5\u0156\u00ac\2\u0955\u0953\3\2\2")
        buf.write("\2\u0956\u0959\3\2\2\2\u0957\u0955\3\2\2\2\u0957\u0958")
        buf.write("\3\2\2\2\u0958\u095a\3\2\2\2\u0959\u0957\3\2\2\2\u095a")
        buf.write("\u095b\7\6\2\2\u095b\u095c\5\u0104\u0083\2\u095c\u095d")
        buf.write("\7\6\2\2\u095d\u095e\5\u0104\u0083\2\u095e\u095f\7\6\2")
        buf.write("\2\u095f\u0960\5\u0104\u0083\2\u0960\u0961\7d\2\2\u0961")
        buf.write("\u0155\3\2\2\2\u0962\u0963\t\r\2\2\u0963\u0157\3\2\2\2")
        buf.write("\u0964\u0965\7\u00f5\2\2\u0965\u0966\7c\2\2\u0966\u0967")
        buf.write("\5\u0104\u0083\2\u0967\u0968\7\6\2\2\u0968\u0969\5\u0104")
        buf.write("\u0083\2\u0969\u096a\7\6\2\2\u096a\u096b\5\u0104\u0083")
        buf.write("\2\u096b\u096c\7d\2\2\u096c\u0159\3\2\2\2\u096d\u096e")
        buf.write("\7\u00f6\2\2\u096e\u096f\7c\2\2\u096f\u0970\5\u0104\u0083")
        buf.write("\2\u0970\u0971\7\6\2\2\u0971\u0972\5\u0104\u0083\2\u0972")
        buf.write("\u0973\7\6\2\2\u0973\u0974\5\u0104\u0083\2\u0974\u0975")
        buf.write("\7d\2\2\u0975\u015b\3\2\2\2\u0976\u0977\7\u00f7\2\2\u0977")
        buf.write("\u0978\7c\2\2\u0978\u0979\7~\2\2\u0979\u097a\7\13\2\2")
        buf.write("\u097a\u097f\5\u015e\u00b0\2\u097b\u097c\7\r\2\2\u097c")
        buf.write("\u097e\5\u015e\u00b0\2\u097d\u097b\3\2\2\2\u097e\u0981")
        buf.write("\3\2\2\2\u097f\u097d\3\2\2\2\u097f\u0980\3\2\2\2\u0980")
        buf.write("\u0982\3\2\2\2\u0981\u097f\3\2\2\2\u0982\u0983\7\6\2\2")
        buf.write("\u0983\u0984\5\u0104\u0083\2\u0984\u0985\7\6\2\2\u0985")
        buf.write("\u0986\5\u0104\u0083\2\u0986\u0987\7\6\2\2\u0987\u0988")
        buf.write("\5\u0104\u0083\2\u0988\u0989\7d\2\2\u0989\u015d\3\2\2")
        buf.write("\2\u098a\u098b\t\16\2\2\u098b\u015f\3\2\2\2\u098c\u098d")
        buf.write("\7\\\2\2\u098d\u098e\7c\2\2\u098e\u098f\5\u0104\u0083")
        buf.write("\2\u098f\u0997\7\n\2\2\u0990\u0991\5\u0104\u0083\2\u0991")
        buf.write("\u0992\7\6\2\2\u0992\u0993\5\u0104\u0083\2\u0993\u0994")
        buf.write("\7\t\2\2\u0994\u0996\3\2\2\2\u0995\u0990\3\2\2\2\u0996")
        buf.write("\u0999\3\2\2\2\u0997\u0995\3\2\2\2\u0997\u0998\3\2\2\2")
        buf.write("\u0998\u099a\3\2\2\2\u0999\u0997\3\2\2\2\u099a\u099b\7")
        buf.write("d\2\2\u099b\u0161\3\2\2\2\u099c\u099d\7]\2\2\u099d\u099e")
        buf.write("\7c\2\2\u099e\u099f\5\u0104\u0083\2\u099f\u09a0\7\6\2")
        buf.write("\2\u09a0\u09a1\5\u0104\u0083\2\u09a1\u09a2\7\6\2\2\u09a2")
        buf.write("\u09a3\5J&\2\u09a3\u09a4\7d\2\2\u09a4\u0163\3\2\2\2\u00c8")
        buf.write("\u0167\u0169\u0173\u0177\u017a\u0182\u0187\u018b\u018e")
        buf.write("\u0194\u0199\u019d\u01a0\u01a6\u01b8\u01ba\u01c2\u01cb")
        buf.write("\u01d4\u01dd\u01e6\u01ef\u01f8\u0201\u020a\u0213\u0219")
        buf.write("\u0221\u0229\u0231\u024f\u0256\u025d\u0266\u026a\u026e")
        buf.write("\u0275\u0286\u0288\u0298\u02ad\u02b3\u02cf\u02d5\u02de")
        buf.write("\u02f1\u0301\u030c\u033d\u035b\u0362\u0368\u0376\u037a")
        buf.write("\u037d\u0398\u039b\u039d\u03aa\u03b1\u03cb\u03cd\u03e3")
        buf.write("\u03f1\u03f3\u0409\u0416\u041a\u041f\u0424\u0426\u0429")
        buf.write("\u042d\u0434\u044e\u0458\u0460\u0464\u046a\u046e\u049c")
        buf.write("\u04a0\u04a7\u04ad\u04b1\u04ba\u04bf\u04cb\u04d6\u04e3")
        buf.write("\u0513\u051b\u0524\u0534\u053a\u0553\u055d\u056c\u056e")
        buf.write("\u0573\u057e\u0584\u058f\u0598\u05a2\u05b1\u05b6\u05ba")
        buf.write("\u05c5\u05cb\u05de\u05e5\u05f1\u05fc\u05ff\u060a\u060f")
        buf.write("\u0619\u061f\u0632\u0638\u0642\u0648\u065b\u0660\u0669")
        buf.write("\u066e\u0679\u0680\u068a\u06c1\u06c4\u06d5\u06db\u06e2")
        buf.write("\u06ef\u0726\u0729\u073a\u0740\u0747\u074f\u0756\u075e")
        buf.write("\u076a\u0776\u0782\u0795\u07a2\u07a8\u07ae\u07b4\u07ba")
        buf.write("\u07c0\u07c6\u07cc\u07d2\u07d8\u07da\u07dd\u07e3\u07e7")
        buf.write("\u07ee\u07f6\u07fb\u0806\u0810\u0818\u0820\u0828\u0830")
        buf.write("\u0832\u083e\u0840\u0848\u084a\u0852\u0854\u085e\u0860")
        buf.write("\u0868\u0878\u0896\u08aa\u08b6\u08ba\u08bd\u08c4\u08de")
        buf.write("\u08ee\u0903\u090a\u091e\u093a\u0945\u0957\u097f\u0997")
        return buf.getvalue()


class VfrSyntaxParser ( Parser ):

    grammarFileName = "VfrSyntax.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'show'", "'push'", "'pop'", "','", "'#pragma'", 
                     "'pack'", "';'", "':'", "'='", "'STRING_TOKEN'", "'|'", 
                     "'TRUE'", "'FALSE'", "'ONE'", "'ONES'", "'ZERO'", "'/'", 
                     "'IMAGE_TOKEN'", "'HORIZONTAL'", "'refreshguid'", "'OPTION_DEFAULT'", 
                     "'OPTION_DEFAULT_MFG'", "'CHECKBOX_DEFAULT'", "'CHECKBOX_DEFAULT_MFG'", 
                     "'NUMERIC_SIZE_1'", "'NUMERIC_SIZE_2'", "'NUMERIC_SIZE_4'", 
                     "'NUMERIC_SIZE_8'", "'DISPLAY_INT_DEC'", "'DISPLAY_UINT_DEC'", 
                     "'DISPLAY_UINT_HEX'", "'MULTI_LINE'", "'UNIQUE'", "'NOEMPTY'", 
                     "'YEAR_SUPPRESS'", "'MONTH_SUPPRESS'", "'DAY_SUPPRESS'", 
                     "'STORAGE_NORMAL'", "'STORAGE_TIME'", "'STORAGE_WAKEUP'", 
                     "'HOUR_SUPPRESS'", "'MINUTE_SUPPRESS'", "'SECOND_SUPPRESS'", 
                     "'OR'", "'AND'", "'&'", "'=='", "'!='", "'<'", "'<='", 
                     "'>'", "'>='", "'<<'", "'>>'", "'+'", "'-'", "'*'", 
                     "'%'", "'NOT'", "'catenate'", "'match'", "'dup'", "'ideqval'", 
                     "'ideqid'", "'ideqvallist'", "'questionref'", "'ruleref'", 
                     "'stringref'", "'pushthis'", "'security'", "'get'", 
                     "'UNDEFINED'", "'VERSION'", "'length'", "'~'", "'questionrefval'", 
                     "'stringrefval'", "'boolval'", "'stringval'", "'format'", 
                     "'unintval'", "'toupper'", "'tolower'", "'set'", "'?'", 
                     "'SENSITIVE'", "'INSENSITIVE'", "'LAST_NON_MATCH'", 
                     "'FIRST_NON_MATCH'", "'map'", "'match2'", "'#define'", 
                     "'#include'", "'formpkgtype'", "'{'", "'}'", "'('", 
                     "')'", "'['", "']'", "'.'", "'devicepath'", "'formset'", 
                     "'formsetid'", "'endformset'", "'title'", "'formid'", 
                     "'oneof'", "'endoneof'", "'prompt'", "'orderedlist'", 
                     "'maxcontainers'", "'endlist'", "'endform'", "'form'", 
                     "'formmap'", "'maptitle'", "'mapguid'", "'subtitle'", 
                     "'endsubtitle'", "'help'", "'text'", "'option'", "'flags'", 
                     "'date'", "'enddate'", "'year'", "'month'", "'day'", 
                     "'time'", "'endtime'", "'hour'", "'minute'", "'second'", 
                     "'grayoutif'", "'label'", "'timeout'", "'inventory'", 
                     "'_NON_NV_DATA_MAP'", "'struct'", "'union'", "'BOOLEAN'", 
                     "'UINT64'", "'UINT32'", "'UINT16'", "'UINT8'", "'EFI_STRING_ID'", 
                     "'EFI_HII_DATE'", "'EFI_HII_TIME'", "'EFI_HII_REF'", 
                     "'guid'", "'checkbox'", "'endcheckbox'", "'numeric'", 
                     "'endnumeric'", "'minimum'", "'maximum'", "'step'", 
                     "'default'", "'password'", "'endpassword'", "'string'", 
                     "'endstring'", "'minsize'", "'maxsize'", "'encoding'", 
                     "'suppressif'", "'disableif'", "'hidden'", "'goto'", 
                     "'formsetguid'", "'inconsistentif'", "'warningif'", 
                     "'nosubmitif'", "'endif'", "'key'", "'DEFAULT'", "'MANUFACTURING'", 
                     "'INTERACTIVE'", "'NV_ACCESS'", "'RESET_REQUIRED'", 
                     "'RECONNECT_REQUIRED'", "'LATE_CHECK'", "'READ_ONLY'", 
                     "'OPTIONS_ONLY'", "'REST_STYLE'", "'class'", "'subclass'", 
                     "'classguid'", "'typedef'", "'restore'", "'save'", 
                     "'defaults'", "'banner'", "'align'", "'left'", "'right'", 
                     "'center'", "'line'", "'name'", "'varid'", "'question'", 
                     "'questionid'", "'image'", "'locked'", "'rule'", "'endrule'", 
                     "'value'", "'read'", "'write'", "'resetbutton'", "'endresetbutton'", 
                     "'defaultstore'", "'attribute'", "'varstore'", "'efivarstore'", 
                     "'varsize'", "'namevaluevarstore'", "'action'", "'config'", 
                     "'endaction'", "'refresh'", "'interval'", "'varstoredevice'", 
                     "'guidop'", "'endguidop'", "'datatype'", "'data'", 
                     "'modal'", "'NON_DEVICE'", "'DISK_DEVICE'", "'VIDEO_DEVICE'", 
                     "'NETWORK_DEVICE'", "'INPUT_DEVICE'", "'ONBOARD_DEVICE'", 
                     "'OTHER_DEVICE'", "'SETUP_APPLICATION'", "'GENERAL_APPLICATION'", 
                     "'FRONT_PAGE'", "'SINGLE_USE'", "'cond'", "'find'", 
                     "'mid'", "'token'", "'span'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "Define", "Include", "FormPkgType", "OpenBrace", "CloseBrace", 
                      "OpenParen", "CloseParen", "OpenBracket", "CloseBracket", 
                      "Dot", "DevicePath", "FormSet", "FormSetId", "EndFormSet", 
                      "Title", "FormId", "OneOf", "EndOneOf", "Prompt", 
                      "OrderedList", "MaxContainers", "EndList", "EndForm", 
                      "Form", "FormMap", "MapTitle", "MapGuid", "Subtitle", 
                      "EndSubtitle", "Help", "Text", "Option", "FLAGS", 
                      "Date", "EndDate", "Year", "Month", "Day", "Time", 
                      "EndTime", "Hour", "Minute", "Second", "GrayOutIf", 
                      "Label", "Timeout", "Inventory", "NonNvDataMap", "Struct", 
                      "Union", "Boolean", "Uint64", "Uint32", "Uint16", 
                      "Uint8", "EFI_STRING_ID", "EFI_HII_DATE", "EFI_HII_TIME", 
                      "EFI_HII_REF", "Uuid", "CheckBox", "EndCheckBox", 
                      "Numeric", "EndNumeric", "Minimum", "Maximum", "STEP", 
                      "Default", "Password", "EndPassword", "String", "EndString", 
                      "MinSize", "MaxSize", "Encoding", "SuppressIf", "DisableIf", 
                      "Hidden", "Goto", "FormSetGuid", "InconsistentIf", 
                      "WarningIf", "NoSubmitIf", "EndIf", "Key", "DefaultFlag", 
                      "ManufacturingFlag", "InteractiveFlag", "NVAccessFlag", 
                      "ResetRequiredFlag", "ReconnectRequiredFlag", "LateCheckFlag", 
                      "ReadOnlyFlag", "OptionOnlyFlag", "RestStyleFlag", 
                      "Class", "Subclass", "ClassGuid", "TypeDef", "Restore", 
                      "Save", "Defaults", "Banner", "Align", "Left", "Right", 
                      "Center", "Line", "Name", "VarId", "Question", "QuestionId", 
                      "Image", "Locked", "Rule", "EndRule", "Value", "Read", 
                      "Write", "ResetButton", "EndResetButton", "DefaultStore", 
                      "Attribute", "Varstore", "Efivarstore", "VarSize", 
                      "NameValueVarStore", "Action", "Config", "EndAction", 
                      "Refresh", "Interval", "VarstoreDevice", "GuidOp", 
                      "EndGuidOp", "DataType", "Data", "Modal", "ClassNonDevice", 
                      "ClassDiskDevice", "ClassVideoDevice", "ClassNetworkDevice", 
                      "ClassInputDevice", "ClassOnBoardDevice", "ClassOtherDevice", 
                      "SubclassSetupApplication", "SubclassGeneralApplication", 
                      "SubclassFrontPage", "SubclassSingleUse", "Cond", 
                      "Find", "Mid", "Tok", "Span", "Number", "StringIdentifier", 
                      "ComplexDefine", "LineDefinition", "IncludeDefinition", 
                      "Whitespace", "Newline", "LineComment", "Extern" ]

    RULE_vfrProgram = 0
    RULE_pragmaPackShowDef = 1
    RULE_pragmaPackStackDef = 2
    RULE_pragmaPackNumber = 3
    RULE_vfrPragmaPackDefinition = 4
    RULE_vfrDataStructDefinition = 5
    RULE_vfrDataUnionDefinition = 6
    RULE_vfrDataStructFields = 7
    RULE_dataStructField64 = 8
    RULE_dataStructField32 = 9
    RULE_dataStructField16 = 10
    RULE_dataStructField8 = 11
    RULE_dataStructFieldBool = 12
    RULE_dataStructFieldString = 13
    RULE_dataStructFieldDate = 14
    RULE_dataStructFieldTime = 15
    RULE_dataStructFieldRef = 16
    RULE_dataStructFieldUser = 17
    RULE_dataStructBitField64 = 18
    RULE_dataStructBitField32 = 19
    RULE_dataStructBitField16 = 20
    RULE_dataStructBitField8 = 21
    RULE_vfrFormSetDefinition = 22
    RULE_classguidDefinition = 23
    RULE_classDefinition = 24
    RULE_validClassNames = 25
    RULE_subclassDefinition = 26
    RULE_vfrFormSetList = 27
    RULE_vfrStatementDefaultStore = 28
    RULE_vfrStatementVarStoreLinear = 29
    RULE_vfrStatementVarStoreEfi = 30
    RULE_vfrVarStoreEfiAttr = 31
    RULE_vfrStatementVarStoreNameValue = 32
    RULE_vfrStatementDisableIfFormSet = 33
    RULE_vfrStatementSuppressIfFormSet = 34
    RULE_guidSubDefinition = 35
    RULE_guidDefinition = 36
    RULE_getStringId = 37
    RULE_vfrStatementHeader = 38
    RULE_vfrQuestionHeader = 39
    RULE_vfrQuestionBaseInfo = 40
    RULE_questionheaderFlagsField = 41
    RULE_vfrStorageVarId = 42
    RULE_vfrConstantValueField = 43
    RULE_vfrImageTag = 44
    RULE_vfrLockedTag = 45
    RULE_vfrStatementStatTag = 46
    RULE_vfrStatementStatTagList = 47
    RULE_vfrFormDefinition = 48
    RULE_vfrFormMapDefinition = 49
    RULE_vfrStatementImage = 50
    RULE_vfrStatementLocked = 51
    RULE_vfrStatementRules = 52
    RULE_vfrStatementStat = 53
    RULE_vfrStatementSubTitle = 54
    RULE_vfrSubtitleFlags = 55
    RULE_subtitleFlagsField = 56
    RULE_vfrStatementStaticText = 57
    RULE_staticTextFlagsField = 58
    RULE_vfrStatementCrossReference = 59
    RULE_vfrStatementGoto = 60
    RULE_vfrGotoFlags = 61
    RULE_gotoFlagsField = 62
    RULE_vfrStatementResetButton = 63
    RULE_vfrStatementQuestions = 64
    RULE_vfrStatementQuestionTag = 65
    RULE_vfrStatementInconsistentIf = 66
    RULE_vfrStatementNoSubmitIf = 67
    RULE_vfrStatementDisableIfQuest = 68
    RULE_vfrStatementRefresh = 69
    RULE_vfrStatementVarstoreDevice = 70
    RULE_vfrStatementRefreshEvent = 71
    RULE_vfrStatementWarningIf = 72
    RULE_vfrStatementQuestionTagList = 73
    RULE_vfrStatementQuestionOptionTag = 74
    RULE_vfrStatementSuppressIfQuest = 75
    RULE_vfrStatementDefault = 76
    RULE_vfrStatementValue = 77
    RULE_vfrStatementOptions = 78
    RULE_vfrStatementOneOfOption = 79
    RULE_vfrOneOfOptionFlags = 80
    RULE_oneofoptionFlagsField = 81
    RULE_vfrStatementRead = 82
    RULE_vfrStatementWrite = 83
    RULE_vfrStatementQuestionOptionList = 84
    RULE_vfrStatementBooleanType = 85
    RULE_vfrStatementCheckBox = 86
    RULE_vfrCheckBoxFlags = 87
    RULE_checkboxFlagsField = 88
    RULE_vfrStatementAction = 89
    RULE_vfrActionFlags = 90
    RULE_actionFlagsField = 91
    RULE_vfrStatementNumericType = 92
    RULE_vfrStatementNumeric = 93
    RULE_vfrSetMinMaxStep = 94
    RULE_vfrNumericFlags = 95
    RULE_numericFlagsField = 96
    RULE_vfrStatementOneOf = 97
    RULE_vfrOneofFlagsField = 98
    RULE_vfrStatementStringType = 99
    RULE_vfrStatementString = 100
    RULE_vfrStringFlagsField = 101
    RULE_stringFlagsField = 102
    RULE_vfrStatementPassword = 103
    RULE_vfrPasswordFlagsField = 104
    RULE_passwordFlagsField = 105
    RULE_vfrStatementOrderedList = 106
    RULE_vfrOrderedListFlags = 107
    RULE_orderedlistFlagsField = 108
    RULE_vfrStatementDate = 109
    RULE_minMaxDateStepDefault = 110
    RULE_vfrDateFlags = 111
    RULE_dateFlagsField = 112
    RULE_vfrStatementTime = 113
    RULE_minMaxTimeStepDefault = 114
    RULE_vfrTimeFlags = 115
    RULE_timeFlagsField = 116
    RULE_vfrStatementConditional = 117
    RULE_vfrStatementStatList = 118
    RULE_vfrStatementDisableIfStat = 119
    RULE_vfrStatementSuppressIfStat = 120
    RULE_vfrStatementGrayOutIfStat = 121
    RULE_vfrStatementLabel = 122
    RULE_vfrStatementBanner = 123
    RULE_vfrStatementExtension = 124
    RULE_vfrExtensionData = 125
    RULE_vfrExtensionDataComponent = 126
    RULE_vfrExtensionDataDotArea = 127
    RULE_vfrStatementModal = 128
    RULE_vfrStatementExpression = 129
    RULE_andTerm = 130
    RULE_bitwiseorTerm = 131
    RULE_bitwiseandTerm = 132
    RULE_equalTerm = 133
    RULE_compareTerm = 134
    RULE_shiftTerm = 135
    RULE_addMinusTerm = 136
    RULE_multdivmodTerm = 137
    RULE_castTerm = 138
    RULE_atomTerm = 139
    RULE_vfrExpressionCatenate = 140
    RULE_vfrExpressionMatch = 141
    RULE_vfrExpressionParen = 142
    RULE_vfrExpressionBuildInFunction = 143
    RULE_dupExp = 144
    RULE_ideqvalExp = 145
    RULE_ideqidExp = 146
    RULE_ideqvallistExp = 147
    RULE_vfrQuestionDataFieldName = 148
    RULE_questionref1Exp = 149
    RULE_rulerefExp = 150
    RULE_stringref1Exp = 151
    RULE_pushthisExp = 152
    RULE_securityExp = 153
    RULE_getExp = 154
    RULE_vfrExpressionConstant = 155
    RULE_vfrExpressionUnaryOp = 156
    RULE_lengthExp = 157
    RULE_bitwisenotExp = 158
    RULE_question23refExp = 159
    RULE_stringref2Exp = 160
    RULE_toboolExp = 161
    RULE_tostringExp = 162
    RULE_unintExp = 163
    RULE_toupperExp = 164
    RULE_tolwerExp = 165
    RULE_setExp = 166
    RULE_vfrExpressionTernaryOp = 167
    RULE_conditionalExp = 168
    RULE_findExp = 169
    RULE_findFormat = 170
    RULE_midExp = 171
    RULE_tokenExp = 172
    RULE_spanExp = 173
    RULE_spanFlags = 174
    RULE_vfrExpressionMap = 175
    RULE_vfrExpressionMatch2 = 176

    ruleNames =  [ "vfrProgram", "pragmaPackShowDef", "pragmaPackStackDef", 
                   "pragmaPackNumber", "vfrPragmaPackDefinition", "vfrDataStructDefinition", 
                   "vfrDataUnionDefinition", "vfrDataStructFields", "dataStructField64", 
                   "dataStructField32", "dataStructField16", "dataStructField8", 
                   "dataStructFieldBool", "dataStructFieldString", "dataStructFieldDate", 
                   "dataStructFieldTime", "dataStructFieldRef", "dataStructFieldUser", 
                   "dataStructBitField64", "dataStructBitField32", "dataStructBitField16", 
                   "dataStructBitField8", "vfrFormSetDefinition", "classguidDefinition", 
                   "classDefinition", "validClassNames", "subclassDefinition", 
                   "vfrFormSetList", "vfrStatementDefaultStore", "vfrStatementVarStoreLinear", 
                   "vfrStatementVarStoreEfi", "vfrVarStoreEfiAttr", "vfrStatementVarStoreNameValue", 
                   "vfrStatementDisableIfFormSet", "vfrStatementSuppressIfFormSet", 
                   "guidSubDefinition", "guidDefinition", "getStringId", 
                   "vfrStatementHeader", "vfrQuestionHeader", "vfrQuestionBaseInfo", 
                   "questionheaderFlagsField", "vfrStorageVarId", "vfrConstantValueField", 
                   "vfrImageTag", "vfrLockedTag", "vfrStatementStatTag", 
                   "vfrStatementStatTagList", "vfrFormDefinition", "vfrFormMapDefinition", 
                   "vfrStatementImage", "vfrStatementLocked", "vfrStatementRules", 
                   "vfrStatementStat", "vfrStatementSubTitle", "vfrSubtitleFlags", 
                   "subtitleFlagsField", "vfrStatementStaticText", "staticTextFlagsField", 
                   "vfrStatementCrossReference", "vfrStatementGoto", "vfrGotoFlags", 
                   "gotoFlagsField", "vfrStatementResetButton", "vfrStatementQuestions", 
                   "vfrStatementQuestionTag", "vfrStatementInconsistentIf", 
                   "vfrStatementNoSubmitIf", "vfrStatementDisableIfQuest", 
                   "vfrStatementRefresh", "vfrStatementVarstoreDevice", 
                   "vfrStatementRefreshEvent", "vfrStatementWarningIf", 
                   "vfrStatementQuestionTagList", "vfrStatementQuestionOptionTag", 
                   "vfrStatementSuppressIfQuest", "vfrStatementDefault", 
                   "vfrStatementValue", "vfrStatementOptions", "vfrStatementOneOfOption", 
                   "vfrOneOfOptionFlags", "oneofoptionFlagsField", "vfrStatementRead", 
                   "vfrStatementWrite", "vfrStatementQuestionOptionList", 
                   "vfrStatementBooleanType", "vfrStatementCheckBox", "vfrCheckBoxFlags", 
                   "checkboxFlagsField", "vfrStatementAction", "vfrActionFlags", 
                   "actionFlagsField", "vfrStatementNumericType", "vfrStatementNumeric", 
                   "vfrSetMinMaxStep", "vfrNumericFlags", "numericFlagsField", 
                   "vfrStatementOneOf", "vfrOneofFlagsField", "vfrStatementStringType", 
                   "vfrStatementString", "vfrStringFlagsField", "stringFlagsField", 
                   "vfrStatementPassword", "vfrPasswordFlagsField", "passwordFlagsField", 
                   "vfrStatementOrderedList", "vfrOrderedListFlags", "orderedlistFlagsField", 
                   "vfrStatementDate", "minMaxDateStepDefault", "vfrDateFlags", 
                   "dateFlagsField", "vfrStatementTime", "minMaxTimeStepDefault", 
                   "vfrTimeFlags", "timeFlagsField", "vfrStatementConditional", 
                   "vfrStatementStatList", "vfrStatementDisableIfStat", 
                   "vfrStatementSuppressIfStat", "vfrStatementGrayOutIfStat", 
                   "vfrStatementLabel", "vfrStatementBanner", "vfrStatementExtension", 
                   "vfrExtensionData", "vfrExtensionDataComponent", "vfrExtensionDataDotArea", 
                   "vfrStatementModal", "vfrStatementExpression", "andTerm", 
                   "bitwiseorTerm", "bitwiseandTerm", "equalTerm", "compareTerm", 
                   "shiftTerm", "addMinusTerm", "multdivmodTerm", "castTerm", 
                   "atomTerm", "vfrExpressionCatenate", "vfrExpressionMatch", 
                   "vfrExpressionParen", "vfrExpressionBuildInFunction", 
                   "dupExp", "ideqvalExp", "ideqidExp", "ideqvallistExp", 
                   "vfrQuestionDataFieldName", "questionref1Exp", "rulerefExp", 
                   "stringref1Exp", "pushthisExp", "securityExp", "getExp", 
                   "vfrExpressionConstant", "vfrExpressionUnaryOp", "lengthExp", 
                   "bitwisenotExp", "question23refExp", "stringref2Exp", 
                   "toboolExp", "tostringExp", "unintExp", "toupperExp", 
                   "tolwerExp", "setExp", "vfrExpressionTernaryOp", "conditionalExp", 
                   "findExp", "findFormat", "midExp", "tokenExp", "spanExp", 
                   "spanFlags", "vfrExpressionMap", "vfrExpressionMatch2" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    T__45=46
    T__46=47
    T__47=48
    T__48=49
    T__49=50
    T__50=51
    T__51=52
    T__52=53
    T__53=54
    T__54=55
    T__55=56
    T__56=57
    T__57=58
    T__58=59
    T__59=60
    T__60=61
    T__61=62
    T__62=63
    T__63=64
    T__64=65
    T__65=66
    T__66=67
    T__67=68
    T__68=69
    T__69=70
    T__70=71
    T__71=72
    T__72=73
    T__73=74
    T__74=75
    T__75=76
    T__76=77
    T__77=78
    T__78=79
    T__79=80
    T__80=81
    T__81=82
    T__82=83
    T__83=84
    T__84=85
    T__85=86
    T__86=87
    T__87=88
    T__88=89
    T__89=90
    T__90=91
    Define=92
    Include=93
    FormPkgType=94
    OpenBrace=95
    CloseBrace=96
    OpenParen=97
    CloseParen=98
    OpenBracket=99
    CloseBracket=100
    Dot=101
    DevicePath=102
    FormSet=103
    FormSetId=104
    EndFormSet=105
    Title=106
    FormId=107
    OneOf=108
    EndOneOf=109
    Prompt=110
    OrderedList=111
    MaxContainers=112
    EndList=113
    EndForm=114
    Form=115
    FormMap=116
    MapTitle=117
    MapGuid=118
    Subtitle=119
    EndSubtitle=120
    Help=121
    Text=122
    Option=123
    FLAGS=124
    Date=125
    EndDate=126
    Year=127
    Month=128
    Day=129
    Time=130
    EndTime=131
    Hour=132
    Minute=133
    Second=134
    GrayOutIf=135
    Label=136
    Timeout=137
    Inventory=138
    NonNvDataMap=139
    Struct=140
    Union=141
    Boolean=142
    Uint64=143
    Uint32=144
    Uint16=145
    Uint8=146
    EFI_STRING_ID=147
    EFI_HII_DATE=148
    EFI_HII_TIME=149
    EFI_HII_REF=150
    Uuid=151
    CheckBox=152
    EndCheckBox=153
    Numeric=154
    EndNumeric=155
    Minimum=156
    Maximum=157
    STEP=158
    Default=159
    Password=160
    EndPassword=161
    String=162
    EndString=163
    MinSize=164
    MaxSize=165
    Encoding=166
    SuppressIf=167
    DisableIf=168
    Hidden=169
    Goto=170
    FormSetGuid=171
    InconsistentIf=172
    WarningIf=173
    NoSubmitIf=174
    EndIf=175
    Key=176
    DefaultFlag=177
    ManufacturingFlag=178
    InteractiveFlag=179
    NVAccessFlag=180
    ResetRequiredFlag=181
    ReconnectRequiredFlag=182
    LateCheckFlag=183
    ReadOnlyFlag=184
    OptionOnlyFlag=185
    RestStyleFlag=186
    Class=187
    Subclass=188
    ClassGuid=189
    TypeDef=190
    Restore=191
    Save=192
    Defaults=193
    Banner=194
    Align=195
    Left=196
    Right=197
    Center=198
    Line=199
    Name=200
    VarId=201
    Question=202
    QuestionId=203
    Image=204
    Locked=205
    Rule=206
    EndRule=207
    Value=208
    Read=209
    Write=210
    ResetButton=211
    EndResetButton=212
    DefaultStore=213
    Attribute=214
    Varstore=215
    Efivarstore=216
    VarSize=217
    NameValueVarStore=218
    Action=219
    Config=220
    EndAction=221
    Refresh=222
    Interval=223
    VarstoreDevice=224
    GuidOp=225
    EndGuidOp=226
    DataType=227
    Data=228
    Modal=229
    ClassNonDevice=230
    ClassDiskDevice=231
    ClassVideoDevice=232
    ClassNetworkDevice=233
    ClassInputDevice=234
    ClassOnBoardDevice=235
    ClassOtherDevice=236
    SubclassSetupApplication=237
    SubclassGeneralApplication=238
    SubclassFrontPage=239
    SubclassSingleUse=240
    Cond=241
    Find=242
    Mid=243
    Tok=244
    Span=245
    Number=246
    StringIdentifier=247
    ComplexDefine=248
    LineDefinition=249
    IncludeDefinition=250
    Whitespace=251
    Newline=252
    LineComment=253
    Extern=254

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class VfrProgramContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vfrFormSetDefinition(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrFormSetDefinitionContext,0)


        def vfrPragmaPackDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrPragmaPackDefinitionContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrPragmaPackDefinitionContext,i)


        def vfrDataStructDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrDataStructDefinitionContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrDataStructDefinitionContext,i)


        def vfrDataUnionDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrDataUnionDefinitionContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrDataUnionDefinitionContext,i)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrProgram

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrProgram" ):
                return visitor.visitVfrProgram(self)
            else:
                return visitor.visitChildren(self)




    def vfrProgram(self):

        localctx = VfrSyntaxParser.VfrProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_vfrProgram)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 359
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==VfrSyntaxParser.T__4 or ((((_la - 140)) & ~0x3f) == 0 and ((1 << (_la - 140)) & ((1 << (VfrSyntaxParser.Struct - 140)) | (1 << (VfrSyntaxParser.Union - 140)) | (1 << (VfrSyntaxParser.TypeDef - 140)))) != 0):
                self.state = 357
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
                if la_ == 1:
                    self.state = 354
                    self.vfrPragmaPackDefinition()
                    pass

                elif la_ == 2:
                    self.state = 355
                    self.vfrDataStructDefinition()
                    pass

                elif la_ == 3:
                    self.state = 356
                    self.vfrDataUnionDefinition()
                    pass


                self.state = 361
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 362
            self.vfrFormSetDefinition()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PragmaPackShowDefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_pragmaPackShowDef

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPragmaPackShowDef" ):
                return visitor.visitPragmaPackShowDef(self)
            else:
                return visitor.visitChildren(self)




    def pragmaPackShowDef(self):

        localctx = VfrSyntaxParser.PragmaPackShowDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_pragmaPackShowDef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 364
            self.match(VfrSyntaxParser.T__0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PragmaPackStackDefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringIdentifier(self):
            return self.getToken(VfrSyntaxParser.StringIdentifier, 0)

        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_pragmaPackStackDef

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPragmaPackStackDef" ):
                return visitor.visitPragmaPackStackDef(self)
            else:
                return visitor.visitChildren(self)




    def pragmaPackStackDef(self):

        localctx = VfrSyntaxParser.PragmaPackStackDefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_pragmaPackStackDef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 366
            _la = self._input.LA(1)
            if not(_la==VfrSyntaxParser.T__1 or _la==VfrSyntaxParser.T__2):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 369
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.state = 367
                self.match(VfrSyntaxParser.T__3)
                self.state = 368
                self.match(VfrSyntaxParser.StringIdentifier)


            self.state = 373
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.T__3:
                self.state = 371
                self.match(VfrSyntaxParser.T__3)
                self.state = 372
                self.match(VfrSyntaxParser.Number)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PragmaPackNumberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_pragmaPackNumber

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPragmaPackNumber" ):
                return visitor.visitPragmaPackNumber(self)
            else:
                return visitor.visitChildren(self)




    def pragmaPackNumber(self):

        localctx = VfrSyntaxParser.PragmaPackNumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_pragmaPackNumber)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 376
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.Number:
                self.state = 375
                self.match(VfrSyntaxParser.Number)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrPragmaPackDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OpenParen(self):
            return self.getToken(VfrSyntaxParser.OpenParen, 0)

        def CloseParen(self):
            return self.getToken(VfrSyntaxParser.CloseParen, 0)

        def pragmaPackShowDef(self):
            return self.getTypedRuleContext(VfrSyntaxParser.PragmaPackShowDefContext,0)


        def pragmaPackStackDef(self):
            return self.getTypedRuleContext(VfrSyntaxParser.PragmaPackStackDefContext,0)


        def pragmaPackNumber(self):
            return self.getTypedRuleContext(VfrSyntaxParser.PragmaPackNumberContext,0)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrPragmaPackDefinition

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrPragmaPackDefinition" ):
                return visitor.visitVfrPragmaPackDefinition(self)
            else:
                return visitor.visitChildren(self)




    def vfrPragmaPackDefinition(self):

        localctx = VfrSyntaxParser.VfrPragmaPackDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_vfrPragmaPackDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 378
            self.match(VfrSyntaxParser.T__4)
            self.state = 379
            self.match(VfrSyntaxParser.T__5)
            self.state = 380
            self.match(VfrSyntaxParser.OpenParen)
            self.state = 384
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.state = 381
                self.pragmaPackShowDef()

            elif la_ == 2:
                self.state = 382
                self.pragmaPackStackDef()

            elif la_ == 3:
                self.state = 383
                self.pragmaPackNumber()


            self.state = 386
            self.match(VfrSyntaxParser.CloseParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrDataStructDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Struct(self):
            return self.getToken(VfrSyntaxParser.Struct, 0)

        def OpenBrace(self):
            return self.getToken(VfrSyntaxParser.OpenBrace, 0)

        def vfrDataStructFields(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrDataStructFieldsContext,0)


        def CloseBrace(self):
            return self.getToken(VfrSyntaxParser.CloseBrace, 0)

        def TypeDef(self):
            return self.getToken(VfrSyntaxParser.TypeDef, 0)

        def NonNvDataMap(self):
            return self.getToken(VfrSyntaxParser.NonNvDataMap, 0)

        def StringIdentifier(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.StringIdentifier)
            else:
                return self.getToken(VfrSyntaxParser.StringIdentifier, i)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrDataStructDefinition

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrDataStructDefinition" ):
                return visitor.visitVfrDataStructDefinition(self)
            else:
                return visitor.visitChildren(self)




    def vfrDataStructDefinition(self):

        localctx = VfrSyntaxParser.VfrDataStructDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_vfrDataStructDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 389
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.TypeDef:
                self.state = 388
                self.match(VfrSyntaxParser.TypeDef)


            self.state = 391
            self.match(VfrSyntaxParser.Struct)
            self.state = 393
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.NonNvDataMap:
                self.state = 392
                self.match(VfrSyntaxParser.NonNvDataMap)


            self.state = 396
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.StringIdentifier:
                self.state = 395
                self.match(VfrSyntaxParser.StringIdentifier)


            self.state = 398
            self.match(VfrSyntaxParser.OpenBrace)
            self.state = 399
            self.vfrDataStructFields(False)
            self.state = 400
            self.match(VfrSyntaxParser.CloseBrace)
            self.state = 402
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.StringIdentifier:
                self.state = 401
                self.match(VfrSyntaxParser.StringIdentifier)


            self.state = 404
            self.match(VfrSyntaxParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrDataUnionDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Union(self):
            return self.getToken(VfrSyntaxParser.Union, 0)

        def OpenBrace(self):
            return self.getToken(VfrSyntaxParser.OpenBrace, 0)

        def vfrDataStructFields(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrDataStructFieldsContext,0)


        def CloseBrace(self):
            return self.getToken(VfrSyntaxParser.CloseBrace, 0)

        def TypeDef(self):
            return self.getToken(VfrSyntaxParser.TypeDef, 0)

        def NonNvDataMap(self):
            return self.getToken(VfrSyntaxParser.NonNvDataMap, 0)

        def StringIdentifier(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.StringIdentifier)
            else:
                return self.getToken(VfrSyntaxParser.StringIdentifier, i)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrDataUnionDefinition

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrDataUnionDefinition" ):
                return visitor.visitVfrDataUnionDefinition(self)
            else:
                return visitor.visitChildren(self)




    def vfrDataUnionDefinition(self):

        localctx = VfrSyntaxParser.VfrDataUnionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_vfrDataUnionDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 407
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.TypeDef:
                self.state = 406
                self.match(VfrSyntaxParser.TypeDef)


            self.state = 409
            self.match(VfrSyntaxParser.Union)
            self.state = 411
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.NonNvDataMap:
                self.state = 410
                self.match(VfrSyntaxParser.NonNvDataMap)


            self.state = 414
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.StringIdentifier:
                self.state = 413
                self.match(VfrSyntaxParser.StringIdentifier)


            self.state = 416
            self.match(VfrSyntaxParser.OpenBrace)
            self.state = 417
            self.vfrDataStructFields(True)
            self.state = 418
            self.match(VfrSyntaxParser.CloseBrace)
            self.state = 420
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.StringIdentifier:
                self.state = 419
                self.match(VfrSyntaxParser.StringIdentifier)


            self.state = 422
            self.match(VfrSyntaxParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrDataStructFieldsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1, FieldInUnion=None):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.FieldInUnion = None
            self.FieldInUnion = FieldInUnion

        def dataStructField64(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.DataStructField64Context)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.DataStructField64Context,i)


        def dataStructField32(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.DataStructField32Context)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.DataStructField32Context,i)


        def dataStructField16(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.DataStructField16Context)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.DataStructField16Context,i)


        def dataStructField8(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.DataStructField8Context)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.DataStructField8Context,i)


        def dataStructFieldBool(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.DataStructFieldBoolContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.DataStructFieldBoolContext,i)


        def dataStructFieldString(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.DataStructFieldStringContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.DataStructFieldStringContext,i)


        def dataStructFieldDate(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.DataStructFieldDateContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.DataStructFieldDateContext,i)


        def dataStructFieldTime(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.DataStructFieldTimeContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.DataStructFieldTimeContext,i)


        def dataStructFieldRef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.DataStructFieldRefContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.DataStructFieldRefContext,i)


        def dataStructFieldUser(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.DataStructFieldUserContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.DataStructFieldUserContext,i)


        def dataStructBitField64(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.DataStructBitField64Context)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.DataStructBitField64Context,i)


        def dataStructBitField32(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.DataStructBitField32Context)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.DataStructBitField32Context,i)


        def dataStructBitField16(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.DataStructBitField16Context)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.DataStructBitField16Context,i)


        def dataStructBitField8(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.DataStructBitField8Context)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.DataStructBitField8Context,i)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrDataStructFields

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrDataStructFields" ):
                return visitor.visitVfrDataStructFields(self)
            else:
                return visitor.visitChildren(self)




    def vfrDataStructFields(self, FieldInUnion):

        localctx = VfrSyntaxParser.VfrDataStructFieldsContext(self, self._ctx, self.state, FieldInUnion)
        self.enterRule(localctx, 14, self.RULE_vfrDataStructFields)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 440
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 142)) & ~0x3f) == 0 and ((1 << (_la - 142)) & ((1 << (VfrSyntaxParser.Boolean - 142)) | (1 << (VfrSyntaxParser.Uint64 - 142)) | (1 << (VfrSyntaxParser.Uint32 - 142)) | (1 << (VfrSyntaxParser.Uint16 - 142)) | (1 << (VfrSyntaxParser.Uint8 - 142)) | (1 << (VfrSyntaxParser.EFI_STRING_ID - 142)) | (1 << (VfrSyntaxParser.EFI_HII_DATE - 142)) | (1 << (VfrSyntaxParser.EFI_HII_TIME - 142)) | (1 << (VfrSyntaxParser.EFI_HII_REF - 142)))) != 0) or _la==VfrSyntaxParser.StringIdentifier:
                self.state = 438
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
                if la_ == 1:
                    self.state = 424
                    self.dataStructField64(FieldInUnion)
                    pass

                elif la_ == 2:
                    self.state = 425
                    self.dataStructField32(FieldInUnion)
                    pass

                elif la_ == 3:
                    self.state = 426
                    self.dataStructField16(FieldInUnion)
                    pass

                elif la_ == 4:
                    self.state = 427
                    self.dataStructField8(FieldInUnion)
                    pass

                elif la_ == 5:
                    self.state = 428
                    self.dataStructFieldBool(FieldInUnion)
                    pass

                elif la_ == 6:
                    self.state = 429
                    self.dataStructFieldString(FieldInUnion)
                    pass

                elif la_ == 7:
                    self.state = 430
                    self.dataStructFieldDate(FieldInUnion)
                    pass

                elif la_ == 8:
                    self.state = 431
                    self.dataStructFieldTime(FieldInUnion)
                    pass

                elif la_ == 9:
                    self.state = 432
                    self.dataStructFieldRef(FieldInUnion)
                    pass

                elif la_ == 10:
                    self.state = 433
                    self.dataStructFieldUser(FieldInUnion)
                    pass

                elif la_ == 11:
                    self.state = 434
                    self.dataStructBitField64(FieldInUnion)
                    pass

                elif la_ == 12:
                    self.state = 435
                    self.dataStructBitField32(FieldInUnion)
                    pass

                elif la_ == 13:
                    self.state = 436
                    self.dataStructBitField16(FieldInUnion)
                    pass

                elif la_ == 14:
                    self.state = 437
                    self.dataStructBitField8(FieldInUnion)
                    pass


                self.state = 442
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataStructField64Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1, FieldInUnion=None):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.FieldInUnion = None
            self.FieldInUnion = FieldInUnion

        def Uint64(self):
            return self.getToken(VfrSyntaxParser.Uint64, 0)

        def StringIdentifier(self):
            return self.getToken(VfrSyntaxParser.StringIdentifier, 0)

        def OpenBracket(self):
            return self.getToken(VfrSyntaxParser.OpenBracket, 0)

        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def CloseBracket(self):
            return self.getToken(VfrSyntaxParser.CloseBracket, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_dataStructField64

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDataStructField64" ):
                return visitor.visitDataStructField64(self)
            else:
                return visitor.visitChildren(self)




    def dataStructField64(self, FieldInUnion):

        localctx = VfrSyntaxParser.DataStructField64Context(self, self._ctx, self.state, FieldInUnion)
        self.enterRule(localctx, 16, self.RULE_dataStructField64)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 443
            self.match(VfrSyntaxParser.Uint64)
            self.state = 444
            self.match(VfrSyntaxParser.StringIdentifier)
            self.state = 448
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.OpenBracket:
                self.state = 445
                self.match(VfrSyntaxParser.OpenBracket)
                self.state = 446
                self.match(VfrSyntaxParser.Number)
                self.state = 447
                self.match(VfrSyntaxParser.CloseBracket)


            self.state = 450
            self.match(VfrSyntaxParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataStructField32Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1, FieldInUnion=None):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.FieldInUnion = None
            self.FieldInUnion = FieldInUnion

        def Uint32(self):
            return self.getToken(VfrSyntaxParser.Uint32, 0)

        def StringIdentifier(self):
            return self.getToken(VfrSyntaxParser.StringIdentifier, 0)

        def OpenBracket(self):
            return self.getToken(VfrSyntaxParser.OpenBracket, 0)

        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def CloseBracket(self):
            return self.getToken(VfrSyntaxParser.CloseBracket, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_dataStructField32

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDataStructField32" ):
                return visitor.visitDataStructField32(self)
            else:
                return visitor.visitChildren(self)




    def dataStructField32(self, FieldInUnion):

        localctx = VfrSyntaxParser.DataStructField32Context(self, self._ctx, self.state, FieldInUnion)
        self.enterRule(localctx, 18, self.RULE_dataStructField32)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 452
            self.match(VfrSyntaxParser.Uint32)
            self.state = 453
            self.match(VfrSyntaxParser.StringIdentifier)
            self.state = 457
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.OpenBracket:
                self.state = 454
                self.match(VfrSyntaxParser.OpenBracket)
                self.state = 455
                self.match(VfrSyntaxParser.Number)
                self.state = 456
                self.match(VfrSyntaxParser.CloseBracket)


            self.state = 459
            self.match(VfrSyntaxParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataStructField16Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1, FieldInUnion=None):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.FieldInUnion = None
            self.FieldInUnion = FieldInUnion

        def Uint16(self):
            return self.getToken(VfrSyntaxParser.Uint16, 0)

        def StringIdentifier(self):
            return self.getToken(VfrSyntaxParser.StringIdentifier, 0)

        def OpenBracket(self):
            return self.getToken(VfrSyntaxParser.OpenBracket, 0)

        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def CloseBracket(self):
            return self.getToken(VfrSyntaxParser.CloseBracket, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_dataStructField16

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDataStructField16" ):
                return visitor.visitDataStructField16(self)
            else:
                return visitor.visitChildren(self)




    def dataStructField16(self, FieldInUnion):

        localctx = VfrSyntaxParser.DataStructField16Context(self, self._ctx, self.state, FieldInUnion)
        self.enterRule(localctx, 20, self.RULE_dataStructField16)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 461
            self.match(VfrSyntaxParser.Uint16)
            self.state = 462
            self.match(VfrSyntaxParser.StringIdentifier)
            self.state = 466
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.OpenBracket:
                self.state = 463
                self.match(VfrSyntaxParser.OpenBracket)
                self.state = 464
                self.match(VfrSyntaxParser.Number)
                self.state = 465
                self.match(VfrSyntaxParser.CloseBracket)


            self.state = 468
            self.match(VfrSyntaxParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataStructField8Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1, FieldInUnion=None):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.FieldInUnion = None
            self.FieldInUnion = FieldInUnion

        def Uint8(self):
            return self.getToken(VfrSyntaxParser.Uint8, 0)

        def StringIdentifier(self):
            return self.getToken(VfrSyntaxParser.StringIdentifier, 0)

        def OpenBracket(self):
            return self.getToken(VfrSyntaxParser.OpenBracket, 0)

        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def CloseBracket(self):
            return self.getToken(VfrSyntaxParser.CloseBracket, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_dataStructField8

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDataStructField8" ):
                return visitor.visitDataStructField8(self)
            else:
                return visitor.visitChildren(self)




    def dataStructField8(self, FieldInUnion):

        localctx = VfrSyntaxParser.DataStructField8Context(self, self._ctx, self.state, FieldInUnion)
        self.enterRule(localctx, 22, self.RULE_dataStructField8)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 470
            self.match(VfrSyntaxParser.Uint8)
            self.state = 471
            self.match(VfrSyntaxParser.StringIdentifier)
            self.state = 475
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.OpenBracket:
                self.state = 472
                self.match(VfrSyntaxParser.OpenBracket)
                self.state = 473
                self.match(VfrSyntaxParser.Number)
                self.state = 474
                self.match(VfrSyntaxParser.CloseBracket)


            self.state = 477
            self.match(VfrSyntaxParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataStructFieldBoolContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1, FieldInUnion=None):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.FieldInUnion = None
            self.FieldInUnion = FieldInUnion

        def Boolean(self):
            return self.getToken(VfrSyntaxParser.Boolean, 0)

        def StringIdentifier(self):
            return self.getToken(VfrSyntaxParser.StringIdentifier, 0)

        def OpenBracket(self):
            return self.getToken(VfrSyntaxParser.OpenBracket, 0)

        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def CloseBracket(self):
            return self.getToken(VfrSyntaxParser.CloseBracket, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_dataStructFieldBool

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDataStructFieldBool" ):
                return visitor.visitDataStructFieldBool(self)
            else:
                return visitor.visitChildren(self)




    def dataStructFieldBool(self, FieldInUnion):

        localctx = VfrSyntaxParser.DataStructFieldBoolContext(self, self._ctx, self.state, FieldInUnion)
        self.enterRule(localctx, 24, self.RULE_dataStructFieldBool)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 479
            self.match(VfrSyntaxParser.Boolean)
            self.state = 480
            self.match(VfrSyntaxParser.StringIdentifier)
            self.state = 484
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.OpenBracket:
                self.state = 481
                self.match(VfrSyntaxParser.OpenBracket)
                self.state = 482
                self.match(VfrSyntaxParser.Number)
                self.state = 483
                self.match(VfrSyntaxParser.CloseBracket)


            self.state = 486
            self.match(VfrSyntaxParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataStructFieldStringContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1, FieldInUnion=None):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.FieldInUnion = None
            self.FieldInUnion = FieldInUnion

        def EFI_STRING_ID(self):
            return self.getToken(VfrSyntaxParser.EFI_STRING_ID, 0)

        def StringIdentifier(self):
            return self.getToken(VfrSyntaxParser.StringIdentifier, 0)

        def OpenBracket(self):
            return self.getToken(VfrSyntaxParser.OpenBracket, 0)

        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def CloseBracket(self):
            return self.getToken(VfrSyntaxParser.CloseBracket, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_dataStructFieldString

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDataStructFieldString" ):
                return visitor.visitDataStructFieldString(self)
            else:
                return visitor.visitChildren(self)




    def dataStructFieldString(self, FieldInUnion):

        localctx = VfrSyntaxParser.DataStructFieldStringContext(self, self._ctx, self.state, FieldInUnion)
        self.enterRule(localctx, 26, self.RULE_dataStructFieldString)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 488
            self.match(VfrSyntaxParser.EFI_STRING_ID)
            self.state = 489
            self.match(VfrSyntaxParser.StringIdentifier)
            self.state = 493
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.OpenBracket:
                self.state = 490
                self.match(VfrSyntaxParser.OpenBracket)
                self.state = 491
                self.match(VfrSyntaxParser.Number)
                self.state = 492
                self.match(VfrSyntaxParser.CloseBracket)


            self.state = 495
            self.match(VfrSyntaxParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataStructFieldDateContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1, FieldInUnion=None):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.FieldInUnion = None
            self.FieldInUnion = FieldInUnion

        def EFI_HII_DATE(self):
            return self.getToken(VfrSyntaxParser.EFI_HII_DATE, 0)

        def StringIdentifier(self):
            return self.getToken(VfrSyntaxParser.StringIdentifier, 0)

        def OpenBracket(self):
            return self.getToken(VfrSyntaxParser.OpenBracket, 0)

        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def CloseBracket(self):
            return self.getToken(VfrSyntaxParser.CloseBracket, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_dataStructFieldDate

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDataStructFieldDate" ):
                return visitor.visitDataStructFieldDate(self)
            else:
                return visitor.visitChildren(self)




    def dataStructFieldDate(self, FieldInUnion):

        localctx = VfrSyntaxParser.DataStructFieldDateContext(self, self._ctx, self.state, FieldInUnion)
        self.enterRule(localctx, 28, self.RULE_dataStructFieldDate)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 497
            self.match(VfrSyntaxParser.EFI_HII_DATE)
            self.state = 498
            self.match(VfrSyntaxParser.StringIdentifier)
            self.state = 502
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.OpenBracket:
                self.state = 499
                self.match(VfrSyntaxParser.OpenBracket)
                self.state = 500
                self.match(VfrSyntaxParser.Number)
                self.state = 501
                self.match(VfrSyntaxParser.CloseBracket)


            self.state = 504
            self.match(VfrSyntaxParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataStructFieldTimeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1, FieldInUnion=None):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.FieldInUnion = None
            self.FieldInUnion = FieldInUnion

        def EFI_HII_TIME(self):
            return self.getToken(VfrSyntaxParser.EFI_HII_TIME, 0)

        def StringIdentifier(self):
            return self.getToken(VfrSyntaxParser.StringIdentifier, 0)

        def OpenBracket(self):
            return self.getToken(VfrSyntaxParser.OpenBracket, 0)

        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def CloseBracket(self):
            return self.getToken(VfrSyntaxParser.CloseBracket, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_dataStructFieldTime

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDataStructFieldTime" ):
                return visitor.visitDataStructFieldTime(self)
            else:
                return visitor.visitChildren(self)




    def dataStructFieldTime(self, FieldInUnion):

        localctx = VfrSyntaxParser.DataStructFieldTimeContext(self, self._ctx, self.state, FieldInUnion)
        self.enterRule(localctx, 30, self.RULE_dataStructFieldTime)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 506
            self.match(VfrSyntaxParser.EFI_HII_TIME)
            self.state = 507
            self.match(VfrSyntaxParser.StringIdentifier)
            self.state = 511
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.OpenBracket:
                self.state = 508
                self.match(VfrSyntaxParser.OpenBracket)
                self.state = 509
                self.match(VfrSyntaxParser.Number)
                self.state = 510
                self.match(VfrSyntaxParser.CloseBracket)


            self.state = 513
            self.match(VfrSyntaxParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataStructFieldRefContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1, FieldInUnion=None):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.FieldInUnion = None
            self.FieldInUnion = FieldInUnion

        def EFI_HII_REF(self):
            return self.getToken(VfrSyntaxParser.EFI_HII_REF, 0)

        def StringIdentifier(self):
            return self.getToken(VfrSyntaxParser.StringIdentifier, 0)

        def OpenBracket(self):
            return self.getToken(VfrSyntaxParser.OpenBracket, 0)

        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def CloseBracket(self):
            return self.getToken(VfrSyntaxParser.CloseBracket, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_dataStructFieldRef

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDataStructFieldRef" ):
                return visitor.visitDataStructFieldRef(self)
            else:
                return visitor.visitChildren(self)




    def dataStructFieldRef(self, FieldInUnion):

        localctx = VfrSyntaxParser.DataStructFieldRefContext(self, self._ctx, self.state, FieldInUnion)
        self.enterRule(localctx, 32, self.RULE_dataStructFieldRef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 515
            self.match(VfrSyntaxParser.EFI_HII_REF)
            self.state = 516
            self.match(VfrSyntaxParser.StringIdentifier)
            self.state = 520
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.OpenBracket:
                self.state = 517
                self.match(VfrSyntaxParser.OpenBracket)
                self.state = 518
                self.match(VfrSyntaxParser.Number)
                self.state = 519
                self.match(VfrSyntaxParser.CloseBracket)


            self.state = 522
            self.match(VfrSyntaxParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataStructFieldUserContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1, FieldInUnion=None):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.FieldInUnion = None
            self.FieldInUnion = FieldInUnion

        def StringIdentifier(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.StringIdentifier)
            else:
                return self.getToken(VfrSyntaxParser.StringIdentifier, i)

        def OpenBracket(self):
            return self.getToken(VfrSyntaxParser.OpenBracket, 0)

        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def CloseBracket(self):
            return self.getToken(VfrSyntaxParser.CloseBracket, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_dataStructFieldUser

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDataStructFieldUser" ):
                return visitor.visitDataStructFieldUser(self)
            else:
                return visitor.visitChildren(self)




    def dataStructFieldUser(self, FieldInUnion):

        localctx = VfrSyntaxParser.DataStructFieldUserContext(self, self._ctx, self.state, FieldInUnion)
        self.enterRule(localctx, 34, self.RULE_dataStructFieldUser)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 524
            self.match(VfrSyntaxParser.StringIdentifier)
            self.state = 525
            self.match(VfrSyntaxParser.StringIdentifier)
            self.state = 529
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.OpenBracket:
                self.state = 526
                self.match(VfrSyntaxParser.OpenBracket)
                self.state = 527
                self.match(VfrSyntaxParser.Number)
                self.state = 528
                self.match(VfrSyntaxParser.CloseBracket)


            self.state = 531
            self.match(VfrSyntaxParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataStructBitField64Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1, FieldInUnion=None):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.FieldInUnion = None
            self.FieldInUnion = FieldInUnion

        def Uint64(self):
            return self.getToken(VfrSyntaxParser.Uint64, 0)

        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def StringIdentifier(self):
            return self.getToken(VfrSyntaxParser.StringIdentifier, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_dataStructBitField64

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDataStructBitField64" ):
                return visitor.visitDataStructBitField64(self)
            else:
                return visitor.visitChildren(self)




    def dataStructBitField64(self, FieldInUnion):

        localctx = VfrSyntaxParser.DataStructBitField64Context(self, self._ctx, self.state, FieldInUnion)
        self.enterRule(localctx, 36, self.RULE_dataStructBitField64)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 533
            self.match(VfrSyntaxParser.Uint64)
            self.state = 535
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.StringIdentifier:
                self.state = 534
                self.match(VfrSyntaxParser.StringIdentifier)


            self.state = 537
            self.match(VfrSyntaxParser.T__7)
            self.state = 538
            self.match(VfrSyntaxParser.Number)
            self.state = 539
            self.match(VfrSyntaxParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataStructBitField32Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1, FieldInUnion=None):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.FieldInUnion = None
            self.FieldInUnion = FieldInUnion

        def Uint32(self):
            return self.getToken(VfrSyntaxParser.Uint32, 0)

        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def StringIdentifier(self):
            return self.getToken(VfrSyntaxParser.StringIdentifier, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_dataStructBitField32

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDataStructBitField32" ):
                return visitor.visitDataStructBitField32(self)
            else:
                return visitor.visitChildren(self)




    def dataStructBitField32(self, FieldInUnion):

        localctx = VfrSyntaxParser.DataStructBitField32Context(self, self._ctx, self.state, FieldInUnion)
        self.enterRule(localctx, 38, self.RULE_dataStructBitField32)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 541
            self.match(VfrSyntaxParser.Uint32)
            self.state = 543
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.StringIdentifier:
                self.state = 542
                self.match(VfrSyntaxParser.StringIdentifier)


            self.state = 545
            self.match(VfrSyntaxParser.T__7)
            self.state = 546
            self.match(VfrSyntaxParser.Number)
            self.state = 547
            self.match(VfrSyntaxParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataStructBitField16Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1, FieldInUnion=None):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.FieldInUnion = None
            self.FieldInUnion = FieldInUnion

        def Uint16(self):
            return self.getToken(VfrSyntaxParser.Uint16, 0)

        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def StringIdentifier(self):
            return self.getToken(VfrSyntaxParser.StringIdentifier, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_dataStructBitField16

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDataStructBitField16" ):
                return visitor.visitDataStructBitField16(self)
            else:
                return visitor.visitChildren(self)




    def dataStructBitField16(self, FieldInUnion):

        localctx = VfrSyntaxParser.DataStructBitField16Context(self, self._ctx, self.state, FieldInUnion)
        self.enterRule(localctx, 40, self.RULE_dataStructBitField16)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 549
            self.match(VfrSyntaxParser.Uint16)
            self.state = 551
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.StringIdentifier:
                self.state = 550
                self.match(VfrSyntaxParser.StringIdentifier)


            self.state = 553
            self.match(VfrSyntaxParser.T__7)
            self.state = 554
            self.match(VfrSyntaxParser.Number)
            self.state = 555
            self.match(VfrSyntaxParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataStructBitField8Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1, FieldInUnion=None):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.FieldInUnion = None
            self.FieldInUnion = FieldInUnion

        def Uint8(self):
            return self.getToken(VfrSyntaxParser.Uint8, 0)

        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def StringIdentifier(self):
            return self.getToken(VfrSyntaxParser.StringIdentifier, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_dataStructBitField8

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDataStructBitField8" ):
                return visitor.visitDataStructBitField8(self)
            else:
                return visitor.visitChildren(self)




    def dataStructBitField8(self, FieldInUnion):

        localctx = VfrSyntaxParser.DataStructBitField8Context(self, self._ctx, self.state, FieldInUnion)
        self.enterRule(localctx, 42, self.RULE_dataStructBitField8)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 557
            self.match(VfrSyntaxParser.Uint8)
            self.state = 559
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.StringIdentifier:
                self.state = 558
                self.match(VfrSyntaxParser.StringIdentifier)


            self.state = 561
            self.match(VfrSyntaxParser.T__7)
            self.state = 562
            self.match(VfrSyntaxParser.Number)
            self.state = 563
            self.match(VfrSyntaxParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrFormSetDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FormSet(self):
            return self.getToken(VfrSyntaxParser.FormSet, 0)

        def Uuid(self):
            return self.getToken(VfrSyntaxParser.Uuid, 0)

        def guidDefinition(self):
            return self.getTypedRuleContext(VfrSyntaxParser.GuidDefinitionContext,0)


        def Title(self):
            return self.getToken(VfrSyntaxParser.Title, 0)

        def OpenParen(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.OpenParen)
            else:
                return self.getToken(VfrSyntaxParser.OpenParen, i)

        def Number(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Number)
            else:
                return self.getToken(VfrSyntaxParser.Number, i)

        def CloseParen(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.CloseParen)
            else:
                return self.getToken(VfrSyntaxParser.CloseParen, i)

        def Help(self):
            return self.getToken(VfrSyntaxParser.Help, 0)

        def vfrFormSetList(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrFormSetListContext,0)


        def EndFormSet(self):
            return self.getToken(VfrSyntaxParser.EndFormSet, 0)

        def ClassGuid(self):
            return self.getToken(VfrSyntaxParser.ClassGuid, 0)

        def classguidDefinition(self):
            return self.getTypedRuleContext(VfrSyntaxParser.ClassguidDefinitionContext,0)


        def Class(self):
            return self.getToken(VfrSyntaxParser.Class, 0)

        def classDefinition(self):
            return self.getTypedRuleContext(VfrSyntaxParser.ClassDefinitionContext,0)


        def Subclass(self):
            return self.getToken(VfrSyntaxParser.Subclass, 0)

        def subclassDefinition(self):
            return self.getTypedRuleContext(VfrSyntaxParser.SubclassDefinitionContext,0)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrFormSetDefinition

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrFormSetDefinition" ):
                return visitor.visitVfrFormSetDefinition(self)
            else:
                return visitor.visitChildren(self)




    def vfrFormSetDefinition(self):

        localctx = VfrSyntaxParser.VfrFormSetDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_vfrFormSetDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 565
            self.match(VfrSyntaxParser.FormSet)
            self.state = 566
            self.match(VfrSyntaxParser.Uuid)
            self.state = 567
            self.match(VfrSyntaxParser.T__8)
            self.state = 568
            self.guidDefinition()
            self.state = 569
            self.match(VfrSyntaxParser.T__3)
            self.state = 570
            self.match(VfrSyntaxParser.Title)
            self.state = 571
            self.match(VfrSyntaxParser.T__8)
            self.state = 572
            self.match(VfrSyntaxParser.T__9)
            self.state = 573
            self.match(VfrSyntaxParser.OpenParen)
            self.state = 574
            self.match(VfrSyntaxParser.Number)
            self.state = 575
            self.match(VfrSyntaxParser.CloseParen)
            self.state = 576
            self.match(VfrSyntaxParser.T__3)
            self.state = 577
            self.match(VfrSyntaxParser.Help)
            self.state = 578
            self.match(VfrSyntaxParser.T__8)
            self.state = 579
            self.match(VfrSyntaxParser.T__9)
            self.state = 580
            self.match(VfrSyntaxParser.OpenParen)
            self.state = 581
            self.match(VfrSyntaxParser.Number)
            self.state = 582
            self.match(VfrSyntaxParser.CloseParen)
            self.state = 583
            self.match(VfrSyntaxParser.T__3)
            self.state = 589
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.ClassGuid:
                self.state = 584
                self.match(VfrSyntaxParser.ClassGuid)
                self.state = 585
                self.match(VfrSyntaxParser.T__8)
                self.state = 586
                self.classguidDefinition()
                self.state = 587
                self.match(VfrSyntaxParser.T__3)


            self.state = 596
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.Class:
                self.state = 591
                self.match(VfrSyntaxParser.Class)
                self.state = 592
                self.match(VfrSyntaxParser.T__8)
                self.state = 593
                self.classDefinition()
                self.state = 594
                self.match(VfrSyntaxParser.T__3)


            self.state = 603
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.Subclass:
                self.state = 598
                self.match(VfrSyntaxParser.Subclass)
                self.state = 599
                self.match(VfrSyntaxParser.T__8)
                self.state = 600
                self.subclassDefinition()
                self.state = 601
                self.match(VfrSyntaxParser.T__3)


            self.state = 605
            self.vfrFormSetList()
            self.state = 606
            self.match(VfrSyntaxParser.EndFormSet)
            self.state = 607
            self.match(VfrSyntaxParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassguidDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.GuidList = []

        def guidDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.GuidDefinitionContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.GuidDefinitionContext,i)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_classguidDefinition

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassguidDefinition" ):
                return visitor.visitClassguidDefinition(self)
            else:
                return visitor.visitChildren(self)




    def classguidDefinition(self):

        localctx = VfrSyntaxParser.ClassguidDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_classguidDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 609
            self.guidDefinition()
            self.state = 612
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                self.state = 610
                self.match(VfrSyntaxParser.T__10)
                self.state = 611
                self.guidDefinition()


            self.state = 616
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
            if la_ == 1:
                self.state = 614
                self.match(VfrSyntaxParser.T__10)
                self.state = 615
                self.guidDefinition()


            self.state = 620
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.T__10:
                self.state = 618
                self.match(VfrSyntaxParser.T__10)
                self.state = 619
                self.guidDefinition()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.CObj = CIfrClass()

        def validClassNames(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.ValidClassNamesContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.ValidClassNamesContext,i)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_classDefinition

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassDefinition" ):
                return visitor.visitClassDefinition(self)
            else:
                return visitor.visitChildren(self)




    def classDefinition(self):

        localctx = VfrSyntaxParser.ClassDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_classDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 622
            self.validClassNames()
            self.state = 627
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==VfrSyntaxParser.T__10:
                self.state = 623
                self.match(VfrSyntaxParser.T__10)
                self.state = 624
                self.validClassNames()
                self.state = 629
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValidClassNamesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ClassName = 0

        def ClassNonDevice(self):
            return self.getToken(VfrSyntaxParser.ClassNonDevice, 0)

        def ClassDiskDevice(self):
            return self.getToken(VfrSyntaxParser.ClassDiskDevice, 0)

        def ClassVideoDevice(self):
            return self.getToken(VfrSyntaxParser.ClassVideoDevice, 0)

        def ClassNetworkDevice(self):
            return self.getToken(VfrSyntaxParser.ClassNetworkDevice, 0)

        def ClassInputDevice(self):
            return self.getToken(VfrSyntaxParser.ClassInputDevice, 0)

        def ClassOnBoardDevice(self):
            return self.getToken(VfrSyntaxParser.ClassOnBoardDevice, 0)

        def ClassOtherDevice(self):
            return self.getToken(VfrSyntaxParser.ClassOtherDevice, 0)

        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_validClassNames

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitValidClassNames" ):
                return visitor.visitValidClassNames(self)
            else:
                return visitor.visitChildren(self)




    def validClassNames(self):

        localctx = VfrSyntaxParser.ValidClassNamesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_validClassNames)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 630
            _la = self._input.LA(1)
            if not(((((_la - 230)) & ~0x3f) == 0 and ((1 << (_la - 230)) & ((1 << (VfrSyntaxParser.ClassNonDevice - 230)) | (1 << (VfrSyntaxParser.ClassDiskDevice - 230)) | (1 << (VfrSyntaxParser.ClassVideoDevice - 230)) | (1 << (VfrSyntaxParser.ClassNetworkDevice - 230)) | (1 << (VfrSyntaxParser.ClassInputDevice - 230)) | (1 << (VfrSyntaxParser.ClassOnBoardDevice - 230)) | (1 << (VfrSyntaxParser.ClassOtherDevice - 230)) | (1 << (VfrSyntaxParser.Number - 230)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubclassDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.SubObj = CIfrSubClass()

        def SubclassSetupApplication(self):
            return self.getToken(VfrSyntaxParser.SubclassSetupApplication, 0)

        def SubclassGeneralApplication(self):
            return self.getToken(VfrSyntaxParser.SubclassGeneralApplication, 0)

        def SubclassFrontPage(self):
            return self.getToken(VfrSyntaxParser.SubclassFrontPage, 0)

        def SubclassSingleUse(self):
            return self.getToken(VfrSyntaxParser.SubclassSingleUse, 0)

        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_subclassDefinition

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubclassDefinition" ):
                return visitor.visitSubclassDefinition(self)
            else:
                return visitor.visitChildren(self)




    def subclassDefinition(self):

        localctx = VfrSyntaxParser.SubclassDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_subclassDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 632
            _la = self._input.LA(1)
            if not(((((_la - 237)) & ~0x3f) == 0 and ((1 << (_la - 237)) & ((1 << (VfrSyntaxParser.SubclassSetupApplication - 237)) | (1 << (VfrSyntaxParser.SubclassGeneralApplication - 237)) | (1 << (VfrSyntaxParser.SubclassFrontPage - 237)) | (1 << (VfrSyntaxParser.SubclassSingleUse - 237)) | (1 << (VfrSyntaxParser.Number - 237)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrFormSetListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vfrFormDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrFormDefinitionContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrFormDefinitionContext,i)


        def vfrFormMapDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrFormMapDefinitionContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrFormMapDefinitionContext,i)


        def vfrStatementImage(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrStatementImageContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementImageContext,i)


        def vfrStatementVarStoreLinear(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrStatementVarStoreLinearContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementVarStoreLinearContext,i)


        def vfrStatementVarStoreEfi(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrStatementVarStoreEfiContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementVarStoreEfiContext,i)


        def vfrStatementVarStoreNameValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrStatementVarStoreNameValueContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementVarStoreNameValueContext,i)


        def vfrStatementDefaultStore(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrStatementDefaultStoreContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementDefaultStoreContext,i)


        def vfrStatementDisableIfFormSet(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrStatementDisableIfFormSetContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementDisableIfFormSetContext,i)


        def vfrStatementSuppressIfFormSet(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrStatementSuppressIfFormSetContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementSuppressIfFormSetContext,i)


        def vfrStatementExtension(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrStatementExtensionContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementExtensionContext,i)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrFormSetList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrFormSetList" ):
                return visitor.visitVfrFormSetList(self)
            else:
                return visitor.visitChildren(self)




    def vfrFormSetList(self):

        localctx = VfrSyntaxParser.VfrFormSetListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_vfrFormSetList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 646
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 115)) & ~0x3f) == 0 and ((1 << (_la - 115)) & ((1 << (VfrSyntaxParser.Form - 115)) | (1 << (VfrSyntaxParser.FormMap - 115)) | (1 << (VfrSyntaxParser.SuppressIf - 115)) | (1 << (VfrSyntaxParser.DisableIf - 115)))) != 0) or ((((_la - 204)) & ~0x3f) == 0 and ((1 << (_la - 204)) & ((1 << (VfrSyntaxParser.Image - 204)) | (1 << (VfrSyntaxParser.DefaultStore - 204)) | (1 << (VfrSyntaxParser.Varstore - 204)) | (1 << (VfrSyntaxParser.Efivarstore - 204)) | (1 << (VfrSyntaxParser.NameValueVarStore - 204)) | (1 << (VfrSyntaxParser.GuidOp - 204)))) != 0):
                self.state = 644
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VfrSyntaxParser.Form]:
                    self.state = 634
                    self.vfrFormDefinition()
                    pass
                elif token in [VfrSyntaxParser.FormMap]:
                    self.state = 635
                    self.vfrFormMapDefinition()
                    pass
                elif token in [VfrSyntaxParser.Image]:
                    self.state = 636
                    self.vfrStatementImage()
                    pass
                elif token in [VfrSyntaxParser.Varstore]:
                    self.state = 637
                    self.vfrStatementVarStoreLinear()
                    pass
                elif token in [VfrSyntaxParser.Efivarstore]:
                    self.state = 638
                    self.vfrStatementVarStoreEfi()
                    pass
                elif token in [VfrSyntaxParser.NameValueVarStore]:
                    self.state = 639
                    self.vfrStatementVarStoreNameValue()
                    pass
                elif token in [VfrSyntaxParser.DefaultStore]:
                    self.state = 640
                    self.vfrStatementDefaultStore()
                    pass
                elif token in [VfrSyntaxParser.DisableIf]:
                    self.state = 641
                    self.vfrStatementDisableIfFormSet()
                    pass
                elif token in [VfrSyntaxParser.SuppressIf]:
                    self.state = 642
                    self.vfrStatementSuppressIfFormSet()
                    pass
                elif token in [VfrSyntaxParser.GuidOp]:
                    self.state = 643
                    self.vfrStatementExtension()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 648
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementDefaultStoreContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.DSObj = CIfrDefaultStore()

        def DefaultStore(self):
            return self.getToken(VfrSyntaxParser.DefaultStore, 0)

        def StringIdentifier(self):
            return self.getToken(VfrSyntaxParser.StringIdentifier, 0)

        def Prompt(self):
            return self.getToken(VfrSyntaxParser.Prompt, 0)

        def OpenParen(self):
            return self.getToken(VfrSyntaxParser.OpenParen, 0)

        def Number(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Number)
            else:
                return self.getToken(VfrSyntaxParser.Number, i)

        def CloseParen(self):
            return self.getToken(VfrSyntaxParser.CloseParen, 0)

        def Attribute(self):
            return self.getToken(VfrSyntaxParser.Attribute, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementDefaultStore

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementDefaultStore" ):
                return visitor.visitVfrStatementDefaultStore(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementDefaultStore(self):

        localctx = VfrSyntaxParser.VfrStatementDefaultStoreContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_vfrStatementDefaultStore)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 649
            self.match(VfrSyntaxParser.DefaultStore)
            self.state = 650
            self.match(VfrSyntaxParser.StringIdentifier)
            self.state = 651
            self.match(VfrSyntaxParser.T__3)
            self.state = 652
            self.match(VfrSyntaxParser.Prompt)
            self.state = 653
            self.match(VfrSyntaxParser.T__8)
            self.state = 654
            self.match(VfrSyntaxParser.T__9)
            self.state = 655
            self.match(VfrSyntaxParser.OpenParen)
            self.state = 656
            self.match(VfrSyntaxParser.Number)
            self.state = 657
            self.match(VfrSyntaxParser.CloseParen)
            self.state = 662
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.T__3:
                self.state = 658
                self.match(VfrSyntaxParser.T__3)
                self.state = 659
                self.match(VfrSyntaxParser.Attribute)
                self.state = 660
                self.match(VfrSyntaxParser.T__8)
                self.state = 661
                self.match(VfrSyntaxParser.Number)


            self.state = 664
            self.match(VfrSyntaxParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementVarStoreLinearContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.VSObj = CIfrVarStore()

        def Varstore(self):
            return self.getToken(VfrSyntaxParser.Varstore, 0)

        def Name(self):
            return self.getToken(VfrSyntaxParser.Name, 0)

        def StringIdentifier(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.StringIdentifier)
            else:
                return self.getToken(VfrSyntaxParser.StringIdentifier, i)

        def Uuid(self):
            return self.getToken(VfrSyntaxParser.Uuid, 0)

        def guidDefinition(self):
            return self.getTypedRuleContext(VfrSyntaxParser.GuidDefinitionContext,0)


        def Uint8(self):
            return self.getToken(VfrSyntaxParser.Uint8, 0)

        def Uint16(self):
            return self.getToken(VfrSyntaxParser.Uint16, 0)

        def Uint32(self):
            return self.getToken(VfrSyntaxParser.Uint32, 0)

        def Uint64(self):
            return self.getToken(VfrSyntaxParser.Uint64, 0)

        def EFI_HII_DATE(self):
            return self.getToken(VfrSyntaxParser.EFI_HII_DATE, 0)

        def EFI_HII_TIME(self):
            return self.getToken(VfrSyntaxParser.EFI_HII_TIME, 0)

        def EFI_HII_REF(self):
            return self.getToken(VfrSyntaxParser.EFI_HII_REF, 0)

        def VarId(self):
            return self.getToken(VfrSyntaxParser.VarId, 0)

        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementVarStoreLinear

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementVarStoreLinear" ):
                return visitor.visitVfrStatementVarStoreLinear(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementVarStoreLinear(self):

        localctx = VfrSyntaxParser.VfrStatementVarStoreLinearContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_vfrStatementVarStoreLinear)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 666
            self.match(VfrSyntaxParser.Varstore)
            self.state = 683
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VfrSyntaxParser.StringIdentifier]:
                self.state = 667
                self.match(VfrSyntaxParser.StringIdentifier)
                self.state = 668
                self.match(VfrSyntaxParser.T__3)
                pass
            elif token in [VfrSyntaxParser.Uint8]:
                self.state = 669
                self.match(VfrSyntaxParser.Uint8)
                self.state = 670
                self.match(VfrSyntaxParser.T__3)
                pass
            elif token in [VfrSyntaxParser.Uint16]:
                self.state = 671
                self.match(VfrSyntaxParser.Uint16)
                self.state = 672
                self.match(VfrSyntaxParser.T__3)
                pass
            elif token in [VfrSyntaxParser.Uint32]:
                self.state = 673
                self.match(VfrSyntaxParser.Uint32)
                self.state = 674
                self.match(VfrSyntaxParser.T__3)
                pass
            elif token in [VfrSyntaxParser.Uint64]:
                self.state = 675
                self.match(VfrSyntaxParser.Uint64)
                self.state = 676
                self.match(VfrSyntaxParser.T__3)
                pass
            elif token in [VfrSyntaxParser.EFI_HII_DATE]:
                self.state = 677
                self.match(VfrSyntaxParser.EFI_HII_DATE)
                self.state = 678
                self.match(VfrSyntaxParser.T__3)
                pass
            elif token in [VfrSyntaxParser.EFI_HII_TIME]:
                self.state = 679
                self.match(VfrSyntaxParser.EFI_HII_TIME)
                self.state = 680
                self.match(VfrSyntaxParser.T__3)
                pass
            elif token in [VfrSyntaxParser.EFI_HII_REF]:
                self.state = 681
                self.match(VfrSyntaxParser.EFI_HII_REF)
                self.state = 682
                self.match(VfrSyntaxParser.T__3)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 689
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.VarId:
                self.state = 685
                self.match(VfrSyntaxParser.VarId)
                self.state = 686
                self.match(VfrSyntaxParser.T__8)
                self.state = 687
                self.match(VfrSyntaxParser.Number)
                self.state = 688
                self.match(VfrSyntaxParser.T__3)


            self.state = 691
            self.match(VfrSyntaxParser.Name)
            self.state = 692
            self.match(VfrSyntaxParser.T__8)
            self.state = 693
            self.match(VfrSyntaxParser.StringIdentifier)
            self.state = 694
            self.match(VfrSyntaxParser.T__3)
            self.state = 695
            self.match(VfrSyntaxParser.Uuid)
            self.state = 696
            self.match(VfrSyntaxParser.T__8)
            self.state = 697
            self.guidDefinition()
            self.state = 698
            self.match(VfrSyntaxParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementVarStoreEfiContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.VSEObj = CIfrVarStoreEfi()

        def Efivarstore(self):
            return self.getToken(VfrSyntaxParser.Efivarstore, 0)

        def Attribute(self):
            return self.getToken(VfrSyntaxParser.Attribute, 0)

        def vfrVarStoreEfiAttr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrVarStoreEfiAttrContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrVarStoreEfiAttrContext,i)


        def Uuid(self):
            return self.getToken(VfrSyntaxParser.Uuid, 0)

        def guidDefinition(self):
            return self.getTypedRuleContext(VfrSyntaxParser.GuidDefinitionContext,0)


        def StringIdentifier(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.StringIdentifier)
            else:
                return self.getToken(VfrSyntaxParser.StringIdentifier, i)

        def Uint8(self):
            return self.getToken(VfrSyntaxParser.Uint8, 0)

        def Uint16(self):
            return self.getToken(VfrSyntaxParser.Uint16, 0)

        def Uint32(self):
            return self.getToken(VfrSyntaxParser.Uint32, 0)

        def Uint64(self):
            return self.getToken(VfrSyntaxParser.Uint64, 0)

        def EFI_HII_DATE(self):
            return self.getToken(VfrSyntaxParser.EFI_HII_DATE, 0)

        def EFI_HII_TIME(self):
            return self.getToken(VfrSyntaxParser.EFI_HII_TIME, 0)

        def EFI_HII_REF(self):
            return self.getToken(VfrSyntaxParser.EFI_HII_REF, 0)

        def Name(self):
            return self.getToken(VfrSyntaxParser.Name, 0)

        def OpenParen(self):
            return self.getToken(VfrSyntaxParser.OpenParen, 0)

        def Number(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Number)
            else:
                return self.getToken(VfrSyntaxParser.Number, i)

        def CloseParen(self):
            return self.getToken(VfrSyntaxParser.CloseParen, 0)

        def VarSize(self):
            return self.getToken(VfrSyntaxParser.VarSize, 0)

        def VarId(self):
            return self.getToken(VfrSyntaxParser.VarId, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementVarStoreEfi

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementVarStoreEfi" ):
                return visitor.visitVfrStatementVarStoreEfi(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementVarStoreEfi(self):

        localctx = VfrSyntaxParser.VfrStatementVarStoreEfiContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_vfrStatementVarStoreEfi)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 700
            self.match(VfrSyntaxParser.Efivarstore)
            self.state = 717
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VfrSyntaxParser.StringIdentifier]:
                self.state = 701
                self.match(VfrSyntaxParser.StringIdentifier)
                self.state = 702
                self.match(VfrSyntaxParser.T__3)
                pass
            elif token in [VfrSyntaxParser.Uint8]:
                self.state = 703
                self.match(VfrSyntaxParser.Uint8)
                self.state = 704
                self.match(VfrSyntaxParser.T__3)
                pass
            elif token in [VfrSyntaxParser.Uint16]:
                self.state = 705
                self.match(VfrSyntaxParser.Uint16)
                self.state = 706
                self.match(VfrSyntaxParser.T__3)
                pass
            elif token in [VfrSyntaxParser.Uint32]:
                self.state = 707
                self.match(VfrSyntaxParser.Uint32)
                self.state = 708
                self.match(VfrSyntaxParser.T__3)
                pass
            elif token in [VfrSyntaxParser.Uint64]:
                self.state = 709
                self.match(VfrSyntaxParser.Uint64)
                self.state = 710
                self.match(VfrSyntaxParser.T__3)
                pass
            elif token in [VfrSyntaxParser.EFI_HII_DATE]:
                self.state = 711
                self.match(VfrSyntaxParser.EFI_HII_DATE)
                self.state = 712
                self.match(VfrSyntaxParser.T__3)
                pass
            elif token in [VfrSyntaxParser.EFI_HII_TIME]:
                self.state = 713
                self.match(VfrSyntaxParser.EFI_HII_TIME)
                self.state = 714
                self.match(VfrSyntaxParser.T__3)
                pass
            elif token in [VfrSyntaxParser.EFI_HII_REF]:
                self.state = 715
                self.match(VfrSyntaxParser.EFI_HII_REF)
                self.state = 716
                self.match(VfrSyntaxParser.T__3)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 723
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.VarId:
                self.state = 719
                self.match(VfrSyntaxParser.VarId)
                self.state = 720
                self.match(VfrSyntaxParser.T__8)
                self.state = 721
                self.match(VfrSyntaxParser.Number)
                self.state = 722
                self.match(VfrSyntaxParser.T__3)


            self.state = 725
            self.match(VfrSyntaxParser.Attribute)
            self.state = 726
            self.match(VfrSyntaxParser.T__8)
            self.state = 727
            self.vfrVarStoreEfiAttr()
            self.state = 732
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==VfrSyntaxParser.T__10:
                self.state = 728
                self.match(VfrSyntaxParser.T__10)
                self.state = 729
                self.vfrVarStoreEfiAttr()
                self.state = 734
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 735
            self.match(VfrSyntaxParser.T__3)
            self.state = 751
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
            if la_ == 1:
                self.state = 736
                self.match(VfrSyntaxParser.Name)
                self.state = 737
                self.match(VfrSyntaxParser.T__8)
                self.state = 738
                self.match(VfrSyntaxParser.StringIdentifier)
                self.state = 739
                self.match(VfrSyntaxParser.T__3)
                pass

            elif la_ == 2:
                self.state = 740
                self.match(VfrSyntaxParser.Name)
                self.state = 741
                self.match(VfrSyntaxParser.T__8)
                self.state = 742
                self.match(VfrSyntaxParser.T__9)
                self.state = 743
                self.match(VfrSyntaxParser.OpenParen)
                self.state = 744
                self.match(VfrSyntaxParser.Number)
                self.state = 745
                self.match(VfrSyntaxParser.CloseParen)
                self.state = 746
                self.match(VfrSyntaxParser.T__3)
                self.state = 747
                self.match(VfrSyntaxParser.VarSize)
                self.state = 748
                self.match(VfrSyntaxParser.T__8)
                self.state = 749
                self.match(VfrSyntaxParser.Number)
                self.state = 750
                self.match(VfrSyntaxParser.T__3)
                pass


            self.state = 753
            self.match(VfrSyntaxParser.Uuid)
            self.state = 754
            self.match(VfrSyntaxParser.T__8)
            self.state = 755
            self.guidDefinition()
            self.state = 756
            self.match(VfrSyntaxParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrVarStoreEfiAttrContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Attr = 0

        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrVarStoreEfiAttr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrVarStoreEfiAttr" ):
                return visitor.visitVfrVarStoreEfiAttr(self)
            else:
                return visitor.visitChildren(self)




    def vfrVarStoreEfiAttr(self):

        localctx = VfrSyntaxParser.VfrVarStoreEfiAttrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_vfrVarStoreEfiAttr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 758
            self.match(VfrSyntaxParser.Number)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementVarStoreNameValueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.VSNVObj = CIfrVarStoreNameValue()

        def NameValueVarStore(self):
            return self.getToken(VfrSyntaxParser.NameValueVarStore, 0)

        def StringIdentifier(self):
            return self.getToken(VfrSyntaxParser.StringIdentifier, 0)

        def Uuid(self):
            return self.getToken(VfrSyntaxParser.Uuid, 0)

        def guidDefinition(self):
            return self.getTypedRuleContext(VfrSyntaxParser.GuidDefinitionContext,0)


        def VarId(self):
            return self.getToken(VfrSyntaxParser.VarId, 0)

        def Number(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Number)
            else:
                return self.getToken(VfrSyntaxParser.Number, i)

        def Name(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Name)
            else:
                return self.getToken(VfrSyntaxParser.Name, i)

        def OpenParen(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.OpenParen)
            else:
                return self.getToken(VfrSyntaxParser.OpenParen, i)

        def CloseParen(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.CloseParen)
            else:
                return self.getToken(VfrSyntaxParser.CloseParen, i)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementVarStoreNameValue

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementVarStoreNameValue" ):
                return visitor.visitVfrStatementVarStoreNameValue(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementVarStoreNameValue(self):

        localctx = VfrSyntaxParser.VfrStatementVarStoreNameValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_vfrStatementVarStoreNameValue)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 760
            self.match(VfrSyntaxParser.NameValueVarStore)
            self.state = 761
            self.match(VfrSyntaxParser.StringIdentifier)
            self.state = 762
            self.match(VfrSyntaxParser.T__3)
            self.state = 767
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.VarId:
                self.state = 763
                self.match(VfrSyntaxParser.VarId)
                self.state = 764
                self.match(VfrSyntaxParser.T__8)
                self.state = 765
                self.match(VfrSyntaxParser.Number)
                self.state = 766
                self.match(VfrSyntaxParser.T__3)


            self.state = 776 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 769
                self.match(VfrSyntaxParser.Name)
                self.state = 770
                self.match(VfrSyntaxParser.T__8)
                self.state = 771
                self.match(VfrSyntaxParser.T__9)
                self.state = 772
                self.match(VfrSyntaxParser.OpenParen)
                self.state = 773
                self.match(VfrSyntaxParser.Number)
                self.state = 774
                self.match(VfrSyntaxParser.CloseParen)
                self.state = 775
                self.match(VfrSyntaxParser.T__3)
                self.state = 778 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==VfrSyntaxParser.Name):
                    break

            self.state = 780
            self.match(VfrSyntaxParser.Uuid)
            self.state = 781
            self.match(VfrSyntaxParser.T__8)
            self.state = 782
            self.guidDefinition()
            self.state = 783
            self.match(VfrSyntaxParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementDisableIfFormSetContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DisableIf(self):
            return self.getToken(VfrSyntaxParser.DisableIf, 0)

        def vfrStatementExpression(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementExpressionContext,0)


        def vfrFormSetList(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrFormSetListContext,0)


        def EndIf(self):
            return self.getToken(VfrSyntaxParser.EndIf, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementDisableIfFormSet

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementDisableIfFormSet" ):
                return visitor.visitVfrStatementDisableIfFormSet(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementDisableIfFormSet(self):

        localctx = VfrSyntaxParser.VfrStatementDisableIfFormSetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_vfrStatementDisableIfFormSet)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 785
            self.match(VfrSyntaxParser.DisableIf)
            self.state = 786
            self.vfrStatementExpression()
            self.state = 787
            self.match(VfrSyntaxParser.T__6)
            self.state = 788
            self.vfrFormSetList()
            self.state = 789
            self.match(VfrSyntaxParser.EndIf)
            self.state = 790
            self.match(VfrSyntaxParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementSuppressIfFormSetContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SuppressIf(self):
            return self.getToken(VfrSyntaxParser.SuppressIf, 0)

        def vfrStatementExpression(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementExpressionContext,0)


        def vfrFormSetList(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrFormSetListContext,0)


        def EndIf(self):
            return self.getToken(VfrSyntaxParser.EndIf, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementSuppressIfFormSet

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementSuppressIfFormSet" ):
                return visitor.visitVfrStatementSuppressIfFormSet(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementSuppressIfFormSet(self):

        localctx = VfrSyntaxParser.VfrStatementSuppressIfFormSetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_vfrStatementSuppressIfFormSet)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 792
            self.match(VfrSyntaxParser.SuppressIf)
            self.state = 793
            self.vfrStatementExpression()
            self.state = 794
            self.match(VfrSyntaxParser.T__6)
            self.state = 795
            self.vfrFormSetList()
            self.state = 796
            self.match(VfrSyntaxParser.EndIf)
            self.state = 797
            self.match(VfrSyntaxParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GuidSubDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1, Guid=None):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Guid = None
            self.Guid = Guid

        def Number(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Number)
            else:
                return self.getToken(VfrSyntaxParser.Number, i)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_guidSubDefinition

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGuidSubDefinition" ):
                return visitor.visitGuidSubDefinition(self)
            else:
                return visitor.visitChildren(self)




    def guidSubDefinition(self, Guid):

        localctx = VfrSyntaxParser.GuidSubDefinitionContext(self, self._ctx, self.state, Guid)
        self.enterRule(localctx, 70, self.RULE_guidSubDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 799
            self.match(VfrSyntaxParser.Number)
            self.state = 800
            self.match(VfrSyntaxParser.T__3)
            self.state = 801
            self.match(VfrSyntaxParser.Number)
            self.state = 802
            self.match(VfrSyntaxParser.T__3)
            self.state = 803
            self.match(VfrSyntaxParser.Number)
            self.state = 804
            self.match(VfrSyntaxParser.T__3)
            self.state = 805
            self.match(VfrSyntaxParser.Number)
            self.state = 806
            self.match(VfrSyntaxParser.T__3)
            self.state = 807
            self.match(VfrSyntaxParser.Number)
            self.state = 808
            self.match(VfrSyntaxParser.T__3)
            self.state = 809
            self.match(VfrSyntaxParser.Number)
            self.state = 810
            self.match(VfrSyntaxParser.T__3)
            self.state = 811
            self.match(VfrSyntaxParser.Number)
            self.state = 812
            self.match(VfrSyntaxParser.T__3)
            self.state = 813
            self.match(VfrSyntaxParser.Number)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GuidDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Guid = EFI_GUID()

        def OpenBrace(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.OpenBrace)
            else:
                return self.getToken(VfrSyntaxParser.OpenBrace, i)

        def Number(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Number)
            else:
                return self.getToken(VfrSyntaxParser.Number, i)

        def CloseBrace(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.CloseBrace)
            else:
                return self.getToken(VfrSyntaxParser.CloseBrace, i)

        def guidSubDefinition(self):
            return self.getTypedRuleContext(VfrSyntaxParser.GuidSubDefinitionContext,0)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_guidDefinition

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGuidDefinition" ):
                return visitor.visitGuidDefinition(self)
            else:
                return visitor.visitChildren(self)




    def guidDefinition(self):

        localctx = VfrSyntaxParser.GuidDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_guidDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 815
            self.match(VfrSyntaxParser.OpenBrace)
            self.state = 816
            self.match(VfrSyntaxParser.Number)
            self.state = 817
            self.match(VfrSyntaxParser.T__3)
            self.state = 818
            self.match(VfrSyntaxParser.Number)
            self.state = 819
            self.match(VfrSyntaxParser.T__3)
            self.state = 820
            self.match(VfrSyntaxParser.Number)
            self.state = 821
            self.match(VfrSyntaxParser.T__3)
            self.state = 827
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VfrSyntaxParser.OpenBrace]:
                self.state = 822
                self.match(VfrSyntaxParser.OpenBrace)
                self.state = 823
                self.guidSubDefinition(localctx.Guid)
                self.state = 824
                self.match(VfrSyntaxParser.CloseBrace)
                pass
            elif token in [VfrSyntaxParser.Number]:
                self.state = 826
                self.guidSubDefinition(localctx.Guid)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 829
            self.match(VfrSyntaxParser.CloseBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GetStringIdContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.StringId = ''

        def OpenParen(self):
            return self.getToken(VfrSyntaxParser.OpenParen, 0)

        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def CloseParen(self):
            return self.getToken(VfrSyntaxParser.CloseParen, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_getStringId

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGetStringId" ):
                return visitor.visitGetStringId(self)
            else:
                return visitor.visitChildren(self)




    def getStringId(self):

        localctx = VfrSyntaxParser.GetStringIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_getStringId)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 831
            self.match(VfrSyntaxParser.T__9)
            self.state = 832
            self.match(VfrSyntaxParser.OpenParen)
            self.state = 833
            self.match(VfrSyntaxParser.Number)
            self.state = 834
            self.match(VfrSyntaxParser.CloseParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementHeaderContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1, OpObj=None):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.OpObj = None
            self.OpObj = OpObj

        def Prompt(self):
            return self.getToken(VfrSyntaxParser.Prompt, 0)

        def OpenParen(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.OpenParen)
            else:
                return self.getToken(VfrSyntaxParser.OpenParen, i)

        def Number(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Number)
            else:
                return self.getToken(VfrSyntaxParser.Number, i)

        def CloseParen(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.CloseParen)
            else:
                return self.getToken(VfrSyntaxParser.CloseParen, i)

        def Help(self):
            return self.getToken(VfrSyntaxParser.Help, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementHeader

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementHeader" ):
                return visitor.visitVfrStatementHeader(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementHeader(self, OpObj):

        localctx = VfrSyntaxParser.VfrStatementHeaderContext(self, self._ctx, self.state, OpObj)
        self.enterRule(localctx, 76, self.RULE_vfrStatementHeader)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 836
            self.match(VfrSyntaxParser.Prompt)
            self.state = 837
            self.match(VfrSyntaxParser.T__8)
            self.state = 838
            self.match(VfrSyntaxParser.T__9)
            self.state = 839
            self.match(VfrSyntaxParser.OpenParen)
            self.state = 840
            self.match(VfrSyntaxParser.Number)
            self.state = 841
            self.match(VfrSyntaxParser.CloseParen)
            self.state = 842
            self.match(VfrSyntaxParser.T__3)
            self.state = 843
            self.match(VfrSyntaxParser.Help)
            self.state = 844
            self.match(VfrSyntaxParser.T__8)
            self.state = 845
            self.match(VfrSyntaxParser.T__9)
            self.state = 846
            self.match(VfrSyntaxParser.OpenParen)
            self.state = 847
            self.match(VfrSyntaxParser.Number)
            self.state = 848
            self.match(VfrSyntaxParser.CloseParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrQuestionHeaderContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1, OpObj=None, QType=None):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.OpObj = None
            self.QType = None
            self.OpObj = OpObj
            self.QType = QType

        def vfrQuestionBaseInfo(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrQuestionBaseInfoContext,0)


        def vfrStatementHeader(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementHeaderContext,0)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrQuestionHeader

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrQuestionHeader" ):
                return visitor.visitVfrQuestionHeader(self)
            else:
                return visitor.visitChildren(self)




    def vfrQuestionHeader(self, OpObj, QType):

        localctx = VfrSyntaxParser.VfrQuestionHeaderContext(self, self._ctx, self.state, OpObj, QType)
        self.enterRule(localctx, 78, self.RULE_vfrQuestionHeader)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 850
            self.vfrQuestionBaseInfo(OpObj, QType)
            self.state = 851
            self.vfrStatementHeader(OpObj)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrQuestionBaseInfoContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1, OpObj=None, QType=None):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.OpObj = None
            self.QType = None
            self.BaseInfo = EFI_VARSTORE_INFO()
            self.CheckFlag = True
            self.OpObj = OpObj
            self.QType = QType

        def Name(self):
            return self.getToken(VfrSyntaxParser.Name, 0)

        def StringIdentifier(self):
            return self.getToken(VfrSyntaxParser.StringIdentifier, 0)

        def VarId(self):
            return self.getToken(VfrSyntaxParser.VarId, 0)

        def vfrStorageVarId(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStorageVarIdContext,0)


        def QuestionId(self):
            return self.getToken(VfrSyntaxParser.QuestionId, 0)

        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrQuestionBaseInfo

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrQuestionBaseInfo" ):
                return visitor.visitVfrQuestionBaseInfo(self)
            else:
                return visitor.visitChildren(self)




    def vfrQuestionBaseInfo(self, OpObj, QType):

        localctx = VfrSyntaxParser.VfrQuestionBaseInfoContext(self, self._ctx, self.state, OpObj, QType)
        self.enterRule(localctx, 80, self.RULE_vfrQuestionBaseInfo)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 857
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.Name:
                self.state = 853
                self.match(VfrSyntaxParser.Name)
                self.state = 854
                self.match(VfrSyntaxParser.T__8)
                self.state = 855
                self.match(VfrSyntaxParser.StringIdentifier)
                self.state = 856
                self.match(VfrSyntaxParser.T__3)


            self.state = 864
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.VarId:
                self.state = 859
                self.match(VfrSyntaxParser.VarId)
                self.state = 860
                self.match(VfrSyntaxParser.T__8)
                self.state = 861
                self.vfrStorageVarId(localctx.BaseInfo, localctx.CheckFlag)
                self.state = 862
                self.match(VfrSyntaxParser.T__3)


            self.state = 870
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.QuestionId:
                self.state = 866
                self.match(VfrSyntaxParser.QuestionId)
                self.state = 867
                self.match(VfrSyntaxParser.T__8)
                self.state = 868
                self.match(VfrSyntaxParser.Number)
                self.state = 869
                self.match(VfrSyntaxParser.T__3)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuestionheaderFlagsFieldContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.QHFlag = 0

        def ReadOnlyFlag(self):
            return self.getToken(VfrSyntaxParser.ReadOnlyFlag, 0)

        def InteractiveFlag(self):
            return self.getToken(VfrSyntaxParser.InteractiveFlag, 0)

        def ResetRequiredFlag(self):
            return self.getToken(VfrSyntaxParser.ResetRequiredFlag, 0)

        def RestStyleFlag(self):
            return self.getToken(VfrSyntaxParser.RestStyleFlag, 0)

        def ReconnectRequiredFlag(self):
            return self.getToken(VfrSyntaxParser.ReconnectRequiredFlag, 0)

        def OptionOnlyFlag(self):
            return self.getToken(VfrSyntaxParser.OptionOnlyFlag, 0)

        def NVAccessFlag(self):
            return self.getToken(VfrSyntaxParser.NVAccessFlag, 0)

        def LateCheckFlag(self):
            return self.getToken(VfrSyntaxParser.LateCheckFlag, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_questionheaderFlagsField

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuestionheaderFlagsField" ):
                return visitor.visitQuestionheaderFlagsField(self)
            else:
                return visitor.visitChildren(self)




    def questionheaderFlagsField(self):

        localctx = VfrSyntaxParser.QuestionheaderFlagsFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_questionheaderFlagsField)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 872
            _la = self._input.LA(1)
            if not(((((_la - 179)) & ~0x3f) == 0 and ((1 << (_la - 179)) & ((1 << (VfrSyntaxParser.InteractiveFlag - 179)) | (1 << (VfrSyntaxParser.NVAccessFlag - 179)) | (1 << (VfrSyntaxParser.ResetRequiredFlag - 179)) | (1 << (VfrSyntaxParser.ReconnectRequiredFlag - 179)) | (1 << (VfrSyntaxParser.LateCheckFlag - 179)) | (1 << (VfrSyntaxParser.ReadOnlyFlag - 179)) | (1 << (VfrSyntaxParser.OptionOnlyFlag - 179)) | (1 << (VfrSyntaxParser.RestStyleFlag - 179)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStorageVarIdContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1, BaseInfo=None, CheckFlag=None):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.BaseInfo = None
            self.CheckFlag = None
            self.VarIdStr = ''
            self.BaseInfo = BaseInfo
            self.CheckFlag = CheckFlag


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStorageVarId

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)
            self.BaseInfo = ctx.BaseInfo
            self.CheckFlag = ctx.CheckFlag
            self.VarIdStr = ctx.VarIdStr



    class VfrStorageVarIdRule1Context(VfrStorageVarIdContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VfrSyntaxParser.VfrStorageVarIdContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def StringIdentifier(self):
            return self.getToken(VfrSyntaxParser.StringIdentifier, 0)
        def OpenBracket(self):
            return self.getToken(VfrSyntaxParser.OpenBracket, 0)
        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)
        def CloseBracket(self):
            return self.getToken(VfrSyntaxParser.CloseBracket, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStorageVarIdRule1" ):
                return visitor.visitVfrStorageVarIdRule1(self)
            else:
                return visitor.visitChildren(self)


    class VfrStorageVarIdRule2Context(VfrStorageVarIdContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a VfrSyntaxParser.VfrStorageVarIdContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def StringIdentifier(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.StringIdentifier)
            else:
                return self.getToken(VfrSyntaxParser.StringIdentifier, i)
        def Dot(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Dot)
            else:
                return self.getToken(VfrSyntaxParser.Dot, i)
        def OpenBracket(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.OpenBracket)
            else:
                return self.getToken(VfrSyntaxParser.OpenBracket, i)
        def Number(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Number)
            else:
                return self.getToken(VfrSyntaxParser.Number, i)
        def CloseBracket(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.CloseBracket)
            else:
                return self.getToken(VfrSyntaxParser.CloseBracket, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStorageVarIdRule2" ):
                return visitor.visitVfrStorageVarIdRule2(self)
            else:
                return visitor.visitChildren(self)



    def vfrStorageVarId(self, BaseInfo, CheckFlag):

        localctx = VfrSyntaxParser.VfrStorageVarIdContext(self, self._ctx, self.state, BaseInfo, CheckFlag)
        self.enterRule(localctx, 84, self.RULE_vfrStorageVarId)
        self._la = 0 # Token type
        try:
            self.state = 891
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
            if la_ == 1:
                localctx = VfrSyntaxParser.VfrStorageVarIdRule1Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 874
                self.match(VfrSyntaxParser.StringIdentifier)
                self.state = 875
                self.match(VfrSyntaxParser.OpenBracket)
                self.state = 876
                self.match(VfrSyntaxParser.Number)
                self.state = 877
                self.match(VfrSyntaxParser.CloseBracket)
                pass

            elif la_ == 2:
                localctx = VfrSyntaxParser.VfrStorageVarIdRule2Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 878
                self.match(VfrSyntaxParser.StringIdentifier)
                self.state = 888
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==VfrSyntaxParser.Dot:
                    self.state = 879
                    self.match(VfrSyntaxParser.Dot)
                    self.state = 880
                    self.match(VfrSyntaxParser.StringIdentifier)
                    self.state = 884
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VfrSyntaxParser.OpenBracket:
                        self.state = 881
                        self.match(VfrSyntaxParser.OpenBracket)
                        self.state = 882
                        self.match(VfrSyntaxParser.Number)
                        self.state = 883
                        self.match(VfrSyntaxParser.CloseBracket)


                    self.state = 890
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrConstantValueFieldContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Number(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Number)
            else:
                return self.getToken(VfrSyntaxParser.Number, i)

        def OpenParen(self):
            return self.getToken(VfrSyntaxParser.OpenParen, 0)

        def CloseParen(self):
            return self.getToken(VfrSyntaxParser.CloseParen, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrConstantValueField

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrConstantValueField" ):
                return visitor.visitVfrConstantValueField(self)
            else:
                return visitor.visitChildren(self)




    def vfrConstantValueField(self):

        localctx = VfrSyntaxParser.VfrConstantValueFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_vfrConstantValueField)
        self._la = 0 # Token type
        try:
            self.state = 923
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 893
                self.match(VfrSyntaxParser.Number)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 894
                self.match(VfrSyntaxParser.T__11)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 895
                self.match(VfrSyntaxParser.T__12)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 896
                self.match(VfrSyntaxParser.T__13)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 897
                self.match(VfrSyntaxParser.T__14)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 898
                self.match(VfrSyntaxParser.T__15)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 899
                self.match(VfrSyntaxParser.Number)
                self.state = 900
                self.match(VfrSyntaxParser.T__7)
                self.state = 901
                self.match(VfrSyntaxParser.Number)
                self.state = 902
                self.match(VfrSyntaxParser.T__7)
                self.state = 903
                self.match(VfrSyntaxParser.Number)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 904
                self.match(VfrSyntaxParser.Number)
                self.state = 905
                self.match(VfrSyntaxParser.T__16)
                self.state = 906
                self.match(VfrSyntaxParser.Number)
                self.state = 907
                self.match(VfrSyntaxParser.T__16)
                self.state = 908
                self.match(VfrSyntaxParser.Number)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 909
                self.match(VfrSyntaxParser.T__9)
                self.state = 910
                self.match(VfrSyntaxParser.OpenParen)
                self.state = 911
                self.match(VfrSyntaxParser.Number)
                self.state = 912
                self.match(VfrSyntaxParser.CloseParen)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 921
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VfrSyntaxParser.Number:
                    self.state = 913
                    self.match(VfrSyntaxParser.Number)
                    self.state = 918
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,55,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 914
                            self.match(VfrSyntaxParser.T__3)
                            self.state = 915
                            self.match(VfrSyntaxParser.Number) 
                        self.state = 920
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,55,self._ctx)



                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrImageTagContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.IObj = CIfrImage()

        def Image(self):
            return self.getToken(VfrSyntaxParser.Image, 0)

        def OpenParen(self):
            return self.getToken(VfrSyntaxParser.OpenParen, 0)

        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def CloseParen(self):
            return self.getToken(VfrSyntaxParser.CloseParen, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrImageTag

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrImageTag" ):
                return visitor.visitVfrImageTag(self)
            else:
                return visitor.visitChildren(self)




    def vfrImageTag(self):

        localctx = VfrSyntaxParser.VfrImageTagContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_vfrImageTag)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 925
            self.match(VfrSyntaxParser.Image)
            self.state = 926
            self.match(VfrSyntaxParser.T__8)
            self.state = 927
            self.match(VfrSyntaxParser.T__17)
            self.state = 928
            self.match(VfrSyntaxParser.OpenParen)
            self.state = 929
            self.match(VfrSyntaxParser.Number)
            self.state = 930
            self.match(VfrSyntaxParser.CloseParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrLockedTagContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.LObj = CIfrLocked()

        def Locked(self):
            return self.getToken(VfrSyntaxParser.Locked, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrLockedTag

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrLockedTag" ):
                return visitor.visitVfrLockedTag(self)
            else:
                return visitor.visitChildren(self)




    def vfrLockedTag(self):

        localctx = VfrSyntaxParser.VfrLockedTagContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_vfrLockedTag)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 932
            self.match(VfrSyntaxParser.Locked)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementStatTagContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vfrImageTag(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrImageTagContext,0)


        def vfrLockedTag(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrLockedTagContext,0)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementStatTag

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementStatTag" ):
                return visitor.visitVfrStatementStatTag(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementStatTag(self):

        localctx = VfrSyntaxParser.VfrStatementStatTagContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_vfrStatementStatTag)
        try:
            self.state = 936
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VfrSyntaxParser.Image]:
                self.enterOuterAlt(localctx, 1)
                self.state = 934
                self.vfrImageTag()
                pass
            elif token in [VfrSyntaxParser.Locked]:
                self.enterOuterAlt(localctx, 2)
                self.state = 935
                self.vfrLockedTag()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementStatTagListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vfrStatementStatTag(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrStatementStatTagContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementStatTagContext,i)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementStatTagList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementStatTagList" ):
                return visitor.visitVfrStatementStatTagList(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementStatTagList(self):

        localctx = VfrSyntaxParser.VfrStatementStatTagListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_vfrStatementStatTagList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 938
            self.vfrStatementStatTag()
            self.state = 943
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,59,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 939
                    self.match(VfrSyntaxParser.T__3)
                    self.state = 940
                    self.vfrStatementStatTag() 
                self.state = 945
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,59,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrFormDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.FObj = CIfrForm()

        def Form(self):
            return self.getToken(VfrSyntaxParser.Form, 0)

        def FormId(self):
            return self.getToken(VfrSyntaxParser.FormId, 0)

        def Number(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Number)
            else:
                return self.getToken(VfrSyntaxParser.Number, i)

        def Title(self):
            return self.getToken(VfrSyntaxParser.Title, 0)

        def OpenParen(self):
            return self.getToken(VfrSyntaxParser.OpenParen, 0)

        def CloseParen(self):
            return self.getToken(VfrSyntaxParser.CloseParen, 0)

        def EndForm(self):
            return self.getToken(VfrSyntaxParser.EndForm, 0)

        def vfrStatementImage(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrStatementImageContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementImageContext,i)


        def vfrStatementLocked(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrStatementLockedContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementLockedContext,i)


        def vfrStatementRules(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrStatementRulesContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementRulesContext,i)


        def vfrStatementDefault(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrStatementDefaultContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementDefaultContext,i)


        def vfrStatementStat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrStatementStatContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementStatContext,i)


        def vfrStatementQuestions(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrStatementQuestionsContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementQuestionsContext,i)


        def vfrStatementConditional(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrStatementConditionalContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementConditionalContext,i)


        def vfrStatementLabel(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrStatementLabelContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementLabelContext,i)


        def vfrStatementBanner(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrStatementBannerContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementBannerContext,i)


        def vfrStatementExtension(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrStatementExtensionContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementExtensionContext,i)


        def vfrStatementModal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrStatementModalContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementModalContext,i)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrFormDefinition

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrFormDefinition" ):
                return visitor.visitVfrFormDefinition(self)
            else:
                return visitor.visitChildren(self)




    def vfrFormDefinition(self):

        localctx = VfrSyntaxParser.VfrFormDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_vfrFormDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 946
            self.match(VfrSyntaxParser.Form)
            self.state = 947
            self.match(VfrSyntaxParser.FormId)
            self.state = 948
            self.match(VfrSyntaxParser.T__8)
            self.state = 949
            self.match(VfrSyntaxParser.Number)
            self.state = 950
            self.match(VfrSyntaxParser.T__3)
            self.state = 951
            self.match(VfrSyntaxParser.Title)
            self.state = 952
            self.match(VfrSyntaxParser.T__8)
            self.state = 953
            self.match(VfrSyntaxParser.T__9)
            self.state = 954
            self.match(VfrSyntaxParser.OpenParen)
            self.state = 955
            self.match(VfrSyntaxParser.Number)
            self.state = 956
            self.match(VfrSyntaxParser.CloseParen)
            self.state = 957
            self.match(VfrSyntaxParser.T__6)
            self.state = 971
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & ((1 << (VfrSyntaxParser.OneOf - 108)) | (1 << (VfrSyntaxParser.OrderedList - 108)) | (1 << (VfrSyntaxParser.Subtitle - 108)) | (1 << (VfrSyntaxParser.Text - 108)) | (1 << (VfrSyntaxParser.Date - 108)) | (1 << (VfrSyntaxParser.Time - 108)) | (1 << (VfrSyntaxParser.GrayOutIf - 108)) | (1 << (VfrSyntaxParser.Label - 108)) | (1 << (VfrSyntaxParser.CheckBox - 108)) | (1 << (VfrSyntaxParser.Numeric - 108)) | (1 << (VfrSyntaxParser.Default - 108)) | (1 << (VfrSyntaxParser.Password - 108)) | (1 << (VfrSyntaxParser.String - 108)) | (1 << (VfrSyntaxParser.SuppressIf - 108)) | (1 << (VfrSyntaxParser.DisableIf - 108)) | (1 << (VfrSyntaxParser.Goto - 108)))) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & ((1 << (VfrSyntaxParser.Banner - 194)) | (1 << (VfrSyntaxParser.Image - 194)) | (1 << (VfrSyntaxParser.Locked - 194)) | (1 << (VfrSyntaxParser.Rule - 194)) | (1 << (VfrSyntaxParser.ResetButton - 194)) | (1 << (VfrSyntaxParser.Action - 194)) | (1 << (VfrSyntaxParser.GuidOp - 194)) | (1 << (VfrSyntaxParser.Modal - 194)))) != 0):
                self.state = 969
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VfrSyntaxParser.Image]:
                    self.state = 958
                    self.vfrStatementImage()
                    pass
                elif token in [VfrSyntaxParser.Locked]:
                    self.state = 959
                    self.vfrStatementLocked()
                    pass
                elif token in [VfrSyntaxParser.Rule]:
                    self.state = 960
                    self.vfrStatementRules()
                    pass
                elif token in [VfrSyntaxParser.Default]:
                    self.state = 961
                    self.vfrStatementDefault()
                    pass
                elif token in [VfrSyntaxParser.Subtitle, VfrSyntaxParser.Text, VfrSyntaxParser.Goto, VfrSyntaxParser.ResetButton]:
                    self.state = 962
                    self.vfrStatementStat()
                    pass
                elif token in [VfrSyntaxParser.OneOf, VfrSyntaxParser.OrderedList, VfrSyntaxParser.Date, VfrSyntaxParser.Time, VfrSyntaxParser.CheckBox, VfrSyntaxParser.Numeric, VfrSyntaxParser.Password, VfrSyntaxParser.String, VfrSyntaxParser.Action]:
                    self.state = 963
                    self.vfrStatementQuestions()
                    pass
                elif token in [VfrSyntaxParser.GrayOutIf, VfrSyntaxParser.SuppressIf, VfrSyntaxParser.DisableIf]:
                    self.state = 964
                    self.vfrStatementConditional()
                    pass
                elif token in [VfrSyntaxParser.Label]:
                    self.state = 965
                    self.vfrStatementLabel()
                    pass
                elif token in [VfrSyntaxParser.Banner]:
                    self.state = 966
                    self.vfrStatementBanner()
                    pass
                elif token in [VfrSyntaxParser.GuidOp]:
                    self.state = 967
                    self.vfrStatementExtension()
                    pass
                elif token in [VfrSyntaxParser.Modal]:
                    self.state = 968
                    self.vfrStatementModal()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 973
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 974
            self.match(VfrSyntaxParser.EndForm)
            self.state = 975
            self.match(VfrSyntaxParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrFormMapDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FormMap(self):
            return self.getToken(VfrSyntaxParser.FormMap, 0)

        def FormId(self):
            return self.getToken(VfrSyntaxParser.FormId, 0)

        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def EndForm(self):
            return self.getToken(VfrSyntaxParser.EndForm, 0)

        def MapTitle(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.MapTitle)
            else:
                return self.getToken(VfrSyntaxParser.MapTitle, i)

        def getStringId(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.GetStringIdContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.GetStringIdContext,i)


        def MapGuid(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.MapGuid)
            else:
                return self.getToken(VfrSyntaxParser.MapGuid, i)

        def guidDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.GuidDefinitionContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.GuidDefinitionContext,i)


        def vfrStatementImage(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrStatementImageContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementImageContext,i)


        def vfrStatementLocked(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrStatementLockedContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementLockedContext,i)


        def vfrStatementRules(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrStatementRulesContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementRulesContext,i)


        def vfrStatementDefault(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrStatementDefaultContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementDefaultContext,i)


        def vfrStatementStat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrStatementStatContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementStatContext,i)


        def vfrStatementQuestions(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrStatementQuestionsContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementQuestionsContext,i)


        def vfrStatementConditional(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrStatementConditionalContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementConditionalContext,i)


        def vfrStatementLabel(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrStatementLabelContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementLabelContext,i)


        def vfrStatementBanner(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrStatementBannerContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementBannerContext,i)


        def vfrStatementExtension(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrStatementExtensionContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementExtensionContext,i)


        def vfrStatementModal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrStatementModalContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementModalContext,i)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrFormMapDefinition

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrFormMapDefinition" ):
                return visitor.visitVfrFormMapDefinition(self)
            else:
                return visitor.visitChildren(self)




    def vfrFormMapDefinition(self):

        localctx = VfrSyntaxParser.VfrFormMapDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_vfrFormMapDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 977
            self.match(VfrSyntaxParser.FormMap)
            self.state = 978
            self.match(VfrSyntaxParser.FormId)
            self.state = 979
            self.match(VfrSyntaxParser.T__8)
            self.state = 980
            self.match(VfrSyntaxParser.Number)
            self.state = 981
            self.match(VfrSyntaxParser.T__3)
            self.state = 993
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==VfrSyntaxParser.MapTitle:
                self.state = 982
                self.match(VfrSyntaxParser.MapTitle)
                self.state = 983
                self.match(VfrSyntaxParser.T__8)
                self.state = 984
                self.getStringId()
                self.state = 985
                self.match(VfrSyntaxParser.T__6)
                self.state = 986
                self.match(VfrSyntaxParser.MapGuid)
                self.state = 987
                self.match(VfrSyntaxParser.T__8)
                self.state = 988
                self.guidDefinition()
                self.state = 989
                self.match(VfrSyntaxParser.T__6)
                self.state = 995
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1009
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & ((1 << (VfrSyntaxParser.OneOf - 108)) | (1 << (VfrSyntaxParser.OrderedList - 108)) | (1 << (VfrSyntaxParser.Subtitle - 108)) | (1 << (VfrSyntaxParser.Text - 108)) | (1 << (VfrSyntaxParser.Date - 108)) | (1 << (VfrSyntaxParser.Time - 108)) | (1 << (VfrSyntaxParser.GrayOutIf - 108)) | (1 << (VfrSyntaxParser.Label - 108)) | (1 << (VfrSyntaxParser.CheckBox - 108)) | (1 << (VfrSyntaxParser.Numeric - 108)) | (1 << (VfrSyntaxParser.Default - 108)) | (1 << (VfrSyntaxParser.Password - 108)) | (1 << (VfrSyntaxParser.String - 108)) | (1 << (VfrSyntaxParser.SuppressIf - 108)) | (1 << (VfrSyntaxParser.DisableIf - 108)) | (1 << (VfrSyntaxParser.Goto - 108)))) != 0) or ((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & ((1 << (VfrSyntaxParser.Banner - 194)) | (1 << (VfrSyntaxParser.Image - 194)) | (1 << (VfrSyntaxParser.Locked - 194)) | (1 << (VfrSyntaxParser.Rule - 194)) | (1 << (VfrSyntaxParser.ResetButton - 194)) | (1 << (VfrSyntaxParser.Action - 194)) | (1 << (VfrSyntaxParser.GuidOp - 194)) | (1 << (VfrSyntaxParser.Modal - 194)))) != 0):
                self.state = 1007
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VfrSyntaxParser.Image]:
                    self.state = 996
                    self.vfrStatementImage()
                    pass
                elif token in [VfrSyntaxParser.Locked]:
                    self.state = 997
                    self.vfrStatementLocked()
                    pass
                elif token in [VfrSyntaxParser.Rule]:
                    self.state = 998
                    self.vfrStatementRules()
                    pass
                elif token in [VfrSyntaxParser.Default]:
                    self.state = 999
                    self.vfrStatementDefault()
                    pass
                elif token in [VfrSyntaxParser.Subtitle, VfrSyntaxParser.Text, VfrSyntaxParser.Goto, VfrSyntaxParser.ResetButton]:
                    self.state = 1000
                    self.vfrStatementStat()
                    pass
                elif token in [VfrSyntaxParser.OneOf, VfrSyntaxParser.OrderedList, VfrSyntaxParser.Date, VfrSyntaxParser.Time, VfrSyntaxParser.CheckBox, VfrSyntaxParser.Numeric, VfrSyntaxParser.Password, VfrSyntaxParser.String, VfrSyntaxParser.Action]:
                    self.state = 1001
                    self.vfrStatementQuestions()
                    pass
                elif token in [VfrSyntaxParser.GrayOutIf, VfrSyntaxParser.SuppressIf, VfrSyntaxParser.DisableIf]:
                    self.state = 1002
                    self.vfrStatementConditional()
                    pass
                elif token in [VfrSyntaxParser.Label]:
                    self.state = 1003
                    self.vfrStatementLabel()
                    pass
                elif token in [VfrSyntaxParser.Banner]:
                    self.state = 1004
                    self.vfrStatementBanner()
                    pass
                elif token in [VfrSyntaxParser.GuidOp]:
                    self.state = 1005
                    self.vfrStatementExtension()
                    pass
                elif token in [VfrSyntaxParser.Modal]:
                    self.state = 1006
                    self.vfrStatementModal()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1011
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1012
            self.match(VfrSyntaxParser.EndForm)
            self.state = 1013
            self.match(VfrSyntaxParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementImageContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vfrImageTag(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrImageTagContext,0)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementImage

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementImage" ):
                return visitor.visitVfrStatementImage(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementImage(self):

        localctx = VfrSyntaxParser.VfrStatementImageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_vfrStatementImage)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1015
            self.vfrImageTag()
            self.state = 1016
            self.match(VfrSyntaxParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementLockedContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vfrLockedTag(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrLockedTagContext,0)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementLocked

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementLocked" ):
                return visitor.visitVfrStatementLocked(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementLocked(self):

        localctx = VfrSyntaxParser.VfrStatementLockedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_vfrStatementLocked)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1018
            self.vfrLockedTag()
            self.state = 1019
            self.match(VfrSyntaxParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementRulesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.RObj = CIfrRule()

        def Rule(self):
            return self.getToken(VfrSyntaxParser.Rule, 0)

        def StringIdentifier(self):
            return self.getToken(VfrSyntaxParser.StringIdentifier, 0)

        def vfrStatementExpression(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementExpressionContext,0)


        def EndRule(self):
            return self.getToken(VfrSyntaxParser.EndRule, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementRules

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementRules" ):
                return visitor.visitVfrStatementRules(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementRules(self):

        localctx = VfrSyntaxParser.VfrStatementRulesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_vfrStatementRules)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1021
            self.match(VfrSyntaxParser.Rule)
            self.state = 1022
            self.match(VfrSyntaxParser.StringIdentifier)
            self.state = 1023
            self.match(VfrSyntaxParser.T__3)
            self.state = 1024
            self.vfrStatementExpression()
            self.state = 1025
            self.match(VfrSyntaxParser.EndRule)
            self.state = 1026
            self.match(VfrSyntaxParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementStatContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vfrStatementSubTitle(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementSubTitleContext,0)


        def vfrStatementStaticText(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementStaticTextContext,0)


        def vfrStatementCrossReference(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementCrossReferenceContext,0)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementStat

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementStat" ):
                return visitor.visitVfrStatementStat(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementStat(self):

        localctx = VfrSyntaxParser.VfrStatementStatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_vfrStatementStat)
        try:
            self.state = 1031
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VfrSyntaxParser.Subtitle]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1028
                self.vfrStatementSubTitle()
                pass
            elif token in [VfrSyntaxParser.Text]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1029
                self.vfrStatementStaticText()
                pass
            elif token in [VfrSyntaxParser.Goto, VfrSyntaxParser.ResetButton]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1030
                self.vfrStatementCrossReference()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementSubTitleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.OpObj = CIfrSubtitle()

        def Subtitle(self):
            return self.getToken(VfrSyntaxParser.Subtitle, 0)

        def Text(self):
            return self.getToken(VfrSyntaxParser.Text, 0)

        def OpenParen(self):
            return self.getToken(VfrSyntaxParser.OpenParen, 0)

        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def CloseParen(self):
            return self.getToken(VfrSyntaxParser.CloseParen, 0)

        def EndSubtitle(self):
            return self.getToken(VfrSyntaxParser.EndSubtitle, 0)

        def FLAGS(self):
            return self.getToken(VfrSyntaxParser.FLAGS, 0)

        def vfrSubtitleFlags(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrSubtitleFlagsContext,0)


        def vfrStatementStatTagList(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementStatTagListContext,0)


        def vfrStatementStat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrStatementStatContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementStatContext,i)


        def vfrStatementQuestions(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrStatementQuestionsContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementQuestionsContext,i)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementSubTitle

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementSubTitle" ):
                return visitor.visitVfrStatementSubTitle(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementSubTitle(self):

        localctx = VfrSyntaxParser.VfrStatementSubTitleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_vfrStatementSubTitle)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1033
            self.match(VfrSyntaxParser.Subtitle)
            self.state = 1034
            self.match(VfrSyntaxParser.Text)
            self.state = 1035
            self.match(VfrSyntaxParser.T__8)
            self.state = 1036
            self.match(VfrSyntaxParser.T__9)
            self.state = 1037
            self.match(VfrSyntaxParser.OpenParen)
            self.state = 1038
            self.match(VfrSyntaxParser.Number)
            self.state = 1039
            self.match(VfrSyntaxParser.CloseParen)
            self.state = 1044
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
            if la_ == 1:
                self.state = 1040
                self.match(VfrSyntaxParser.T__3)
                self.state = 1041
                self.match(VfrSyntaxParser.FLAGS)
                self.state = 1042
                self.match(VfrSyntaxParser.T__8)
                self.state = 1043
                self.vfrSubtitleFlags()


            self.state = 1067
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
            if la_ == 1:
                self.state = 1048
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VfrSyntaxParser.T__3:
                    self.state = 1046
                    self.match(VfrSyntaxParser.T__3)
                    self.state = 1047
                    self.vfrStatementStatTagList()


                self.state = 1050
                self.match(VfrSyntaxParser.T__6)
                pass

            elif la_ == 2:
                self.state = 1053
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
                if la_ == 1:
                    self.state = 1051
                    self.match(VfrSyntaxParser.T__3)
                    self.state = 1052
                    self.vfrStatementStatTagList()


                self.state = 1063
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VfrSyntaxParser.T__3:
                    self.state = 1055
                    self.match(VfrSyntaxParser.T__3)
                    self.state = 1060
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while ((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & ((1 << (VfrSyntaxParser.OneOf - 108)) | (1 << (VfrSyntaxParser.OrderedList - 108)) | (1 << (VfrSyntaxParser.Subtitle - 108)) | (1 << (VfrSyntaxParser.Text - 108)) | (1 << (VfrSyntaxParser.Date - 108)) | (1 << (VfrSyntaxParser.Time - 108)) | (1 << (VfrSyntaxParser.CheckBox - 108)) | (1 << (VfrSyntaxParser.Numeric - 108)) | (1 << (VfrSyntaxParser.Password - 108)) | (1 << (VfrSyntaxParser.String - 108)) | (1 << (VfrSyntaxParser.Goto - 108)))) != 0) or _la==VfrSyntaxParser.ResetButton or _la==VfrSyntaxParser.Action:
                        self.state = 1058
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [VfrSyntaxParser.Subtitle, VfrSyntaxParser.Text, VfrSyntaxParser.Goto, VfrSyntaxParser.ResetButton]:
                            self.state = 1056
                            self.vfrStatementStat()
                            pass
                        elif token in [VfrSyntaxParser.OneOf, VfrSyntaxParser.OrderedList, VfrSyntaxParser.Date, VfrSyntaxParser.Time, VfrSyntaxParser.CheckBox, VfrSyntaxParser.Numeric, VfrSyntaxParser.Password, VfrSyntaxParser.String, VfrSyntaxParser.Action]:
                            self.state = 1057
                            self.vfrStatementQuestions()
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 1062
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1065
                self.match(VfrSyntaxParser.EndSubtitle)
                self.state = 1066
                self.match(VfrSyntaxParser.T__6)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrSubtitleFlagsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.SubFlags = 0

        def subtitleFlagsField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.SubtitleFlagsFieldContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.SubtitleFlagsFieldContext,i)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrSubtitleFlags

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrSubtitleFlags" ):
                return visitor.visitVfrSubtitleFlags(self)
            else:
                return visitor.visitChildren(self)




    def vfrSubtitleFlags(self):

        localctx = VfrSyntaxParser.VfrSubtitleFlagsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_vfrSubtitleFlags)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1069
            self.subtitleFlagsField()
            self.state = 1074
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==VfrSyntaxParser.T__10:
                self.state = 1070
                self.match(VfrSyntaxParser.T__10)
                self.state = 1071
                self.subtitleFlagsField()
                self.state = 1076
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubtitleFlagsFieldContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Flag = 0

        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_subtitleFlagsField

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubtitleFlagsField" ):
                return visitor.visitSubtitleFlagsField(self)
            else:
                return visitor.visitChildren(self)




    def subtitleFlagsField(self):

        localctx = VfrSyntaxParser.SubtitleFlagsFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_subtitleFlagsField)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1077
            _la = self._input.LA(1)
            if not(_la==VfrSyntaxParser.T__18 or _la==VfrSyntaxParser.Number):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementStaticTextContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Text(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Text)
            else:
                return self.getToken(VfrSyntaxParser.Text, i)

        def Help(self):
            return self.getToken(VfrSyntaxParser.Help, 0)

        def OpenParen(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.OpenParen)
            else:
                return self.getToken(VfrSyntaxParser.OpenParen, i)

        def Number(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Number)
            else:
                return self.getToken(VfrSyntaxParser.Number, i)

        def CloseParen(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.CloseParen)
            else:
                return self.getToken(VfrSyntaxParser.CloseParen, i)

        def FLAGS(self):
            return self.getToken(VfrSyntaxParser.FLAGS, 0)

        def staticTextFlagsField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.StaticTextFlagsFieldContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.StaticTextFlagsFieldContext,i)


        def Key(self):
            return self.getToken(VfrSyntaxParser.Key, 0)

        def vfrStatementStatTagList(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementStatTagListContext,0)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementStaticText

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementStaticText" ):
                return visitor.visitVfrStatementStaticText(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementStaticText(self):

        localctx = VfrSyntaxParser.VfrStatementStaticTextContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_vfrStatementStaticText)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1079
            self.match(VfrSyntaxParser.Text)
            self.state = 1080
            self.match(VfrSyntaxParser.Help)
            self.state = 1081
            self.match(VfrSyntaxParser.T__8)
            self.state = 1082
            self.match(VfrSyntaxParser.T__9)
            self.state = 1083
            self.match(VfrSyntaxParser.OpenParen)
            self.state = 1084
            self.match(VfrSyntaxParser.Number)
            self.state = 1085
            self.match(VfrSyntaxParser.CloseParen)
            self.state = 1086
            self.match(VfrSyntaxParser.T__3)
            self.state = 1087
            self.match(VfrSyntaxParser.Text)
            self.state = 1088
            self.match(VfrSyntaxParser.T__8)
            self.state = 1089
            self.match(VfrSyntaxParser.T__9)
            self.state = 1090
            self.match(VfrSyntaxParser.OpenParen)
            self.state = 1091
            self.match(VfrSyntaxParser.Number)
            self.state = 1092
            self.match(VfrSyntaxParser.CloseParen)
            self.state = 1100
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
            if la_ == 1:
                self.state = 1093
                self.match(VfrSyntaxParser.T__3)
                self.state = 1094
                self.match(VfrSyntaxParser.Text)
                self.state = 1095
                self.match(VfrSyntaxParser.T__8)
                self.state = 1096
                self.match(VfrSyntaxParser.T__9)
                self.state = 1097
                self.match(VfrSyntaxParser.OpenParen)
                self.state = 1098
                self.match(VfrSyntaxParser.Number)
                self.state = 1099
                self.match(VfrSyntaxParser.CloseParen)


            self.state = 1118
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
            if la_ == 1:
                self.state = 1102
                self.match(VfrSyntaxParser.T__3)
                self.state = 1103
                self.match(VfrSyntaxParser.FLAGS)
                self.state = 1104
                self.match(VfrSyntaxParser.T__8)
                self.state = 1105
                self.staticTextFlagsField()
                self.state = 1110
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==VfrSyntaxParser.T__10:
                    self.state = 1106
                    self.match(VfrSyntaxParser.T__10)
                    self.state = 1107
                    self.staticTextFlagsField()
                    self.state = 1112
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1113
                self.match(VfrSyntaxParser.T__3)
                self.state = 1114
                self.match(VfrSyntaxParser.Key)
                self.state = 1115
                self.match(VfrSyntaxParser.T__8)
                self.state = 1116
                self.match(VfrSyntaxParser.Number)


            self.state = 1122
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.T__3:
                self.state = 1120
                self.match(VfrSyntaxParser.T__3)
                self.state = 1121
                self.vfrStatementStatTagList()


            self.state = 1124
            self.match(VfrSyntaxParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StaticTextFlagsFieldContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Flag = 0
            self.Line = 0

        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def questionheaderFlagsField(self):
            return self.getTypedRuleContext(VfrSyntaxParser.QuestionheaderFlagsFieldContext,0)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_staticTextFlagsField

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStaticTextFlagsField" ):
                return visitor.visitStaticTextFlagsField(self)
            else:
                return visitor.visitChildren(self)




    def staticTextFlagsField(self):

        localctx = VfrSyntaxParser.StaticTextFlagsFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_staticTextFlagsField)
        try:
            self.state = 1128
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VfrSyntaxParser.Number]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1126
                self.match(VfrSyntaxParser.Number)
                pass
            elif token in [VfrSyntaxParser.InteractiveFlag, VfrSyntaxParser.NVAccessFlag, VfrSyntaxParser.ResetRequiredFlag, VfrSyntaxParser.ReconnectRequiredFlag, VfrSyntaxParser.LateCheckFlag, VfrSyntaxParser.ReadOnlyFlag, VfrSyntaxParser.OptionOnlyFlag, VfrSyntaxParser.RestStyleFlag]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1127
                self.questionheaderFlagsField()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementCrossReferenceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vfrStatementGoto(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementGotoContext,0)


        def vfrStatementResetButton(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementResetButtonContext,0)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementCrossReference

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementCrossReference" ):
                return visitor.visitVfrStatementCrossReference(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementCrossReference(self):

        localctx = VfrSyntaxParser.VfrStatementCrossReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_vfrStatementCrossReference)
        try:
            self.state = 1132
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VfrSyntaxParser.Goto]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1130
                self.vfrStatementGoto()
                pass
            elif token in [VfrSyntaxParser.ResetButton]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1131
                self.vfrStatementResetButton()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementGotoContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.OpObj = None
            self.OHObj = None
            self.QType = EFI_QUESION_TYPE.QUESTION_REF

        def Goto(self):
            return self.getToken(VfrSyntaxParser.Goto, 0)

        def vfrQuestionHeader(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrQuestionHeaderContext,0)


        def FLAGS(self):
            return self.getToken(VfrSyntaxParser.FLAGS, 0)

        def vfrGotoFlags(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrGotoFlagsContext,0)


        def Key(self):
            return self.getToken(VfrSyntaxParser.Key, 0)

        def Number(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Number)
            else:
                return self.getToken(VfrSyntaxParser.Number, i)

        def vfrStatementQuestionOptionList(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementQuestionOptionListContext,0)


        def DevicePath(self):
            return self.getToken(VfrSyntaxParser.DevicePath, 0)

        def OpenParen(self):
            return self.getToken(VfrSyntaxParser.OpenParen, 0)

        def CloseParen(self):
            return self.getToken(VfrSyntaxParser.CloseParen, 0)

        def FormSetGuid(self):
            return self.getToken(VfrSyntaxParser.FormSetGuid, 0)

        def guidDefinition(self):
            return self.getTypedRuleContext(VfrSyntaxParser.GuidDefinitionContext,0)


        def FormId(self):
            return self.getToken(VfrSyntaxParser.FormId, 0)

        def Question(self):
            return self.getToken(VfrSyntaxParser.Question, 0)

        def StringIdentifier(self):
            return self.getToken(VfrSyntaxParser.StringIdentifier, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementGoto

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementGoto" ):
                return visitor.visitVfrStatementGoto(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementGoto(self):

        localctx = VfrSyntaxParser.VfrStatementGotoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_vfrStatementGoto)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1134
            self.match(VfrSyntaxParser.Goto)
            self.state = 1182
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VfrSyntaxParser.DevicePath]:
                self.state = 1135
                self.match(VfrSyntaxParser.DevicePath)
                self.state = 1136
                self.match(VfrSyntaxParser.T__8)
                self.state = 1137
                self.match(VfrSyntaxParser.T__9)
                self.state = 1138
                self.match(VfrSyntaxParser.OpenParen)
                self.state = 1139
                self.match(VfrSyntaxParser.Number)
                self.state = 1140
                self.match(VfrSyntaxParser.CloseParen)
                self.state = 1141
                self.match(VfrSyntaxParser.T__3)
                self.state = 1142
                self.match(VfrSyntaxParser.FormSetGuid)
                self.state = 1143
                self.match(VfrSyntaxParser.T__8)
                self.state = 1144
                self.guidDefinition()
                self.state = 1145
                self.match(VfrSyntaxParser.T__3)
                self.state = 1146
                self.match(VfrSyntaxParser.FormId)
                self.state = 1147
                self.match(VfrSyntaxParser.T__8)
                self.state = 1148
                self.match(VfrSyntaxParser.Number)
                self.state = 1149
                self.match(VfrSyntaxParser.T__3)
                self.state = 1150
                self.match(VfrSyntaxParser.Question)
                self.state = 1151
                self.match(VfrSyntaxParser.T__8)
                self.state = 1152
                self.match(VfrSyntaxParser.Number)
                self.state = 1153
                self.match(VfrSyntaxParser.T__3)
                pass
            elif token in [VfrSyntaxParser.FormSetGuid]:
                self.state = 1155
                self.match(VfrSyntaxParser.FormSetGuid)
                self.state = 1156
                self.match(VfrSyntaxParser.T__8)
                self.state = 1157
                self.guidDefinition()
                self.state = 1158
                self.match(VfrSyntaxParser.T__3)
                self.state = 1159
                self.match(VfrSyntaxParser.FormId)
                self.state = 1160
                self.match(VfrSyntaxParser.T__8)
                self.state = 1161
                self.match(VfrSyntaxParser.Number)
                self.state = 1162
                self.match(VfrSyntaxParser.T__3)
                self.state = 1163
                self.match(VfrSyntaxParser.Question)
                self.state = 1164
                self.match(VfrSyntaxParser.T__8)
                self.state = 1165
                self.match(VfrSyntaxParser.Number)
                self.state = 1166
                self.match(VfrSyntaxParser.T__3)
                pass
            elif token in [VfrSyntaxParser.FormId]:
                self.state = 1168
                self.match(VfrSyntaxParser.FormId)
                self.state = 1169
                self.match(VfrSyntaxParser.T__8)
                self.state = 1170
                self.match(VfrSyntaxParser.Number)
                self.state = 1171
                self.match(VfrSyntaxParser.T__3)
                self.state = 1172
                self.match(VfrSyntaxParser.Question)
                self.state = 1173
                self.match(VfrSyntaxParser.T__8)
                self.state = 1178
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VfrSyntaxParser.StringIdentifier]:
                    self.state = 1174
                    self.match(VfrSyntaxParser.StringIdentifier)
                    self.state = 1175
                    self.match(VfrSyntaxParser.T__3)
                    pass
                elif token in [VfrSyntaxParser.Number]:
                    self.state = 1176
                    self.match(VfrSyntaxParser.Number)
                    self.state = 1177
                    self.match(VfrSyntaxParser.T__3)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [VfrSyntaxParser.Number]:
                self.state = 1180
                self.match(VfrSyntaxParser.Number)
                self.state = 1181
                self.match(VfrSyntaxParser.T__3)
                pass
            elif token in [VfrSyntaxParser.Prompt, VfrSyntaxParser.Name, VfrSyntaxParser.VarId, VfrSyntaxParser.QuestionId]:
                pass
            else:
                pass
            self.state = 1184
            self.vfrQuestionHeader(localctx.OpObj, localctx.QType)
            self.state = 1189
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
            if la_ == 1:
                self.state = 1185
                self.match(VfrSyntaxParser.T__3)
                self.state = 1186
                self.match(VfrSyntaxParser.FLAGS)
                self.state = 1187
                self.match(VfrSyntaxParser.T__8)
                self.state = 1188
                self.vfrGotoFlags(localctx.OpObj)


            self.state = 1195
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
            if la_ == 1:
                self.state = 1191
                self.match(VfrSyntaxParser.T__3)
                self.state = 1192
                self.match(VfrSyntaxParser.Key)
                self.state = 1193
                self.match(VfrSyntaxParser.T__8)
                self.state = 1194
                self.match(VfrSyntaxParser.Number)


            self.state = 1199
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.T__3:
                self.state = 1197
                self.match(VfrSyntaxParser.T__3)
                self.state = 1198
                self.vfrStatementQuestionOptionList()


            self.state = 1201
            self.match(VfrSyntaxParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrGotoFlagsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1, Obj=None):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Obj = None
            self.GotoFlags = 0
            self.Obj = Obj

        def gotoFlagsField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.GotoFlagsFieldContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.GotoFlagsFieldContext,i)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrGotoFlags

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrGotoFlags" ):
                return visitor.visitVfrGotoFlags(self)
            else:
                return visitor.visitChildren(self)




    def vfrGotoFlags(self, Obj):

        localctx = VfrSyntaxParser.VfrGotoFlagsContext(self, self._ctx, self.state, Obj)
        self.enterRule(localctx, 122, self.RULE_vfrGotoFlags)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1203
            self.gotoFlagsField()
            self.state = 1208
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==VfrSyntaxParser.T__10:
                self.state = 1204
                self.match(VfrSyntaxParser.T__10)
                self.state = 1205
                self.gotoFlagsField()
                self.state = 1210
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GotoFlagsFieldContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.Flag = 0

        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def questionheaderFlagsField(self):
            return self.getTypedRuleContext(VfrSyntaxParser.QuestionheaderFlagsFieldContext,0)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_gotoFlagsField

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGotoFlagsField" ):
                return visitor.visitGotoFlagsField(self)
            else:
                return visitor.visitChildren(self)




    def gotoFlagsField(self):

        localctx = VfrSyntaxParser.GotoFlagsFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_gotoFlagsField)
        try:
            self.state = 1213
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VfrSyntaxParser.Number]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1211
                self.match(VfrSyntaxParser.Number)
                pass
            elif token in [VfrSyntaxParser.InteractiveFlag, VfrSyntaxParser.NVAccessFlag, VfrSyntaxParser.ResetRequiredFlag, VfrSyntaxParser.ReconnectRequiredFlag, VfrSyntaxParser.LateCheckFlag, VfrSyntaxParser.ReadOnlyFlag, VfrSyntaxParser.OptionOnlyFlag, VfrSyntaxParser.RestStyleFlag]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1212
                self.questionheaderFlagsField()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementResetButtonContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.OpObj = CIfrResetButton()

        def ResetButton(self):
            return self.getToken(VfrSyntaxParser.ResetButton, 0)

        def DefaultStore(self):
            return self.getToken(VfrSyntaxParser.DefaultStore, 0)

        def StringIdentifier(self):
            return self.getToken(VfrSyntaxParser.StringIdentifier, 0)

        def vfrStatementHeader(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementHeaderContext,0)


        def EndResetButton(self):
            return self.getToken(VfrSyntaxParser.EndResetButton, 0)

        def vfrStatementStatTagList(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementStatTagListContext,0)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementResetButton

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementResetButton" ):
                return visitor.visitVfrStatementResetButton(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementResetButton(self):

        localctx = VfrSyntaxParser.VfrStatementResetButtonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_vfrStatementResetButton)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1215
            self.match(VfrSyntaxParser.ResetButton)
            self.state = 1216
            self.match(VfrSyntaxParser.DefaultStore)
            self.state = 1217
            self.match(VfrSyntaxParser.T__8)
            self.state = 1218
            self.match(VfrSyntaxParser.StringIdentifier)
            self.state = 1219
            self.match(VfrSyntaxParser.T__3)
            self.state = 1220
            self.vfrStatementHeader(localctx.OpObj)
            self.state = 1221
            self.match(VfrSyntaxParser.T__3)
            self.state = 1225
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.Image or _la==VfrSyntaxParser.Locked:
                self.state = 1222
                self.vfrStatementStatTagList()
                self.state = 1223
                self.match(VfrSyntaxParser.T__3)


            self.state = 1227
            self.match(VfrSyntaxParser.EndResetButton)
            self.state = 1228
            self.match(VfrSyntaxParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementQuestionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vfrStatementBooleanType(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementBooleanTypeContext,0)


        def vfrStatementDate(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementDateContext,0)


        def vfrStatementNumericType(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementNumericTypeContext,0)


        def vfrStatementStringType(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementStringTypeContext,0)


        def vfrStatementOrderedList(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementOrderedListContext,0)


        def vfrStatementTime(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementTimeContext,0)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementQuestions

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementQuestions" ):
                return visitor.visitVfrStatementQuestions(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementQuestions(self):

        localctx = VfrSyntaxParser.VfrStatementQuestionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_vfrStatementQuestions)
        try:
            self.state = 1236
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VfrSyntaxParser.CheckBox, VfrSyntaxParser.Action]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1230
                self.vfrStatementBooleanType()
                pass
            elif token in [VfrSyntaxParser.Date]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1231
                self.vfrStatementDate()
                pass
            elif token in [VfrSyntaxParser.OneOf, VfrSyntaxParser.Numeric]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1232
                self.vfrStatementNumericType()
                pass
            elif token in [VfrSyntaxParser.Password, VfrSyntaxParser.String]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1233
                self.vfrStatementStringType()
                pass
            elif token in [VfrSyntaxParser.OrderedList]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1234
                self.vfrStatementOrderedList()
                pass
            elif token in [VfrSyntaxParser.Time]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1235
                self.vfrStatementTime()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementQuestionTagContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vfrStatementStatTag(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementStatTagContext,0)


        def vfrStatementInconsistentIf(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementInconsistentIfContext,0)


        def vfrStatementNoSubmitIf(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementNoSubmitIfContext,0)


        def vfrStatementDisableIfQuest(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementDisableIfQuestContext,0)


        def vfrStatementRefresh(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementRefreshContext,0)


        def vfrStatementVarstoreDevice(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementVarstoreDeviceContext,0)


        def vfrStatementExtension(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementExtensionContext,0)


        def vfrStatementRefreshEvent(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementRefreshEventContext,0)


        def vfrStatementWarningIf(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementWarningIfContext,0)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementQuestionTag

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementQuestionTag" ):
                return visitor.visitVfrStatementQuestionTag(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementQuestionTag(self):

        localctx = VfrSyntaxParser.VfrStatementQuestionTagContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_vfrStatementQuestionTag)
        try:
            self.state = 1249
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VfrSyntaxParser.Image, VfrSyntaxParser.Locked]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1238
                self.vfrStatementStatTag()
                self.state = 1239
                self.match(VfrSyntaxParser.T__3)
                pass
            elif token in [VfrSyntaxParser.InconsistentIf]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1241
                self.vfrStatementInconsistentIf()
                pass
            elif token in [VfrSyntaxParser.NoSubmitIf]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1242
                self.vfrStatementNoSubmitIf()
                pass
            elif token in [VfrSyntaxParser.DisableIf]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1243
                self.vfrStatementDisableIfQuest()
                pass
            elif token in [VfrSyntaxParser.Refresh]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1244
                self.vfrStatementRefresh()
                pass
            elif token in [VfrSyntaxParser.VarstoreDevice]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1245
                self.vfrStatementVarstoreDevice()
                pass
            elif token in [VfrSyntaxParser.GuidOp]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1246
                self.vfrStatementExtension()
                pass
            elif token in [VfrSyntaxParser.T__19]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1247
                self.vfrStatementRefreshEvent()
                pass
            elif token in [VfrSyntaxParser.WarningIf]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1248
                self.vfrStatementWarningIf()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementInconsistentIfContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def InconsistentIf(self):
            return self.getToken(VfrSyntaxParser.InconsistentIf, 0)

        def Prompt(self):
            return self.getToken(VfrSyntaxParser.Prompt, 0)

        def getStringId(self):
            return self.getTypedRuleContext(VfrSyntaxParser.GetStringIdContext,0)


        def vfrStatementExpression(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementExpressionContext,0)


        def EndIf(self):
            return self.getToken(VfrSyntaxParser.EndIf, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementInconsistentIf

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementInconsistentIf" ):
                return visitor.visitVfrStatementInconsistentIf(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementInconsistentIf(self):

        localctx = VfrSyntaxParser.VfrStatementInconsistentIfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_vfrStatementInconsistentIf)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1251
            self.match(VfrSyntaxParser.InconsistentIf)
            self.state = 1252
            self.match(VfrSyntaxParser.Prompt)
            self.state = 1253
            self.match(VfrSyntaxParser.T__8)
            self.state = 1254
            self.getStringId()
            self.state = 1255
            self.match(VfrSyntaxParser.T__3)
            self.state = 1256
            self.vfrStatementExpression()
            self.state = 1257
            self.match(VfrSyntaxParser.EndIf)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementNoSubmitIfContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NoSubmitIf(self):
            return self.getToken(VfrSyntaxParser.NoSubmitIf, 0)

        def Prompt(self):
            return self.getToken(VfrSyntaxParser.Prompt, 0)

        def getStringId(self):
            return self.getTypedRuleContext(VfrSyntaxParser.GetStringIdContext,0)


        def vfrStatementExpression(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementExpressionContext,0)


        def EndIf(self):
            return self.getToken(VfrSyntaxParser.EndIf, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementNoSubmitIf

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementNoSubmitIf" ):
                return visitor.visitVfrStatementNoSubmitIf(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementNoSubmitIf(self):

        localctx = VfrSyntaxParser.VfrStatementNoSubmitIfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_vfrStatementNoSubmitIf)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1259
            self.match(VfrSyntaxParser.NoSubmitIf)
            self.state = 1260
            self.match(VfrSyntaxParser.Prompt)
            self.state = 1261
            self.match(VfrSyntaxParser.T__8)
            self.state = 1262
            self.getStringId()
            self.state = 1263
            self.match(VfrSyntaxParser.T__3)
            self.state = 1264
            self.vfrStatementExpression()
            self.state = 1265
            self.match(VfrSyntaxParser.EndIf)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementDisableIfQuestContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DisableIf(self):
            return self.getToken(VfrSyntaxParser.DisableIf, 0)

        def vfrStatementExpression(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementExpressionContext,0)


        def vfrStatementQuestionOptionList(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementQuestionOptionListContext,0)


        def EndIf(self):
            return self.getToken(VfrSyntaxParser.EndIf, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementDisableIfQuest

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementDisableIfQuest" ):
                return visitor.visitVfrStatementDisableIfQuest(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementDisableIfQuest(self):

        localctx = VfrSyntaxParser.VfrStatementDisableIfQuestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_vfrStatementDisableIfQuest)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1267
            self.match(VfrSyntaxParser.DisableIf)
            self.state = 1268
            self.vfrStatementExpression()
            self.state = 1269
            self.match(VfrSyntaxParser.T__6)
            self.state = 1270
            self.vfrStatementQuestionOptionList()
            self.state = 1271
            self.match(VfrSyntaxParser.EndIf)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementRefreshContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Refresh(self):
            return self.getToken(VfrSyntaxParser.Refresh, 0)

        def Interval(self):
            return self.getToken(VfrSyntaxParser.Interval, 0)

        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementRefresh

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementRefresh" ):
                return visitor.visitVfrStatementRefresh(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementRefresh(self):

        localctx = VfrSyntaxParser.VfrStatementRefreshContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_vfrStatementRefresh)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1273
            self.match(VfrSyntaxParser.Refresh)
            self.state = 1274
            self.match(VfrSyntaxParser.Interval)
            self.state = 1275
            self.match(VfrSyntaxParser.T__8)
            self.state = 1276
            self.match(VfrSyntaxParser.Number)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementVarstoreDeviceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VarstoreDevice(self):
            return self.getToken(VfrSyntaxParser.VarstoreDevice, 0)

        def getStringId(self):
            return self.getTypedRuleContext(VfrSyntaxParser.GetStringIdContext,0)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementVarstoreDevice

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementVarstoreDevice" ):
                return visitor.visitVfrStatementVarstoreDevice(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementVarstoreDevice(self):

        localctx = VfrSyntaxParser.VfrStatementVarstoreDeviceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_vfrStatementVarstoreDevice)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1278
            self.match(VfrSyntaxParser.VarstoreDevice)
            self.state = 1279
            self.match(VfrSyntaxParser.T__8)
            self.state = 1280
            self.getStringId()
            self.state = 1281
            self.match(VfrSyntaxParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementRefreshEventContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def guidDefinition(self):
            return self.getTypedRuleContext(VfrSyntaxParser.GuidDefinitionContext,0)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementRefreshEvent

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementRefreshEvent" ):
                return visitor.visitVfrStatementRefreshEvent(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementRefreshEvent(self):

        localctx = VfrSyntaxParser.VfrStatementRefreshEventContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_vfrStatementRefreshEvent)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1283
            self.match(VfrSyntaxParser.T__19)
            self.state = 1284
            self.match(VfrSyntaxParser.T__8)
            self.state = 1285
            self.guidDefinition()
            self.state = 1286
            self.match(VfrSyntaxParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementWarningIfContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WarningIf(self):
            return self.getToken(VfrSyntaxParser.WarningIf, 0)

        def Prompt(self):
            return self.getToken(VfrSyntaxParser.Prompt, 0)

        def getStringId(self):
            return self.getTypedRuleContext(VfrSyntaxParser.GetStringIdContext,0)


        def vfrStatementExpression(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementExpressionContext,0)


        def EndIf(self):
            return self.getToken(VfrSyntaxParser.EndIf, 0)

        def Timeout(self):
            return self.getToken(VfrSyntaxParser.Timeout, 0)

        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementWarningIf

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementWarningIf" ):
                return visitor.visitVfrStatementWarningIf(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementWarningIf(self):

        localctx = VfrSyntaxParser.VfrStatementWarningIfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_vfrStatementWarningIf)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1288
            self.match(VfrSyntaxParser.WarningIf)
            self.state = 1289
            self.match(VfrSyntaxParser.Prompt)
            self.state = 1290
            self.match(VfrSyntaxParser.T__8)
            self.state = 1291
            self.getStringId()
            self.state = 1292
            self.match(VfrSyntaxParser.T__3)
            self.state = 1297
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.Timeout:
                self.state = 1293
                self.match(VfrSyntaxParser.Timeout)
                self.state = 1294
                self.match(VfrSyntaxParser.T__8)
                self.state = 1295
                self.match(VfrSyntaxParser.Number)
                self.state = 1296
                self.match(VfrSyntaxParser.T__3)


            self.state = 1299
            self.vfrStatementExpression()
            self.state = 1300
            self.match(VfrSyntaxParser.EndIf)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementQuestionTagListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vfrStatementQuestionTag(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrStatementQuestionTagContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementQuestionTagContext,i)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementQuestionTagList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementQuestionTagList" ):
                return visitor.visitVfrStatementQuestionTagList(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementQuestionTagList(self):

        localctx = VfrSyntaxParser.VfrStatementQuestionTagListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_vfrStatementQuestionTagList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1305
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==VfrSyntaxParser.T__19 or ((((_la - 168)) & ~0x3f) == 0 and ((1 << (_la - 168)) & ((1 << (VfrSyntaxParser.DisableIf - 168)) | (1 << (VfrSyntaxParser.InconsistentIf - 168)) | (1 << (VfrSyntaxParser.WarningIf - 168)) | (1 << (VfrSyntaxParser.NoSubmitIf - 168)) | (1 << (VfrSyntaxParser.Image - 168)) | (1 << (VfrSyntaxParser.Locked - 168)) | (1 << (VfrSyntaxParser.Refresh - 168)) | (1 << (VfrSyntaxParser.VarstoreDevice - 168)) | (1 << (VfrSyntaxParser.GuidOp - 168)))) != 0):
                self.state = 1302
                self.vfrStatementQuestionTag()
                self.state = 1307
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementQuestionOptionTagContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vfrStatementSuppressIfQuest(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementSuppressIfQuestContext,0)


        def vfrStatementValue(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementValueContext,0)


        def vfrStatementDefault(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementDefaultContext,0)


        def vfrStatementOptions(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementOptionsContext,0)


        def vfrStatementRead(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementReadContext,0)


        def vfrStatementWrite(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementWriteContext,0)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementQuestionOptionTag

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementQuestionOptionTag" ):
                return visitor.visitVfrStatementQuestionOptionTag(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementQuestionOptionTag(self):

        localctx = VfrSyntaxParser.VfrStatementQuestionOptionTagContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_vfrStatementQuestionOptionTag)
        try:
            self.state = 1314
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VfrSyntaxParser.SuppressIf]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1308
                self.vfrStatementSuppressIfQuest()
                pass
            elif token in [VfrSyntaxParser.Value]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1309
                self.vfrStatementValue()
                pass
            elif token in [VfrSyntaxParser.Default]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1310
                self.vfrStatementDefault()
                pass
            elif token in [VfrSyntaxParser.Option]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1311
                self.vfrStatementOptions()
                pass
            elif token in [VfrSyntaxParser.Read]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1312
                self.vfrStatementRead()
                pass
            elif token in [VfrSyntaxParser.Write]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1313
                self.vfrStatementWrite()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementSuppressIfQuestContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SuppressIf(self):
            return self.getToken(VfrSyntaxParser.SuppressIf, 0)

        def vfrStatementExpression(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementExpressionContext,0)


        def vfrStatementQuestionOptionList(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementQuestionOptionListContext,0)


        def EndIf(self):
            return self.getToken(VfrSyntaxParser.EndIf, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementSuppressIfQuest

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementSuppressIfQuest" ):
                return visitor.visitVfrStatementSuppressIfQuest(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementSuppressIfQuest(self):

        localctx = VfrSyntaxParser.VfrStatementSuppressIfQuestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_vfrStatementSuppressIfQuest)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1316
            self.match(VfrSyntaxParser.SuppressIf)
            self.state = 1317
            self.vfrStatementExpression()
            self.state = 1318
            self.match(VfrSyntaxParser.T__6)
            self.state = 1319
            self.vfrStatementQuestionOptionList()
            self.state = 1320
            self.match(VfrSyntaxParser.EndIf)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementDefaultContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Default(self):
            return self.getToken(VfrSyntaxParser.Default, 0)

        def vfrStatementValue(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementValueContext,0)


        def vfrConstantValueField(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrConstantValueFieldContext,0)


        def DefaultStore(self):
            return self.getToken(VfrSyntaxParser.DefaultStore, 0)

        def StringIdentifier(self):
            return self.getToken(VfrSyntaxParser.StringIdentifier, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementDefault

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementDefault" ):
                return visitor.visitVfrStatementDefault(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementDefault(self):

        localctx = VfrSyntaxParser.VfrStatementDefaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_vfrStatementDefault)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1322
            self.match(VfrSyntaxParser.Default)

            self.state = 1330
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VfrSyntaxParser.Value]:
                self.state = 1323
                self.vfrStatementValue()
                self.state = 1324
                self.match(VfrSyntaxParser.T__3)
                pass
            elif token in [VfrSyntaxParser.T__8]:
                self.state = 1326
                self.match(VfrSyntaxParser.T__8)
                self.state = 1327
                self.vfrConstantValueField()
                self.state = 1328
                self.match(VfrSyntaxParser.T__3)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1336
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.DefaultStore:
                self.state = 1332
                self.match(VfrSyntaxParser.DefaultStore)
                self.state = 1333
                self.match(VfrSyntaxParser.T__8)
                self.state = 1334
                self.match(VfrSyntaxParser.StringIdentifier)
                self.state = 1335
                self.match(VfrSyntaxParser.T__3)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementValueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Value(self):
            return self.getToken(VfrSyntaxParser.Value, 0)

        def vfrStatementExpression(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementExpressionContext,0)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementValue

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementValue" ):
                return visitor.visitVfrStatementValue(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementValue(self):

        localctx = VfrSyntaxParser.VfrStatementValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_vfrStatementValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1338
            self.match(VfrSyntaxParser.Value)
            self.state = 1339
            self.match(VfrSyntaxParser.T__8)
            self.state = 1340
            self.vfrStatementExpression()
            self.state = 1341
            self.match(VfrSyntaxParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementOptionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vfrStatementOneOfOption(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementOneOfOptionContext,0)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementOptions

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementOptions" ):
                return visitor.visitVfrStatementOptions(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementOptions(self):

        localctx = VfrSyntaxParser.VfrStatementOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_vfrStatementOptions)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1343
            self.vfrStatementOneOfOption()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementOneOfOptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Option(self):
            return self.getToken(VfrSyntaxParser.Option, 0)

        def Text(self):
            return self.getToken(VfrSyntaxParser.Text, 0)

        def getStringId(self):
            return self.getTypedRuleContext(VfrSyntaxParser.GetStringIdContext,0)


        def Value(self):
            return self.getToken(VfrSyntaxParser.Value, 0)

        def vfrConstantValueField(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrConstantValueFieldContext,0)


        def FLAGS(self):
            return self.getToken(VfrSyntaxParser.FLAGS, 0)

        def vfrOneOfOptionFlags(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrOneOfOptionFlagsContext,0)


        def vfrImageTag(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrImageTagContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrImageTagContext,i)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementOneOfOption

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementOneOfOption" ):
                return visitor.visitVfrStatementOneOfOption(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementOneOfOption(self):

        localctx = VfrSyntaxParser.VfrStatementOneOfOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_vfrStatementOneOfOption)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1345
            self.match(VfrSyntaxParser.Option)
            self.state = 1346
            self.match(VfrSyntaxParser.Text)
            self.state = 1347
            self.match(VfrSyntaxParser.T__8)
            self.state = 1348
            self.getStringId()
            self.state = 1349
            self.match(VfrSyntaxParser.T__3)
            self.state = 1350
            self.match(VfrSyntaxParser.Value)
            self.state = 1351
            self.match(VfrSyntaxParser.T__8)
            self.state = 1352
            self.vfrConstantValueField()
            self.state = 1353
            self.match(VfrSyntaxParser.T__3)
            self.state = 1354
            self.match(VfrSyntaxParser.FLAGS)
            self.state = 1355
            self.match(VfrSyntaxParser.T__8)
            self.state = 1356
            self.vfrOneOfOptionFlags()
            self.state = 1361
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==VfrSyntaxParser.T__3:
                self.state = 1357
                self.match(VfrSyntaxParser.T__3)
                self.state = 1358
                self.vfrImageTag()
                self.state = 1363
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1364
            self.match(VfrSyntaxParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrOneOfOptionFlagsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oneofoptionFlagsField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.OneofoptionFlagsFieldContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.OneofoptionFlagsFieldContext,i)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrOneOfOptionFlags

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrOneOfOptionFlags" ):
                return visitor.visitVfrOneOfOptionFlags(self)
            else:
                return visitor.visitChildren(self)




    def vfrOneOfOptionFlags(self):

        localctx = VfrSyntaxParser.VfrOneOfOptionFlagsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_vfrOneOfOptionFlags)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1366
            self.oneofoptionFlagsField()
            self.state = 1371
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==VfrSyntaxParser.T__10:
                self.state = 1367
                self.match(VfrSyntaxParser.T__10)
                self.state = 1368
                self.oneofoptionFlagsField()
                self.state = 1373
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OneofoptionFlagsFieldContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def InteractiveFlag(self):
            return self.getToken(VfrSyntaxParser.InteractiveFlag, 0)

        def ResetRequiredFlag(self):
            return self.getToken(VfrSyntaxParser.ResetRequiredFlag, 0)

        def DefaultFlag(self):
            return self.getToken(VfrSyntaxParser.DefaultFlag, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_oneofoptionFlagsField

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOneofoptionFlagsField" ):
                return visitor.visitOneofoptionFlagsField(self)
            else:
                return visitor.visitChildren(self)




    def oneofoptionFlagsField(self):

        localctx = VfrSyntaxParser.OneofoptionFlagsFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_oneofoptionFlagsField)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1374
            _la = self._input.LA(1)
            if not(_la==VfrSyntaxParser.T__20 or _la==VfrSyntaxParser.T__21 or ((((_la - 177)) & ~0x3f) == 0 and ((1 << (_la - 177)) & ((1 << (VfrSyntaxParser.DefaultFlag - 177)) | (1 << (VfrSyntaxParser.InteractiveFlag - 177)) | (1 << (VfrSyntaxParser.ResetRequiredFlag - 177)))) != 0) or _la==VfrSyntaxParser.Number):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementReadContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Read(self):
            return self.getToken(VfrSyntaxParser.Read, 0)

        def vfrStatementExpression(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementExpressionContext,0)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementRead

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementRead" ):
                return visitor.visitVfrStatementRead(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementRead(self):

        localctx = VfrSyntaxParser.VfrStatementReadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_vfrStatementRead)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1376
            self.match(VfrSyntaxParser.Read)
            self.state = 1377
            self.vfrStatementExpression()
            self.state = 1378
            self.match(VfrSyntaxParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementWriteContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Write(self):
            return self.getToken(VfrSyntaxParser.Write, 0)

        def vfrStatementExpression(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementExpressionContext,0)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementWrite

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementWrite" ):
                return visitor.visitVfrStatementWrite(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementWrite(self):

        localctx = VfrSyntaxParser.VfrStatementWriteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_vfrStatementWrite)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1380
            self.match(VfrSyntaxParser.Write)
            self.state = 1381
            self.vfrStatementExpression()
            self.state = 1382
            self.match(VfrSyntaxParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementQuestionOptionListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vfrStatementQuestionTag(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrStatementQuestionTagContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementQuestionTagContext,i)


        def vfrStatementQuestionOptionTag(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrStatementQuestionOptionTagContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementQuestionOptionTagContext,i)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementQuestionOptionList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementQuestionOptionList" ):
                return visitor.visitVfrStatementQuestionOptionList(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementQuestionOptionList(self):

        localctx = VfrSyntaxParser.VfrStatementQuestionOptionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_vfrStatementQuestionOptionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1388
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==VfrSyntaxParser.T__19 or ((((_la - 123)) & ~0x3f) == 0 and ((1 << (_la - 123)) & ((1 << (VfrSyntaxParser.Option - 123)) | (1 << (VfrSyntaxParser.Default - 123)) | (1 << (VfrSyntaxParser.SuppressIf - 123)) | (1 << (VfrSyntaxParser.DisableIf - 123)) | (1 << (VfrSyntaxParser.InconsistentIf - 123)) | (1 << (VfrSyntaxParser.WarningIf - 123)) | (1 << (VfrSyntaxParser.NoSubmitIf - 123)))) != 0) or ((((_la - 204)) & ~0x3f) == 0 and ((1 << (_la - 204)) & ((1 << (VfrSyntaxParser.Image - 204)) | (1 << (VfrSyntaxParser.Locked - 204)) | (1 << (VfrSyntaxParser.Value - 204)) | (1 << (VfrSyntaxParser.Read - 204)) | (1 << (VfrSyntaxParser.Write - 204)) | (1 << (VfrSyntaxParser.Refresh - 204)) | (1 << (VfrSyntaxParser.VarstoreDevice - 204)) | (1 << (VfrSyntaxParser.GuidOp - 204)))) != 0):
                self.state = 1386
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VfrSyntaxParser.T__19, VfrSyntaxParser.DisableIf, VfrSyntaxParser.InconsistentIf, VfrSyntaxParser.WarningIf, VfrSyntaxParser.NoSubmitIf, VfrSyntaxParser.Image, VfrSyntaxParser.Locked, VfrSyntaxParser.Refresh, VfrSyntaxParser.VarstoreDevice, VfrSyntaxParser.GuidOp]:
                    self.state = 1384
                    self.vfrStatementQuestionTag()
                    pass
                elif token in [VfrSyntaxParser.Option, VfrSyntaxParser.Default, VfrSyntaxParser.SuppressIf, VfrSyntaxParser.Value, VfrSyntaxParser.Read, VfrSyntaxParser.Write]:
                    self.state = 1385
                    self.vfrStatementQuestionOptionTag()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1390
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementBooleanTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vfrStatementCheckBox(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementCheckBoxContext,0)


        def vfrStatementAction(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementActionContext,0)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementBooleanType

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementBooleanType" ):
                return visitor.visitVfrStatementBooleanType(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementBooleanType(self):

        localctx = VfrSyntaxParser.VfrStatementBooleanTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_vfrStatementBooleanType)
        try:
            self.state = 1393
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VfrSyntaxParser.CheckBox]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1391
                self.vfrStatementCheckBox()
                pass
            elif token in [VfrSyntaxParser.Action]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1392
                self.vfrStatementAction()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementCheckBoxContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.OpObj = CIfrCheckBox()
            self.BaseInfo = None
            self.QId = None

        def CheckBox(self):
            return self.getToken(VfrSyntaxParser.CheckBox, 0)

        def vfrQuestionBaseInfo(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrQuestionBaseInfoContext,0)


        def vfrStatementHeader(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementHeaderContext,0)


        def vfrStatementQuestionOptionList(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementQuestionOptionListContext,0)


        def EndCheckBox(self):
            return self.getToken(VfrSyntaxParser.EndCheckBox, 0)

        def FLAGS(self):
            return self.getToken(VfrSyntaxParser.FLAGS, 0)

        def vfrCheckBoxFlags(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrCheckBoxFlagsContext,0)


        def Key(self):
            return self.getToken(VfrSyntaxParser.Key, 0)

        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementCheckBox

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementCheckBox" ):
                return visitor.visitVfrStatementCheckBox(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementCheckBox(self):

        localctx = VfrSyntaxParser.VfrStatementCheckBoxContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_vfrStatementCheckBox)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1395
            self.match(VfrSyntaxParser.CheckBox)
            self.state = 1396
            self.vfrQuestionBaseInfo(localctx.OpObj, None)
            self.state = 1397
            self.vfrStatementHeader(localctx.OpObj)
            self.state = 1398
            self.match(VfrSyntaxParser.T__3)
            self.state = 1404
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.FLAGS:
                self.state = 1399
                self.match(VfrSyntaxParser.FLAGS)
                self.state = 1400
                self.match(VfrSyntaxParser.T__8)
                self.state = 1401
                self.vfrCheckBoxFlags()
                self.state = 1402
                self.match(VfrSyntaxParser.T__3)


            self.state = 1410
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.Key:
                self.state = 1406
                self.match(VfrSyntaxParser.Key)
                self.state = 1407
                self.match(VfrSyntaxParser.T__8)
                self.state = 1408
                self.match(VfrSyntaxParser.Number)
                self.state = 1409
                self.match(VfrSyntaxParser.T__3)


            self.state = 1412
            self.vfrStatementQuestionOptionList()
            self.state = 1413
            self.match(VfrSyntaxParser.EndCheckBox)
            self.state = 1414
            self.match(VfrSyntaxParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrCheckBoxFlagsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def checkboxFlagsField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.CheckboxFlagsFieldContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.CheckboxFlagsFieldContext,i)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrCheckBoxFlags

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrCheckBoxFlags" ):
                return visitor.visitVfrCheckBoxFlags(self)
            else:
                return visitor.visitChildren(self)




    def vfrCheckBoxFlags(self):

        localctx = VfrSyntaxParser.VfrCheckBoxFlagsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_vfrCheckBoxFlags)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1416
            self.checkboxFlagsField()
            self.state = 1421
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==VfrSyntaxParser.T__10:
                self.state = 1417
                self.match(VfrSyntaxParser.T__10)
                self.state = 1418
                self.checkboxFlagsField()
                self.state = 1423
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CheckboxFlagsFieldContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def DefaultFlag(self):
            return self.getToken(VfrSyntaxParser.DefaultFlag, 0)

        def ManufacturingFlag(self):
            return self.getToken(VfrSyntaxParser.ManufacturingFlag, 0)

        def questionheaderFlagsField(self):
            return self.getTypedRuleContext(VfrSyntaxParser.QuestionheaderFlagsFieldContext,0)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_checkboxFlagsField

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCheckboxFlagsField" ):
                return visitor.visitCheckboxFlagsField(self)
            else:
                return visitor.visitChildren(self)




    def checkboxFlagsField(self):

        localctx = VfrSyntaxParser.CheckboxFlagsFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_checkboxFlagsField)
        try:
            self.state = 1430
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VfrSyntaxParser.Number]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1424
                self.match(VfrSyntaxParser.Number)
                pass
            elif token in [VfrSyntaxParser.DefaultFlag]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1425
                self.match(VfrSyntaxParser.DefaultFlag)
                pass
            elif token in [VfrSyntaxParser.ManufacturingFlag]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1426
                self.match(VfrSyntaxParser.ManufacturingFlag)
                pass
            elif token in [VfrSyntaxParser.T__22]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1427
                self.match(VfrSyntaxParser.T__22)
                pass
            elif token in [VfrSyntaxParser.T__23]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1428
                self.match(VfrSyntaxParser.T__23)
                pass
            elif token in [VfrSyntaxParser.InteractiveFlag, VfrSyntaxParser.NVAccessFlag, VfrSyntaxParser.ResetRequiredFlag, VfrSyntaxParser.ReconnectRequiredFlag, VfrSyntaxParser.LateCheckFlag, VfrSyntaxParser.ReadOnlyFlag, VfrSyntaxParser.OptionOnlyFlag, VfrSyntaxParser.RestStyleFlag]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1429
                self.questionheaderFlagsField()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementActionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.OpObj = CIfrAction()
            self.QType = EFI_QUESION_TYPE.QUESTION_NORMAL

        def Action(self):
            return self.getToken(VfrSyntaxParser.Action, 0)

        def vfrQuestionHeader(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrQuestionHeaderContext,0)


        def Config(self):
            return self.getToken(VfrSyntaxParser.Config, 0)

        def getStringId(self):
            return self.getTypedRuleContext(VfrSyntaxParser.GetStringIdContext,0)


        def vfrStatementQuestionTagList(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementQuestionTagListContext,0)


        def EndAction(self):
            return self.getToken(VfrSyntaxParser.EndAction, 0)

        def FLAGS(self):
            return self.getToken(VfrSyntaxParser.FLAGS, 0)

        def vfrActionFlags(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrActionFlagsContext,0)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementAction

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementAction" ):
                return visitor.visitVfrStatementAction(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementAction(self):

        localctx = VfrSyntaxParser.VfrStatementActionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_vfrStatementAction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1432
            self.match(VfrSyntaxParser.Action)
            self.state = 1433
            self.vfrQuestionHeader(localctx.OpObj, localctx.QType)
            self.state = 1434
            self.match(VfrSyntaxParser.T__3)
            self.state = 1440
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.FLAGS:
                self.state = 1435
                self.match(VfrSyntaxParser.FLAGS)
                self.state = 1436
                self.match(VfrSyntaxParser.T__8)
                self.state = 1437
                self.vfrActionFlags()
                self.state = 1438
                self.match(VfrSyntaxParser.T__3)


            self.state = 1442
            self.match(VfrSyntaxParser.Config)
            self.state = 1443
            self.match(VfrSyntaxParser.T__8)
            self.state = 1444
            self.getStringId()
            self.state = 1445
            self.match(VfrSyntaxParser.T__3)
            self.state = 1446
            self.vfrStatementQuestionTagList()
            self.state = 1447
            self.match(VfrSyntaxParser.EndAction)
            self.state = 1448
            self.match(VfrSyntaxParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrActionFlagsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def actionFlagsField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.ActionFlagsFieldContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.ActionFlagsFieldContext,i)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrActionFlags

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrActionFlags" ):
                return visitor.visitVfrActionFlags(self)
            else:
                return visitor.visitChildren(self)




    def vfrActionFlags(self):

        localctx = VfrSyntaxParser.VfrActionFlagsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_vfrActionFlags)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1450
            self.actionFlagsField()
            self.state = 1455
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==VfrSyntaxParser.T__10:
                self.state = 1451
                self.match(VfrSyntaxParser.T__10)
                self.state = 1452
                self.actionFlagsField()
                self.state = 1457
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ActionFlagsFieldContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def questionheaderFlagsField(self):
            return self.getTypedRuleContext(VfrSyntaxParser.QuestionheaderFlagsFieldContext,0)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_actionFlagsField

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitActionFlagsField" ):
                return visitor.visitActionFlagsField(self)
            else:
                return visitor.visitChildren(self)




    def actionFlagsField(self):

        localctx = VfrSyntaxParser.ActionFlagsFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_actionFlagsField)
        try:
            self.state = 1460
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VfrSyntaxParser.Number]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1458
                self.match(VfrSyntaxParser.Number)
                pass
            elif token in [VfrSyntaxParser.InteractiveFlag, VfrSyntaxParser.NVAccessFlag, VfrSyntaxParser.ResetRequiredFlag, VfrSyntaxParser.ReconnectRequiredFlag, VfrSyntaxParser.LateCheckFlag, VfrSyntaxParser.ReadOnlyFlag, VfrSyntaxParser.OptionOnlyFlag, VfrSyntaxParser.RestStyleFlag]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1459
                self.questionheaderFlagsField()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementNumericTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vfrStatementNumeric(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementNumericContext,0)


        def vfrStatementOneOf(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementOneOfContext,0)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementNumericType

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementNumericType" ):
                return visitor.visitVfrStatementNumericType(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementNumericType(self):

        localctx = VfrSyntaxParser.VfrStatementNumericTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_vfrStatementNumericType)
        try:
            self.state = 1464
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VfrSyntaxParser.Numeric]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1462
                self.vfrStatementNumeric()
                pass
            elif token in [VfrSyntaxParser.OneOf]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1463
                self.vfrStatementOneOf()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementNumericContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.OpObj = CIfrNumeric()
            self.BaseInfo = None
            self.QId = None

        def Numeric(self):
            return self.getToken(VfrSyntaxParser.Numeric, 0)

        def vfrQuestionBaseInfo(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrQuestionBaseInfoContext,0)


        def vfrStatementHeader(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementHeaderContext,0)


        def vfrSetMinMaxStep(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrSetMinMaxStepContext,0)


        def vfrStatementQuestionOptionList(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementQuestionOptionListContext,0)


        def EndNumeric(self):
            return self.getToken(VfrSyntaxParser.EndNumeric, 0)

        def FLAGS(self):
            return self.getToken(VfrSyntaxParser.FLAGS, 0)

        def vfrNumericFlags(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrNumericFlagsContext,0)


        def Key(self):
            return self.getToken(VfrSyntaxParser.Key, 0)

        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementNumeric

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementNumeric" ):
                return visitor.visitVfrStatementNumeric(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementNumeric(self):

        localctx = VfrSyntaxParser.VfrStatementNumericContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_vfrStatementNumeric)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1466
            self.match(VfrSyntaxParser.Numeric)
            self.state = 1467
            self.vfrQuestionBaseInfo(localctx.OpObj, None)
            self.state = 1468
            self.vfrStatementHeader(localctx.OpObj)
            self.state = 1469
            self.match(VfrSyntaxParser.T__3)
            self.state = 1475
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.FLAGS:
                self.state = 1470
                self.match(VfrSyntaxParser.FLAGS)
                self.state = 1471
                self.match(VfrSyntaxParser.T__8)
                self.state = 1472
                self.vfrNumericFlags()
                self.state = 1473
                self.match(VfrSyntaxParser.T__3)


            self.state = 1481
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.Key:
                self.state = 1477
                self.match(VfrSyntaxParser.Key)
                self.state = 1478
                self.match(VfrSyntaxParser.T__8)
                self.state = 1479
                self.match(VfrSyntaxParser.Number)
                self.state = 1480
                self.match(VfrSyntaxParser.T__3)


            self.state = 1483
            self.vfrSetMinMaxStep()
            self.state = 1484
            self.vfrStatementQuestionOptionList()
            self.state = 1485
            self.match(VfrSyntaxParser.EndNumeric)
            self.state = 1486
            self.match(VfrSyntaxParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrSetMinMaxStepContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Minimum(self):
            return self.getToken(VfrSyntaxParser.Minimum, 0)

        def Number(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Number)
            else:
                return self.getToken(VfrSyntaxParser.Number, i)

        def Maximum(self):
            return self.getToken(VfrSyntaxParser.Maximum, 0)

        def STEP(self):
            return self.getToken(VfrSyntaxParser.STEP, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrSetMinMaxStep

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrSetMinMaxStep" ):
                return visitor.visitVfrSetMinMaxStep(self)
            else:
                return visitor.visitChildren(self)




    def vfrSetMinMaxStep(self):

        localctx = VfrSyntaxParser.VfrSetMinMaxStepContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_vfrSetMinMaxStep)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1488
            self.match(VfrSyntaxParser.Minimum)
            self.state = 1489
            self.match(VfrSyntaxParser.T__8)
            self.state = 1490
            self.match(VfrSyntaxParser.Number)
            self.state = 1491
            self.match(VfrSyntaxParser.T__3)
            self.state = 1492
            self.match(VfrSyntaxParser.Maximum)
            self.state = 1493
            self.match(VfrSyntaxParser.T__8)
            self.state = 1494
            self.match(VfrSyntaxParser.Number)
            self.state = 1495
            self.match(VfrSyntaxParser.T__3)
            self.state = 1500
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.STEP:
                self.state = 1496
                self.match(VfrSyntaxParser.STEP)
                self.state = 1497
                self.match(VfrSyntaxParser.T__8)
                self.state = 1498
                self.match(VfrSyntaxParser.Number)
                self.state = 1499
                self.match(VfrSyntaxParser.T__3)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrNumericFlagsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numericFlagsField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.NumericFlagsFieldContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.NumericFlagsFieldContext,i)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrNumericFlags

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrNumericFlags" ):
                return visitor.visitVfrNumericFlags(self)
            else:
                return visitor.visitChildren(self)




    def vfrNumericFlags(self):

        localctx = VfrSyntaxParser.VfrNumericFlagsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_vfrNumericFlags)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1502
            self.numericFlagsField()
            self.state = 1507
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==VfrSyntaxParser.T__10:
                self.state = 1503
                self.match(VfrSyntaxParser.T__10)
                self.state = 1504
                self.numericFlagsField()
                self.state = 1509
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumericFlagsFieldContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def questionheaderFlagsField(self):
            return self.getTypedRuleContext(VfrSyntaxParser.QuestionheaderFlagsFieldContext,0)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_numericFlagsField

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumericFlagsField" ):
                return visitor.visitNumericFlagsField(self)
            else:
                return visitor.visitChildren(self)




    def numericFlagsField(self):

        localctx = VfrSyntaxParser.NumericFlagsFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_numericFlagsField)
        try:
            self.state = 1519
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VfrSyntaxParser.Number]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1510
                self.match(VfrSyntaxParser.Number)
                pass
            elif token in [VfrSyntaxParser.T__24]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1511
                self.match(VfrSyntaxParser.T__24)
                pass
            elif token in [VfrSyntaxParser.T__25]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1512
                self.match(VfrSyntaxParser.T__25)
                pass
            elif token in [VfrSyntaxParser.T__26]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1513
                self.match(VfrSyntaxParser.T__26)
                pass
            elif token in [VfrSyntaxParser.T__27]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1514
                self.match(VfrSyntaxParser.T__27)
                pass
            elif token in [VfrSyntaxParser.T__28]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1515
                self.match(VfrSyntaxParser.T__28)
                pass
            elif token in [VfrSyntaxParser.T__29]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1516
                self.match(VfrSyntaxParser.T__29)
                pass
            elif token in [VfrSyntaxParser.T__30]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1517
                self.match(VfrSyntaxParser.T__30)
                pass
            elif token in [VfrSyntaxParser.InteractiveFlag, VfrSyntaxParser.NVAccessFlag, VfrSyntaxParser.ResetRequiredFlag, VfrSyntaxParser.ReconnectRequiredFlag, VfrSyntaxParser.LateCheckFlag, VfrSyntaxParser.ReadOnlyFlag, VfrSyntaxParser.OptionOnlyFlag, VfrSyntaxParser.RestStyleFlag]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1518
                self.questionheaderFlagsField()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementOneOfContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.OpObj = CIfrOneOf()
            self.BaseInfo = None
            self.QId = None

        def OneOf(self):
            return self.getToken(VfrSyntaxParser.OneOf, 0)

        def vfrQuestionBaseInfo(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrQuestionBaseInfoContext,0)


        def vfrStatementHeader(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementHeaderContext,0)


        def vfrStatementQuestionOptionList(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementQuestionOptionListContext,0)


        def EndOneOf(self):
            return self.getToken(VfrSyntaxParser.EndOneOf, 0)

        def FLAGS(self):
            return self.getToken(VfrSyntaxParser.FLAGS, 0)

        def vfrOneofFlagsField(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrOneofFlagsFieldContext,0)


        def vfrSetMinMaxStep(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrSetMinMaxStepContext,0)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementOneOf

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementOneOf" ):
                return visitor.visitVfrStatementOneOf(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementOneOf(self):

        localctx = VfrSyntaxParser.VfrStatementOneOfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_vfrStatementOneOf)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1521
            self.match(VfrSyntaxParser.OneOf)
            self.state = 1522
            self.vfrQuestionBaseInfo(localctx.OpObj, None)
            self.state = 1523
            self.vfrStatementHeader(localctx.OpObj)
            self.state = 1524
            self.match(VfrSyntaxParser.T__3)
            self.state = 1530
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.FLAGS:
                self.state = 1525
                self.match(VfrSyntaxParser.FLAGS)
                self.state = 1526
                self.match(VfrSyntaxParser.T__8)
                self.state = 1527
                self.vfrOneofFlagsField()
                self.state = 1528
                self.match(VfrSyntaxParser.T__3)


            self.state = 1533
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.Minimum:
                self.state = 1532
                self.vfrSetMinMaxStep()


            self.state = 1535
            self.vfrStatementQuestionOptionList()
            self.state = 1536
            self.match(VfrSyntaxParser.EndOneOf)
            self.state = 1537
            self.match(VfrSyntaxParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrOneofFlagsFieldContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numericFlagsField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.NumericFlagsFieldContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.NumericFlagsFieldContext,i)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrOneofFlagsField

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrOneofFlagsField" ):
                return visitor.visitVfrOneofFlagsField(self)
            else:
                return visitor.visitChildren(self)




    def vfrOneofFlagsField(self):

        localctx = VfrSyntaxParser.VfrOneofFlagsFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_vfrOneofFlagsField)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1539
            self.numericFlagsField()
            self.state = 1544
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==VfrSyntaxParser.T__10:
                self.state = 1540
                self.match(VfrSyntaxParser.T__10)
                self.state = 1541
                self.numericFlagsField()
                self.state = 1546
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementStringTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vfrStatementString(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementStringContext,0)


        def vfrStatementPassword(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementPasswordContext,0)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementStringType

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementStringType" ):
                return visitor.visitVfrStatementStringType(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementStringType(self):

        localctx = VfrSyntaxParser.VfrStatementStringTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_vfrStatementStringType)
        try:
            self.state = 1549
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VfrSyntaxParser.String]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1547
                self.vfrStatementString()
                pass
            elif token in [VfrSyntaxParser.Password]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1548
                self.vfrStatementPassword()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementStringContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.OpObj = CIfrString()
            self.QType = EFI_QUESION_TYPE.QUESTION_NORMAL

        def String(self):
            return self.getToken(VfrSyntaxParser.String, 0)

        def vfrQuestionHeader(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrQuestionHeaderContext,0)


        def MinSize(self):
            return self.getToken(VfrSyntaxParser.MinSize, 0)

        def Number(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Number)
            else:
                return self.getToken(VfrSyntaxParser.Number, i)

        def MaxSize(self):
            return self.getToken(VfrSyntaxParser.MaxSize, 0)

        def vfrStatementQuestionOptionList(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementQuestionOptionListContext,0)


        def EndString(self):
            return self.getToken(VfrSyntaxParser.EndString, 0)

        def FLAGS(self):
            return self.getToken(VfrSyntaxParser.FLAGS, 0)

        def vfrStringFlagsField(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStringFlagsFieldContext,0)


        def Key(self):
            return self.getToken(VfrSyntaxParser.Key, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementString

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementString" ):
                return visitor.visitVfrStatementString(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementString(self):

        localctx = VfrSyntaxParser.VfrStatementStringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_vfrStatementString)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1551
            self.match(VfrSyntaxParser.String)
            self.state = 1552
            self.vfrQuestionHeader(localctx.OpObj, localctx.QType)
            self.state = 1553
            self.match(VfrSyntaxParser.T__3)
            self.state = 1559
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.FLAGS:
                self.state = 1554
                self.match(VfrSyntaxParser.FLAGS)
                self.state = 1555
                self.match(VfrSyntaxParser.T__8)
                self.state = 1556
                self.vfrStringFlagsField()
                self.state = 1557
                self.match(VfrSyntaxParser.T__3)


            self.state = 1565
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.Key:
                self.state = 1561
                self.match(VfrSyntaxParser.Key)
                self.state = 1562
                self.match(VfrSyntaxParser.T__8)
                self.state = 1563
                self.match(VfrSyntaxParser.Number)
                self.state = 1564
                self.match(VfrSyntaxParser.T__3)


            self.state = 1567
            self.match(VfrSyntaxParser.MinSize)
            self.state = 1568
            self.match(VfrSyntaxParser.T__8)
            self.state = 1569
            self.match(VfrSyntaxParser.Number)
            self.state = 1570
            self.match(VfrSyntaxParser.T__3)
            self.state = 1571
            self.match(VfrSyntaxParser.MaxSize)
            self.state = 1572
            self.match(VfrSyntaxParser.T__8)
            self.state = 1573
            self.match(VfrSyntaxParser.Number)
            self.state = 1574
            self.match(VfrSyntaxParser.T__3)
            self.state = 1575
            self.vfrStatementQuestionOptionList()
            self.state = 1576
            self.match(VfrSyntaxParser.EndString)
            self.state = 1577
            self.match(VfrSyntaxParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStringFlagsFieldContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stringFlagsField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.StringFlagsFieldContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.StringFlagsFieldContext,i)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStringFlagsField

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStringFlagsField" ):
                return visitor.visitVfrStringFlagsField(self)
            else:
                return visitor.visitChildren(self)




    def vfrStringFlagsField(self):

        localctx = VfrSyntaxParser.VfrStringFlagsFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_vfrStringFlagsField)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1579
            self.stringFlagsField()
            self.state = 1584
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==VfrSyntaxParser.T__10:
                self.state = 1580
                self.match(VfrSyntaxParser.T__10)
                self.state = 1581
                self.stringFlagsField()
                self.state = 1586
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringFlagsFieldContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def questionheaderFlagsField(self):
            return self.getTypedRuleContext(VfrSyntaxParser.QuestionheaderFlagsFieldContext,0)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_stringFlagsField

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringFlagsField" ):
                return visitor.visitStringFlagsField(self)
            else:
                return visitor.visitChildren(self)




    def stringFlagsField(self):

        localctx = VfrSyntaxParser.StringFlagsFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_stringFlagsField)
        try:
            self.state = 1590
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VfrSyntaxParser.Number]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1587
                self.match(VfrSyntaxParser.Number)
                pass
            elif token in [VfrSyntaxParser.T__31]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1588
                self.match(VfrSyntaxParser.T__31)
                pass
            elif token in [VfrSyntaxParser.InteractiveFlag, VfrSyntaxParser.NVAccessFlag, VfrSyntaxParser.ResetRequiredFlag, VfrSyntaxParser.ReconnectRequiredFlag, VfrSyntaxParser.LateCheckFlag, VfrSyntaxParser.ReadOnlyFlag, VfrSyntaxParser.OptionOnlyFlag, VfrSyntaxParser.RestStyleFlag]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1589
                self.questionheaderFlagsField()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementPasswordContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.OpObj = CIfrPassword()
            self.QType = EFI_QUESION_TYPE.QUESTION_NORMAL

        def Password(self):
            return self.getToken(VfrSyntaxParser.Password, 0)

        def vfrQuestionHeader(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrQuestionHeaderContext,0)


        def MinSize(self):
            return self.getToken(VfrSyntaxParser.MinSize, 0)

        def Number(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Number)
            else:
                return self.getToken(VfrSyntaxParser.Number, i)

        def MaxSize(self):
            return self.getToken(VfrSyntaxParser.MaxSize, 0)

        def vfrStatementQuestionOptionList(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementQuestionOptionListContext,0)


        def EndPassword(self):
            return self.getToken(VfrSyntaxParser.EndPassword, 0)

        def FLAGS(self):
            return self.getToken(VfrSyntaxParser.FLAGS, 0)

        def vfrPasswordFlagsField(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrPasswordFlagsFieldContext,0)


        def Key(self):
            return self.getToken(VfrSyntaxParser.Key, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementPassword

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementPassword" ):
                return visitor.visitVfrStatementPassword(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementPassword(self):

        localctx = VfrSyntaxParser.VfrStatementPasswordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_vfrStatementPassword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1592
            self.match(VfrSyntaxParser.Password)
            self.state = 1593
            self.vfrQuestionHeader(localctx.OpObj, localctx.QType)
            self.state = 1594
            self.match(VfrSyntaxParser.T__3)
            self.state = 1600
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.FLAGS:
                self.state = 1595
                self.match(VfrSyntaxParser.FLAGS)
                self.state = 1596
                self.match(VfrSyntaxParser.T__8)
                self.state = 1597
                self.vfrPasswordFlagsField()
                self.state = 1598
                self.match(VfrSyntaxParser.T__3)


            self.state = 1606
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.Key:
                self.state = 1602
                self.match(VfrSyntaxParser.Key)
                self.state = 1603
                self.match(VfrSyntaxParser.T__8)
                self.state = 1604
                self.match(VfrSyntaxParser.Number)
                self.state = 1605
                self.match(VfrSyntaxParser.T__3)


            self.state = 1608
            self.match(VfrSyntaxParser.MinSize)
            self.state = 1609
            self.match(VfrSyntaxParser.T__8)
            self.state = 1610
            self.match(VfrSyntaxParser.Number)
            self.state = 1611
            self.match(VfrSyntaxParser.T__3)
            self.state = 1612
            self.match(VfrSyntaxParser.MaxSize)
            self.state = 1613
            self.match(VfrSyntaxParser.T__8)
            self.state = 1614
            self.match(VfrSyntaxParser.Number)
            self.state = 1615
            self.match(VfrSyntaxParser.T__3)
            self.state = 1616
            self.vfrStatementQuestionOptionList()
            self.state = 1617
            self.match(VfrSyntaxParser.EndPassword)
            self.state = 1618
            self.match(VfrSyntaxParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrPasswordFlagsFieldContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def passwordFlagsField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.PasswordFlagsFieldContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.PasswordFlagsFieldContext,i)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrPasswordFlagsField

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrPasswordFlagsField" ):
                return visitor.visitVfrPasswordFlagsField(self)
            else:
                return visitor.visitChildren(self)




    def vfrPasswordFlagsField(self):

        localctx = VfrSyntaxParser.VfrPasswordFlagsFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_vfrPasswordFlagsField)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1620
            self.passwordFlagsField()
            self.state = 1625
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==VfrSyntaxParser.T__10:
                self.state = 1621
                self.match(VfrSyntaxParser.T__10)
                self.state = 1622
                self.passwordFlagsField()
                self.state = 1627
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PasswordFlagsFieldContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def questionheaderFlagsField(self):
            return self.getTypedRuleContext(VfrSyntaxParser.QuestionheaderFlagsFieldContext,0)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_passwordFlagsField

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPasswordFlagsField" ):
                return visitor.visitPasswordFlagsField(self)
            else:
                return visitor.visitChildren(self)




    def passwordFlagsField(self):

        localctx = VfrSyntaxParser.PasswordFlagsFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_passwordFlagsField)
        try:
            self.state = 1630
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VfrSyntaxParser.Number]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1628
                self.match(VfrSyntaxParser.Number)
                pass
            elif token in [VfrSyntaxParser.InteractiveFlag, VfrSyntaxParser.NVAccessFlag, VfrSyntaxParser.ResetRequiredFlag, VfrSyntaxParser.ReconnectRequiredFlag, VfrSyntaxParser.LateCheckFlag, VfrSyntaxParser.ReadOnlyFlag, VfrSyntaxParser.OptionOnlyFlag, VfrSyntaxParser.RestStyleFlag]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1629
                self.questionheaderFlagsField()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementOrderedListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.OpObj = CIfrOrderedList()
            self.QType = QType=EFI_QUESION_TYPE.QUESTION_NORMAL

        def OrderedList(self):
            return self.getToken(VfrSyntaxParser.OrderedList, 0)

        def vfrQuestionHeader(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrQuestionHeaderContext,0)


        def vfrStatementQuestionOptionList(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementQuestionOptionListContext,0)


        def EndList(self):
            return self.getToken(VfrSyntaxParser.EndList, 0)

        def MaxContainers(self):
            return self.getToken(VfrSyntaxParser.MaxContainers, 0)

        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def FLAGS(self):
            return self.getToken(VfrSyntaxParser.FLAGS, 0)

        def vfrOrderedListFlags(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrOrderedListFlagsContext,0)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementOrderedList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementOrderedList" ):
                return visitor.visitVfrStatementOrderedList(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementOrderedList(self):

        localctx = VfrSyntaxParser.VfrStatementOrderedListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_vfrStatementOrderedList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1632
            self.match(VfrSyntaxParser.OrderedList)
            self.state = 1633
            self.vfrQuestionHeader(localctx.OpObj, localctx.QType)
            self.state = 1634
            self.match(VfrSyntaxParser.T__3)
            self.state = 1639
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.MaxContainers:
                self.state = 1635
                self.match(VfrSyntaxParser.MaxContainers)
                self.state = 1636
                self.match(VfrSyntaxParser.T__8)
                self.state = 1637
                self.match(VfrSyntaxParser.Number)
                self.state = 1638
                self.match(VfrSyntaxParser.T__3)


            self.state = 1644
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.FLAGS:
                self.state = 1641
                self.match(VfrSyntaxParser.FLAGS)
                self.state = 1642
                self.match(VfrSyntaxParser.T__8)
                self.state = 1643
                self.vfrOrderedListFlags()


            self.state = 1646
            self.vfrStatementQuestionOptionList()
            self.state = 1647
            self.match(VfrSyntaxParser.EndList)
            self.state = 1648
            self.match(VfrSyntaxParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrOrderedListFlagsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def orderedlistFlagsField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.OrderedlistFlagsFieldContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.OrderedlistFlagsFieldContext,i)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrOrderedListFlags

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrOrderedListFlags" ):
                return visitor.visitVfrOrderedListFlags(self)
            else:
                return visitor.visitChildren(self)




    def vfrOrderedListFlags(self):

        localctx = VfrSyntaxParser.VfrOrderedListFlagsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_vfrOrderedListFlags)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1650
            self.orderedlistFlagsField()
            self.state = 1655
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==VfrSyntaxParser.T__10:
                self.state = 1651
                self.match(VfrSyntaxParser.T__10)
                self.state = 1652
                self.orderedlistFlagsField()
                self.state = 1657
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderedlistFlagsFieldContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def questionheaderFlagsField(self):
            return self.getTypedRuleContext(VfrSyntaxParser.QuestionheaderFlagsFieldContext,0)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_orderedlistFlagsField

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrderedlistFlagsField" ):
                return visitor.visitOrderedlistFlagsField(self)
            else:
                return visitor.visitChildren(self)




    def orderedlistFlagsField(self):

        localctx = VfrSyntaxParser.OrderedlistFlagsFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_orderedlistFlagsField)
        try:
            self.state = 1662
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VfrSyntaxParser.Number]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1658
                self.match(VfrSyntaxParser.Number)
                pass
            elif token in [VfrSyntaxParser.T__32]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1659
                self.match(VfrSyntaxParser.T__32)
                pass
            elif token in [VfrSyntaxParser.T__33]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1660
                self.match(VfrSyntaxParser.T__33)
                pass
            elif token in [VfrSyntaxParser.InteractiveFlag, VfrSyntaxParser.NVAccessFlag, VfrSyntaxParser.ResetRequiredFlag, VfrSyntaxParser.ReconnectRequiredFlag, VfrSyntaxParser.LateCheckFlag, VfrSyntaxParser.ReadOnlyFlag, VfrSyntaxParser.OptionOnlyFlag, VfrSyntaxParser.RestStyleFlag]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1661
                self.questionheaderFlagsField()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementDateContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.OpObj = CIfrDate()
            self.QType = EFI_QUESION_TYPE.QUESTION_DATE

        def Date(self):
            return self.getToken(VfrSyntaxParser.Date, 0)

        def EndDate(self):
            return self.getToken(VfrSyntaxParser.EndDate, 0)

        def vfrQuestionHeader(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrQuestionHeaderContext,0)


        def vfrStatementQuestionOptionList(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementQuestionOptionListContext,0)


        def Year(self):
            return self.getToken(VfrSyntaxParser.Year, 0)

        def VarId(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.VarId)
            else:
                return self.getToken(VfrSyntaxParser.VarId, i)

        def StringIdentifier(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.StringIdentifier)
            else:
                return self.getToken(VfrSyntaxParser.StringIdentifier, i)

        def Dot(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Dot)
            else:
                return self.getToken(VfrSyntaxParser.Dot, i)

        def Prompt(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Prompt)
            else:
                return self.getToken(VfrSyntaxParser.Prompt, i)

        def getStringId(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.GetStringIdContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.GetStringIdContext,i)


        def Help(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Help)
            else:
                return self.getToken(VfrSyntaxParser.Help, i)

        def minMaxDateStepDefault(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.MinMaxDateStepDefaultContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.MinMaxDateStepDefaultContext,i)


        def Month(self):
            return self.getToken(VfrSyntaxParser.Month, 0)

        def Day(self):
            return self.getToken(VfrSyntaxParser.Day, 0)

        def FLAGS(self):
            return self.getToken(VfrSyntaxParser.FLAGS, 0)

        def vfrDateFlags(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrDateFlagsContext,0)


        def vfrStatementInconsistentIf(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrStatementInconsistentIfContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementInconsistentIfContext,i)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementDate

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementDate" ):
                return visitor.visitVfrStatementDate(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementDate(self):

        localctx = VfrSyntaxParser.VfrStatementDateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_vfrStatementDate)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1664
            self.match(VfrSyntaxParser.Date)
            self.state = 1730
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VfrSyntaxParser.Prompt, VfrSyntaxParser.Name, VfrSyntaxParser.VarId, VfrSyntaxParser.QuestionId]:
                self.state = 1665
                self.vfrQuestionHeader(localctx.OpObj, localctx.QType)
                self.state = 1666
                self.match(VfrSyntaxParser.T__3)
                self.state = 1672
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VfrSyntaxParser.FLAGS:
                    self.state = 1667
                    self.match(VfrSyntaxParser.FLAGS)
                    self.state = 1668
                    self.match(VfrSyntaxParser.T__8)
                    self.state = 1669
                    self.vfrDateFlags()
                    self.state = 1670
                    self.match(VfrSyntaxParser.T__3)


                self.state = 1674
                self.vfrStatementQuestionOptionList()
                pass
            elif token in [VfrSyntaxParser.Year]:
                self.state = 1676
                self.match(VfrSyntaxParser.Year)
                self.state = 1677
                self.match(VfrSyntaxParser.VarId)
                self.state = 1678
                self.match(VfrSyntaxParser.T__8)
                self.state = 1679
                self.match(VfrSyntaxParser.StringIdentifier)
                self.state = 1680
                self.match(VfrSyntaxParser.Dot)
                self.state = 1681
                self.match(VfrSyntaxParser.StringIdentifier)
                self.state = 1682
                self.match(VfrSyntaxParser.T__3)
                self.state = 1683
                self.match(VfrSyntaxParser.Prompt)
                self.state = 1684
                self.match(VfrSyntaxParser.T__8)
                self.state = 1685
                self.getStringId()
                self.state = 1686
                self.match(VfrSyntaxParser.T__3)
                self.state = 1687
                self.match(VfrSyntaxParser.Help)
                self.state = 1688
                self.match(VfrSyntaxParser.T__8)
                self.state = 1689
                self.getStringId()
                self.state = 1690
                self.match(VfrSyntaxParser.T__3)
                self.state = 1691
                self.minMaxDateStepDefault()
                self.state = 1692
                self.match(VfrSyntaxParser.Month)
                self.state = 1693
                self.match(VfrSyntaxParser.VarId)
                self.state = 1694
                self.match(VfrSyntaxParser.T__8)
                self.state = 1695
                self.match(VfrSyntaxParser.StringIdentifier)
                self.state = 1696
                self.match(VfrSyntaxParser.Dot)
                self.state = 1697
                self.match(VfrSyntaxParser.StringIdentifier)
                self.state = 1698
                self.match(VfrSyntaxParser.T__3)
                self.state = 1699
                self.match(VfrSyntaxParser.Prompt)
                self.state = 1700
                self.match(VfrSyntaxParser.T__8)
                self.state = 1701
                self.getStringId()
                self.state = 1702
                self.match(VfrSyntaxParser.T__3)
                self.state = 1703
                self.match(VfrSyntaxParser.Help)
                self.state = 1704
                self.match(VfrSyntaxParser.T__8)
                self.state = 1705
                self.getStringId()
                self.state = 1706
                self.match(VfrSyntaxParser.T__3)
                self.state = 1707
                self.minMaxDateStepDefault()
                self.state = 1708
                self.match(VfrSyntaxParser.Day)
                self.state = 1709
                self.match(VfrSyntaxParser.VarId)
                self.state = 1710
                self.match(VfrSyntaxParser.T__8)
                self.state = 1711
                self.match(VfrSyntaxParser.StringIdentifier)
                self.state = 1712
                self.match(VfrSyntaxParser.Dot)
                self.state = 1713
                self.match(VfrSyntaxParser.StringIdentifier)
                self.state = 1714
                self.match(VfrSyntaxParser.T__3)
                self.state = 1715
                self.match(VfrSyntaxParser.Prompt)
                self.state = 1716
                self.match(VfrSyntaxParser.T__8)
                self.state = 1717
                self.getStringId()
                self.state = 1718
                self.match(VfrSyntaxParser.T__3)
                self.state = 1719
                self.match(VfrSyntaxParser.Help)
                self.state = 1720
                self.match(VfrSyntaxParser.T__8)
                self.state = 1721
                self.getStringId()
                self.state = 1722
                self.match(VfrSyntaxParser.T__3)
                self.state = 1723
                self.minMaxDateStepDefault()
                self.state = 1727
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==VfrSyntaxParser.InconsistentIf:
                    self.state = 1724
                    self.vfrStatementInconsistentIf()
                    self.state = 1729
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

            self.state = 1732
            self.match(VfrSyntaxParser.EndDate)
            self.state = 1733
            self.match(VfrSyntaxParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MinMaxDateStepDefaultContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Minimum(self):
            return self.getToken(VfrSyntaxParser.Minimum, 0)

        def Number(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Number)
            else:
                return self.getToken(VfrSyntaxParser.Number, i)

        def Maximum(self):
            return self.getToken(VfrSyntaxParser.Maximum, 0)

        def STEP(self):
            return self.getToken(VfrSyntaxParser.STEP, 0)

        def Default(self):
            return self.getToken(VfrSyntaxParser.Default, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_minMaxDateStepDefault

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMinMaxDateStepDefault" ):
                return visitor.visitMinMaxDateStepDefault(self)
            else:
                return visitor.visitChildren(self)




    def minMaxDateStepDefault(self):

        localctx = VfrSyntaxParser.MinMaxDateStepDefaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_minMaxDateStepDefault)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1735
            self.match(VfrSyntaxParser.Minimum)
            self.state = 1736
            self.match(VfrSyntaxParser.T__8)
            self.state = 1737
            self.match(VfrSyntaxParser.Number)
            self.state = 1738
            self.match(VfrSyntaxParser.T__3)
            self.state = 1739
            self.match(VfrSyntaxParser.Maximum)
            self.state = 1740
            self.match(VfrSyntaxParser.T__8)
            self.state = 1741
            self.match(VfrSyntaxParser.Number)
            self.state = 1742
            self.match(VfrSyntaxParser.T__3)
            self.state = 1747
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.STEP:
                self.state = 1743
                self.match(VfrSyntaxParser.STEP)
                self.state = 1744
                self.match(VfrSyntaxParser.T__8)
                self.state = 1745
                self.match(VfrSyntaxParser.Number)
                self.state = 1746
                self.match(VfrSyntaxParser.T__3)


            self.state = 1753
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.Default:
                self.state = 1749
                self.match(VfrSyntaxParser.Default)
                self.state = 1750
                self.match(VfrSyntaxParser.T__8)
                self.state = 1751
                self.match(VfrSyntaxParser.Number)
                self.state = 1752
                self.match(VfrSyntaxParser.T__3)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrDateFlagsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dateFlagsField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.DateFlagsFieldContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.DateFlagsFieldContext,i)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrDateFlags

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrDateFlags" ):
                return visitor.visitVfrDateFlags(self)
            else:
                return visitor.visitChildren(self)




    def vfrDateFlags(self):

        localctx = VfrSyntaxParser.VfrDateFlagsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_vfrDateFlags)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1755
            self.dateFlagsField()
            self.state = 1760
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==VfrSyntaxParser.T__10:
                self.state = 1756
                self.match(VfrSyntaxParser.T__10)
                self.state = 1757
                self.dateFlagsField()
                self.state = 1762
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DateFlagsFieldContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_dateFlagsField

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDateFlagsField" ):
                return visitor.visitDateFlagsField(self)
            else:
                return visitor.visitChildren(self)




    def dateFlagsField(self):

        localctx = VfrSyntaxParser.DateFlagsFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_dateFlagsField)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1763
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VfrSyntaxParser.T__34) | (1 << VfrSyntaxParser.T__35) | (1 << VfrSyntaxParser.T__36) | (1 << VfrSyntaxParser.T__37) | (1 << VfrSyntaxParser.T__38) | (1 << VfrSyntaxParser.T__39))) != 0) or _la==VfrSyntaxParser.Number):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementTimeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.OpObj = CIfrTime()
            self.QType = EFI_QUESION_TYPE.QUESTION_TIME

        def Time(self):
            return self.getToken(VfrSyntaxParser.Time, 0)

        def EndTime(self):
            return self.getToken(VfrSyntaxParser.EndTime, 0)

        def vfrQuestionHeader(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrQuestionHeaderContext,0)


        def vfrStatementQuestionOptionList(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementQuestionOptionListContext,0)


        def Hour(self):
            return self.getToken(VfrSyntaxParser.Hour, 0)

        def VarId(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.VarId)
            else:
                return self.getToken(VfrSyntaxParser.VarId, i)

        def StringIdentifier(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.StringIdentifier)
            else:
                return self.getToken(VfrSyntaxParser.StringIdentifier, i)

        def Dot(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Dot)
            else:
                return self.getToken(VfrSyntaxParser.Dot, i)

        def Prompt(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Prompt)
            else:
                return self.getToken(VfrSyntaxParser.Prompt, i)

        def getStringId(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.GetStringIdContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.GetStringIdContext,i)


        def Help(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Help)
            else:
                return self.getToken(VfrSyntaxParser.Help, i)

        def minMaxTimeStepDefault(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.MinMaxTimeStepDefaultContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.MinMaxTimeStepDefaultContext,i)


        def Minute(self):
            return self.getToken(VfrSyntaxParser.Minute, 0)

        def Second(self):
            return self.getToken(VfrSyntaxParser.Second, 0)

        def FLAGS(self):
            return self.getToken(VfrSyntaxParser.FLAGS, 0)

        def vfrTimeFlags(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrTimeFlagsContext,0)


        def vfrStatementInconsistentIf(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrStatementInconsistentIfContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementInconsistentIfContext,i)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementTime

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementTime" ):
                return visitor.visitVfrStatementTime(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementTime(self):

        localctx = VfrSyntaxParser.VfrStatementTimeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_vfrStatementTime)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1765
            self.match(VfrSyntaxParser.Time)
            self.state = 1831
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VfrSyntaxParser.Prompt, VfrSyntaxParser.Name, VfrSyntaxParser.VarId, VfrSyntaxParser.QuestionId]:
                self.state = 1766
                self.vfrQuestionHeader(localctx.OpObj, localctx.QType)
                self.state = 1767
                self.match(VfrSyntaxParser.T__3)
                self.state = 1773
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==VfrSyntaxParser.FLAGS:
                    self.state = 1768
                    self.match(VfrSyntaxParser.FLAGS)
                    self.state = 1769
                    self.match(VfrSyntaxParser.T__8)
                    self.state = 1770
                    self.vfrTimeFlags()
                    self.state = 1771
                    self.match(VfrSyntaxParser.T__3)


                self.state = 1775
                self.vfrStatementQuestionOptionList()
                pass
            elif token in [VfrSyntaxParser.Hour]:
                self.state = 1777
                self.match(VfrSyntaxParser.Hour)
                self.state = 1778
                self.match(VfrSyntaxParser.VarId)
                self.state = 1779
                self.match(VfrSyntaxParser.T__8)
                self.state = 1780
                self.match(VfrSyntaxParser.StringIdentifier)
                self.state = 1781
                self.match(VfrSyntaxParser.Dot)
                self.state = 1782
                self.match(VfrSyntaxParser.StringIdentifier)
                self.state = 1783
                self.match(VfrSyntaxParser.T__3)
                self.state = 1784
                self.match(VfrSyntaxParser.Prompt)
                self.state = 1785
                self.match(VfrSyntaxParser.T__8)
                self.state = 1786
                self.getStringId()
                self.state = 1787
                self.match(VfrSyntaxParser.T__3)
                self.state = 1788
                self.match(VfrSyntaxParser.Help)
                self.state = 1789
                self.match(VfrSyntaxParser.T__8)
                self.state = 1790
                self.getStringId()
                self.state = 1791
                self.match(VfrSyntaxParser.T__3)
                self.state = 1792
                self.minMaxTimeStepDefault()
                self.state = 1793
                self.match(VfrSyntaxParser.Minute)
                self.state = 1794
                self.match(VfrSyntaxParser.VarId)
                self.state = 1795
                self.match(VfrSyntaxParser.T__8)
                self.state = 1796
                self.match(VfrSyntaxParser.StringIdentifier)
                self.state = 1797
                self.match(VfrSyntaxParser.Dot)
                self.state = 1798
                self.match(VfrSyntaxParser.StringIdentifier)
                self.state = 1799
                self.match(VfrSyntaxParser.T__3)
                self.state = 1800
                self.match(VfrSyntaxParser.Prompt)
                self.state = 1801
                self.match(VfrSyntaxParser.T__8)
                self.state = 1802
                self.getStringId()
                self.state = 1803
                self.match(VfrSyntaxParser.T__3)
                self.state = 1804
                self.match(VfrSyntaxParser.Help)
                self.state = 1805
                self.match(VfrSyntaxParser.T__8)
                self.state = 1806
                self.getStringId()
                self.state = 1807
                self.match(VfrSyntaxParser.T__3)
                self.state = 1808
                self.minMaxTimeStepDefault()
                self.state = 1809
                self.match(VfrSyntaxParser.Second)
                self.state = 1810
                self.match(VfrSyntaxParser.VarId)
                self.state = 1811
                self.match(VfrSyntaxParser.T__8)
                self.state = 1812
                self.match(VfrSyntaxParser.StringIdentifier)
                self.state = 1813
                self.match(VfrSyntaxParser.Dot)
                self.state = 1814
                self.match(VfrSyntaxParser.StringIdentifier)
                self.state = 1815
                self.match(VfrSyntaxParser.T__3)
                self.state = 1816
                self.match(VfrSyntaxParser.Prompt)
                self.state = 1817
                self.match(VfrSyntaxParser.T__8)
                self.state = 1818
                self.getStringId()
                self.state = 1819
                self.match(VfrSyntaxParser.T__3)
                self.state = 1820
                self.match(VfrSyntaxParser.Help)
                self.state = 1821
                self.match(VfrSyntaxParser.T__8)
                self.state = 1822
                self.getStringId()
                self.state = 1823
                self.match(VfrSyntaxParser.T__3)
                self.state = 1824
                self.minMaxTimeStepDefault()
                self.state = 1828
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==VfrSyntaxParser.InconsistentIf:
                    self.state = 1825
                    self.vfrStatementInconsistentIf()
                    self.state = 1830
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

            self.state = 1833
            self.match(VfrSyntaxParser.EndTime)
            self.state = 1834
            self.match(VfrSyntaxParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MinMaxTimeStepDefaultContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Minimum(self):
            return self.getToken(VfrSyntaxParser.Minimum, 0)

        def Number(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Number)
            else:
                return self.getToken(VfrSyntaxParser.Number, i)

        def Maximum(self):
            return self.getToken(VfrSyntaxParser.Maximum, 0)

        def STEP(self):
            return self.getToken(VfrSyntaxParser.STEP, 0)

        def Default(self):
            return self.getToken(VfrSyntaxParser.Default, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_minMaxTimeStepDefault

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMinMaxTimeStepDefault" ):
                return visitor.visitMinMaxTimeStepDefault(self)
            else:
                return visitor.visitChildren(self)




    def minMaxTimeStepDefault(self):

        localctx = VfrSyntaxParser.MinMaxTimeStepDefaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_minMaxTimeStepDefault)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1836
            self.match(VfrSyntaxParser.Minimum)
            self.state = 1837
            self.match(VfrSyntaxParser.T__8)
            self.state = 1838
            self.match(VfrSyntaxParser.Number)
            self.state = 1839
            self.match(VfrSyntaxParser.T__3)
            self.state = 1840
            self.match(VfrSyntaxParser.Maximum)
            self.state = 1841
            self.match(VfrSyntaxParser.T__8)
            self.state = 1842
            self.match(VfrSyntaxParser.Number)
            self.state = 1843
            self.match(VfrSyntaxParser.T__3)
            self.state = 1848
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.STEP:
                self.state = 1844
                self.match(VfrSyntaxParser.STEP)
                self.state = 1845
                self.match(VfrSyntaxParser.T__8)
                self.state = 1846
                self.match(VfrSyntaxParser.Number)
                self.state = 1847
                self.match(VfrSyntaxParser.T__3)


            self.state = 1854
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.Default:
                self.state = 1850
                self.match(VfrSyntaxParser.Default)
                self.state = 1851
                self.match(VfrSyntaxParser.T__8)
                self.state = 1852
                self.match(VfrSyntaxParser.Number)
                self.state = 1853
                self.match(VfrSyntaxParser.T__3)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrTimeFlagsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def timeFlagsField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.TimeFlagsFieldContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.TimeFlagsFieldContext,i)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrTimeFlags

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrTimeFlags" ):
                return visitor.visitVfrTimeFlags(self)
            else:
                return visitor.visitChildren(self)




    def vfrTimeFlags(self):

        localctx = VfrSyntaxParser.VfrTimeFlagsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_vfrTimeFlags)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1856
            self.timeFlagsField()
            self.state = 1861
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==VfrSyntaxParser.T__10:
                self.state = 1857
                self.match(VfrSyntaxParser.T__10)
                self.state = 1858
                self.timeFlagsField()
                self.state = 1863
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TimeFlagsFieldContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_timeFlagsField

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTimeFlagsField" ):
                return visitor.visitTimeFlagsField(self)
            else:
                return visitor.visitChildren(self)




    def timeFlagsField(self):

        localctx = VfrSyntaxParser.TimeFlagsFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_timeFlagsField)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1864
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VfrSyntaxParser.T__37) | (1 << VfrSyntaxParser.T__38) | (1 << VfrSyntaxParser.T__39) | (1 << VfrSyntaxParser.T__40) | (1 << VfrSyntaxParser.T__41) | (1 << VfrSyntaxParser.T__42))) != 0) or _la==VfrSyntaxParser.Number):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementConditionalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vfrStatementDisableIfStat(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementDisableIfStatContext,0)


        def vfrStatementSuppressIfStat(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementSuppressIfStatContext,0)


        def vfrStatementGrayOutIfStat(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementGrayOutIfStatContext,0)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementConditional

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementConditional" ):
                return visitor.visitVfrStatementConditional(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementConditional(self):

        localctx = VfrSyntaxParser.VfrStatementConditionalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_vfrStatementConditional)
        try:
            self.state = 1869
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VfrSyntaxParser.DisableIf]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1866
                self.vfrStatementDisableIfStat()
                pass
            elif token in [VfrSyntaxParser.SuppressIf]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1867
                self.vfrStatementSuppressIfStat()
                pass
            elif token in [VfrSyntaxParser.GrayOutIf]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1868
                self.vfrStatementGrayOutIfStat()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementStatListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vfrStatementStat(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementStatContext,0)


        def vfrStatementQuestions(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementQuestionsContext,0)


        def vfrStatementConditional(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementConditionalContext,0)


        def vfrStatementLabel(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementLabelContext,0)


        def vfrStatementExtension(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementExtensionContext,0)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementStatList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementStatList" ):
                return visitor.visitVfrStatementStatList(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementStatList(self):

        localctx = VfrSyntaxParser.VfrStatementStatListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_vfrStatementStatList)
        try:
            self.state = 1876
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VfrSyntaxParser.Subtitle, VfrSyntaxParser.Text, VfrSyntaxParser.Goto, VfrSyntaxParser.ResetButton]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1871
                self.vfrStatementStat()
                pass
            elif token in [VfrSyntaxParser.OneOf, VfrSyntaxParser.OrderedList, VfrSyntaxParser.Date, VfrSyntaxParser.Time, VfrSyntaxParser.CheckBox, VfrSyntaxParser.Numeric, VfrSyntaxParser.Password, VfrSyntaxParser.String, VfrSyntaxParser.Action]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1872
                self.vfrStatementQuestions()
                pass
            elif token in [VfrSyntaxParser.GrayOutIf, VfrSyntaxParser.SuppressIf, VfrSyntaxParser.DisableIf]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1873
                self.vfrStatementConditional()
                pass
            elif token in [VfrSyntaxParser.Label]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1874
                self.vfrStatementLabel()
                pass
            elif token in [VfrSyntaxParser.GuidOp]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1875
                self.vfrStatementExtension()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementDisableIfStatContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DisableIf(self):
            return self.getToken(VfrSyntaxParser.DisableIf, 0)

        def vfrStatementExpression(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementExpressionContext,0)


        def EndIf(self):
            return self.getToken(VfrSyntaxParser.EndIf, 0)

        def vfrStatementStatList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrStatementStatListContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementStatListContext,i)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementDisableIfStat

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementDisableIfStat" ):
                return visitor.visitVfrStatementDisableIfStat(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementDisableIfStat(self):

        localctx = VfrSyntaxParser.VfrStatementDisableIfStatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_vfrStatementDisableIfStat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1878
            self.match(VfrSyntaxParser.DisableIf)
            self.state = 1879
            self.vfrStatementExpression()
            self.state = 1880
            self.match(VfrSyntaxParser.T__6)
            self.state = 1884
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & ((1 << (VfrSyntaxParser.OneOf - 108)) | (1 << (VfrSyntaxParser.OrderedList - 108)) | (1 << (VfrSyntaxParser.Subtitle - 108)) | (1 << (VfrSyntaxParser.Text - 108)) | (1 << (VfrSyntaxParser.Date - 108)) | (1 << (VfrSyntaxParser.Time - 108)) | (1 << (VfrSyntaxParser.GrayOutIf - 108)) | (1 << (VfrSyntaxParser.Label - 108)) | (1 << (VfrSyntaxParser.CheckBox - 108)) | (1 << (VfrSyntaxParser.Numeric - 108)) | (1 << (VfrSyntaxParser.Password - 108)) | (1 << (VfrSyntaxParser.String - 108)) | (1 << (VfrSyntaxParser.SuppressIf - 108)) | (1 << (VfrSyntaxParser.DisableIf - 108)) | (1 << (VfrSyntaxParser.Goto - 108)))) != 0) or ((((_la - 211)) & ~0x3f) == 0 and ((1 << (_la - 211)) & ((1 << (VfrSyntaxParser.ResetButton - 211)) | (1 << (VfrSyntaxParser.Action - 211)) | (1 << (VfrSyntaxParser.GuidOp - 211)))) != 0):
                self.state = 1881
                self.vfrStatementStatList()
                self.state = 1886
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1887
            self.match(VfrSyntaxParser.EndIf)
            self.state = 1888
            self.match(VfrSyntaxParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementSuppressIfStatContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SuppressIf(self):
            return self.getToken(VfrSyntaxParser.SuppressIf, 0)

        def vfrStatementExpression(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementExpressionContext,0)


        def EndIf(self):
            return self.getToken(VfrSyntaxParser.EndIf, 0)

        def vfrStatementStatList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrStatementStatListContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementStatListContext,i)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementSuppressIfStat

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementSuppressIfStat" ):
                return visitor.visitVfrStatementSuppressIfStat(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementSuppressIfStat(self):

        localctx = VfrSyntaxParser.VfrStatementSuppressIfStatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_vfrStatementSuppressIfStat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1890
            self.match(VfrSyntaxParser.SuppressIf)
            self.state = 1891
            self.vfrStatementExpression()
            self.state = 1892
            self.match(VfrSyntaxParser.T__6)
            self.state = 1896
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & ((1 << (VfrSyntaxParser.OneOf - 108)) | (1 << (VfrSyntaxParser.OrderedList - 108)) | (1 << (VfrSyntaxParser.Subtitle - 108)) | (1 << (VfrSyntaxParser.Text - 108)) | (1 << (VfrSyntaxParser.Date - 108)) | (1 << (VfrSyntaxParser.Time - 108)) | (1 << (VfrSyntaxParser.GrayOutIf - 108)) | (1 << (VfrSyntaxParser.Label - 108)) | (1 << (VfrSyntaxParser.CheckBox - 108)) | (1 << (VfrSyntaxParser.Numeric - 108)) | (1 << (VfrSyntaxParser.Password - 108)) | (1 << (VfrSyntaxParser.String - 108)) | (1 << (VfrSyntaxParser.SuppressIf - 108)) | (1 << (VfrSyntaxParser.DisableIf - 108)) | (1 << (VfrSyntaxParser.Goto - 108)))) != 0) or ((((_la - 211)) & ~0x3f) == 0 and ((1 << (_la - 211)) & ((1 << (VfrSyntaxParser.ResetButton - 211)) | (1 << (VfrSyntaxParser.Action - 211)) | (1 << (VfrSyntaxParser.GuidOp - 211)))) != 0):
                self.state = 1893
                self.vfrStatementStatList()
                self.state = 1898
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1899
            self.match(VfrSyntaxParser.EndIf)
            self.state = 1900
            self.match(VfrSyntaxParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementGrayOutIfStatContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GrayOutIf(self):
            return self.getToken(VfrSyntaxParser.GrayOutIf, 0)

        def vfrStatementExpression(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementExpressionContext,0)


        def EndIf(self):
            return self.getToken(VfrSyntaxParser.EndIf, 0)

        def vfrStatementStatList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrStatementStatListContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementStatListContext,i)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementGrayOutIfStat

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementGrayOutIfStat" ):
                return visitor.visitVfrStatementGrayOutIfStat(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementGrayOutIfStat(self):

        localctx = VfrSyntaxParser.VfrStatementGrayOutIfStatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_vfrStatementGrayOutIfStat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1902
            self.match(VfrSyntaxParser.GrayOutIf)
            self.state = 1903
            self.vfrStatementExpression()
            self.state = 1904
            self.match(VfrSyntaxParser.T__6)
            self.state = 1908
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & ((1 << (VfrSyntaxParser.OneOf - 108)) | (1 << (VfrSyntaxParser.OrderedList - 108)) | (1 << (VfrSyntaxParser.Subtitle - 108)) | (1 << (VfrSyntaxParser.Text - 108)) | (1 << (VfrSyntaxParser.Date - 108)) | (1 << (VfrSyntaxParser.Time - 108)) | (1 << (VfrSyntaxParser.GrayOutIf - 108)) | (1 << (VfrSyntaxParser.Label - 108)) | (1 << (VfrSyntaxParser.CheckBox - 108)) | (1 << (VfrSyntaxParser.Numeric - 108)) | (1 << (VfrSyntaxParser.Password - 108)) | (1 << (VfrSyntaxParser.String - 108)) | (1 << (VfrSyntaxParser.SuppressIf - 108)) | (1 << (VfrSyntaxParser.DisableIf - 108)) | (1 << (VfrSyntaxParser.Goto - 108)))) != 0) or ((((_la - 211)) & ~0x3f) == 0 and ((1 << (_la - 211)) & ((1 << (VfrSyntaxParser.ResetButton - 211)) | (1 << (VfrSyntaxParser.Action - 211)) | (1 << (VfrSyntaxParser.GuidOp - 211)))) != 0):
                self.state = 1905
                self.vfrStatementStatList()
                self.state = 1910
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1911
            self.match(VfrSyntaxParser.EndIf)
            self.state = 1912
            self.match(VfrSyntaxParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementLabelContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.LObj = CIfrLabel()

        def Label(self):
            return self.getToken(VfrSyntaxParser.Label, 0)

        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementLabel

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementLabel" ):
                return visitor.visitVfrStatementLabel(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementLabel(self):

        localctx = VfrSyntaxParser.VfrStatementLabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_vfrStatementLabel)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1914
            self.match(VfrSyntaxParser.Label)
            self.state = 1915
            self.match(VfrSyntaxParser.Number)
            self.state = 1916
            self.match(VfrSyntaxParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementBannerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.BObj = CIfrBanner()
            self.TObj = CIfrTimeout()

        def Banner(self):
            return self.getToken(VfrSyntaxParser.Banner, 0)

        def Title(self):
            return self.getToken(VfrSyntaxParser.Title, 0)

        def OpenParen(self):
            return self.getToken(VfrSyntaxParser.OpenParen, 0)

        def Number(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Number)
            else:
                return self.getToken(VfrSyntaxParser.Number, i)

        def CloseParen(self):
            return self.getToken(VfrSyntaxParser.CloseParen, 0)

        def Line(self):
            return self.getToken(VfrSyntaxParser.Line, 0)

        def Align(self):
            return self.getToken(VfrSyntaxParser.Align, 0)

        def Timeout(self):
            return self.getToken(VfrSyntaxParser.Timeout, 0)

        def Left(self):
            return self.getToken(VfrSyntaxParser.Left, 0)

        def Center(self):
            return self.getToken(VfrSyntaxParser.Center, 0)

        def Right(self):
            return self.getToken(VfrSyntaxParser.Right, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementBanner

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementBanner" ):
                return visitor.visitVfrStatementBanner(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementBanner(self):

        localctx = VfrSyntaxParser.VfrStatementBannerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_vfrStatementBanner)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1918
            self.match(VfrSyntaxParser.Banner)
            self.state = 1920
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.T__3:
                self.state = 1919
                self.match(VfrSyntaxParser.T__3)


            self.state = 1922
            self.match(VfrSyntaxParser.Title)
            self.state = 1923
            self.match(VfrSyntaxParser.T__8)
            self.state = 1924
            self.match(VfrSyntaxParser.T__9)
            self.state = 1925
            self.match(VfrSyntaxParser.OpenParen)
            self.state = 1926
            self.match(VfrSyntaxParser.Number)
            self.state = 1927
            self.match(VfrSyntaxParser.CloseParen)
            self.state = 1928
            self.match(VfrSyntaxParser.T__3)
            self.state = 1939
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VfrSyntaxParser.Line]:
                self.state = 1929
                self.match(VfrSyntaxParser.Line)
                self.state = 1930
                self.match(VfrSyntaxParser.Number)
                self.state = 1931
                self.match(VfrSyntaxParser.T__3)
                self.state = 1932
                self.match(VfrSyntaxParser.Align)
                self.state = 1933
                _la = self._input.LA(1)
                if not(((((_la - 196)) & ~0x3f) == 0 and ((1 << (_la - 196)) & ((1 << (VfrSyntaxParser.Left - 196)) | (1 << (VfrSyntaxParser.Right - 196)) | (1 << (VfrSyntaxParser.Center - 196)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1934
                self.match(VfrSyntaxParser.T__6)
                pass
            elif token in [VfrSyntaxParser.Timeout]:
                self.state = 1935
                self.match(VfrSyntaxParser.Timeout)
                self.state = 1936
                self.match(VfrSyntaxParser.T__8)
                self.state = 1937
                self.match(VfrSyntaxParser.Number)
                self.state = 1938
                self.match(VfrSyntaxParser.T__6)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementExtensionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GuidOp(self):
            return self.getToken(VfrSyntaxParser.GuidOp, 0)

        def Uuid(self):
            return self.getToken(VfrSyntaxParser.Uuid, 0)

        def guidDefinition(self):
            return self.getTypedRuleContext(VfrSyntaxParser.GuidDefinitionContext,0)


        def DataType(self):
            return self.getToken(VfrSyntaxParser.DataType, 0)

        def vfrExtensionData(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrExtensionDataContext,0)


        def EndGuidOp(self):
            return self.getToken(VfrSyntaxParser.EndGuidOp, 0)

        def Uint64(self):
            return self.getToken(VfrSyntaxParser.Uint64, 0)

        def Uint32(self):
            return self.getToken(VfrSyntaxParser.Uint32, 0)

        def Uint16(self):
            return self.getToken(VfrSyntaxParser.Uint16, 0)

        def Uint8(self):
            return self.getToken(VfrSyntaxParser.Uint8, 0)

        def Boolean(self):
            return self.getToken(VfrSyntaxParser.Boolean, 0)

        def EFI_STRING_ID(self):
            return self.getToken(VfrSyntaxParser.EFI_STRING_ID, 0)

        def EFI_HII_DATE(self):
            return self.getToken(VfrSyntaxParser.EFI_HII_DATE, 0)

        def EFI_HII_TIME(self):
            return self.getToken(VfrSyntaxParser.EFI_HII_TIME, 0)

        def EFI_HII_REF(self):
            return self.getToken(VfrSyntaxParser.EFI_HII_REF, 0)

        def StringIdentifier(self):
            return self.getToken(VfrSyntaxParser.StringIdentifier, 0)

        def vfrStatementExtension(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrStatementExtensionContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementExtensionContext,i)


        def OpenBracket(self):
            return self.getToken(VfrSyntaxParser.OpenBracket, 0)

        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def CloseBracket(self):
            return self.getToken(VfrSyntaxParser.CloseBracket, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementExtension

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementExtension" ):
                return visitor.visitVfrStatementExtension(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementExtension(self):

        localctx = VfrSyntaxParser.VfrStatementExtensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_vfrStatementExtension)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1941
            self.match(VfrSyntaxParser.GuidOp)
            self.state = 1942
            self.match(VfrSyntaxParser.Uuid)
            self.state = 1943
            self.match(VfrSyntaxParser.T__8)
            self.state = 1944
            self.guidDefinition()
            self.state = 2011
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,159,self._ctx)
            if la_ == 1:
                self.state = 1945
                self.match(VfrSyntaxParser.T__3)
                self.state = 1946
                self.match(VfrSyntaxParser.DataType)
                self.state = 1947
                self.match(VfrSyntaxParser.T__8)
                self.state = 2008
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [VfrSyntaxParser.Uint64]:
                    self.state = 1948
                    self.match(VfrSyntaxParser.Uint64)
                    self.state = 1952
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VfrSyntaxParser.OpenBracket:
                        self.state = 1949
                        self.match(VfrSyntaxParser.OpenBracket)
                        self.state = 1950
                        self.match(VfrSyntaxParser.Number)
                        self.state = 1951
                        self.match(VfrSyntaxParser.CloseBracket)


                    pass
                elif token in [VfrSyntaxParser.Uint32]:
                    self.state = 1954
                    self.match(VfrSyntaxParser.Uint32)
                    self.state = 1958
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VfrSyntaxParser.OpenBracket:
                        self.state = 1955
                        self.match(VfrSyntaxParser.OpenBracket)
                        self.state = 1956
                        self.match(VfrSyntaxParser.Number)
                        self.state = 1957
                        self.match(VfrSyntaxParser.CloseBracket)


                    pass
                elif token in [VfrSyntaxParser.Uint16]:
                    self.state = 1960
                    self.match(VfrSyntaxParser.Uint16)
                    self.state = 1964
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VfrSyntaxParser.OpenBracket:
                        self.state = 1961
                        self.match(VfrSyntaxParser.OpenBracket)
                        self.state = 1962
                        self.match(VfrSyntaxParser.Number)
                        self.state = 1963
                        self.match(VfrSyntaxParser.CloseBracket)


                    pass
                elif token in [VfrSyntaxParser.Uint8]:
                    self.state = 1966
                    self.match(VfrSyntaxParser.Uint8)
                    self.state = 1970
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VfrSyntaxParser.OpenBracket:
                        self.state = 1967
                        self.match(VfrSyntaxParser.OpenBracket)
                        self.state = 1968
                        self.match(VfrSyntaxParser.Number)
                        self.state = 1969
                        self.match(VfrSyntaxParser.CloseBracket)


                    pass
                elif token in [VfrSyntaxParser.Boolean]:
                    self.state = 1972
                    self.match(VfrSyntaxParser.Boolean)
                    self.state = 1976
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VfrSyntaxParser.OpenBracket:
                        self.state = 1973
                        self.match(VfrSyntaxParser.OpenBracket)
                        self.state = 1974
                        self.match(VfrSyntaxParser.Number)
                        self.state = 1975
                        self.match(VfrSyntaxParser.CloseBracket)


                    pass
                elif token in [VfrSyntaxParser.EFI_STRING_ID]:
                    self.state = 1978
                    self.match(VfrSyntaxParser.EFI_STRING_ID)
                    self.state = 1982
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VfrSyntaxParser.OpenBracket:
                        self.state = 1979
                        self.match(VfrSyntaxParser.OpenBracket)
                        self.state = 1980
                        self.match(VfrSyntaxParser.Number)
                        self.state = 1981
                        self.match(VfrSyntaxParser.CloseBracket)


                    pass
                elif token in [VfrSyntaxParser.EFI_HII_DATE]:
                    self.state = 1984
                    self.match(VfrSyntaxParser.EFI_HII_DATE)
                    self.state = 1988
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VfrSyntaxParser.OpenBracket:
                        self.state = 1985
                        self.match(VfrSyntaxParser.OpenBracket)
                        self.state = 1986
                        self.match(VfrSyntaxParser.Number)
                        self.state = 1987
                        self.match(VfrSyntaxParser.CloseBracket)


                    pass
                elif token in [VfrSyntaxParser.EFI_HII_TIME]:
                    self.state = 1990
                    self.match(VfrSyntaxParser.EFI_HII_TIME)
                    self.state = 1994
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VfrSyntaxParser.OpenBracket:
                        self.state = 1991
                        self.match(VfrSyntaxParser.OpenBracket)
                        self.state = 1992
                        self.match(VfrSyntaxParser.Number)
                        self.state = 1993
                        self.match(VfrSyntaxParser.CloseBracket)


                    pass
                elif token in [VfrSyntaxParser.EFI_HII_REF]:
                    self.state = 1996
                    self.match(VfrSyntaxParser.EFI_HII_REF)
                    self.state = 2000
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VfrSyntaxParser.OpenBracket:
                        self.state = 1997
                        self.match(VfrSyntaxParser.OpenBracket)
                        self.state = 1998
                        self.match(VfrSyntaxParser.Number)
                        self.state = 1999
                        self.match(VfrSyntaxParser.CloseBracket)


                    pass
                elif token in [VfrSyntaxParser.StringIdentifier]:
                    self.state = 2002
                    self.match(VfrSyntaxParser.StringIdentifier)
                    self.state = 2006
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VfrSyntaxParser.OpenBracket:
                        self.state = 2003
                        self.match(VfrSyntaxParser.OpenBracket)
                        self.state = 2004
                        self.match(VfrSyntaxParser.Number)
                        self.state = 2005
                        self.match(VfrSyntaxParser.CloseBracket)


                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2010
                self.vfrExtensionData()


            self.state = 2021
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.T__3:
                self.state = 2013
                self.match(VfrSyntaxParser.T__3)
                self.state = 2017
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==VfrSyntaxParser.GuidOp:
                    self.state = 2014
                    self.vfrStatementExtension()
                    self.state = 2019
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2020
                self.match(VfrSyntaxParser.EndGuidOp)


            self.state = 2023
            self.match(VfrSyntaxParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrExtensionDataContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vfrExtensionDataComponent(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrExtensionDataComponentContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrExtensionDataComponentContext,i)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrExtensionData

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrExtensionData" ):
                return visitor.visitVfrExtensionData(self)
            else:
                return visitor.visitChildren(self)




    def vfrExtensionData(self):

        localctx = VfrSyntaxParser.VfrExtensionDataContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_vfrExtensionData)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2028
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,162,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2025
                    self.vfrExtensionDataComponent() 
                self.state = 2030
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,162,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrExtensionDataComponentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Data(self):
            return self.getToken(VfrSyntaxParser.Data, 0)

        def Number(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Number)
            else:
                return self.getToken(VfrSyntaxParser.Number, i)

        def OpenBracket(self):
            return self.getToken(VfrSyntaxParser.OpenBracket, 0)

        def CloseBracket(self):
            return self.getToken(VfrSyntaxParser.CloseBracket, 0)

        def vfrExtensionDataDotArea(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrExtensionDataDotAreaContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrExtensionDataDotAreaContext,i)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrExtensionDataComponent

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrExtensionDataComponent" ):
                return visitor.visitVfrExtensionDataComponent(self)
            else:
                return visitor.visitChildren(self)




    def vfrExtensionDataComponent(self):

        localctx = VfrSyntaxParser.VfrExtensionDataComponentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_vfrExtensionDataComponent)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2031
            self.match(VfrSyntaxParser.T__3)
            self.state = 2032
            self.match(VfrSyntaxParser.Data)
            self.state = 2036
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.OpenBracket:
                self.state = 2033
                self.match(VfrSyntaxParser.OpenBracket)
                self.state = 2034
                self.match(VfrSyntaxParser.Number)
                self.state = 2035
                self.match(VfrSyntaxParser.CloseBracket)


            self.state = 2041
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==VfrSyntaxParser.Dot:
                self.state = 2038
                self.vfrExtensionDataDotArea()
                self.state = 2043
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2044
            self.match(VfrSyntaxParser.T__8)
            self.state = 2045
            self.match(VfrSyntaxParser.Number)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrExtensionDataDotAreaContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Dot(self):
            return self.getToken(VfrSyntaxParser.Dot, 0)

        def StringIdentifier(self):
            return self.getToken(VfrSyntaxParser.StringIdentifier, 0)

        def OpenBracket(self):
            return self.getToken(VfrSyntaxParser.OpenBracket, 0)

        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def CloseBracket(self):
            return self.getToken(VfrSyntaxParser.CloseBracket, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrExtensionDataDotArea

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrExtensionDataDotArea" ):
                return visitor.visitVfrExtensionDataDotArea(self)
            else:
                return visitor.visitChildren(self)




    def vfrExtensionDataDotArea(self):

        localctx = VfrSyntaxParser.VfrExtensionDataDotAreaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_vfrExtensionDataDotArea)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2047
            self.match(VfrSyntaxParser.Dot)
            self.state = 2048
            self.match(VfrSyntaxParser.StringIdentifier)
            self.state = 2052
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.OpenBracket:
                self.state = 2049
                self.match(VfrSyntaxParser.OpenBracket)
                self.state = 2050
                self.match(VfrSyntaxParser.Number)
                self.state = 2051
                self.match(VfrSyntaxParser.CloseBracket)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementModalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Modal(self):
            return self.getToken(VfrSyntaxParser.Modal, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementModal

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementModal" ):
                return visitor.visitVfrStatementModal(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementModal(self):

        localctx = VfrSyntaxParser.VfrStatementModalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_vfrStatementModal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2054
            self.match(VfrSyntaxParser.Modal)
            self.state = 2055
            self.match(VfrSyntaxParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrStatementExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def andTerm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.AndTermContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.AndTermContext,i)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrStatementExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrStatementExpression" ):
                return visitor.visitVfrStatementExpression(self)
            else:
                return visitor.visitChildren(self)




    def vfrStatementExpression(self):

        localctx = VfrSyntaxParser.VfrStatementExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_vfrStatementExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2057
            self.andTerm()
            self.state = 2062
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,166,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2058
                    self.match(VfrSyntaxParser.T__43)
                    self.state = 2059
                    self.andTerm() 
                self.state = 2064
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,166,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AndTermContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bitwiseorTerm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.BitwiseorTermContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.BitwiseorTermContext,i)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_andTerm

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAndTerm" ):
                return visitor.visitAndTerm(self)
            else:
                return visitor.visitChildren(self)




    def andTerm(self):

        localctx = VfrSyntaxParser.AndTermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_andTerm)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2065
            self.bitwiseorTerm()
            self.state = 2070
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,167,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2066
                    self.match(VfrSyntaxParser.T__44)
                    self.state = 2067
                    self.bitwiseorTerm() 
                self.state = 2072
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,167,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BitwiseorTermContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bitwiseandTerm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.BitwiseandTermContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.BitwiseandTermContext,i)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_bitwiseorTerm

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitwiseorTerm" ):
                return visitor.visitBitwiseorTerm(self)
            else:
                return visitor.visitChildren(self)




    def bitwiseorTerm(self):

        localctx = VfrSyntaxParser.BitwiseorTermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_bitwiseorTerm)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2073
            self.bitwiseandTerm()
            self.state = 2078
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,168,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2074
                    self.match(VfrSyntaxParser.T__10)
                    self.state = 2075
                    self.bitwiseandTerm() 
                self.state = 2080
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,168,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BitwiseandTermContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def equalTerm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.EqualTermContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.EqualTermContext,i)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_bitwiseandTerm

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitwiseandTerm" ):
                return visitor.visitBitwiseandTerm(self)
            else:
                return visitor.visitChildren(self)




    def bitwiseandTerm(self):

        localctx = VfrSyntaxParser.BitwiseandTermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_bitwiseandTerm)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2081
            self.equalTerm()
            self.state = 2086
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,169,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2082
                    self.match(VfrSyntaxParser.T__45)
                    self.state = 2083
                    self.equalTerm() 
                self.state = 2088
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,169,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EqualTermContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def compareTerm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.CompareTermContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.CompareTermContext,i)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_equalTerm

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEqualTerm" ):
                return visitor.visitEqualTerm(self)
            else:
                return visitor.visitChildren(self)




    def equalTerm(self):

        localctx = VfrSyntaxParser.EqualTermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_equalTerm)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2089
            self.compareTerm()
            self.state = 2096
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,171,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2094
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [VfrSyntaxParser.T__46]:
                        self.state = 2090
                        self.match(VfrSyntaxParser.T__46)
                        self.state = 2091
                        self.compareTerm()
                        pass
                    elif token in [VfrSyntaxParser.T__47]:
                        self.state = 2092
                        self.match(VfrSyntaxParser.T__47)
                        self.state = 2093
                        self.compareTerm()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 2098
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,171,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompareTermContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def shiftTerm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.ShiftTermContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.ShiftTermContext,i)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_compareTerm

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompareTerm" ):
                return visitor.visitCompareTerm(self)
            else:
                return visitor.visitChildren(self)




    def compareTerm(self):

        localctx = VfrSyntaxParser.CompareTermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_compareTerm)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2099
            self.shiftTerm()
            self.state = 2110
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,173,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2108
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [VfrSyntaxParser.T__48]:
                        self.state = 2100
                        self.match(VfrSyntaxParser.T__48)
                        self.state = 2101
                        self.shiftTerm()
                        pass
                    elif token in [VfrSyntaxParser.T__49]:
                        self.state = 2102
                        self.match(VfrSyntaxParser.T__49)
                        self.state = 2103
                        self.shiftTerm()
                        pass
                    elif token in [VfrSyntaxParser.T__50]:
                        self.state = 2104
                        self.match(VfrSyntaxParser.T__50)
                        self.state = 2105
                        self.shiftTerm()
                        pass
                    elif token in [VfrSyntaxParser.T__51]:
                        self.state = 2106
                        self.match(VfrSyntaxParser.T__51)
                        self.state = 2107
                        self.shiftTerm()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 2112
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,173,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShiftTermContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def addMinusTerm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.AddMinusTermContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.AddMinusTermContext,i)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_shiftTerm

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShiftTerm" ):
                return visitor.visitShiftTerm(self)
            else:
                return visitor.visitChildren(self)




    def shiftTerm(self):

        localctx = VfrSyntaxParser.ShiftTermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_shiftTerm)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2113
            self.addMinusTerm()
            self.state = 2120
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,175,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2118
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [VfrSyntaxParser.T__52]:
                        self.state = 2114
                        self.match(VfrSyntaxParser.T__52)
                        self.state = 2115
                        self.addMinusTerm()
                        pass
                    elif token in [VfrSyntaxParser.T__53]:
                        self.state = 2116
                        self.match(VfrSyntaxParser.T__53)
                        self.state = 2117
                        self.addMinusTerm()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 2122
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,175,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AddMinusTermContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multdivmodTerm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.MultdivmodTermContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.MultdivmodTermContext,i)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_addMinusTerm

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAddMinusTerm" ):
                return visitor.visitAddMinusTerm(self)
            else:
                return visitor.visitChildren(self)




    def addMinusTerm(self):

        localctx = VfrSyntaxParser.AddMinusTermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_addMinusTerm)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2123
            self.multdivmodTerm()
            self.state = 2130
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,177,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2128
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [VfrSyntaxParser.T__54]:
                        self.state = 2124
                        self.match(VfrSyntaxParser.T__54)
                        self.state = 2125
                        self.multdivmodTerm()
                        pass
                    elif token in [VfrSyntaxParser.T__55]:
                        self.state = 2126
                        self.match(VfrSyntaxParser.T__55)
                        self.state = 2127
                        self.multdivmodTerm()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 2132
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,177,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultdivmodTermContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def castTerm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.CastTermContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.CastTermContext,i)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_multdivmodTerm

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultdivmodTerm" ):
                return visitor.visitMultdivmodTerm(self)
            else:
                return visitor.visitChildren(self)




    def multdivmodTerm(self):

        localctx = VfrSyntaxParser.MultdivmodTermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_multdivmodTerm)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2133
            self.castTerm()
            self.state = 2142
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,179,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2140
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [VfrSyntaxParser.T__56]:
                        self.state = 2134
                        self.match(VfrSyntaxParser.T__56)
                        self.state = 2135
                        self.castTerm()
                        pass
                    elif token in [VfrSyntaxParser.T__16]:
                        self.state = 2136
                        self.match(VfrSyntaxParser.T__16)
                        self.state = 2137
                        self.castTerm()
                        pass
                    elif token in [VfrSyntaxParser.T__57]:
                        self.state = 2138
                        self.match(VfrSyntaxParser.T__57)
                        self.state = 2139
                        self.castTerm()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 2144
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,179,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CastTermContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atomTerm(self):
            return self.getTypedRuleContext(VfrSyntaxParser.AtomTermContext,0)


        def OpenParen(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.OpenParen)
            else:
                return self.getToken(VfrSyntaxParser.OpenParen, i)

        def CloseParen(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.CloseParen)
            else:
                return self.getToken(VfrSyntaxParser.CloseParen, i)

        def Boolean(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Boolean)
            else:
                return self.getToken(VfrSyntaxParser.Boolean, i)

        def Uint64(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Uint64)
            else:
                return self.getToken(VfrSyntaxParser.Uint64, i)

        def Uint32(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Uint32)
            else:
                return self.getToken(VfrSyntaxParser.Uint32, i)

        def Uint16(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Uint16)
            else:
                return self.getToken(VfrSyntaxParser.Uint16, i)

        def Uint8(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Uint8)
            else:
                return self.getToken(VfrSyntaxParser.Uint8, i)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_castTerm

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCastTerm" ):
                return visitor.visitCastTerm(self)
            else:
                return visitor.visitChildren(self)




    def castTerm(self):

        localctx = VfrSyntaxParser.CastTermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_castTerm)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2150
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,180,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2145
                    self.match(VfrSyntaxParser.OpenParen)
                    self.state = 2146
                    _la = self._input.LA(1)
                    if not(((((_la - 142)) & ~0x3f) == 0 and ((1 << (_la - 142)) & ((1 << (VfrSyntaxParser.Boolean - 142)) | (1 << (VfrSyntaxParser.Uint64 - 142)) | (1 << (VfrSyntaxParser.Uint32 - 142)) | (1 << (VfrSyntaxParser.Uint16 - 142)) | (1 << (VfrSyntaxParser.Uint8 - 142)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2147
                    self.match(VfrSyntaxParser.CloseParen) 
                self.state = 2152
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,180,self._ctx)

            self.state = 2153
            self.atomTerm()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AtomTermContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vfrExpressionCatenate(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrExpressionCatenateContext,0)


        def vfrExpressionMatch(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrExpressionMatchContext,0)


        def vfrExpressionParen(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrExpressionParenContext,0)


        def vfrExpressionBuildInFunction(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrExpressionBuildInFunctionContext,0)


        def vfrExpressionConstant(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrExpressionConstantContext,0)


        def vfrExpressionUnaryOp(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrExpressionUnaryOpContext,0)


        def vfrExpressionTernaryOp(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrExpressionTernaryOpContext,0)


        def vfrExpressionMap(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrExpressionMapContext,0)


        def atomTerm(self):
            return self.getTypedRuleContext(VfrSyntaxParser.AtomTermContext,0)


        def vfrExpressionMatch2(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrExpressionMatch2Context,0)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_atomTerm

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtomTerm" ):
                return visitor.visitAtomTerm(self)
            else:
                return visitor.visitChildren(self)




    def atomTerm(self):

        localctx = VfrSyntaxParser.AtomTermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_atomTerm)
        try:
            self.state = 2166
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,181,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2155
                self.vfrExpressionCatenate()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2156
                self.vfrExpressionMatch()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2157
                self.vfrExpressionParen()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2158
                self.vfrExpressionBuildInFunction()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2159
                self.vfrExpressionConstant()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2160
                self.vfrExpressionUnaryOp()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2161
                self.vfrExpressionTernaryOp()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2162
                self.vfrExpressionMap()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2163
                self.match(VfrSyntaxParser.T__58)
                self.state = 2164
                self.atomTerm()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2165
                self.vfrExpressionMatch2()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrExpressionCatenateContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OpenParen(self):
            return self.getToken(VfrSyntaxParser.OpenParen, 0)

        def vfrStatementExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrStatementExpressionContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementExpressionContext,i)


        def CloseParen(self):
            return self.getToken(VfrSyntaxParser.CloseParen, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrExpressionCatenate

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrExpressionCatenate" ):
                return visitor.visitVfrExpressionCatenate(self)
            else:
                return visitor.visitChildren(self)




    def vfrExpressionCatenate(self):

        localctx = VfrSyntaxParser.VfrExpressionCatenateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_vfrExpressionCatenate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2168
            self.match(VfrSyntaxParser.T__59)
            self.state = 2169
            self.match(VfrSyntaxParser.OpenParen)
            self.state = 2170
            self.vfrStatementExpression()
            self.state = 2171
            self.match(VfrSyntaxParser.T__3)
            self.state = 2172
            self.vfrStatementExpression()
            self.state = 2173
            self.match(VfrSyntaxParser.CloseParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrExpressionMatchContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OpenParen(self):
            return self.getToken(VfrSyntaxParser.OpenParen, 0)

        def vfrStatementExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrStatementExpressionContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementExpressionContext,i)


        def CloseParen(self):
            return self.getToken(VfrSyntaxParser.CloseParen, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrExpressionMatch

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrExpressionMatch" ):
                return visitor.visitVfrExpressionMatch(self)
            else:
                return visitor.visitChildren(self)




    def vfrExpressionMatch(self):

        localctx = VfrSyntaxParser.VfrExpressionMatchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_vfrExpressionMatch)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2175
            self.match(VfrSyntaxParser.T__60)
            self.state = 2176
            self.match(VfrSyntaxParser.OpenParen)
            self.state = 2177
            self.vfrStatementExpression()
            self.state = 2178
            self.match(VfrSyntaxParser.T__3)
            self.state = 2179
            self.vfrStatementExpression()
            self.state = 2180
            self.match(VfrSyntaxParser.CloseParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrExpressionParenContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OpenParen(self):
            return self.getToken(VfrSyntaxParser.OpenParen, 0)

        def vfrStatementExpression(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementExpressionContext,0)


        def CloseParen(self):
            return self.getToken(VfrSyntaxParser.CloseParen, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrExpressionParen

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrExpressionParen" ):
                return visitor.visitVfrExpressionParen(self)
            else:
                return visitor.visitChildren(self)




    def vfrExpressionParen(self):

        localctx = VfrSyntaxParser.VfrExpressionParenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_vfrExpressionParen)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2182
            self.match(VfrSyntaxParser.OpenParen)
            self.state = 2183
            self.vfrStatementExpression()
            self.state = 2184
            self.match(VfrSyntaxParser.CloseParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrExpressionBuildInFunctionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dupExp(self):
            return self.getTypedRuleContext(VfrSyntaxParser.DupExpContext,0)


        def ideqvalExp(self):
            return self.getTypedRuleContext(VfrSyntaxParser.IdeqvalExpContext,0)


        def ideqidExp(self):
            return self.getTypedRuleContext(VfrSyntaxParser.IdeqidExpContext,0)


        def ideqvallistExp(self):
            return self.getTypedRuleContext(VfrSyntaxParser.IdeqvallistExpContext,0)


        def questionref1Exp(self):
            return self.getTypedRuleContext(VfrSyntaxParser.Questionref1ExpContext,0)


        def rulerefExp(self):
            return self.getTypedRuleContext(VfrSyntaxParser.RulerefExpContext,0)


        def stringref1Exp(self):
            return self.getTypedRuleContext(VfrSyntaxParser.Stringref1ExpContext,0)


        def pushthisExp(self):
            return self.getTypedRuleContext(VfrSyntaxParser.PushthisExpContext,0)


        def securityExp(self):
            return self.getTypedRuleContext(VfrSyntaxParser.SecurityExpContext,0)


        def getExp(self):
            return self.getTypedRuleContext(VfrSyntaxParser.GetExpContext,0)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrExpressionBuildInFunction

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrExpressionBuildInFunction" ):
                return visitor.visitVfrExpressionBuildInFunction(self)
            else:
                return visitor.visitChildren(self)




    def vfrExpressionBuildInFunction(self):

        localctx = VfrSyntaxParser.VfrExpressionBuildInFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_vfrExpressionBuildInFunction)
        try:
            self.state = 2196
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VfrSyntaxParser.T__61]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2186
                self.dupExp()
                pass
            elif token in [VfrSyntaxParser.T__62]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2187
                self.ideqvalExp()
                pass
            elif token in [VfrSyntaxParser.T__63]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2188
                self.ideqidExp()
                pass
            elif token in [VfrSyntaxParser.T__64]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2189
                self.ideqvallistExp()
                pass
            elif token in [VfrSyntaxParser.T__65, VfrSyntaxParser.Number]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2190
                self.questionref1Exp()
                pass
            elif token in [VfrSyntaxParser.T__66]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2191
                self.rulerefExp()
                pass
            elif token in [VfrSyntaxParser.T__67]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2192
                self.stringref1Exp()
                pass
            elif token in [VfrSyntaxParser.T__68]:
                self.enterOuterAlt(localctx, 8)
                self.state = 2193
                self.pushthisExp()
                pass
            elif token in [VfrSyntaxParser.T__69]:
                self.enterOuterAlt(localctx, 9)
                self.state = 2194
                self.securityExp()
                pass
            elif token in [VfrSyntaxParser.T__70]:
                self.enterOuterAlt(localctx, 10)
                self.state = 2195
                self.getExp()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DupExpContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_dupExp

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDupExp" ):
                return visitor.visitDupExp(self)
            else:
                return visitor.visitChildren(self)




    def dupExp(self):

        localctx = VfrSyntaxParser.DupExpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_dupExp)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2198
            self.match(VfrSyntaxParser.T__61)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdeqvalExpContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vfrQuestionDataFieldName(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrQuestionDataFieldNameContext,0)


        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_ideqvalExp

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdeqvalExp" ):
                return visitor.visitIdeqvalExp(self)
            else:
                return visitor.visitChildren(self)




    def ideqvalExp(self):

        localctx = VfrSyntaxParser.IdeqvalExpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_ideqvalExp)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2200
            self.match(VfrSyntaxParser.T__62)
            self.state = 2201
            self.vfrQuestionDataFieldName()
            self.state = 2202
            self.match(VfrSyntaxParser.T__46)
            self.state = 2203
            self.match(VfrSyntaxParser.Number)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdeqidExpContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vfrQuestionDataFieldName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrQuestionDataFieldNameContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrQuestionDataFieldNameContext,i)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_ideqidExp

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdeqidExp" ):
                return visitor.visitIdeqidExp(self)
            else:
                return visitor.visitChildren(self)




    def ideqidExp(self):

        localctx = VfrSyntaxParser.IdeqidExpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_ideqidExp)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2205
            self.match(VfrSyntaxParser.T__63)
            self.state = 2206
            self.vfrQuestionDataFieldName()
            self.state = 2207
            self.match(VfrSyntaxParser.T__46)
            self.state = 2208
            self.vfrQuestionDataFieldName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdeqvallistExpContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vfrQuestionDataFieldName(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrQuestionDataFieldNameContext,0)


        def Number(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Number)
            else:
                return self.getToken(VfrSyntaxParser.Number, i)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_ideqvallistExp

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdeqvallistExp" ):
                return visitor.visitIdeqvallistExp(self)
            else:
                return visitor.visitChildren(self)




    def ideqvallistExp(self):

        localctx = VfrSyntaxParser.IdeqvallistExpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_ideqvallistExp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2210
            self.match(VfrSyntaxParser.T__64)
            self.state = 2211
            self.vfrQuestionDataFieldName()
            self.state = 2212
            self.match(VfrSyntaxParser.T__46)
            self.state = 2214 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2213
                self.match(VfrSyntaxParser.Number)
                self.state = 2216 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==VfrSyntaxParser.Number):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrQuestionDataFieldNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringIdentifier(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.StringIdentifier)
            else:
                return self.getToken(VfrSyntaxParser.StringIdentifier, i)

        def OpenBracket(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.OpenBracket)
            else:
                return self.getToken(VfrSyntaxParser.OpenBracket, i)

        def Number(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Number)
            else:
                return self.getToken(VfrSyntaxParser.Number, i)

        def CloseBracket(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.CloseBracket)
            else:
                return self.getToken(VfrSyntaxParser.CloseBracket, i)

        def Dot(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.Dot)
            else:
                return self.getToken(VfrSyntaxParser.Dot, i)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrQuestionDataFieldName

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrQuestionDataFieldName" ):
                return visitor.visitVfrQuestionDataFieldName(self)
            else:
                return visitor.visitChildren(self)




    def vfrQuestionDataFieldName(self):

        localctx = VfrSyntaxParser.VfrQuestionDataFieldNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_vfrQuestionDataFieldName)
        self._la = 0 # Token type
        try:
            self.state = 2235
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,186,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2218
                self.match(VfrSyntaxParser.StringIdentifier)
                self.state = 2219
                self.match(VfrSyntaxParser.OpenBracket)
                self.state = 2220
                self.match(VfrSyntaxParser.Number)
                self.state = 2221
                self.match(VfrSyntaxParser.CloseBracket)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2222
                self.match(VfrSyntaxParser.StringIdentifier)
                self.state = 2232
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==VfrSyntaxParser.Dot:
                    self.state = 2223
                    self.match(VfrSyntaxParser.Dot)
                    self.state = 2224
                    self.match(VfrSyntaxParser.StringIdentifier)
                    self.state = 2228
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==VfrSyntaxParser.OpenBracket:
                        self.state = 2225
                        self.match(VfrSyntaxParser.OpenBracket)
                        self.state = 2226
                        self.match(VfrSyntaxParser.Number)
                        self.state = 2227
                        self.match(VfrSyntaxParser.CloseBracket)


                    self.state = 2234
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Questionref1ExpContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OpenParen(self):
            return self.getToken(VfrSyntaxParser.OpenParen, 0)

        def StringIdentifier(self):
            return self.getToken(VfrSyntaxParser.StringIdentifier, 0)

        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def CloseParen(self):
            return self.getToken(VfrSyntaxParser.CloseParen, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_questionref1Exp

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuestionref1Exp" ):
                return visitor.visitQuestionref1Exp(self)
            else:
                return visitor.visitChildren(self)




    def questionref1Exp(self):

        localctx = VfrSyntaxParser.Questionref1ExpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_questionref1Exp)
        try:
            self.state = 2242
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VfrSyntaxParser.T__65]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2237
                self.match(VfrSyntaxParser.T__65)
                self.state = 2238
                self.match(VfrSyntaxParser.OpenParen)
                self.state = 2239
                self.match(VfrSyntaxParser.StringIdentifier)
                pass
            elif token in [VfrSyntaxParser.Number]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2240
                self.match(VfrSyntaxParser.Number)
                self.state = 2241
                self.match(VfrSyntaxParser.CloseParen)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RulerefExpContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OpenParen(self):
            return self.getToken(VfrSyntaxParser.OpenParen, 0)

        def StringIdentifier(self):
            return self.getToken(VfrSyntaxParser.StringIdentifier, 0)

        def CloseParen(self):
            return self.getToken(VfrSyntaxParser.CloseParen, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_rulerefExp

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRulerefExp" ):
                return visitor.visitRulerefExp(self)
            else:
                return visitor.visitChildren(self)




    def rulerefExp(self):

        localctx = VfrSyntaxParser.RulerefExpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_rulerefExp)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2244
            self.match(VfrSyntaxParser.T__66)
            self.state = 2245
            self.match(VfrSyntaxParser.OpenParen)
            self.state = 2246
            self.match(VfrSyntaxParser.StringIdentifier)
            self.state = 2247
            self.match(VfrSyntaxParser.CloseParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Stringref1ExpContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OpenParen(self):
            return self.getToken(VfrSyntaxParser.OpenParen, 0)

        def getStringId(self):
            return self.getTypedRuleContext(VfrSyntaxParser.GetStringIdContext,0)


        def CloseParen(self):
            return self.getToken(VfrSyntaxParser.CloseParen, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_stringref1Exp

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringref1Exp" ):
                return visitor.visitStringref1Exp(self)
            else:
                return visitor.visitChildren(self)




    def stringref1Exp(self):

        localctx = VfrSyntaxParser.Stringref1ExpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_stringref1Exp)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2249
            self.match(VfrSyntaxParser.T__67)
            self.state = 2250
            self.match(VfrSyntaxParser.OpenParen)
            self.state = 2251
            self.getStringId()
            self.state = 2252
            self.match(VfrSyntaxParser.CloseParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PushthisExpContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_pushthisExp

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPushthisExp" ):
                return visitor.visitPushthisExp(self)
            else:
                return visitor.visitChildren(self)




    def pushthisExp(self):

        localctx = VfrSyntaxParser.PushthisExpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_pushthisExp)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2254
            self.match(VfrSyntaxParser.T__68)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SecurityExpContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OpenParen(self):
            return self.getToken(VfrSyntaxParser.OpenParen, 0)

        def guidDefinition(self):
            return self.getTypedRuleContext(VfrSyntaxParser.GuidDefinitionContext,0)


        def CloseParen(self):
            return self.getToken(VfrSyntaxParser.CloseParen, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_securityExp

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSecurityExp" ):
                return visitor.visitSecurityExp(self)
            else:
                return visitor.visitChildren(self)




    def securityExp(self):

        localctx = VfrSyntaxParser.SecurityExpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_securityExp)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2256
            self.match(VfrSyntaxParser.T__69)
            self.state = 2257
            self.match(VfrSyntaxParser.OpenParen)
            self.state = 2258
            self.guidDefinition()
            self.state = 2259
            self.match(VfrSyntaxParser.CloseParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GetExpContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.BaseInfo = EFI_VARSTORE_INFO()
            self.VarIdStr = None

        def OpenParen(self):
            return self.getToken(VfrSyntaxParser.OpenParen, 0)

        def vfrStorageVarId(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStorageVarIdContext,0)


        def CloseParen(self):
            return self.getToken(VfrSyntaxParser.CloseParen, 0)

        def FLAGS(self):
            return self.getToken(VfrSyntaxParser.FLAGS, 0)

        def vfrNumericFlags(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrNumericFlagsContext,0)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_getExp

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGetExp" ):
                return visitor.visitGetExp(self)
            else:
                return visitor.visitChildren(self)




    def getExp(self):

        localctx = VfrSyntaxParser.GetExpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_getExp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2261
            self.match(VfrSyntaxParser.T__70)
            self.state = 2262
            self.match(VfrSyntaxParser.OpenParen)
            self.state = 2263
            self.vfrStorageVarId(localctx.BaseInfo, localctx.VarIdStr, False)
            self.state = 2268
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.T__10:
                self.state = 2264
                self.match(VfrSyntaxParser.T__10)
                self.state = 2265
                self.match(VfrSyntaxParser.FLAGS)
                self.state = 2266
                self.match(VfrSyntaxParser.T__8)
                self.state = 2267
                self.vfrNumericFlags()


            self.state = 2270
            self.match(VfrSyntaxParser.CloseParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrExpressionConstantContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrExpressionConstant

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrExpressionConstant" ):
                return visitor.visitVfrExpressionConstant(self)
            else:
                return visitor.visitChildren(self)




    def vfrExpressionConstant(self):

        localctx = VfrSyntaxParser.VfrExpressionConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_vfrExpressionConstant)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2272
            _la = self._input.LA(1)
            if not(((((_la - 12)) & ~0x3f) == 0 and ((1 << (_la - 12)) & ((1 << (VfrSyntaxParser.T__11 - 12)) | (1 << (VfrSyntaxParser.T__12 - 12)) | (1 << (VfrSyntaxParser.T__13 - 12)) | (1 << (VfrSyntaxParser.T__14 - 12)) | (1 << (VfrSyntaxParser.T__15 - 12)) | (1 << (VfrSyntaxParser.T__71 - 12)) | (1 << (VfrSyntaxParser.T__72 - 12)))) != 0) or _la==VfrSyntaxParser.Number):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrExpressionUnaryOpContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lengthExp(self):
            return self.getTypedRuleContext(VfrSyntaxParser.LengthExpContext,0)


        def bitwisenotExp(self):
            return self.getTypedRuleContext(VfrSyntaxParser.BitwisenotExpContext,0)


        def question23refExp(self):
            return self.getTypedRuleContext(VfrSyntaxParser.Question23refExpContext,0)


        def stringref2Exp(self):
            return self.getTypedRuleContext(VfrSyntaxParser.Stringref2ExpContext,0)


        def toboolExp(self):
            return self.getTypedRuleContext(VfrSyntaxParser.ToboolExpContext,0)


        def tostringExp(self):
            return self.getTypedRuleContext(VfrSyntaxParser.TostringExpContext,0)


        def unintExp(self):
            return self.getTypedRuleContext(VfrSyntaxParser.UnintExpContext,0)


        def toupperExp(self):
            return self.getTypedRuleContext(VfrSyntaxParser.ToupperExpContext,0)


        def tolwerExp(self):
            return self.getTypedRuleContext(VfrSyntaxParser.TolwerExpContext,0)


        def setExp(self):
            return self.getTypedRuleContext(VfrSyntaxParser.SetExpContext,0)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrExpressionUnaryOp

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrExpressionUnaryOp" ):
                return visitor.visitVfrExpressionUnaryOp(self)
            else:
                return visitor.visitChildren(self)




    def vfrExpressionUnaryOp(self):

        localctx = VfrSyntaxParser.VfrExpressionUnaryOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_vfrExpressionUnaryOp)
        try:
            self.state = 2284
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VfrSyntaxParser.T__73]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2274
                self.lengthExp()
                pass
            elif token in [VfrSyntaxParser.T__74]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2275
                self.bitwisenotExp()
                pass
            elif token in [VfrSyntaxParser.T__75]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2276
                self.question23refExp()
                pass
            elif token in [VfrSyntaxParser.T__76]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2277
                self.stringref2Exp()
                pass
            elif token in [VfrSyntaxParser.T__77]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2278
                self.toboolExp()
                pass
            elif token in [VfrSyntaxParser.T__78]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2279
                self.tostringExp()
                pass
            elif token in [VfrSyntaxParser.T__80]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2280
                self.unintExp()
                pass
            elif token in [VfrSyntaxParser.T__81]:
                self.enterOuterAlt(localctx, 8)
                self.state = 2281
                self.toupperExp()
                pass
            elif token in [VfrSyntaxParser.T__82]:
                self.enterOuterAlt(localctx, 9)
                self.state = 2282
                self.tolwerExp()
                pass
            elif token in [VfrSyntaxParser.T__83]:
                self.enterOuterAlt(localctx, 10)
                self.state = 2283
                self.setExp()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LengthExpContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OpenParen(self):
            return self.getToken(VfrSyntaxParser.OpenParen, 0)

        def vfrStatementExpression(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementExpressionContext,0)


        def CloseParen(self):
            return self.getToken(VfrSyntaxParser.CloseParen, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_lengthExp

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLengthExp" ):
                return visitor.visitLengthExp(self)
            else:
                return visitor.visitChildren(self)




    def lengthExp(self):

        localctx = VfrSyntaxParser.LengthExpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_lengthExp)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2286
            self.match(VfrSyntaxParser.T__73)
            self.state = 2287
            self.match(VfrSyntaxParser.OpenParen)
            self.state = 2288
            self.vfrStatementExpression()
            self.state = 2289
            self.match(VfrSyntaxParser.CloseParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BitwisenotExpContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OpenParen(self):
            return self.getToken(VfrSyntaxParser.OpenParen, 0)

        def vfrStatementExpression(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementExpressionContext,0)


        def CloseParen(self):
            return self.getToken(VfrSyntaxParser.CloseParen, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_bitwisenotExp

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitwisenotExp" ):
                return visitor.visitBitwisenotExp(self)
            else:
                return visitor.visitChildren(self)




    def bitwisenotExp(self):

        localctx = VfrSyntaxParser.BitwisenotExpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_bitwisenotExp)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2291
            self.match(VfrSyntaxParser.T__74)
            self.state = 2292
            self.match(VfrSyntaxParser.OpenParen)
            self.state = 2293
            self.vfrStatementExpression()
            self.state = 2294
            self.match(VfrSyntaxParser.CloseParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Question23refExpContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OpenParen(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.OpenParen)
            else:
                return self.getToken(VfrSyntaxParser.OpenParen, i)

        def CloseParen(self, i:int=None):
            if i is None:
                return self.getTokens(VfrSyntaxParser.CloseParen)
            else:
                return self.getToken(VfrSyntaxParser.CloseParen, i)

        def vfrStatementExpression(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementExpressionContext,0)


        def DevicePath(self):
            return self.getToken(VfrSyntaxParser.DevicePath, 0)

        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def Uuid(self):
            return self.getToken(VfrSyntaxParser.Uuid, 0)

        def guidDefinition(self):
            return self.getTypedRuleContext(VfrSyntaxParser.GuidDefinitionContext,0)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_question23refExp

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuestion23refExp" ):
                return visitor.visitQuestion23refExp(self)
            else:
                return visitor.visitChildren(self)




    def question23refExp(self):

        localctx = VfrSyntaxParser.Question23refExpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_question23refExp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2296
            self.match(VfrSyntaxParser.T__75)
            self.state = 2297
            self.match(VfrSyntaxParser.OpenParen)
            self.state = 2305
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.DevicePath:
                self.state = 2298
                self.match(VfrSyntaxParser.DevicePath)
                self.state = 2299
                self.match(VfrSyntaxParser.T__8)
                self.state = 2300
                self.match(VfrSyntaxParser.T__9)
                self.state = 2301
                self.match(VfrSyntaxParser.OpenParen)
                self.state = 2302
                self.match(VfrSyntaxParser.Number)
                self.state = 2303
                self.match(VfrSyntaxParser.CloseParen)
                self.state = 2304
                self.match(VfrSyntaxParser.T__3)


            self.state = 2312
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.Uuid:
                self.state = 2307
                self.match(VfrSyntaxParser.Uuid)
                self.state = 2308
                self.match(VfrSyntaxParser.T__8)
                self.state = 2309
                self.guidDefinition()
                self.state = 2310
                self.match(VfrSyntaxParser.T__3)


            self.state = 2314
            self.match(VfrSyntaxParser.CloseParen)
            self.state = 2315
            self.vfrStatementExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Stringref2ExpContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OpenParen(self):
            return self.getToken(VfrSyntaxParser.OpenParen, 0)

        def vfrStatementExpression(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementExpressionContext,0)


        def CloseParen(self):
            return self.getToken(VfrSyntaxParser.CloseParen, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_stringref2Exp

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringref2Exp" ):
                return visitor.visitStringref2Exp(self)
            else:
                return visitor.visitChildren(self)




    def stringref2Exp(self):

        localctx = VfrSyntaxParser.Stringref2ExpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_stringref2Exp)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2317
            self.match(VfrSyntaxParser.T__76)
            self.state = 2318
            self.match(VfrSyntaxParser.OpenParen)
            self.state = 2319
            self.vfrStatementExpression()
            self.state = 2320
            self.match(VfrSyntaxParser.CloseParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ToboolExpContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OpenParen(self):
            return self.getToken(VfrSyntaxParser.OpenParen, 0)

        def vfrStatementExpression(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementExpressionContext,0)


        def CloseParen(self):
            return self.getToken(VfrSyntaxParser.CloseParen, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_toboolExp

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitToboolExp" ):
                return visitor.visitToboolExp(self)
            else:
                return visitor.visitChildren(self)




    def toboolExp(self):

        localctx = VfrSyntaxParser.ToboolExpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_toboolExp)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2322
            self.match(VfrSyntaxParser.T__77)
            self.state = 2323
            self.match(VfrSyntaxParser.OpenParen)
            self.state = 2324
            self.vfrStatementExpression()
            self.state = 2325
            self.match(VfrSyntaxParser.CloseParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TostringExpContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OpenParen(self):
            return self.getToken(VfrSyntaxParser.OpenParen, 0)

        def vfrStatementExpression(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementExpressionContext,0)


        def CloseParen(self):
            return self.getToken(VfrSyntaxParser.CloseParen, 0)

        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_tostringExp

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTostringExp" ):
                return visitor.visitTostringExp(self)
            else:
                return visitor.visitChildren(self)




    def tostringExp(self):

        localctx = VfrSyntaxParser.TostringExpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_tostringExp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2327
            self.match(VfrSyntaxParser.T__78)
            self.state = 2332
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.T__79:
                self.state = 2328
                self.match(VfrSyntaxParser.T__79)
                self.state = 2329
                self.match(VfrSyntaxParser.T__8)
                self.state = 2330
                self.match(VfrSyntaxParser.Number)
                self.state = 2331
                self.match(VfrSyntaxParser.T__3)


            self.state = 2334
            self.match(VfrSyntaxParser.OpenParen)
            self.state = 2335
            self.vfrStatementExpression()
            self.state = 2336
            self.match(VfrSyntaxParser.CloseParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnintExpContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OpenParen(self):
            return self.getToken(VfrSyntaxParser.OpenParen, 0)

        def vfrStatementExpression(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementExpressionContext,0)


        def CloseParen(self):
            return self.getToken(VfrSyntaxParser.CloseParen, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_unintExp

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnintExp" ):
                return visitor.visitUnintExp(self)
            else:
                return visitor.visitChildren(self)




    def unintExp(self):

        localctx = VfrSyntaxParser.UnintExpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_unintExp)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2338
            self.match(VfrSyntaxParser.T__80)
            self.state = 2339
            self.match(VfrSyntaxParser.OpenParen)
            self.state = 2340
            self.vfrStatementExpression()
            self.state = 2341
            self.match(VfrSyntaxParser.CloseParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ToupperExpContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OpenParen(self):
            return self.getToken(VfrSyntaxParser.OpenParen, 0)

        def vfrStatementExpression(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementExpressionContext,0)


        def CloseParen(self):
            return self.getToken(VfrSyntaxParser.CloseParen, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_toupperExp

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitToupperExp" ):
                return visitor.visitToupperExp(self)
            else:
                return visitor.visitChildren(self)




    def toupperExp(self):

        localctx = VfrSyntaxParser.ToupperExpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_toupperExp)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2343
            self.match(VfrSyntaxParser.T__81)
            self.state = 2344
            self.match(VfrSyntaxParser.OpenParen)
            self.state = 2345
            self.vfrStatementExpression()
            self.state = 2346
            self.match(VfrSyntaxParser.CloseParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TolwerExpContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OpenParen(self):
            return self.getToken(VfrSyntaxParser.OpenParen, 0)

        def vfrStatementExpression(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementExpressionContext,0)


        def CloseParen(self):
            return self.getToken(VfrSyntaxParser.CloseParen, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_tolwerExp

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTolwerExp" ):
                return visitor.visitTolwerExp(self)
            else:
                return visitor.visitChildren(self)




    def tolwerExp(self):

        localctx = VfrSyntaxParser.TolwerExpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_tolwerExp)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2348
            self.match(VfrSyntaxParser.T__82)
            self.state = 2349
            self.match(VfrSyntaxParser.OpenParen)
            self.state = 2350
            self.vfrStatementExpression()
            self.state = 2351
            self.match(VfrSyntaxParser.CloseParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetExpContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.BaseInfo = EFI_VARSTORE_INFO()
            self.VarIdStr = None

        def OpenParen(self):
            return self.getToken(VfrSyntaxParser.OpenParen, 0)

        def vfrStorageVarId(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStorageVarIdContext,0)


        def vfrStatementExpression(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementExpressionContext,0)


        def CloseParen(self):
            return self.getToken(VfrSyntaxParser.CloseParen, 0)

        def FLAGS(self):
            return self.getToken(VfrSyntaxParser.FLAGS, 0)

        def vfrNumericFlags(self):
            return self.getTypedRuleContext(VfrSyntaxParser.VfrNumericFlagsContext,0)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_setExp

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetExp" ):
                return visitor.visitSetExp(self)
            else:
                return visitor.visitChildren(self)




    def setExp(self):

        localctx = VfrSyntaxParser.SetExpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_setExp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2353
            self.match(VfrSyntaxParser.T__83)
            self.state = 2354
            self.match(VfrSyntaxParser.OpenParen)
            self.state = 2355
            self.vfrStorageVarId(localctx.BaseInfo, localctx.VarIdStr, False)
            self.state = 2360
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==VfrSyntaxParser.T__10:
                self.state = 2356
                self.match(VfrSyntaxParser.T__10)
                self.state = 2357
                self.match(VfrSyntaxParser.FLAGS)
                self.state = 2358
                self.match(VfrSyntaxParser.T__8)
                self.state = 2359
                self.vfrNumericFlags()


            self.state = 2362
            self.match(VfrSyntaxParser.T__3)
            self.state = 2363
            self.vfrStatementExpression()
            self.state = 2364
            self.match(VfrSyntaxParser.CloseParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrExpressionTernaryOpContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditionalExp(self):
            return self.getTypedRuleContext(VfrSyntaxParser.ConditionalExpContext,0)


        def findExp(self):
            return self.getTypedRuleContext(VfrSyntaxParser.FindExpContext,0)


        def midExp(self):
            return self.getTypedRuleContext(VfrSyntaxParser.MidExpContext,0)


        def tokenExp(self):
            return self.getTypedRuleContext(VfrSyntaxParser.TokenExpContext,0)


        def spanExp(self):
            return self.getTypedRuleContext(VfrSyntaxParser.SpanExpContext,0)


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrExpressionTernaryOp

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrExpressionTernaryOp" ):
                return visitor.visitVfrExpressionTernaryOp(self)
            else:
                return visitor.visitChildren(self)




    def vfrExpressionTernaryOp(self):

        localctx = VfrSyntaxParser.VfrExpressionTernaryOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_vfrExpressionTernaryOp)
        try:
            self.state = 2371
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [VfrSyntaxParser.Cond]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2366
                self.conditionalExp()
                pass
            elif token in [VfrSyntaxParser.Find]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2367
                self.findExp()
                pass
            elif token in [VfrSyntaxParser.Mid]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2368
                self.midExp()
                pass
            elif token in [VfrSyntaxParser.Tok]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2369
                self.tokenExp()
                pass
            elif token in [VfrSyntaxParser.Span]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2370
                self.spanExp()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConditionalExpContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Cond(self):
            return self.getToken(VfrSyntaxParser.Cond, 0)

        def OpenParen(self):
            return self.getToken(VfrSyntaxParser.OpenParen, 0)

        def vfrStatementExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrStatementExpressionContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementExpressionContext,i)


        def CloseParen(self):
            return self.getToken(VfrSyntaxParser.CloseParen, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_conditionalExp

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConditionalExp" ):
                return visitor.visitConditionalExp(self)
            else:
                return visitor.visitChildren(self)




    def conditionalExp(self):

        localctx = VfrSyntaxParser.ConditionalExpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_conditionalExp)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2373
            self.match(VfrSyntaxParser.Cond)
            self.state = 2374
            self.match(VfrSyntaxParser.OpenParen)
            self.state = 2375
            self.vfrStatementExpression()
            self.state = 2376
            self.match(VfrSyntaxParser.T__84)
            self.state = 2377
            self.vfrStatementExpression()
            self.state = 2378
            self.match(VfrSyntaxParser.T__7)
            self.state = 2379
            self.vfrStatementExpression()
            self.state = 2380
            self.match(VfrSyntaxParser.CloseParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FindExpContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Find(self):
            return self.getToken(VfrSyntaxParser.Find, 0)

        def OpenParen(self):
            return self.getToken(VfrSyntaxParser.OpenParen, 0)

        def findFormat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.FindFormatContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.FindFormatContext,i)


        def vfrStatementExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrStatementExpressionContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementExpressionContext,i)


        def CloseParen(self):
            return self.getToken(VfrSyntaxParser.CloseParen, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_findExp

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFindExp" ):
                return visitor.visitFindExp(self)
            else:
                return visitor.visitChildren(self)




    def findExp(self):

        localctx = VfrSyntaxParser.FindExpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_findExp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2382
            self.match(VfrSyntaxParser.Find)
            self.state = 2383
            self.match(VfrSyntaxParser.OpenParen)
            self.state = 2384
            self.findFormat()
            self.state = 2389
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==VfrSyntaxParser.T__10:
                self.state = 2385
                self.match(VfrSyntaxParser.T__10)
                self.state = 2386
                self.findFormat()
                self.state = 2391
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2392
            self.match(VfrSyntaxParser.T__3)
            self.state = 2393
            self.vfrStatementExpression()
            self.state = 2394
            self.match(VfrSyntaxParser.T__3)
            self.state = 2395
            self.vfrStatementExpression()
            self.state = 2396
            self.match(VfrSyntaxParser.T__3)
            self.state = 2397
            self.vfrStatementExpression()
            self.state = 2398
            self.match(VfrSyntaxParser.CloseParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FindFormatContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_findFormat

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFindFormat" ):
                return visitor.visitFindFormat(self)
            else:
                return visitor.visitChildren(self)




    def findFormat(self):

        localctx = VfrSyntaxParser.FindFormatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_findFormat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2400
            _la = self._input.LA(1)
            if not(_la==VfrSyntaxParser.T__85 or _la==VfrSyntaxParser.T__86):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MidExpContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Mid(self):
            return self.getToken(VfrSyntaxParser.Mid, 0)

        def OpenParen(self):
            return self.getToken(VfrSyntaxParser.OpenParen, 0)

        def vfrStatementExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrStatementExpressionContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementExpressionContext,i)


        def CloseParen(self):
            return self.getToken(VfrSyntaxParser.CloseParen, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_midExp

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMidExp" ):
                return visitor.visitMidExp(self)
            else:
                return visitor.visitChildren(self)




    def midExp(self):

        localctx = VfrSyntaxParser.MidExpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_midExp)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2402
            self.match(VfrSyntaxParser.Mid)
            self.state = 2403
            self.match(VfrSyntaxParser.OpenParen)
            self.state = 2404
            self.vfrStatementExpression()
            self.state = 2405
            self.match(VfrSyntaxParser.T__3)
            self.state = 2406
            self.vfrStatementExpression()
            self.state = 2407
            self.match(VfrSyntaxParser.T__3)
            self.state = 2408
            self.vfrStatementExpression()
            self.state = 2409
            self.match(VfrSyntaxParser.CloseParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TokenExpContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Tok(self):
            return self.getToken(VfrSyntaxParser.Tok, 0)

        def OpenParen(self):
            return self.getToken(VfrSyntaxParser.OpenParen, 0)

        def vfrStatementExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrStatementExpressionContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementExpressionContext,i)


        def CloseParen(self):
            return self.getToken(VfrSyntaxParser.CloseParen, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_tokenExp

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTokenExp" ):
                return visitor.visitTokenExp(self)
            else:
                return visitor.visitChildren(self)




    def tokenExp(self):

        localctx = VfrSyntaxParser.TokenExpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_tokenExp)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2411
            self.match(VfrSyntaxParser.Tok)
            self.state = 2412
            self.match(VfrSyntaxParser.OpenParen)
            self.state = 2413
            self.vfrStatementExpression()
            self.state = 2414
            self.match(VfrSyntaxParser.T__3)
            self.state = 2415
            self.vfrStatementExpression()
            self.state = 2416
            self.match(VfrSyntaxParser.T__3)
            self.state = 2417
            self.vfrStatementExpression()
            self.state = 2418
            self.match(VfrSyntaxParser.CloseParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpanExpContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Span(self):
            return self.getToken(VfrSyntaxParser.Span, 0)

        def OpenParen(self):
            return self.getToken(VfrSyntaxParser.OpenParen, 0)

        def FLAGS(self):
            return self.getToken(VfrSyntaxParser.FLAGS, 0)

        def spanFlags(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.SpanFlagsContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.SpanFlagsContext,i)


        def vfrStatementExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrStatementExpressionContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementExpressionContext,i)


        def CloseParen(self):
            return self.getToken(VfrSyntaxParser.CloseParen, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_spanExp

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSpanExp" ):
                return visitor.visitSpanExp(self)
            else:
                return visitor.visitChildren(self)




    def spanExp(self):

        localctx = VfrSyntaxParser.SpanExpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 346, self.RULE_spanExp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2420
            self.match(VfrSyntaxParser.Span)
            self.state = 2421
            self.match(VfrSyntaxParser.OpenParen)
            self.state = 2422
            self.match(VfrSyntaxParser.FLAGS)
            self.state = 2423
            self.match(VfrSyntaxParser.T__8)
            self.state = 2424
            self.spanFlags()
            self.state = 2429
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==VfrSyntaxParser.T__10:
                self.state = 2425
                self.match(VfrSyntaxParser.T__10)
                self.state = 2426
                self.spanFlags()
                self.state = 2431
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2432
            self.match(VfrSyntaxParser.T__3)
            self.state = 2433
            self.vfrStatementExpression()
            self.state = 2434
            self.match(VfrSyntaxParser.T__3)
            self.state = 2435
            self.vfrStatementExpression()
            self.state = 2436
            self.match(VfrSyntaxParser.T__3)
            self.state = 2437
            self.vfrStatementExpression()
            self.state = 2438
            self.match(VfrSyntaxParser.CloseParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpanFlagsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Number(self):
            return self.getToken(VfrSyntaxParser.Number, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_spanFlags

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSpanFlags" ):
                return visitor.visitSpanFlags(self)
            else:
                return visitor.visitChildren(self)




    def spanFlags(self):

        localctx = VfrSyntaxParser.SpanFlagsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 348, self.RULE_spanFlags)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2440
            _la = self._input.LA(1)
            if not(_la==VfrSyntaxParser.T__87 or _la==VfrSyntaxParser.T__88 or _la==VfrSyntaxParser.Number):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrExpressionMapContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OpenParen(self):
            return self.getToken(VfrSyntaxParser.OpenParen, 0)

        def vfrStatementExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrStatementExpressionContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementExpressionContext,i)


        def CloseParen(self):
            return self.getToken(VfrSyntaxParser.CloseParen, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrExpressionMap

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrExpressionMap" ):
                return visitor.visitVfrExpressionMap(self)
            else:
                return visitor.visitChildren(self)




    def vfrExpressionMap(self):

        localctx = VfrSyntaxParser.VfrExpressionMapContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_vfrExpressionMap)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2442
            self.match(VfrSyntaxParser.T__89)
            self.state = 2443
            self.match(VfrSyntaxParser.OpenParen)
            self.state = 2444
            self.vfrStatementExpression()
            self.state = 2445
            self.match(VfrSyntaxParser.T__7)
            self.state = 2453
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << VfrSyntaxParser.T__11) | (1 << VfrSyntaxParser.T__12) | (1 << VfrSyntaxParser.T__13) | (1 << VfrSyntaxParser.T__14) | (1 << VfrSyntaxParser.T__15) | (1 << VfrSyntaxParser.T__58) | (1 << VfrSyntaxParser.T__59) | (1 << VfrSyntaxParser.T__60) | (1 << VfrSyntaxParser.T__61) | (1 << VfrSyntaxParser.T__62))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (VfrSyntaxParser.T__63 - 64)) | (1 << (VfrSyntaxParser.T__64 - 64)) | (1 << (VfrSyntaxParser.T__65 - 64)) | (1 << (VfrSyntaxParser.T__66 - 64)) | (1 << (VfrSyntaxParser.T__67 - 64)) | (1 << (VfrSyntaxParser.T__68 - 64)) | (1 << (VfrSyntaxParser.T__69 - 64)) | (1 << (VfrSyntaxParser.T__70 - 64)) | (1 << (VfrSyntaxParser.T__71 - 64)) | (1 << (VfrSyntaxParser.T__72 - 64)) | (1 << (VfrSyntaxParser.T__73 - 64)) | (1 << (VfrSyntaxParser.T__74 - 64)) | (1 << (VfrSyntaxParser.T__75 - 64)) | (1 << (VfrSyntaxParser.T__76 - 64)) | (1 << (VfrSyntaxParser.T__77 - 64)) | (1 << (VfrSyntaxParser.T__78 - 64)) | (1 << (VfrSyntaxParser.T__80 - 64)) | (1 << (VfrSyntaxParser.T__81 - 64)) | (1 << (VfrSyntaxParser.T__82 - 64)) | (1 << (VfrSyntaxParser.T__83 - 64)) | (1 << (VfrSyntaxParser.T__89 - 64)) | (1 << (VfrSyntaxParser.T__90 - 64)) | (1 << (VfrSyntaxParser.OpenParen - 64)))) != 0) or ((((_la - 241)) & ~0x3f) == 0 and ((1 << (_la - 241)) & ((1 << (VfrSyntaxParser.Cond - 241)) | (1 << (VfrSyntaxParser.Find - 241)) | (1 << (VfrSyntaxParser.Mid - 241)) | (1 << (VfrSyntaxParser.Tok - 241)) | (1 << (VfrSyntaxParser.Span - 241)) | (1 << (VfrSyntaxParser.Number - 241)))) != 0):
                self.state = 2446
                self.vfrStatementExpression()
                self.state = 2447
                self.match(VfrSyntaxParser.T__3)
                self.state = 2448
                self.vfrStatementExpression()
                self.state = 2449
                self.match(VfrSyntaxParser.T__6)
                self.state = 2455
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2456
            self.match(VfrSyntaxParser.CloseParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfrExpressionMatch2Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OpenParen(self):
            return self.getToken(VfrSyntaxParser.OpenParen, 0)

        def vfrStatementExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VfrSyntaxParser.VfrStatementExpressionContext)
            else:
                return self.getTypedRuleContext(VfrSyntaxParser.VfrStatementExpressionContext,i)


        def guidDefinition(self):
            return self.getTypedRuleContext(VfrSyntaxParser.GuidDefinitionContext,0)


        def CloseParen(self):
            return self.getToken(VfrSyntaxParser.CloseParen, 0)

        def getRuleIndex(self):
            return VfrSyntaxParser.RULE_vfrExpressionMatch2

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfrExpressionMatch2" ):
                return visitor.visitVfrExpressionMatch2(self)
            else:
                return visitor.visitChildren(self)




    def vfrExpressionMatch2(self):

        localctx = VfrSyntaxParser.VfrExpressionMatch2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_vfrExpressionMatch2)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2458
            self.match(VfrSyntaxParser.T__90)
            self.state = 2459
            self.match(VfrSyntaxParser.OpenParen)
            self.state = 2460
            self.vfrStatementExpression()
            self.state = 2461
            self.match(VfrSyntaxParser.T__3)
            self.state = 2462
            self.vfrStatementExpression()
            self.state = 2463
            self.match(VfrSyntaxParser.T__3)
            self.state = 2464
            self.guidDefinition()
            self.state = 2465
            self.match(VfrSyntaxParser.CloseParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





